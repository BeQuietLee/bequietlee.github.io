[{"title":"麻雀虽小，五脏俱全——下载库PRDownloader源码解析","url":"https://lilei.pro/2020/06/01/prdownloader/","content":"<blockquote>\n<ul>\n<li>You don’t even know me!</li>\n<li>I have the rest of my life to find out.</li>\n</ul>\n</blockquote>\n<h2 id=\"前言，为什么选择研究下载框架\"><a href=\"#前言，为什么选择研究下载框架\" class=\"headerlink\" title=\"前言，为什么选择研究下载框架\"></a>前言，为什么选择研究下载框架</h2><p>从2020年4月份，自己开始做外销游戏中心模块后，就一直在关注Android平台下载功能的实现思路与方法。优秀的开源下载框架并不多，在GitHub上可以找到以下几个：</p>\n<ul>\n<li><a href=\"https://github.com/lingochamp/FileDownloader\" target=\"_blank\" rel=\"noopener\">FileDownloader</a>，是流利说团队开源的一款下载框架，支持多线程、分块、断点续传等功能。已进化为新项目<a href=\"https://github.com/lingochamp/okdownload\" target=\"_blank\" rel=\"noopener\">OKDownload</a>，旧的FileDownloader不再维护。</li>\n<li><a href=\"https://github.com/lingochamp/okdownload\" target=\"_blank\" rel=\"noopener\">OKDownload</a>，同样是流利说团队出品，是FileDownloader的进化版，在原有基础上进行全方位优化，并增加了大量的自动化测试。</li>\n<li><a href=\"https://github.com/MindorksOpenSource/PRDownloader\" target=\"_blank\" rel=\"noopener\">PRDownloader</a>，是印度的一个开源项目团队<a href=\"https://github.com/MindorksOpenSource\" target=\"_blank\" rel=\"noopener\">MindOrks</a>出品的下载框架。支持多任务、断点续传，不支持分块下载。相比于前面两个流利说的框架，逻辑更为简单清晰，适合进行学习研究。</li>\n</ul>\n<h2 id=\"表面，接入和使用PRDownloader\"><a href=\"#表面，接入和使用PRDownloader\" class=\"headerlink\" title=\"表面，接入和使用PRDownloader\"></a>表面，接入和使用PRDownloader</h2><p>把自吹自擂的东西抛到一边，一个框架做的好不好，很重要一点是接入它以及使用起来是否方便。接入这点没什么好说的，通过gradle引入即可，目前最新的版本号为<code>0.6.0</code>，尚不是稳定版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &apos;com.mindorks.android:prdownloader:0.6.0&apos;</span><br></pre></td></tr></table></figure>\n<p>同时在manifest文件里声明访问网络的权限：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.permission.INTERNET\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接下来是使用部分，第一步是在<code>Application.onCreate()</code>中进行初始化，使用默认构造参数即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PRDownloader.initialize(getApplicationContext());</span><br></pre></td></tr></table></figure>\n<p>也可进行定制，定制项为是否使用数据库（支持进程重启后恢复下载）、读取超时、连接超时等：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Enabling database for resume support even after the application is killed:</span></span><br><span class=\"line\">PRDownloaderConfig config = PRDownloaderConfig.newBuilder()</span><br><span class=\"line\">                .setDatabaseEnabled(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">PRDownloader.initialize(getApplicationContext(), config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Setting timeout globally for the download network requests:</span></span><br><span class=\"line\">PRDownloaderConfig config = PRDownloaderConfig.newBuilder()</span><br><span class=\"line\">                .setReadTimeout(<span class=\"number\">30_000</span>)</span><br><span class=\"line\">                .setConnectTimeout(<span class=\"number\">30_000</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\">PRDownloader.initialize(getApplicationContext(), config);</span><br></pre></td></tr></table></figure>\n<p>进行完初始化后，就可以在Activity里面调用下载功能了。</p>\n<h3 id=\"启动下载\"><a href=\"#启动下载\" class=\"headerlink\" title=\"启动下载\"></a>启动下载</h3><p>使用静态方法<code>PRDownloader.download(url, dirPath, fileName)</code>进行下载，会返回一个<code>downloadId</code>，该id用于后续的暂停、恢复、获取状态等操作。在启动下载时，也可设置下载进度、成功、失败监听。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> downloadId = PRDownloader.download(url, dirPath, fileName)</span><br><span class=\"line\">                        .build()</span><br><span class=\"line\">                        .setOnStartOrResumeListener(<span class=\"keyword\">new</span> OnStartOrResumeListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartOrResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .setOnPauseListener(<span class=\"keyword\">new</span> OnPauseListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .setOnCancelListener(<span class=\"keyword\">new</span> OnCancelListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                                </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .setOnProgressListener(<span class=\"keyword\">new</span> OnProgressListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgress</span><span class=\"params\">(Progress progress)</span> </span>&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        .start(<span class=\"keyword\">new</span> OnDownloadListener() &#123;</span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"meta\">@Override</span></span><br><span class=\"line\">                            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Error error)</span> </span>&#123;</span><br><span class=\"line\">                               </span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"暂停和恢复下载\"><a href=\"#暂停和恢复下载\" class=\"headerlink\" title=\"暂停和恢复下载\"></a>暂停和恢复下载</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂停</span></span><br><span class=\"line\">PRDownloader.pause(downloadId);</span><br><span class=\"line\"><span class=\"comment\">// 恢复</span></span><br><span class=\"line\">PRDownloader.resume(downloadId);</span><br></pre></td></tr></table></figure>\n<h3 id=\"取消下载\"><a href=\"#取消下载\" class=\"headerlink\" title=\"取消下载\"></a>取消下载</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Cancel with the download id</span></span><br><span class=\"line\">PRDownloader.cancel(downloadId);</span><br><span class=\"line\"><span class=\"comment\">// The tag can be set to any request and then can be used to cancel the request</span></span><br><span class=\"line\">PRDownloader.cancel(TAG);</span><br><span class=\"line\"><span class=\"comment\">// Cancel all the requests</span></span><br><span class=\"line\">PRDownloader.cancelAll();</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取下载状态\"><a href=\"#获取下载状态\" class=\"headerlink\" title=\"获取下载状态\"></a>获取下载状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Status status = PRDownloader.getStatus(downloadId);</span><br></pre></td></tr></table></figure>\n<h3 id=\"清空临时文件\"><a href=\"#清空临时文件\" class=\"headerlink\" title=\"清空临时文件\"></a>清空临时文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Method to clean up temporary resumed files which is older than the given day</span></span><br><span class=\"line\">PRDownloader.cleanUp(days);</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理部分\"><a href=\"#原理部分\" class=\"headerlink\" title=\"原理部分\"></a>原理部分</h2><h3 id=\"初始化部分，PRDownloader-initialize\"><a href=\"#初始化部分，PRDownloader-initialize\" class=\"headerlink\" title=\"初始化部分，PRDownloader.initialize()\"></a>初始化部分，PRDownloader.initialize()</h3><p>PRDownloader维护了一个全局的下载器，在开始下载前需要进行初始化，代码位于<code>PRDownloader.java</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(Context context, PRDownloaderConfig config)</span> </span>&#123;</span><br><span class=\"line\">    ComponentHolder.getInstance().init(context, config);</span><br><span class=\"line\">    DownloadRequestQueue.initialize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ComponentHolder</code>明显是一个单例，其中维护了以下变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> readTimeout; <span class=\"comment\">// 网络读取超时</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> connectTimeout; <span class=\"comment\">// 网络连接超时</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> String userAgent; <span class=\"comment\">// UA</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> HttpClient httpClient;</span><br><span class=\"line\"><span class=\"keyword\">private</span> DbHelper dbHelper;</span><br></pre></td></tr></table></figure>\n<p>我们可以对这些变量自由配置，或者使用<code>PRDownloaderConfig.newBuilder().build()</code>的默认实现，配置对象位于类<code>PRDownloaderConfig.java</code>当中，基于构建器模式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> readTimeout = Constants.DEFAULT_READ_TIMEOUT_IN_MILLS;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> connectTimeout = Constants.DEFAULT_CONNECT_TIMEOUT_IN_MILLS;</span><br><span class=\"line\">    String userAgent = Constants.DEFAULT_USER_AGENT;</span><br><span class=\"line\">    HttpClient httpClient = <span class=\"keyword\">new</span> DefaultHttpClient();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> databaseEnabled = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 以下省略无关代码</span></span><br></pre></td></tr></table></figure>\n<p>复杂一些的对象是网络<code>HttpClient</code>和数据库<code>DBHelper</code>，下面单独进行解读。</p>\n<h4 id=\"HttpClient\"><a href=\"#HttpClient\" class=\"headerlink\" title=\"HttpClient\"></a>HttpClient</h4><p>封装了网络请求的具体实现，定义接口<code>HttpClient</code>，并提供了默认实现<code>DefaultHttpClient</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HttpClient.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpClient</span> <span class=\"keyword\">extends</span> <span class=\"title\">Cloneable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">HttpClient <span class=\"title\">clone</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">connect</span><span class=\"params\">(DownloadRequest request)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getResponseCode</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">InputStream <span class=\"title\">getInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getContentLength</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getResponseHeader</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;String, List&lt;String&gt;&gt; getHeaderFields();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">InputStream <span class=\"title\">getErrorStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认的实现采用了<code>URLConnection</code>方案，基于这种封装设计，可以无缝切换到<code>OkHttp</code>等实现，出于篇幅考虑，这里不再贴出<a href=\"https://github.com/MindorksOpenSource/PRDownloader/blob/master/prdownloader/src/main/java/com/downloader/httpclient/DefaultHttpClient.java\" target=\"_blank\" rel=\"noopener\">DefaultHttpClient</a>具体实现。</p>\n<h4 id=\"DBHelper\"><a href=\"#DBHelper\" class=\"headerlink\" title=\"DBHelper\"></a>DBHelper</h4><p>同样采用了接口设计，主要操作对象为<code>DownloadModel</code>，有CRUD功能，此外还有<code>updateProgress</code>方法，用以更新下载进度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DBHelper.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DbHelper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">DownloadModel <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(DownloadModel model)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(DownloadModel model)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updateProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> id, <span class=\"keyword\">long</span> downloadedBytes, <span class=\"keyword\">long</span> lastModifiedAt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">List&lt;DownloadModel&gt; <span class=\"title\">getUnwantedModels</span><span class=\"params\">(<span class=\"keyword\">int</span> days)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DownloadModel.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadModel</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id; <span class=\"comment\">// 唯一id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url; <span class=\"comment\">// 下载地址</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String eTag; <span class=\"comment\">// Response中的ETag字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String dirPath; <span class=\"comment\">// 下载目录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String fileName; <span class=\"comment\">// 保存的文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> totalBytes; <span class=\"comment\">// 总大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> downloadedBytes; <span class=\"comment\">// 已下载大小，每次同步下载进度时会更新该字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastModifiedAt; <span class=\"comment\">// 更新时间，每次同步下载进度时会更新该字段</span></span><br><span class=\"line\">    <span class=\"comment\">// 以下无关getter/setter代码省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是<code>PRDownloader</code>默认的全局配置，可以看到除了定义一些网络请求常量外，比较重要的是维护了两个单例：HttpClient和DBHelper。在<code>PRDownloader.initialize()</code>方法里，它还对<code>DownloadRequestQueue</code>进行了初始化，我们继续分析这部分代码。</p>\n<h4 id=\"DownloadRequestQueue\"><a href=\"#DownloadRequestQueue\" class=\"headerlink\" title=\"DownloadRequestQueue\"></a>DownloadRequestQueue</h4><p>它也是单例实现，是一个全局下载任务队列，其初始化函数调用了构造方法，初始化内部的请求Map、序列号发生器。请求Map用以在全局维护下载任务，Key为下载任务id，Value为下载任务。序列号发生器用来给每个任务生成唯一的序列id，作用是提供任务排序依据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DownloadRequestQueue.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadRequestQueue</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DownloadRequestQueue instance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Integer, DownloadRequest&gt; currentRequestMap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger sequenceGenerator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DownloadRequestQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        currentRequestMap = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class=\"line\">        sequenceGenerator = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DownloadRequestQueue <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (DownloadRequestQueue.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> DownloadRequestQueue();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交下载任务，PRDownloader-download-url-dirPath-fileName\"><a href=\"#提交下载任务，PRDownloader-download-url-dirPath-fileName\" class=\"headerlink\" title=\"提交下载任务，PRDownloader.download(url, dirPath, fileName)\"></a>提交下载任务，PRDownloader.download(url, dirPath, fileName)</h3><p>完成初始化以后，就可以使用PRDownloader的各项功能，以下载为例探究其内部的实现。</p>\n<p>启动下载的入口是<code>PRDownloader.download(url, dirPath, fileName)</code>，启动流程为 构建下载任务-&gt;设置下载回调-&gt;启动下载任务。</p>\n<h4 id=\"构建下载任务\"><a href=\"#构建下载任务\" class=\"headerlink\" title=\"构建下载任务\"></a>构建下载任务</h4><p>DownloadRequest的构建同样采用构建器模式，入参为下载链接、存储的路径和文件名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// PRDownloader.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DownloadRequestBuilder <span class=\"title\">download</span><span class=\"params\">(String url, String dirPath, String fileName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DownloadRequestBuilder(url, dirPath, fileName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DownloadRequestBuilder.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadRequestBuilder</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestBuilder</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String url;</span><br><span class=\"line\">    String dirPath;</span><br><span class=\"line\">    String fileName;</span><br><span class=\"line\">    Priority priority = Priority.MEDIUM;</span><br><span class=\"line\">    Object tag;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> readTimeout;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> connectTimeout;</span><br><span class=\"line\">    String userAgent;</span><br><span class=\"line\">    HashMap&lt;String, List&lt;String&gt;&gt; headerMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DownloadRequestBuilder</span><span class=\"params\">(String url, String dirPath, String fileName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dirPath = dirPath;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 以下省略无关代码</span></span><br></pre></td></tr></table></figure>\n<p><code>DownloadRequestBuilder</code>是<code>DownloadRequest</code>的构建器，主要起作用的属性只有3个：url、dirPath、fileName，其它属性与PRDownloaderConfig类里面的重复了，并没有使用到。</p>\n<p><code>DownloadRequest</code>是一个下载任务的呈现，是一个动态的东西，它跟<code>DownloadModel</code>的区别在于：</p>\n<ul>\n<li>DownloadModel：是静态的，记录任务在某个时间点的状态（id，地址链接，总大小，已下载大小，更新时间），用于持久化，并且能从持久化数据源里恢复</li>\n<li>DownloadRequestBuilder：是动态的，不仅包含<code>DownloadModel</code>，还有下载时的各种回调（OnProgressListener、OnDownloadListener、OnStartListener等），此外还有重要的一个字段<code>downloadId</code>，是下载任务的唯一标识符</li>\n</ul>\n<h4 id=\"设置下载回调\"><a href=\"#设置下载回调\" class=\"headerlink\" title=\"设置下载回调\"></a>设置下载回调</h4><p>下载过程中有多种回调：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开始下载回调</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnStartOrResumeListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onStartOrResume</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 暂停回调</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnPauseListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 下载取消回调</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnCancelListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onCancel</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 下载完成/失败回调，叫onFinishListener更好</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnDownloadListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDownloadComplete</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Error error)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 下载进度回调</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnProgressListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onProgress</span><span class=\"params\">(Progress progress)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以在<code>DownloadRequest</code>对象上调用<code>setXXXListener()</code>方法，用以设置下载过程中的回调。设置完成之后，回调是如何发生作用的呢？这就到了【开始下载】的逻辑里。</p>\n<h4 id=\"开始下载\"><a href=\"#开始下载\" class=\"headerlink\" title=\"开始下载\"></a>开始下载</h4><p>调用<code>DownloadRequest.start</code>方法开始下载任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DownloadRequest.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">start</span><span class=\"params\">(OnDownloadListener onDownloadListener)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.onDownloadListener = onDownloadListener;</span><br><span class=\"line\">    downloadId = Utils.getUniqueId(url, dirPath, fileName);</span><br><span class=\"line\">    DownloadRequestQueue.getInstance().addRequest(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> downloadId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关键的一句命令在<code>DownloadRequestQueue.getInstance().addRequest(this)</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DownloadRequestQueue.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addRequest</span><span class=\"params\">(DownloadRequest request)</span> </span>&#123;</span><br><span class=\"line\">    currentRequestMap.put(request.getDownloadId(), request);</span><br><span class=\"line\">    request.setStatus(Status.QUEUED);</span><br><span class=\"line\">    request.setSequenceNumber(getSequenceNumber());</span><br><span class=\"line\">    request.setFuture(Core.getInstance()</span><br><span class=\"line\">            .getExecutorSupplier()</span><br><span class=\"line\">            .forDownloadTasks()</span><br><span class=\"line\">            .submit(<span class=\"keyword\">new</span> DownloadRunnable(request)));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>addRequest</code>的过程，是提交下载任务到执行队列的过程。<code>Core.getInstance().getExecutorSupplier().forDownloadTasks()</code>获取到了一个线程池，该线程池用以执行下载任务。</p>\n<p><code>Core.java</code>是单例，持有一个<code>ExecutorSupplier</code>的实现，后者提供三种Executor，分别用于下载、后台任务、UI任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Core.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Core</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Core instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExecutorSupplier executorSupplier;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Core</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.executorSupplier = <span class=\"keyword\">new</span> DefaultExecutorSupplier();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Core <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Core.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> Core();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ExecutorSupplier <span class=\"title\">getExecutorSupplier</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> executorSupplier;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shutDown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            instance = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ExecutorSupplier.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ExecutorSupplier</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">DownloadExecutor <span class=\"title\">forDownloadTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Executor <span class=\"title\">forBackgroundTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">Executor <span class=\"title\">forMainThreadTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DefaultExecutorSupplier.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultExecutorSupplier</span> <span class=\"keyword\">implements</span> <span class=\"title\">ExecutorSupplier</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 下载线程池大小，内核数*2+1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_MAX_NUM_THREADS = <span class=\"number\">2</span> * Runtime.getRuntime().availableProcessors() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 下载Executor</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DownloadExecutor networkExecutor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor backgroundExecutor;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor mainThreadExecutor;</span><br><span class=\"line\"></span><br><span class=\"line\">    DefaultExecutorSupplier() &#123;</span><br><span class=\"line\">        ThreadFactory backgroundPriorityThreadFactory = <span class=\"keyword\">new</span> PriorityThreadFactory(Process.THREAD_PRIORITY_BACKGROUND);</span><br><span class=\"line\">        networkExecutor = <span class=\"keyword\">new</span> DownloadExecutor(DEFAULT_MAX_NUM_THREADS, backgroundPriorityThreadFactory);</span><br><span class=\"line\">        <span class=\"comment\">// 后台任务单线程Executor</span></span><br><span class=\"line\">        backgroundExecutor = Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"comment\">// 主线程Executor</span></span><br><span class=\"line\">        mainThreadExecutor = <span class=\"keyword\">new</span> MainThreadExecutor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DownloadExecutor <span class=\"title\">forDownloadTasks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> networkExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">forBackgroundTasks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> backgroundExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">forMainThreadTasks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mainThreadExecutor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Executor.submit()</code>返回一个<code>Future</code>对象，将其保存在<code>DownloadRequest</code>中，用来进行取消任务。</p>\n<p>具体的下载逻辑，在<code>DownloadRunnable</code>中。</p>\n<h3 id=\"DownloadRunnable，下载具体实现\"><a href=\"#DownloadRunnable，下载具体实现\" class=\"headerlink\" title=\"DownloadRunnable，下载具体实现\"></a>DownloadRunnable，下载具体实现</h3><p>从名字上就可以看出它是一个用来提交给Executor的Runnable，关键方法<code>run()</code>是耗时操作，阻塞子线程，直至执行完成后通知request中的各个监听者。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DownloadRunnable.java</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    request.setStatus(Status.RUNNING);</span><br><span class=\"line\">    DownloadTask downloadTask = DownloadTask.create(request);</span><br><span class=\"line\">    Response response = downloadTask.run();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</span><br><span class=\"line\">        request.deliverSuccess();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.isPaused()) &#123;</span><br><span class=\"line\">        request.deliverPauseEvent();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (response.getError() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        request.deliverError(response.getError());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!response.isCancelled()) &#123;</span><br><span class=\"line\">        request.deliverError(<span class=\"keyword\">new</span> Error());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Response.java，包装执行结果字段</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Response</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Error error;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isSuccessful;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPaused;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isCancelled;</span><br><span class=\"line\">    <span class=\"comment\">// 以下getter/setter代码省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>提交任务的逻辑被转交给<code>DownloadTask</code>，它的<code>create</code>是构建方法，新建自身的实例并返回，主要关注它的<code>run()</code>方法，其中执行了下载的真正逻辑，在下面的代码里，我把关键处都加上注释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 最好加上@WorkerThread注释</span></span><br><span class=\"line\"><span class=\"function\">Response <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Response response = <span class=\"keyword\">new</span> Response();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.getStatus() == Status.CANCELLED) &#123;</span><br><span class=\"line\">        response.setCancelled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.getStatus() == Status.PAUSED) &#123;</span><br><span class=\"line\">        response.setPaused(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 进度回调handler，通知UI进度情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getOnProgressListener() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            progressHandler = <span class=\"keyword\">new</span> ProgressHandler(request.getOnProgressListener());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        tempPath = Utils.getTempPath(request.getDirPath(), request.getFileName());</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(tempPath);</span><br><span class=\"line\">        <span class=\"comment\">// 通过downloadId查询历史任务</span></span><br><span class=\"line\">        DownloadModel model = getDownloadModelIfAlreadyPresentInDatabase();</span><br><span class=\"line\">        <span class=\"comment\">// 如果有历史任务，且之前下载的文件仍然存在，则继续之前的下载</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (model != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.exists()) &#123;</span><br><span class=\"line\">                request.setTotalBytes(model.getTotalBytes());</span><br><span class=\"line\">                request.setDownloadedBytes(model.getDownloadedBytes());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 历史文件被清除了，则删除对应的历史任务</span></span><br><span class=\"line\">                removeNoMoreNeededModelFromDatabase();</span><br><span class=\"line\">                request.setDownloadedBytes(<span class=\"number\">0</span>);</span><br><span class=\"line\">                request.setTotalBytes(<span class=\"number\">0</span>);</span><br><span class=\"line\">                model = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// HttpClient用以连接网络</span></span><br><span class=\"line\">        httpClient = ComponentHolder.getInstance().getHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">        httpClient.connect(request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getStatus() == Status.CANCELLED) &#123;</span><br><span class=\"line\">            response.setCancelled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.getStatus() == Status.PAUSED) &#123;</span><br><span class=\"line\">            response.setPaused(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 重定向（上限10次），读取header中的Location字段作为新的URL</span></span><br><span class=\"line\">        httpClient = Utils.getRedirectedConnectionIfAny(httpClient, request);</span><br><span class=\"line\"></span><br><span class=\"line\">        responseCode = httpClient.getResponseCode();</span><br><span class=\"line\"></span><br><span class=\"line\">        eTag = httpClient.getResponseHeader(Constants.ETAG);</span><br><span class=\"line\">        <span class=\"comment\">// 是历史任务，则先比对etag是否发生变化，若变化则重新下载</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkIfFreshStartRequiredAndStart(model)) &#123;</span><br><span class=\"line\">            model = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Response Code 落在[200,300) 为Successful</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isSuccessful()) &#123;</span><br><span class=\"line\">            Error error = <span class=\"keyword\">new</span> Error();</span><br><span class=\"line\">            error.setServerError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            error.setServerErrorMessage(convertStreamToString(httpClient.getErrorStream()));</span><br><span class=\"line\">            error.setHeaderFields(httpClient.getHeaderFields());</span><br><span class=\"line\">            error.setResponseCode(responseCode);</span><br><span class=\"line\">            response.setError(error);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置任务支持断点续传与否</span></span><br><span class=\"line\">        setResumeSupportedOrNot();</span><br><span class=\"line\">        <span class=\"comment\">// 若是历史任务，则读取记录过的总大小</span></span><br><span class=\"line\">        totalBytes = request.getTotalBytes();</span><br><span class=\"line\">        <span class=\"comment\">// 若不支持断点续传则删除历史文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isResumeSupported) &#123;</span><br><span class=\"line\">            deleteTempFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (totalBytes == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            totalBytes = httpClient.getContentLength(); <span class=\"comment\">// 从Header里读取大小</span></span><br><span class=\"line\">            request.setTotalBytes(totalBytes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不支持断点续传的任务，插入数据库也没有，索性不插入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isResumeSupported &amp;&amp; model == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            createAndInsertNewModel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getStatus() == Status.CANCELLED) &#123;</span><br><span class=\"line\">            response.setCancelled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.getStatus() == Status.PAUSED) &#123;</span><br><span class=\"line\">            response.setPaused(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 通知外部监听者：我开始下载了</span></span><br><span class=\"line\">        request.deliverStartEvent();</span><br><span class=\"line\">        <span class=\"comment\">// 接下来开始写文件</span></span><br><span class=\"line\">        inputStream = httpClient.getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buff = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[BUFFER_SIZE];</span><br><span class=\"line\">        <span class=\"comment\">// 文件不存在则创建文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (file.getParentFile() != <span class=\"keyword\">null</span> &amp;&amp; !file.getParentFile().exists()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (file.getParentFile().mkdirs()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//noinspection ResultOfMethodCallIgnored</span></span><br><span class=\"line\">                    file.createNewFile();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//noinspection ResultOfMethodCallIgnored</span></span><br><span class=\"line\">                file.createNewFile();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 具体实现为RAF</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.outputStream = FileDownloadRandomAccessFile.create(file);</span><br><span class=\"line\">        <span class=\"comment\">// 因为是RAF，支持随机写</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isResumeSupported &amp;&amp; request.getDownloadedBytes() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            outputStream.seek(request.getDownloadedBytes());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 先检查任务状态，若暂停或取消，则直接返回</span></span><br><span class=\"line\">        <span class=\"comment\">// 在do-while循环里也有此检查</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (request.getStatus() == Status.CANCELLED) &#123;</span><br><span class=\"line\">            response.setCancelled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.getStatus() == Status.PAUSED) &#123;</span><br><span class=\"line\">            response.setPaused(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// do-while循环下载文件</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> byteCount = inputStream.read(buff, <span class=\"number\">0</span>, BUFFER_SIZE); <span class=\"comment\">// BUFFER_SIZE=4Kb</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteCount == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            outputStream.write(buff, <span class=\"number\">0</span>, byteCount);</span><br><span class=\"line\"></span><br><span class=\"line\">            request.setDownloadedBytes(request.getDownloadedBytes() + byteCount);</span><br><span class=\"line\">            <span class=\"comment\">// ProgressHandler发送下载进度通知给监听者</span></span><br><span class=\"line\">            sendProgress();</span><br><span class=\"line\">            <span class=\"comment\">// 同时满足两个条件时，更新数据库：1.数据量&gt;65536，2.时间差&gt;2s</span></span><br><span class=\"line\">            syncIfRequired(outputStream);</span><br><span class=\"line\">            <span class=\"comment\">// 实施检查任务状态，是否取消或暂停</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (request.getStatus() == Status.CANCELLED) &#123;</span><br><span class=\"line\">                response.setCancelled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (request.getStatus() == Status.PAUSED) &#123;</span><br><span class=\"line\">                sync(outputStream);</span><br><span class=\"line\">                response.setPaused(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 下载完成，重命名文件</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String path = Utils.getPath(request.getDirPath(), request.getFileName());</span><br><span class=\"line\"></span><br><span class=\"line\">        Utils.renameFileName(tempPath, path);</span><br><span class=\"line\"></span><br><span class=\"line\">        response.setSuccessful(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 删除数据库多余记录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isResumeSupported) &#123;</span><br><span class=\"line\">            removeNoMoreNeededModelFromDatabase();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException | IllegalAccessException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isResumeSupported) &#123;</span><br><span class=\"line\">            deleteTempFile();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Error error = <span class=\"keyword\">new</span> Error();</span><br><span class=\"line\">        error.setConnectionError(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        error.setConnectionException(e);</span><br><span class=\"line\">        response.setError(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        closeAllSafely(outputStream);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结，如何做一个极简版本的下载框架\"><a href=\"#总结，如何做一个极简版本的下载框架\" class=\"headerlink\" title=\"总结，如何做一个极简版本的下载框架\"></a>总结，如何做一个极简版本的下载框架</h2><p>在大众点评的第一年，从事预订模块开发时，第一次从王旭刚口中听到了“MVP”的概念——Minimum Viable Version，最小可行版本。参考PRDownloader，对于一个下载框架而言，兼顾可维护性、可扩展性和概念的独立性，至少应当具备以下特点。</p>\n<p>自下而上地看</p>\n<ul>\n<li>抽象的下载对象，可持久化，支持从数据库中恢复——对应DownloadModel</li>\n<li>执行下载的对象，职责是进行网络连接，并写入文件——对应DownloadTask</li>\n<li>下载任务，包含下载进度、状态回调——对应DownloadRequest</li>\n<li>全局下载管理器，维护正在下载的任务列表，通常为单例——对应DownloadRequestQueue</li>\n<li>线程池，进行前后台任务分发——对应ExecutorSupplier</li>\n</ul>\n<p>以上这些部分，对外都要隐藏起来，并统一包装到PRDownloader对象中，以便抽象和解耦。</p>\n<p>最后的最后，献上一张PRDownloader的类图（哈哈哈哈，偏不放在文章开头）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_prdownloader/prdownloader.png\" alt=\"PRDownloader\" title=\"\">\n                </div>\n                <div class=\"image-caption\">PRDownloader</div>\n            </figure>","categories":[],"tags":["Android","源码解析"]},{"title":"AndroidWeekly#415 学习笔记","url":"https://lilei.pro/2020/06/01/AndroidWeekly-415/","content":"<p><a href=\"https://androidweekly.net/issues/issue-415\" target=\"_blank\" rel=\"noopener\">Android Weekly #415</a></p>\n<h2 id=\"Android-Unidirectional-Data-Flow-—-Kotlin-Flow-vs-RxJava\"><a href=\"#Android-Unidirectional-Data-Flow-—-Kotlin-Flow-vs-RxJava\" class=\"headerlink\" title=\"Android Unidirectional Data Flow — Kotlin Flow vs. RxJava\"></a>Android Unidirectional Data Flow — Kotlin Flow vs. RxJava</h2><p><a href=\"https://proandroiddev.com/udf-flowvsrx-a792b946d75c\" target=\"_blank\" rel=\"noopener\">https://proandroiddev.com/udf-flowvsrx-a792b946d75c</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_androidweekly415/flow_vs_rxjava.png\" alt=\"flow_vs_rxjava.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">flow_vs_rxjava.png</div>\n            </figure>\n<p>基于以上业务场景，对比<code>Flow</code>和<code>RxJava</code>两种实现方式的代码异同，值得一读（前提是了解这两种技术的基础知识）。</p>\n<h2 id=\"StateFlow-End-of-LiveData\"><a href=\"#StateFlow-End-of-LiveData\" class=\"headerlink\" title=\"StateFlow, End of LiveData?\"></a>StateFlow, End of LiveData?</h2><p><a href=\"https://medium.com/scalereal/stateflow-end-of-livedata-a473094229b3\" target=\"_blank\" rel=\"noopener\">https://medium.com/scalereal/stateflow-end-of-livedata-a473094229b3</a></p>\n<p>Kotlin 协程库在<strong>1.3.6</strong>版本推出StateFlow的release版，本文通过<strong>Activity - ViewModel - StateFlow</strong>的代码样例，简单展示了<code>StateFlow</code>的用法。与<code>LiveData</code>非常相似，不过目前，考虑到它刚刚推出，不建议直接替代成熟的<code>LiveData</code>。</p>\n<h2 id=\"Reification-of-the-Erased\"><a href=\"#Reification-of-the-Erased\" class=\"headerlink\" title=\"Reification of the Erased\"></a>Reification of the Erased</h2><p><a href=\"https://medium.com/androiddevelopers/reification-of-the-erased-41e246725d2c\" target=\"_blank\" rel=\"noopener\">https://medium.com/androiddevelopers/reification-of-the-erased-41e246725d2c</a></p>\n<p>Kotlin提供了<code>refied</code>关键字，结合<code>inline</code>函数，可以扩展泛型的功能，实现在Java中无法实现的效果。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;<span class=\"keyword\">reified</span> T&gt;</span> <span class=\"title\">printType</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  print(T::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printStringType</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//calling the reified generic function with String type</span></span><br><span class=\"line\">  printType&lt;String&gt;()  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"The-Result-Monad\"><a href=\"#The-Result-Monad\" class=\"headerlink\" title=\"The Result Monad\"></a>The Result Monad</h2><p><a href=\"https://adambennett.dev/2020/05/the-result-monad/\" target=\"_blank\" rel=\"noopener\">https://adambennett.dev/2020/05/the-result-monad/</a></p>\n<p>文章质量不错。</p>\n<p>在处理Kotlin中一系列操作时，借助<a href=\"https://github.com/michaelbull/kotlin-result\" target=\"_blank\" rel=\"noopener\">kotlin-result</a>库，可以简化异常处理流程。</p>\n","categories":[],"tags":["Android","Android Weekly"]},{"title":"AndroidWeekly#414 学习笔记","url":"https://lilei.pro/2020/06/01/AndroidWeekly-414/","content":"<blockquote>\n<p>5月26日，星期二。今天是<a href=\"https://androidweekly.net/issues/issue-414\" target=\"_blank\" rel=\"noopener\">第#414期Android Weekly</a>的学习笔记。</p>\n</blockquote>\n<h2 id=\"ViewModel-and-SavedStatehandle-always-retain-state\"><a href=\"#ViewModel-and-SavedStatehandle-always-retain-state\" class=\"headerlink\" title=\"ViewModel and SavedStatehandle: always retain state\"></a>ViewModel and SavedStatehandle: always retain state</h2><p><a href=\"https://www.rockandnull.com/viewmodel-savedstate/\" target=\"_blank\" rel=\"noopener\">https://www.rockandnull.com/viewmodel-savedstate/</a></p>\n<blockquote>\n<p>一篇关于ViewModel数据恢复的小文。</p>\n</blockquote>\n<h3 id=\"进程清理和数据恢复\"><a href=\"#进程清理和数据恢复\" class=\"headerlink\" title=\"进程清理和数据恢复\"></a>进程清理和数据恢复</h3><p>我们知道ViewModel可以解决诸如Orientation切换时，Activity/Fragment销毁重建的数据保存问题。然而，有时甚至连ViewModel自身也会被销毁，这种情况发生在应用位于后台且内存不足的情况下，系统会<a href=\"https://developer.android.com/topic/performance/memory-overview\" target=\"_blank\" rel=\"noopener\">杀死进程</a>。杀死进程的顺序是<strong>Least Recently Used (LRU)</strong>。</p>\n<p>如果对此什么都不做的话，默认行为是重启App，如果想要在这个过程中重新恢复到App被清理前的页面，就必须通过类似<code>onSaveInstanceState</code>的方法来保存数据。</p>\n<p>对此，Jetpack提供了<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate\" target=\"_blank\" rel=\"noopener\">ViewModel’s Saved State module</a>组件，通过它，可以方便地恢复ViewModel状态。</p>\n<h3 id=\"ViewModel-SaveState-的使用\"><a href=\"#ViewModel-SaveState-的使用\" class=\"headerlink\" title=\"ViewModel-SaveState 的使用\"></a>ViewModel-SaveState 的使用</h3><p>通过gradle接入，在<a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies\" target=\"_blank\" rel=\"noopener\">这里</a>查看最新版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation &quot;androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"不包含构造参数的ViewModel\"><a href=\"#不包含构造参数的ViewModel\" class=\"headerlink\" title=\"不包含构造参数的ViewModel\"></a>不包含构造参数的ViewModel</h3><p>在构造器里增加一个<code>SavedStateHandle</code>类型的参数。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> state: SavedStateHandle) : ViewModel() &#123;</span><br><span class=\"line\"> <span class=\"comment\">// some other code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后通过代理方式重写<code>model</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">val</span> model <span class=\"keyword\">by</span> viewModels&lt;MyVioewModel&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"包含构造参数的ViewModel\"><a href=\"#包含构造参数的ViewModel\" class=\"headerlink\" title=\"包含构造参数的ViewModel\"></a>包含构造参数的ViewModel</h3><p>对于包含参数的ViewModel（通过ViewModelFactory初始化），需要继承<code>AbstractSavedStateViweModelFactory</code>类以实现SaveState功能。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModelFactory</span></span>(owner: SavedStateRegistryOwner,</span><br><span class=\"line\">                                     <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> myId: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">                                     defaultArgs: Bundle? = <span class=\"literal\">null</span></span><br><span class=\"line\">) : AbstractSavedStateViewModelFactory(owner, defaultArgs) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel?&gt;</span> <span class=\"title\">create</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        key: <span class=\"type\">String</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        handle: <span class=\"type\">SavedStateHandle</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: T = MyViewModel(handle, myId) <span class=\"keyword\">as</span> T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在ViewModel里进行代理：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"keyword\">val</span> model <span class=\"keyword\">by</span> viewModels&lt;MyViewModel&gt; &#123;</span><br><span class=\"line\">    MyViewModelFactory(<span class=\"keyword\">this</span>, args.myId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结合LiveData使用\"><a href=\"#结合LiveData使用\" class=\"headerlink\" title=\"结合LiveData使用\"></a>结合LiveData使用</h3><p>通过Key-Value方式获取LiveData对象，而非直接构建。同一个Key往往会返回同一个Value，因为是持久化保存数据，<code>Item</code>类必须实现<code>Parcellable</code>接口，或者更简便地，通过<code>@Parcelize</code>注解，关于<code>Parcelize</code>可以阅读<a href=\"https://github.com/Kotlin/KEEP/blob/master/proposals/extensions/android-parcelable.md\" target=\"_blank\" rel=\"noopener\">KEEP的这篇文章</a>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyViewModel</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> savedStateHandle: SavedStateHandle) : ViewModel() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> itemsLiveData = savedStateHandle.getLiveData&lt;Item&gt;(<span class=\"string\">\"itemsKey\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// some other code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"模拟低内存场景\"><a href=\"#模拟低内存场景\" class=\"headerlink\" title=\"模拟低内存场景\"></a>模拟低内存场景</h3><ol>\n<li>启动你的APP</li>\n<li>切换到后台</li>\n<li>执行<code>adb shell am kill your.package.name</code></li>\n<li>再次启动APP</li>\n</ol>\n<p>注意<code>SavedSateHandle</code>只能处理ViewModel中的数据，对于全局的静态单例，仍然需要通过人工的方式处理。</p>\n<h2 id=\"The-Android-Lifecycle-cheat-sheet-—-part-IV-ViewModels-Translucent-Activities-and-Launch-Modes\"><a href=\"#The-Android-Lifecycle-cheat-sheet-—-part-IV-ViewModels-Translucent-Activities-and-Launch-Modes\" class=\"headerlink\" title=\"The Android Lifecycle cheat sheet — part IV : ViewModels, Translucent Activities and Launch Modes\"></a>The Android Lifecycle cheat sheet — part IV : ViewModels, Translucent Activities and Launch Modes</h2><p><a href=\"https://medium.com/androiddevelopers/the-android-lifecycle-cheat-sheet-part-iv-49946659b094\" target=\"_blank\" rel=\"noopener\">https://medium.com/androiddevelopers/the-android-lifecycle-cheat-sheet-part-iv-49946659b094</a></p>\n<p><strong>Android Lifecycle cheat sheet</strong> 是Jose Alcerreca写的一系列生命周期总结文章，通过简单直观的图片表达。</p>\n<p>第4期主要分析ViewModel、透明Activity和不同启动模式下的生命周期。</p>\n<h3 id=\"ViewModels\"><a href=\"#ViewModels\" class=\"headerlink\" title=\"ViewModels\"></a>ViewModels</h3><p>应用于Activity和Fragment，在<code>onCreate</code>结束时初始化，在其销毁时销毁自身。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/lifecycle_viewmodel.png\" alt=\"lifecycle_viewmodel.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">lifecycle_viewmodel.png</div>\n            </figure>\n<h3 id=\"透明Activity\"><a href=\"#透明Activity\" class=\"headerlink\" title=\"透明Activity\"></a>透明Activity</h3><p>通过<code>android:windowIsTranslucent</code>属性将Activity设定为透明，当在一个透明Activity上启动新的Activity时，原透明Activity只会执行<code>onPause</code>，并不会<code>onStop</code>，并且在他Pause的时候，还可以接受UI事件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/lifecycle_translucent.png\" alt=\"lifecycle_translucent.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">lifecycle_translucent.png</div>\n            </figure>\n<p>当按下Home键时，位于底层的透明Activity会进入<code>onStop</code>状态，并且当用户切换回应用后，依次执行<code>onRestart</code>和<code>onStart</code>。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/lifecycle_translucent_home.png\" alt=\"lifecycle_translucent_home.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">lifecycle_translucent_home.png</div>\n            </figure>\n<h3 id=\"Launch-Modes\"><a href=\"#Launch-Modes\" class=\"headerlink\" title=\"Launch Modes\"></a>Launch Modes</h3><p>关于启动模式的建议是——只使用默认的<strong>standard</strong>启动模式。更多细节可以参阅这篇文章：<a href=\"https://medium.com/androiddevelopers/tasks-and-the-back-stack-dbb7c3b0f6d4\" target=\"_blank\" rel=\"noopener\">Tasks and Back Stack</a>。</p>\n<p>这是<code>SINGLE_TOP</code>模式下的生命周期&amp;栈情况。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/lifecycle_single_top.png\" alt=\"lifecycle_single_top.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">lifecycle_single_top.png</div>\n            </figure>\n<p>然后是<code>SINGLE_TASK</code>，再次强调，强烈不建议使用这种启动模式。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/lifecycle_single_task.png\" alt=\"lifecycle_single_task.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">lifecycle_single_task.png</div>\n            </figure>\n<h2 id=\"Understanding-Kotlin-Coroutines-with-this-mental-model\"><a href=\"#Understanding-Kotlin-Coroutines-with-this-mental-model\" class=\"headerlink\" title=\"Understanding Kotlin Coroutines with this mental model\"></a>Understanding Kotlin Coroutines with this mental model</h2><p><a href=\"https://www.lukaslechner.com/understanding-kotlin-coroutines-with-this-mental-model/\" target=\"_blank\" rel=\"noopener\">https://www.lukaslechner.com/understanding-kotlin-coroutines-with-this-mental-model/</a></p>\n<p>什么是思维模型（Mental Model）</p>\n<ul>\n<li>思维模型是我们理解世界的方式</li>\n<li>我们通过思维模型将负责的事情简化</li>\n<li>思维模型藐视事物如何运行</li>\n</ul>\n<p>简单说，思维模型让我们知道How it works。</p>\n<h3 id=\"Routines\"><a href=\"#Routines\" class=\"headerlink\" title=\"Routines\"></a>Routines</h3><p><strong>Coroutine</strong>由<strong>CO</strong>和<strong>ROUTINE</strong>两部分构成，<strong>Routine</strong>的概念是，一旦启动，就会执行完。而<strong>CO</strong>则为其赋予了并行的含义。</p>\n<p>routine的运行方式如下，1和2顺序执行。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/routine.png\" alt=\"routine.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">routine.png</div>\n            </figure>\n<h3 id=\"Coroutines\"><a href=\"#Coroutines\" class=\"headerlink\" title=\"Coroutines\"></a>Coroutines</h3><p>在调用后会立即返回，1和2的完成先后顺序不固定。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/routine.png\" alt=\"coroutines.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">coroutines.png</div>\n            </figure>\n<p>Coroutine内部调用<code>suspend</code>函数的地方被称为“suspension point”，即中断点。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200601_andoridweekly414/routine.png\" alt=\"suspension_point.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">suspension_point.png</div>\n            </figure>\n<h3 id=\"Coroutine思维模型要点\"><a href=\"#Coroutine思维模型要点\" class=\"headerlink\" title=\"Coroutine思维模型要点\"></a>Coroutine思维模型要点</h3><ol>\n<li>Coroutine可以在调用后立即返回，在中断点中断后，过一段时间恢复</li>\n<li>你可以通过Coroutine在不切换线程的情况下，执行并发任务，从而达到更高的运行效率</li>\n<li>Coroutine是线程之上的抽象，一个Coroutine内部的代码也可以运行在不同线程上</li>\n<li>编译器将<code>suspend</code>函数转换为常规函数，同时增加一个<code>Cotinuation</code>类型的参数，这是一种状态机</li>\n<li><code>delay()</code>函数是非阻塞的，它使用类似<code>handler.postDelayed()</code>的方式实现</li>\n</ol>\n<h2 id=\"Kotlin-withContext-vs-Async-await\"><a href=\"#Kotlin-withContext-vs-Async-await\" class=\"headerlink\" title=\"Kotlin withContext vs Async-await\"></a>Kotlin withContext vs Async-await</h2><p><a href=\"https://blog.mindorks.com/kotlin-withcontext-vs-async-await\" target=\"_blank\" rel=\"noopener\">https://blog.mindorks.com/kotlin-withcontext-vs-async-await</a></p>\n<p>最后一篇依然是关于Coroutine，作者介绍了两种启动协程的方式<code>withContext</code>与<code>async-await</code>的应用场景，守则如下。</p>\n<ul>\n<li>它们都可以用来获取结果</li>\n<li>不需要并行执行时，用<code>withContext</code></li>\n<li>当且仅当需要并行时，用<code>async</code></li>\n</ul>\n","categories":[],"tags":["Android","Android Weekly"]},{"title":"AndroidWeekly#413 学习笔记","url":"https://lilei.pro/2020/05/20/AndroidWeekly-413/","content":"<blockquote>\n<p>5月17日，星期日。今天是第<a href=\"https://androidweekly.net/issues/issue-413\" target=\"_blank\" rel=\"noopener\">#413</a>期Android Weekly的学习笔记。</p>\n</blockquote>\n<h2 id=\"Concurrency-Frameworks-in-Android-are-Overrated\"><a href=\"#Concurrency-Frameworks-in-Android-are-Overrated\" class=\"headerlink\" title=\"Concurrency Frameworks in Android are Overrated\"></a>Concurrency Frameworks in Android are Overrated</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200520_androidweekly413/concurrency_frameworks_overrated.jpeg\" alt=\"Why Frameworks?\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Why Frameworks?</div>\n            </figure>\n<p><a href=\"https://www.techyourchance.com/concurrency-frameworks-overrated-android/\" target=\"_blank\" rel=\"noopener\">https://www.techyourchance.com/concurrency-frameworks-overrated-android/</a></p>\n<p>今天的首发文章质量不错，Vasiliy抛出一个观点“Android下的并发框架都是过度设计的，实际上你可以不借助任何框架写出干净的并发代码”，并通过样例代码佐证自己的这一观点。</p>\n<h3 id=\"需求简述\"><a href=\"#需求简述\" class=\"headerlink\" title=\"需求简述\"></a>需求简述</h3><p>模拟一个合并文件并上传的过程，文件操作和网络操作必须在工作线程进行，并在主线程通知UI操作结果。</p>\n<ol>\n<li>把两组文件分别进行合并</li>\n<li>把合并结果进行压缩</li>\n<li>上传压缩后的zip包到服务器</li>\n<li>通知操作结果</li>\n</ol>\n<h3 id=\"只用原生的并发原语实现\"><a href=\"#只用原生的并发原语实现\" class=\"headerlink\" title=\"只用原生的并发原语实现\"></a>只用原生的并发原语实现</h3><p>第一个版本没有考虑太多性能，在工作线程顺序执行耗时操作，并通过Handler通知UI线程。在最终一步网络操作的回调里，通知执行结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFilesUseCase</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseObservable</span>&lt;<span class=\"title\">UploadFilesUseCase</span>.<span class=\"title\">Listener</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Listener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFilesUploaded</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFilesUploadFailed</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler uiHandler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; uploadFilesSync()).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFilesSync</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        File mergedA = processAndMergeFilesOfTypeA();</span><br><span class=\"line\">        File mergedB = processAndMergeFilesOfTypeB();</span><br><span class=\"line\">        File archive = compressMergedFiles(mergedA, mergedB);</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpManager.getInstance.uploadFiles(</span><br><span class=\"line\">                archive,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> HttpRequestListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDone</span><span class=\"params\">(<span class=\"keyword\">int</span> code, <span class=\"keyword\">byte</span>[] body)</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (code / <span class=\"number\">100</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                            notifySuccess();</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            notifyFailure();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        notifyFailure();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeA</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeB</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">compressMergedFiles</span><span class=\"params\">(File fileA, File fileB)</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        uiHandler.post(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Listener listener : getListeners()) &#123;</span><br><span class=\"line\">                listener.onFilesUploaded();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        uiHandler.post(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Listener listener : getListeners()) &#123;</span><br><span class=\"line\">                listener.onFilesUploadFailed();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加异常和重试处理\"><a href=\"#增加异常和重试处理\" class=\"headerlink\" title=\"增加异常和重试处理\"></a>增加异常和重试处理</h3><p>如果合并文件、压缩文件过程中可能抛出异常，如下函数签名所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeB</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">compressMergedFiles</span><span class=\"params\">(File fileA, File fileB)</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<p>则通过<code>try...catch</code>进行捕获，并通知失败。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    File mergedA = processAndMergeFilesOfTypeA();</span><br><span class=\"line\">    File mergedB = processAndMergeFilesOfTypeB();</span><br><span class=\"line\">    archive = compressMergedFiles(mergedA, mergedB);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">    notifyFailure();</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们加上重试机制，当前已经重试的次数作为参数传入<code>uploadFilesSync</code>函数，并把原来<code>notifyFailuer</code>处均替换为<code>retryOrFail(retryCount)</code>调用，其实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">retryOrFail</span><span class=\"params\">(<span class=\"keyword\">int</span> currentRetryCount)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentRetryCount &gt;= MAX_RETRIES - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        notifyFailure();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        uploadFilesSync(currentRetryCount + <span class=\"number\">1</span>); <span class=\"comment\">// 重试次数+1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发运行优化效率\"><a href=\"#并发运行优化效率\" class=\"headerlink\" title=\"并发运行优化效率\"></a>并发运行优化效率</h3><p>注意到两处merge文件的操作是可以并行处理的，因此在工作线程之外分起两个线程，并通过<code>CountDownLatch(2)</code>来等待两个线程处理完成。由于涉及并发赋值操作，必须使用<code>AtomicReference</code>保证赋值操作的原子性！</p>\n<blockquote>\n<p>这段代码实现太优美了！</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFilesSync</span><span class=\"params\">(<span class=\"keyword\">int</span> retryCount)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> AtomicReference&lt;File&gt; mergedA = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AtomicReference&lt;File&gt; mergedB = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mergedA.set(processAndMergeFilesOfTypeA());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// log the exception</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            countDownLatch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mergedB.set(processAndMergeFilesOfTypeB());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// log the exception</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            countDownLatch.countDown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"unexpected interrupt\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mergedA.get() == <span class=\"keyword\">null</span> || mergedB.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        retryOrFail(retryCount);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后续是合并&amp;上传的代码，省略</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"将异步的网络操作同步化\"><a href=\"#将异步的网络操作同步化\" class=\"headerlink\" title=\"将异步的网络操作同步化\"></a>将异步的网络操作同步化</h3><p>作者在文中提到，由于在接手开发时，已经有了基于回调的网络框架，因此在以上代码里均使用了回调方式处理网络结果。如果回调过多的话，会产生“回调地狱”，因此，进一步优化，将异步通过<code>CountDownLatch(1)</code>转化为同步方法。返回值为<code>int</code>类型，并且会抛出运行时异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">uploadFileToServer</span><span class=\"params\">(File archive)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> AtomicInteger responseCode = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\">    HttpManager.getInstance.uploadFiles(</span><br><span class=\"line\">            archive,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HttpRequestListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDone</span><span class=\"params\">(<span class=\"keyword\">int</span> code, <span class=\"keyword\">byte</span>[] body)</span> </span>&#123;</span><br><span class=\"line\">                    responseCode.set(code);</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    responseCode.set(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    countDownLatch.countDown();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"unexpected interrupt\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseCode.get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"防止并发调用，避免进入异常状态\"><a href=\"#防止并发调用，避免进入异常状态\" class=\"headerlink\" title=\"防止并发调用，避免进入异常状态\"></a>防止并发调用，避免进入异常状态</h3><p>尽管上述的业务需求都已经实现，对于这种场景，还有一种隐形的技术考虑：不可以在同一时间将同一份数据上传多次，这会导致意料之外的bug，严重的话甚至会损坏服务器的数据。</p>\n<p>通过<a href=\"https://gist.github.com/techyourchance/44670734917d4ce085224a62cb9edf81\" target=\"_blank\" rel=\"noopener\">BaseBusyObservable</a>，提供了一个<code>AtomicBoolean</code>类型的标志位，说明当前任务的执行状态，并且在开始上传文件时申请进入<code>busy</code>，在上传结束时释放。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFilesUseCase</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseBusyObservable</span>&lt;<span class=\"title\">UploadFilesUseCase</span>.<span class=\"title\">Listener</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Listener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFilesUploaded</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFilesUploadFailed</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MAX_RETRIES = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler uiHandler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFiles</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isFreeAndBecomeBusy()) &#123; <span class=\"comment\">// 申请进入busy</span></span><br><span class=\"line\">            <span class=\"comment\">// log concurrent invocation attempt</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; uploadFilesSync(<span class=\"number\">0</span>)).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFilesSync</span><span class=\"params\">(<span class=\"keyword\">int</span> retryCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AtomicReference&lt;File&gt; mergedA = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AtomicReference&lt;File&gt; mergedB = <span class=\"keyword\">new</span> AtomicReference&lt;&gt;(<span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mergedA.set(processAndMergeFilesOfTypeA());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// log the exception</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mergedB.set(processAndMergeFilesOfTypeB());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// log the exception</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"unexpected interrupt\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mergedA.get() == <span class=\"keyword\">null</span> || mergedB.get() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            retryOrFail(retryCount);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        File archive;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            archive = compressMergedFiles(mergedA.get(), mergedB.get());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (OperationFailedException e) &#123;</span><br><span class=\"line\">            retryOrFail(retryCount);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> responseCode = uploadFileToServer(archive);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (responseCode / <span class=\"number\">100</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            deleteTempDir();</span><br><span class=\"line\">            notifySuccess();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            retryOrFail(retryCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">uploadFileToServer</span><span class=\"params\">(File archive)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> AtomicInteger responseCode = <span class=\"keyword\">new</span> AtomicInteger(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> CountDownLatch countDownLatch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpManager.getInstance.uploadFiles(</span><br><span class=\"line\">                archive,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> HttpRequestListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDone</span><span class=\"params\">(<span class=\"keyword\">int</span> code, <span class=\"keyword\">byte</span>[] body)</span> </span>&#123;</span><br><span class=\"line\">                        responseCode.set(code);</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        responseCode.set(<span class=\"number\">0</span>);</span><br><span class=\"line\">                        countDownLatch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            countDownLatch.await();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"unexpected interrupt\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseCode.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">retryOrFail</span><span class=\"params\">(<span class=\"keyword\">int</span> currentRetryCount)</span> </span>&#123;</span><br><span class=\"line\">        deleteTempDir();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentRetryCount &gt;= MAX_RETRIES - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            notifyFailure();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        uploadFilesSync(currentRetryCount + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeA</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">processAndMergeFilesOfTypeB</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> File <span class=\"title\">compressMergedFiles</span><span class=\"params\">(File fileA, File fileB)</span> <span class=\"keyword\">throws</span> OperationFailedException </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteTempDir</span><span class=\"params\">()</span> </span>&#123; ... &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifySuccess</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        uiHandler.post(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Listener listener : getListeners()) &#123;</span><br><span class=\"line\">                listener.onFilesUploaded();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            becomeNotBusy(); <span class=\"comment\">// 申请离开busy</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyFailure</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        uiHandler.post(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Listener listener : getListeners()) &#123;</span><br><span class=\"line\">                listener.onFilesUploadFailed();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            becomeNotBusy(); <span class=\"comment\">// 申请离开busy</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下分别是协程实现、Rxjava实现，很难说它们孰优孰劣，但毫无疑问的是，这两个框架都需要一些学习成本，并且代码在理解起来不如并发原语看起来清晰。在作者Vasiliy看来，他会避免把自己的项目与任何第三方框架进行耦合。以及，RxJava已经度过了它的巅峰期。</p>\n<h3 id=\"Coroutines-实现\"><a href=\"#Coroutines-实现\" class=\"headerlink\" title=\"Coroutines 实现\"></a>Coroutines 实现</h3><p><a href=\"https://gist.github.com/ATizik/0431c0313d3d0596de3ce9a0fc82b29f\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/ATizik/0431c0313d3d0596de3ce9a0fc82b29f</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFilesUsecase</span></span>() : BaseObservable&lt;UploadFilesUsecase.Listener&gt;() &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Listener</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFilesUploaded</span><span class=\"params\">()</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFilesUploadFailed</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> MAX_RETRIES = <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> mutex = Mutex()</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> scope = CoroutineScope(SupervisorJob() + Dispatchers.IO)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">uploadFiles</span><span class=\"params\">()</span></span>:<span class=\"built_in\">Boolean</span> = mutex.tryWithLock &#123;</span><br><span class=\"line\">        scope.launch &#123;</span><br><span class=\"line\">            repeat(MAX_RETRIES) &#123; retryCount -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> files = listOf(</span><br><span class=\"line\">                            async &#123; processAndMergeFilesOfTypeA() &#125;,</span><br><span class=\"line\">                            async &#123; processAndMergeFilesOfTypeB() &#125;)</span><br><span class=\"line\">                            .map &#123; it.await() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">val</span> archive = compressMergedFiles(files)</span><br><span class=\"line\"></span><br><span class=\"line\">                    uploadFileToServer(archive)</span><br><span class=\"line\"></span><br><span class=\"line\">                    notifySuccess()</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (t: Throwable) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//log exception</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (retryCount == MAX_RETRIES - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                        notifyFaillure()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    deleteTempDir()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">uploadFileToServer</span><span class=\"params\">(archive: <span class=\"type\">File</span>)</span></span> = suspendCoroutine&lt;<span class=\"built_in\">Int</span>&gt; &#123; cont -&gt;</span><br><span class=\"line\">        HttpManager.uploadFiles(archive,</span><br><span class=\"line\">                onDone = &#123; code: <span class=\"built_in\">Int</span>, body: ByteArray -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (code / <span class=\"number\">100</span> == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        cont.resume(code)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        cont.resumeWithException(Throwable())</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                onFailure = &#123;</span><br><span class=\"line\">                    cont.resumeWithException(Throwable())</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processAndMergeFilesOfTypeA</span><span class=\"params\">()</span></span>: File = TODO()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processAndMergeFilesOfTypeB</span><span class=\"params\">()</span></span>: File = TODO()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compressMergedFiles</span><span class=\"params\">(files: <span class=\"type\">List</span>&lt;<span class=\"type\">File</span>&gt;)</span></span>: File = TODO()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTempDir</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Unit</span> = TODO()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">notifySuccess</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        MainScope().launch &#123; listeners.forEach &#123; it.onFilesUploaded() &#125; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">notifyFaillure</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        MainScope().launch &#123; listeners.forEach &#123; it.onFilesUploadFailed() &#125; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"RxJava-实现\"><a href=\"#RxJava-实现\" class=\"headerlink\" title=\"RxJava 实现\"></a>RxJava 实现</h3><p><a href=\"https://gist.github.com/kakai248/d3ac349cf2aa54da7a935fc1ab23024b\" target=\"_blank\" rel=\"noopener\">https://gist.github.com/kakai248/d3ac349cf2aa54da7a935fc1ab23024b</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFilesUseCase</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> schedulerProvider: SchedulerProvider,</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> httpManager: HttpManager</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> operation: Completable? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">uploadFiles</span><span class=\"params\">()</span></span>: Completable = synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        operation</span><br><span class=\"line\">            ?: (doUploadFiles()</span><br><span class=\"line\">                .doFinally &#123; operation = <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">                .cache()</span><br><span class=\"line\">                .also &#123; operation = it &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doUploadFiles</span><span class=\"params\">()</span></span>: Completable =</span><br><span class=\"line\">        Singles</span><br><span class=\"line\">            .zip(</span><br><span class=\"line\">                processAndMergeFilesOfTypeA().subscribeOn(schedulerProvider.io),</span><br><span class=\"line\">                processAndMergeFilesOfTypeB().subscribeOn(schedulerProvider.io)</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .flatMap &#123; (fileA, fileB) -&gt; compressMergedFiles(fileA, fileB) &#125;</span><br><span class=\"line\">            .flatMap(::uploadFileToServer)</span><br><span class=\"line\">            .ignoreElement()</span><br><span class=\"line\">            .doOnComplete(::deleteTempDir)</span><br><span class=\"line\">            .doOnError &#123; deleteTempDir() &#125;</span><br><span class=\"line\">            .retry(MAX_RETRIES)</span><br><span class=\"line\">            .observeOn(schedulerProvider.ui)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">uploadFileToServer</span><span class=\"params\">(archive: <span class=\"type\">File</span>)</span></span> =</span><br><span class=\"line\">        httpManager.uploadFiles(archive)</span><br><span class=\"line\">            .map &#123; response -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.code / <span class=\"number\">100</span> != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> OperationFailedException()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processAndMergeFilesOfTypeA</span><span class=\"params\">()</span></span>: Single&lt;File&gt; = Single.just(File(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">processAndMergeFilesOfTypeB</span><span class=\"params\">()</span></span>: Single&lt;File&gt; = Single.just(File(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">compressMergedFiles</span><span class=\"params\">(fileA: <span class=\"type\">File</span>, fileB: <span class=\"type\">File</span>)</span></span>: Single&lt;File&gt; = Single.just(File(<span class=\"string\">\"\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTempDir</span><span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> const <span class=\"keyword\">val</span> MAX_RETRIES = <span class=\"number\">3</span>L</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">uploadFiles</span><span class=\"params\">(archive: <span class=\"type\">File</span>)</span></span>: Single&lt;Response&gt; = Single.just(Response(<span class=\"number\">200</span>, byteArrayOf()))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Response</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> code: <span class=\"built_in\">Int</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> body: ByteArray</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OperationFailedException</span> : <span class=\"type\">Throwable</span></span>()</span><br></pre></td></tr></table></figure>\n<h2 id=\"Restore-RecyclerView-scroll-position\"><a href=\"#Restore-RecyclerView-scroll-position\" class=\"headerlink\" title=\"Restore RecyclerView scroll position\"></a>Restore RecyclerView scroll position</h2><p><a href=\"https://medium.com/androiddevelopers/restore-recyclerview-scroll-position-a8fbdc9a9334\" target=\"_blank\" rel=\"noopener\">https://medium.com/androiddevelopers/restore-recyclerview-scroll-position-a8fbdc9a9334</a></p>\n<h3 id=\"丢失的位置\"><a href=\"#丢失的位置\" class=\"headerlink\" title=\"丢失的位置\"></a>丢失的位置</h3><p>我们知道当Activity/Fragment重建后，Adapter的数据会重新加载（往往是异步的），在RecyclerView进行layout之前，数据没有加载完成的话，会导致RecyclerView失去之前的状态，最直观表现是滑动位置归零。</p>\n<p>Google在<a href=\"https://developer.android.com/jetpack/androidx/releases/recyclerview\" target=\"_blank\" rel=\"noopener\">RecyclerView的1.2.0-alpha02</a>版本提供了一个新的API，可以让Adapter<strong>阻塞layout过程直至它数据恢复完毕</strong>，用以解决RecyclerView状态不一致的问题。</p>\n<h3 id=\"恢复位置\"><a href=\"#恢复位置\" class=\"headerlink\" title=\"恢复位置\"></a>恢复位置</h3><p>有多种方式可以恢复之前丢失的滑动位置，最好的方法时确保在第一次layout之前，已经设置好了<code>Adapter</code>的状态，若要达成这种效果，数据断然不可存储在Activity/Fragment中，而是应担使用ViewModel或者独立的Repository。如果不使用这个方法，其它的手段要么过于复杂，要么容易出错（比如误用<code>LayoutManager.onRestoreInstanceState</code>）。</p>\n<p><code>recyclerview:1.2.0-alpha02</code>提供的解决方案是，在<code>Adapter</code>类中新增了一个接口，设置状态恢复策略（restoration policy），对应的枚举是<a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.Adapter.StateRestorationPolicy\" target=\"_blank\" rel=\"noopener\">StateRestorationPolicy</a>。共有3种枚举值。</p>\n<ul>\n<li>ALLOW —— 默认值，直接恢复RecyclerView的状态</li>\n<li>PREVENT_WHEN_EMPTY —— 仅当adapter非空（<code>adapter.getItemCount() &gt; 0</code>）时才去恢复RecyclerView的状态。如果你的数据是异步加载的，RecyclerView会一直等到数据加载完毕才去恢复自身状态。一个特殊场景是，如果你的Adapter包含Header或者Footer时，你应当适用下一种策略<code>PREVENT</code>，除非你使用了同样在1.2.0-alpha2版本新增的<code>MergeAdapter</code>——它会等待自己所有的adapter进入就绪状态。</li>\n<li>PREVENT —— 推迟所有的状态恢复，直至你设置了<code>ALLOW</code>或者<code>PREVENT_WHEN_EMPTY</code></li>\n</ul>\n<p>有了这个接口，可以很直接地通过以下设置，达成RecyclerView恢复状态的目的：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adapter.restorationPolicy = PREVENT_WHEN_EMPTY</span><br></pre></td></tr></table></figure>\n<h3 id=\"MergeAdapter-RecyclerView的另一新特性\"><a href=\"#MergeAdapter-RecyclerView的另一新特性\" class=\"headerlink\" title=\"MergeAdapter: RecyclerView的另一新特性\"></a>MergeAdapter: RecyclerView的另一新特性</h3><p>同样在<code>1.2.0-alpha2</code>版本中也提出了另一个重磅功能——<a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/MergeAdapter\" target=\"_blank\" rel=\"noopener\">MergeAdapter</a>，它类似于开源框架<a href=\"https://github.com/drakeet/MultiType\" target=\"_blank\" rel=\"noopener\">MultiType</a>，可以在同一个RecyclerView中组合多个Adapter，从而显示多种样式。可以阅读这篇文章<a href=\"https://medium.com/androiddevelopers/merge-adapters-sequentially-with-mergeadapter-294d2942127a\" target=\"_blank\" rel=\"noopener\">Merge adapters sequentially with MergeAdapter</a>进一步了解。</p>\n<h2 id=\"Clean-Dagger\"><a href=\"#Clean-Dagger\" class=\"headerlink\" title=\"Clean Dagger\"></a>Clean Dagger</h2><p><a href=\"https://proandroiddev.com/clean-dagger-f248eda5790b\" target=\"_blank\" rel=\"noopener\">https://proandroiddev.com/clean-dagger-f248eda5790b</a></p>\n<p>关于在Android平台使用DI的一些建议。作者的总结具有借鉴意义：</p>\n<p>选择何种框架，这属于实现细节的问题，这些决定应当尽可能晚地做出。一个良好的体系结构不应当依赖于框架的选择。一些项目被描述为“Dagger驱动的架构”，这实际上是错误的。 </p>\n<p><strong> DI是你应用组件之间的胶水，而非骨架。</strong></p>\n<h2 id=\"Creating-the-Twitter-splash-screen-in-the-simplest-way-possible\"><a href=\"#Creating-the-Twitter-splash-screen-in-the-simplest-way-possible\" class=\"headerlink\" title=\"Creating the Twitter splash screen in the simplest way possible\"></a>Creating the Twitter splash screen in the simplest way possible</h2><p><a href=\"https://proandroiddev.com/android-motionlayout-twitter-splash-screen-b5755ed56ee8\" target=\"_blank\" rel=\"noopener\">https://proandroiddev.com/android-motionlayout-twitter-splash-screen-b5755ed56ee8</a></p>\n<p>仿照Twitter实现的开屏扩张动画。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200520_androidweekly413/twitter_splash.gif\" alt=\"Twitter Splash\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Twitter Splash</div>\n            </figure>\n<h2 id=\"视频：How-To-Stay-Up-To-Date-As-A-Mobile-Developer\"><a href=\"#视频：How-To-Stay-Up-To-Date-As-A-Mobile-Developer\" class=\"headerlink\" title=\"视频：How To Stay Up To Date As A Mobile Developer?\"></a>视频：How To Stay Up To Date As A Mobile Developer?</h2><p><a href=\"https://www.youtube.com/watch?v=BvOn4fAIS34\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=BvOn4fAIS34</a></p>\n<p>主要是宏观方面给Android开发者提出的一些建议：</p>\n<ol>\n<li>没有必要掌握Android开发的方方面面，而且也不现实</li>\n<li>在掌握APP基本开发知识的基础上，找一个自己感兴趣的方向进行深入学习</li>\n<li>接上一条，最好是可以在工作中应用该技术，但是应当注意不要引入尚测试阶段不稳定的特性</li>\n<li>初级工程师需要掌握页面、网络请求、构建等基础知识，资深工程师应当在框架方面有相当程度的见解</li>\n</ol>\n","categories":[],"tags":["Android","Android Weekly"]},{"title":"通关Jetpack之 Data Binding：第2课 接口纵览","url":"https://lilei.pro/2020/03/16/Go-through-jetpack-data-binding-L2/","content":"<blockquote>\n<p>这是《通关Jetpack》系列的第2篇文章</p>\n</blockquote>\n<blockquote>\n<p>我没什么能耐，不能给你们更好的生活，唯一能做的，是挡在你们前边。——《误杀》</p>\n</blockquote>\n<p>在上一篇文章中，通过实例介绍了Data Binding的概念和用法，本篇文章则从更丰富的细节上介绍Data Binding的种种用法。</p>\n<p>##创建Data Binding的两种方式</p>\n<p>在代码里，如果要获取到Data Binding对象，有2种方式</p>\n<h3 id=\"方式一：一步到位的DataBindingUtil。\"><a href=\"#方式一：一步到位的DataBindingUtil。\" class=\"headerlink\" title=\"方式一：一步到位的DataBindingUtil。\"></a>方式一：一步到位的<code>DataBindingUtil</code>。</h3><p>在<code>onCreate</code>中，可以同时完成设置布局文件+创建Binding对象两个动作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> binding: ActivityMainBinding = DataBindingUtil.setContentView(</span><br><span class=\"line\">            <span class=\"keyword\">this</span>, R.layout.activity_main)</span><br><span class=\"line\">    binding.user = User(<span class=\"string\">\"Test\"</span>, <span class=\"string\">\"User\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者在<code>Fragment</code>、<code>ListView</code>或者<code>RecyclerView</code>的初始方法中。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> listItemBinding = DataBindingUtil.inflate(layoutInflater, R.layout.list_item, viewGroup, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式二：单独使用LayoutInflater\"><a href=\"#方式二：单独使用LayoutInflater\" class=\"headerlink\" title=\"方式二：单独使用LayoutInflater\"></a>方式二：单独使用<code>LayoutInflater</code></h3><p>如果已经调用了<code>setContentView()</code>，则可以在之后单独使用<code>inflate</code>方法来获取Binding对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> binding: ActivityMainBinding = ActivityMainBinding.inflate(getLayoutInflater())</span><br></pre></td></tr></table></figure>\n<p>对于<code>Fragment</code>、<code>ListView</code>或者<code>RecyclerView</code>也同理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> listItemBinding = ListItemBinding.inflate(layoutInflater, viewGroup, <span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"表达式用法\"><a href=\"#表达式用法\" class=\"headerlink\" title=\"表达式用法\"></a>表达式用法</h2><h3 id=\"可以在布局文件中使用的表达式\"><a href=\"#可以在布局文件中使用的表达式\" class=\"headerlink\" title=\"可以在布局文件中使用的表达式\"></a>可以在布局文件中使用的表达式</h3><p>可以在布局文件中使用丰富的表达式，列举如下，暂不举例。</p>\n<ul>\n<li>数学运算符 <code>+ - / * %</code></li>\n<li>字符串拼接 <code>+</code></li>\n<li>逻辑算式 <code>&amp;&amp; ||</code></li>\n<li>二元运算符 <code>&amp; | ^</code></li>\n<li>一元运算符 <code>+ - ! ~</code></li>\n<li>三目运算符 <code>?:</code></li>\n<li>移位运算 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt;</code></li>\n<li>比较运算 <code>== &gt; &lt; &gt;= &lt;=</code>（注意在xml中需要将<code>&lt;</code>转义写为<code>&amp;lt;</code>）</li>\n<li><code>instanceof</code></li>\n<li>小括号 <code>()</code></li>\n<li>字面量 字符、字符串、数字以及<code>null</code></li>\n<li>类型转换</li>\n<li>方法调用</li>\n<li>属性读取</li>\n<li>数组读取 <code>[]</code></li>\n</ul>\n<h3 id=\"NULL则替换\"><a href=\"#NULL则替换\" class=\"headerlink\" title=\"NULL则替换\"></a>NULL则替换</h3><p>NULL则替换表达式（<code>??</code>）很好用，可以避免很多NPE的场景。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// NULL则替换</span><br><span class=\"line\">android:text=\"@&#123;user.displayName ?? user.lastName&#125;\"</span><br><span class=\"line\">// 等价于</span><br><span class=\"line\">android:text=\"@&#123;user.displayName != null ? user.displayName : user.lastName&#125;\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取属性值\"><a href=\"#读取属性值\" class=\"headerlink\" title=\"读取属性值\"></a>读取属性值</h3><p>其实对于 a. public属性 b. 带有getter的属性 c. 可观测的属性<code>ObservableField</code>，它们在xml里的读取写法都是相同的，都是<code>对象.属性</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=\"@&#123;user.name&#125;\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"读取同一布局文件里其它的View\"><a href=\"#读取同一布局文件里其它的View\" class=\"headerlink\" title=\"读取同一布局文件里其它的View\"></a>读取同一布局文件里其它的View</h3><blockquote>\n<p>尽管很少用到，但还是介绍一下。</p>\n</blockquote>\n<p>比如我有两个TextView，id无分别是<code>text_view_name</code>和<code>text_view_nickname</code>，在第二个TextView里可以访问第一个TextView的文本，则可以这么写，需要留意的就是会自动将id转为驼峰命名。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;textViewName.text&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"集合的写法\"><a href=\"#集合的写法\" class=\"headerlink\" title=\"集合的写法\"></a>集合的写法</h3><p>在xml里同样可以使用集合Data，并通过<code>[]</code>来获取集合中特定的元素。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.util.SparseArray\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.Map\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.util.List\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"list\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"List&amp;lt;String&gt;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sparse\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"SparseArray&amp;lt;String&gt;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"map\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"Map&amp;lt;String, String&gt;\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"index\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"int\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"key\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">…</span><br><span class=\"line\">android:text=\"@&#123;list[index]&#125;\"</span><br><span class=\"line\">…</span><br><span class=\"line\">android:text=\"@&#123;sparse[index]&#125;\"</span><br><span class=\"line\">…</span><br><span class=\"line\">android:text=\"@&#123;map[key]&#125;\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"String字面量\"><a href=\"#String字面量\" class=\"headerlink\" title=\"String字面量\"></a>String字面量</h3><p>在xml文件中，如果要使用双引号<code>&quot;</code>，则可以将外部的双引号替换为单引号<code>&#39;</code>。或者在应当使用双引号的地方使用反引号。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 单引号替代双引号 --&gt;</span></span><br><span class=\"line\">android:text='@&#123;map[\"firstName\"]&#125;'</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 反引号替代双引号 --&gt;</span></span><br><span class=\"line\">android:text=\"@&#123;map[`firstName`]&#125;\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用静态资源\"><a href=\"#引用静态资源\" class=\"headerlink\" title=\"引用静态资源\"></a>引用静态资源</h3><p>引用多个静态资源的语法如下。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:padding=\"@&#123;larege ? @dimen/largePadding : @dimen/smallPadding&#125;\"</span><br><span class=\"line\">android:text=\"@&#123;@string/nameFormat(firstName, lastName)&#125;\"</span><br><span class=\"line\">android:text=\"@&#123;@plurals/banana(bananaCount)&#125;\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件处理\"><a href=\"#事件处理\" class=\"headerlink\" title=\"事件处理\"></a>事件处理</h2><p>Data binding允许你为View绑定各种各样的事件处理函数，作为布局文件里的一项属性，大部分命名格式为<code>android:onXXXX</code>，对应的View接口为<code>View.OnXXXXListener</code>。有两种方式处理事件。</p>\n<ul>\n<li>方法引用：在表达式中使用方法签名。Data Binding会将方法与对象包装成一个Listener并设置给View。</li>\n<li>监听绑定：Lambda表达式，Data Binding对此同样生成一个Listener，供事件触发时调用。</li>\n</ul>\n<h3 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h3><p>就像你可以为<code>onClick</code>指明绑定的方法一样，也可以为View的各种事件绑定ViewModel中的方法。在编译时会对此进行检查，如果方法不存在，或是签名错误，则直接报错。“方法引用”会在编译时创建一个Listener，相应的，“监听绑定”则在事件触发时才创建Listener。一个方法引用绑定的例子如下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandlers</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onClickFriend</span><span class=\"params\">(view: <span class=\"type\">View</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们希望在<code>onClick</code>时触发<code>onClickFriend</code>方法，则写法如下。注意：表达式中的签名与类文件里面方法签名必须完全一致。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"handlers\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.MyHandlers\"</span>/&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.firstName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;handlers::onClickFriend&#125;\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"监听绑定\"><a href=\"#监听绑定\" class=\"headerlink\" title=\"监听绑定\"></a>监听绑定</h3><p>监听绑定的自由度更大，它允许你运行任意的代码。限制之处则在于，方法的返回值必须与表达式期望的值相匹配。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presneter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以将以上方法绑定在View的<code>onClick</code>上面。因为这里多了<code>task</code>参数，故无法使用方法引用来写。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"task\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Task\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"presenter\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.android.example.Presenter\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;() -&gt; presenter.onSaveClick(task)&#125;\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果需要用到View本身，则可以使用<code>android:onClick=&quot;@{(view) -&gt; presenter.onSaveClick(task)}&quot;</code>。如果处理函数里也要用到View，则函数签名写作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSaveClick</span><span class=\"params\">(view: <span class=\"type\">View</span>, task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还可以为方法增加更多的参数，比如对于<code>CheckBox</code>的<code>isChecked</code>属性。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCompletedChanged</span><span class=\"params\">(task: <span class=\"type\">Task</span>, completed: <span class=\"type\">Boolean</span>)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CheckBox</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span> <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">android:onCheckedChanged</span>=<span class=\"string\">\"@&#123;(cb, isChecked) -&gt; presenter.completeChanged(task, isChecked)&#125;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于返回值非void的情况，函数签名必须匹配。比如<code>onLongClick</code>方法，要返回<code>boolean</code>类型的值，表示事件是否被消费。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Presenter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLongClick</span><span class=\"params\">(view: <span class=\"type\">View</span>, task: <span class=\"type\">Task</span>)</span></span>: <span class=\"built_in\">Boolean</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:onLongClick=\"@&#123;(theView) -&gt; presenter.onLongClick(theView, task)&#125;\"</span><br></pre></td></tr></table></figure>\n<p>也可以在表达式里使用三目运算符，用<code>void</code>表示不响应事件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:onClick=\"@&#123;(v) -&gt; v.isVisible() ? doSomething() : void&#125;\"</span><br></pre></td></tr></table></figure>\n<p>忠告：把复杂的业务逻辑放在Kotlin/Java代码中处理，而非xml表达式。</p>\n<h2 id=\"导入、变量与引入\"><a href=\"#导入、变量与引入\" class=\"headerlink\" title=\"导入、变量与引入\"></a>导入、变量与引入</h2><ul>\n<li>导入（Imports）：在xml中引入外部类</li>\n<li>变量（Variables）：声明在xml中使用的变量</li>\n<li>引入（Incluces）：帮助我们构建更加复杂的UI</li>\n</ul>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>在<code>&lt;data&gt;</code>块进行导入，导入后就可以在xml表达式里使用相应的类。如下例的<code>View</code>类。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"android.view.View\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;user.lastName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:visibility</span>=<span class=\"string\">\"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以在表达式中进行强制类型转换，如把<code>user.connection</code>强转为<code>User</code>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;((User)(user.connection)).lastName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在import后，可以在表达式中使用静态方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.MyStringUtils\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;MyStringUtils.capitalize(user.lastName)&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">   <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>作为Data Binding类库的默认行为，<code>java.lang.*</code>已经自动引入。</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>声明变量，从而在表达式中引用这些变量，变量的赋值来自于Binding对象。对于同名的<code>portrait</code>和<code>landscape</code>布局文件，它们的变量声明会进行合并，因此注意在处理这种场景时，不要发生命名冲突。对于未赋值的变量，在运行时会取它们的默认值：<code>0</code>、<code>false</code>、<code>null</code>等等。</p>\n<p>Data Binding类库同样内置了<code>context</code>变量，供调用者在表达式中使用，它等价于<code>View.getContext()</code>。</p>\n<h3 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h3><p>在进行复杂UI构件时，如果用到了<code>include</code>标签，可以将变量从父布局传递给子布局。如下例，<code>user</code>对象被传递给了子布局。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:bind</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"user\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.User\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">include</span> <span class=\"attr\">layout</span>=<span class=\"string\">\"@layout/contact\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">bind:user</span>=<span class=\"string\">\"@&#123;user&#125;\"</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>但是，Data Binding并不支持<code>merge</code>标签，试图在<code>merge</code>过程中传递变量是无效的。</p>\n<p>【未完待续】</p>\n","categories":[],"tags":["Jetpack","Kotlin"]},{"title":"Kotlin 协程基础课 04.协程原理小探——从包装异步请求为同步说起","url":"https://lilei.pro/2020/03/16/kotlin-coroutines-04/","content":"<blockquote>\n<p>这是《Kotlin 协程基础课》的第4篇，也是最后一篇文章。</p>\n</blockquote>\n<blockquote>\n<p>我不在意十年后的自己是什么样子，我在意的是，十年后的我怎么看现在的自己。</p>\n</blockquote>\n<p>协程是强大的工具，通过前面三篇文章我们介绍了什么是协程、如何使用协程、协程里的CoroutineContext到底是个什么玩意儿。本文是《Kotlin协程基础课》系列的最后一篇文章，将从原理上进行简要的介绍。</p>\n<h1 id=\"从混合开发说起\"><a href=\"#从混合开发说起\" class=\"headerlink\" title=\"从混合开发说起\"></a>从混合开发说起</h1><p>对Java开发者而言，“回调”是再常见不过的概念了。从各种SDK到我们自己开发的代码，处处充满了回调。某个任务需要长时间执行，同时我们希望能在任务完成时得到通知，在函数参数里加上一个回调对象，用以收取结果，是十分常见的解决方案。</p>\n<h2 id=\"一个回调Demo\"><a href=\"#一个回调Demo\" class=\"headerlink\" title=\"一个回调Demo\"></a>一个回调Demo</h2><p>我们假设有个耗时计算任务，sleep指定时间然后返回数值，代码如下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 耗时函数，将运算结果在回调中返回</span></span><br><span class=\"line\"><span class=\"comment\">// 只能在工作线程里调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calcSlowly</span><span class=\"params\">(inp: <span class=\"type\">Int</span>, callback: <span class=\"type\">CalcTaskCallback</span>&lt;<span class=\"type\">Int</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"calcSlowly inp=<span class=\"variable\">$inp</span> in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> result = inp * <span class=\"number\">1000</span>L</span><br><span class=\"line\">        Thread.sleep(result)</span><br><span class=\"line\">        callback.onSuccess(result.toInt())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"Fail to calc\"</span>)</span><br><span class=\"line\">        callback.onFailure(<span class=\"number\">-1</span>, <span class=\"string\">\"Fail\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>为了获取计算的结果，我们传入了<code>callback</code>参数，用以接收计算结果，或者异常信息。</p>\n<p>调用它的代码样例如下，用一个匿名内部对象接收回调：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">execCalcTaskAsync</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    Thread(Runnable &#123;</span><br><span class=\"line\">        calcSlowly(<span class=\"number\">3</span>, <span class=\"keyword\">object</span> : CalcTaskCallback&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSuccess</span><span class=\"params\">(result: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">\"onSuccess, result=<span class=\"variable\">$result</span>, in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(code: <span class=\"type\">Int</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">                println(<span class=\"string\">\"onFailure, code=<span class=\"variable\">$code</span>, msg=<span class=\"variable\">$msg</span>, in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种回调写法在Java中再常见不过了。但是它却有着不小的隐患：</p>\n<ol>\n<li>嵌套太多，成为“回调地狱”；</li>\n<li>传入的callback如果是Activity会引起泄露；</li>\n<li>代码阅读起来不直观。</li>\n</ol>\n<p>这几个隐患不详述了，接下来看看在Kotlin中如何将异步回调转换为同步请求。</p>\n<h2 id=\"将异步转化为同步\"><a href=\"#将异步转化为同步\" class=\"headerlink\" title=\"将异步转化为同步\"></a>将异步转化为同步</h2><p>通过协程的<code>suspendCoroutine</code>关键字，可以将异步回调转换为同步调用，上例改写方法如下，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 包装异步为同步</span></span><br><span class=\"line\">suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calcSlowlySync</span><span class=\"params\">(inp: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> =</span><br><span class=\"line\">    suspendCoroutine &#123; cont -&gt;</span><br><span class=\"line\">        calcSlowly(inp, <span class=\"keyword\">object</span>: CalcTaskCallback&lt;<span class=\"built_in\">Int</span>&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSuccess</span><span class=\"params\">(result: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">                cont.resume(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onFailure</span><span class=\"params\">(code: <span class=\"type\">Int</span>, msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">                cont.resumeWithException(Exception(<span class=\"string\">\"code=<span class=\"variable\">$code</span>, msg=<span class=\"variable\">$msg</span>\"</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>改写之后，就可以在协程内部愉快地使用这个同步方法进行耗时计算了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">launch(Dispatchers.DEFAULT) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> result = calcSlowlySync(<span class=\"number\">100</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"result=<span class=\"variable\">$result</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"suspendCoroutine是如何工作的\"><a href=\"#suspendCoroutine是如何工作的\" class=\"headerlink\" title=\"suspendCoroutine是如何工作的\"></a>suspendCoroutine是如何工作的</h1><p>todo</p>\n<hr>\n<p>原始代码<code>MainCoroutine.kt</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    runBlocking &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> job = GlobalScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> result = calcSlowly(<span class=\"number\">123</span>)</span><br><span class=\"line\">            println(<span class=\"string\">\"result = <span class=\"variable\">$result</span>\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        job.join()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(<span class=\"string\">\"FINISH\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 延时计算</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calcSlowly</span><span class=\"params\">(inp: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = withContext(Dispatchers.Default) &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">1000</span>L)</span><br><span class=\"line\">    inp * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反编译后生成4个文件</p>\n<ol>\n<li>MainCoroutineKt.class，</li>\n<li>MainCoroutineKt$main$1.class</li>\n<li>MainCoroutineKt$main$1$job$1.class</li>\n<li>MainCoroutineKt$calcSlowly$2.class</li>\n</ol>\n<h1 id=\"大纲\"><a href=\"#大纲\" class=\"headerlink\" title=\"大纲\"></a>大纲</h1><h1 id=\"混合开发，从把异步请求转换为同步说起\"><a href=\"#混合开发，从把异步请求转换为同步说起\" class=\"headerlink\" title=\"混合开发，从把异步请求转换为同步说起\"></a>混合开发，从把异步请求转换为同步说起</h1><h2 id=\"异步接口\"><a href=\"#异步接口\" class=\"headerlink\" title=\"异步接口\"></a>异步接口</h2><h2 id=\"转换同步\"><a href=\"#转换同步\" class=\"headerlink\" title=\"转换同步\"></a>转换同步</h2><h1 id=\"协程内部如何将异步转换为同步\"><a href=\"#协程内部如何将异步转换为同步\" class=\"headerlink\" title=\"协程内部如何将异步转换为同步\"></a>协程内部如何将异步转换为同步</h1><h2 id=\"suspendCoroutine\"><a href=\"#suspendCoroutine\" class=\"headerlink\" title=\"suspendCoroutine\"></a>suspendCoroutine</h2><h2 id=\"todo\"><a href=\"#todo\" class=\"headerlink\" title=\"todo\"></a>todo</h2>","categories":[],"tags":["Kotlin"]},{"title":"通关Jetpack之 Data Binding：第1课 需求实战","url":"https://lilei.pro/2020/03/16/Go-through-jetpack-data-binding-L1/","content":"<blockquote>\n<p>这是《通关Jetpack》系列的第1篇文章</p>\n</blockquote>\n<blockquote>\n<p>有些人沦为平庸，有的人金玉其外、败絮其中。可未来某一天，不经意间你会遇到一个彩虹般绚丽的人，从此以后，其他人就不过是匆匆浮云。</p>\n</blockquote>\n<h2 id=\"Data-Binding是什么\"><a href=\"#Data-Binding是什么\" class=\"headerlink\" title=\"Data Binding是什么\"></a>Data Binding是什么</h2><p>在学习一项新知识、新技能之前，必须问的问题是这门技术是什么、将为我们带来什么有益的改变。我们来看一下Data Binding。</p>\n<h3 id=\"Data-Binding是什么-1\"><a href=\"#Data-Binding是什么-1\" class=\"headerlink\" title=\"Data Binding是什么\"></a>Data Binding是什么</h3><p>Data Binding是由Google推出的一个库（Library），用来解决数据变化与UI显示同步的问题。</p>\n<p>Data Binding常常与MVVM一同出现，这并不意味着它们是同一类东西。MVVM是设计模式/编程思想，ViewModel是其中一个组成部分。而Data Binding则是实现这门思想的一种工具。</p>\n<h3 id=\"Data-Binding将为我们带来怎样的改变\"><a href=\"#Data-Binding将为我们带来怎样的改变\" class=\"headerlink\" title=\"Data Binding将为我们带来怎样的改变\"></a>Data Binding将为我们带来怎样的改变</h3><p>做应用开发，很大一部分精力都用于处理UI和数据的同步问题。在传统实现方式里，数据从服务器返回了，此时要手动调用<code>updateView</code>一类的方法更新UI；同样，当用户操作UI上的元素时，会通过<code>Listener</code>等监听，更新到内存的数据中——这是逻辑式写法，而Data Binding则是通过声明式的写法，将数据-UI解耦，从而可以简化控制流，让我们把注意力集中在复杂的业务逻辑上，而非UI同步。</p>\n<p>我们首先从<a href=\"https://codelabs.developers.google.com/codelabs/android-databinding\" target=\"_blank\" rel=\"noopener\">codelab</a>的实例入手，学习如何使用Data Binding。然后会深入介绍Data Binding的API，最后则是从原理角度阐述它是如何工作的。预计分成3篇文章。</p>\n<h2 id=\"假想一种需求场景\"><a href=\"#假想一种需求场景\" class=\"headerlink\" title=\"假想一种需求场景\"></a>假想一种需求场景</h2><p>以这样一个App为例，它需要显示一段静态的文本（左侧），以及可点击的<strong>LIKE</strong>按钮（右侧），点击该按钮时会提升欢迎度数值并实时显示在UI上，最后，欢迎度数值每达到一个阶段，会在屏幕右侧显示不同阶段的图片。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://codelabs.developers.google.com/codelabs/android-databinding/img/94376396329952d2.png\" alt=\"sample app\" title=\"\">\n                </div>\n                <div class=\"image-caption\">sample app</div>\n            </figure>\n<h3 id=\"没有Data-Binding时的写法\"><a href=\"#没有Data-Binding时的写法\" class=\"headerlink\" title=\"没有Data Binding时的写法\"></a>没有Data Binding时的写法</h3><p>首先是没有使用Data Binding时，传统的MVVM写法，已省略无关代码。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SimpleViewModel.kt</span></span><br><span class=\"line\"><span class=\"comment\">// ViewModel，对应页面上的静态部分、动态部分以及点击监听函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleViewModel</span> : <span class=\"type\">ViewModel</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name = <span class=\"string\">\"Grace\"</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastName = <span class=\"string\">\"Hopper\"</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> likes = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 点击监听函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLike</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        likes++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 不同阶段的欢迎度，基于like数计算</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> popularity: Popularity</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">                likes &gt; <span class=\"number\">9</span> -&gt; Popularity.STAR</span><br><span class=\"line\">                likes &gt; <span class=\"number\">4</span> -&gt; Popularity.POPULAR</span><br><span class=\"line\">                <span class=\"keyword\">else</span> -&gt; Popularity.NORMAL</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PlainOldActivity.kt，UI层</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PlainOldActivity</span> : <span class=\"type\">AppCompatActivity</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Activity当中维护一个成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> viewModel <span class=\"keyword\">by</span> lazy &#123; ViewModelProviders.of(<span class=\"keyword\">this</span>).<span class=\"keyword\">get</span>(SimpleViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>) &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">        setContentView(R.layout.plain_activity)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 缺点1：当数据发生变化时，需要手动更新UI</span></span><br><span class=\"line\">        updateName()</span><br><span class=\"line\">        updateLikes()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缺点2：在UI类中包含业务逻辑</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLike</span><span class=\"params\">(view: <span class=\"type\">View</span>)</span></span> &#123;</span><br><span class=\"line\">        viewModel.onLike()</span><br><span class=\"line\">        updateLikes()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缺点3：太多的findViewById</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateName</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        findViewById&lt;TextView&gt;(R.id.plain_name).text = viewModel.name</span><br><span class=\"line\">        findViewById&lt;TextView&gt;(R.id.plain_lastname).text = viewModel.lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 缺点4：多次调用findViewById</span></span><br><span class=\"line\">    <span class=\"comment\">// 缺点5：包含未经测试的逻辑</span></span><br><span class=\"line\">    <span class=\"comment\">// 缺点6：即使数据未发生变化，也会更新View</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateLikes</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        findViewById&lt;TextView&gt;(R.id.likes).text = viewModel.likes.toString()</span><br><span class=\"line\">        findViewById&lt;ProgressBar&gt;(R.id.progressBar).progress =</span><br><span class=\"line\">            (viewModel.likes * <span class=\"number\">100</span> / <span class=\"number\">5</span>).coerceAtMost(<span class=\"number\">100</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> image = findViewById&lt;ImageView&gt;(R.id.imageView)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> color = getAssociatedColor(viewModel.popularity, <span class=\"keyword\">this</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        ImageViewCompat.setImageTintList(image, ColorStateList.valueOf(color))</span><br><span class=\"line\"></span><br><span class=\"line\">        image.setImageDrawable(getDrawablePopularity(viewModel.popularity, <span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAssociatedColor</span><span class=\"params\">(popularity: <span class=\"type\">Popularity</span>, context: <span class=\"type\">Context</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDrawablePopularity</span><span class=\"params\">(popularity: <span class=\"type\">Popularity</span>, context: <span class=\"type\">Context</span>)</span></span>: Drawable? &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这么简单一个页面，光是列出来的缺点就有6条之多，无法想象当业务逻辑复杂起来后，代码将会增长到何种程度。接下来，让我们看看Data Binding如何解决上述问题的。</p>\n<h3 id=\"静态数据绑定UI\"><a href=\"#静态数据绑定UI\" class=\"headerlink\" title=\"静态数据绑定UI\"></a>静态数据绑定UI</h3><p>gradle从1.5.0版本开始支持data binding首先需要在project的<code>build.gradle</code>文件里打开开关，</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">    dataBinding &#123;</span><br><span class=\"line\">        enabled <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于普通布局，data binding布局文件在最外层增加了<code>&lt;layout&gt;</code>标签，<code>&lt;layout&gt;</code>标签内部则由<code>&lt;data&gt;</code>标签和原布局组成。对于需要重构成data binding的布局文件，将鼠标选中最外层布局，会自动提示 <strong>Convert to data binding layout</strong>。一个data binding布局如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span></span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;data&gt;</code>标签中的变量，可以在布局文件里进行调用，也支持简单的表达式，比如<code>if...else...</code>、类型转换、字符串拼接。表达式的格式为<code>@{...}</code>。虽然表达式很强大，但是不要滥用，否则会使布局文件过于复杂，难以维护。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:text=\"@&#123;String.valueOf(index + 1)&#125;\"</span><br><span class=\"line\">android:visibility=\"@&#123;age <span class=\"tag\">&lt; <span class=\"attr\">13</span> ? <span class=\"attr\">View.GONE</span> <span class=\"attr\">:</span> <span class=\"attr\">View.VISIBLE</span>&#125;\"</span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">android:transitionName</span>=<span class=\"string\">'@&#123;\"image_\" + id&#125;'</span></span></span><br></pre></td></tr></table></figure>\n<p>基于上述知识，我们为属性name和last name声明变量。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lastName\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"String\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>从而可以在布局文件中直接使用它们。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/plain_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;name&#125;\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>目前为止已经完成了布局文件的编写，需要一个时机，将数据塞给布局文件，可以在<code>onCreate</code>里做这件事。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// onCreate</span></span><br><span class=\"line\">setConetntView(R.layout.plain_activity)</span><br><span class=\"line\"><span class=\"keyword\">val</span> binding: PlainActivityBinding = DataBindingUtil.setContgentView(<span class=\"keyword\">this</span>, R.layout.plain_activity)</span><br><span class=\"line\">binding.name = <span class=\"string\">\"Lei\"</span></span><br><span class=\"line\">binding.lastName = <span class=\"string\">\"Li\"</span></span><br></pre></td></tr></table></figure>\n<p>如此即可，不需要<code>findViewById</code>、<code>setText</code>，甚至不关心UI里到底是TextView还是EditText甚至自定义控件，要做的事情只是给成员变量赋值。处理完了静态文本，接下来看看如何响应UI的点击LIKE事件。要知道，这里我们同样也不用<code>findViewById</code>以及<code>setOnClickListener</code>的。</p>\n<p>首先回忆一下最早的点击事件处理方式——在布局文件中，<code>onClick=onLike</code>，这样自动关联起来Activity中的<code>onLike</code>方法，虽然直观，但带来的后果就是绑死了布局文件与Activity，根本无法复用。其实Data Binding的处理方式与此类似，只不过它增加了一个<strong>ViewModel</strong>层。</p>\n<blockquote>\n<p>在计算机软件领域，没有什么问题是增加一个中间层不能解决的，如果就，那就加两层。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">variable</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">name</span>=<span class=\"string\">\"viewmodel\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">\"com.example.android.databinding.basicsample.data.SimpleViewModel\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">data</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;data&gt;</code>中不再是简单的String，而是一个<strong>SimpleViewModel</strong>类型对象，该类在上文中可以看到，它包含<code>name</code>、<code>lastName</code>字段，以及一个处理LIKE++事件的<code>onLike</code>方法。有了这个<code>viewmodel</code>对象，就可以在接下来的布局里面这样使用了。且比上种写法更好的地方在于，编译器会检查<code>onLike</code>方法是否存在，如果不存在则编译时就会异常。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/plain_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;viewmodel.name&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/plain_lastname\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"@&#123;viewmodel.lastName&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;() -&gt; viewmodel.onLike()&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于<code>viewmodel</code>的赋值，则在<strong>onCreate</strong>里面直接<code>binding.viewmodel = viewModel</code>就可以。但是如果我们把<code>likes</code>属性绑定到布局文件的某个TextView上（注意这里不要直接让<code>android:text=&quot;@{viewmodel.lines}&quot;</code>，因为这会导致运行时读取id=0的字符串资源，从而异常），会发现即使通过<code>onLike()</code>增长了LIKE，但在UI上并没有体现，LIKE数始终显示为0。这是因为目前为止我们进行的绑定都是<strong>静态</strong>且<strong>单向</strong>绑定，下一节我们将学习双向绑定，从而让LIKES的数目实时显示在UI上。</p>\n<h3 id=\"双向Data-Binding的写法\"><a href=\"#双向Data-Binding的写法\" class=\"headerlink\" title=\"双向Data Binding的写法\"></a>双向Data Binding的写法</h3><p>所谓“双向”Data Binding，是指对于View而言，在初始化时可以自动从data里获取数据，对于data而言，当它们的值发生变化时，能自动通知UI显示相应数值。对于这种发生变化时能通知UI的数据，称之为具有“可观察性”，即<strong>observable</strong>。有多重途径生成一个可观察的对象，比如<code>observable classes</code>、<code>observable fields</code>，以及最通用也最好用的<code>LiveData</code>。声明可观察对象的方式如下。带有前置下划线<code>_</code>的变量为私有变量，是可变的，不对外进行暴露。每个私有变量都拥有一个<code>LiveData&lt;T&gt;</code>类型的接口变量，用于提供给布局文件读取。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _name = MutableLiveData(<span class=\"string\">\"Ada\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _lastName = MutableLiveData(<span class=\"string\">\"Lovelace\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _likes =  MutableLiveData(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> name: LiveData&lt;String&gt; = _name</span><br><span class=\"line\"><span class=\"keyword\">val</span> lastName: LiveData&lt;String&gt; = _lastName</span><br><span class=\"line\"><span class=\"keyword\">val</span> likes: LiveData&lt;<span class=\"built_in\">Int</span>&gt; = _likes</span><br></pre></td></tr></table></figure>\n<p>同时需要在Activity的<code>onCreate()</code>方法中，为<code>binding</code>对象的<code>lifecycleOwner</code>赋值（为Activity）。如果不做这一步，数据的变化就无法被观测到。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(SavedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    binding.lifecycleOwner = <span class=\"keyword\">this</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于<code>popularity</code>，同样将其声明为<code>LiveData</code>类型。这里注意，并没有私有的<code>_popularity</code>，因为它的值实际上是根据<code>likes</code>计算得到的。因此通过<code>Transformations.map()</code>操作，从一个<code>MutableLiveData</code>类型的<code>_likes</code>对象计算出<code>LiveData</code>类型的<code>popularity</code>。关于<code>Transformation</code>的使用，可以看<a href=\"https://developer.android.com/reference/android/arch/lifecycle/Transformations\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// popularity is exposed as LiveData using a Transformation instead of a @Bindable property.</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> popularity: LiveData&lt;Popularity&gt; = Transformations.map(_likes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">        it &gt; <span class=\"number\">9</span> -&gt; Popularity.STAR</span><br><span class=\"line\">        it &gt; <span class=\"number\">4</span> -&gt; Popularity.POPULAR</span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; Popularity.NORMAL</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，在<code>onLike()</code>中我们直接修改<code>_likes</code>的值，就会 通知到UI自动发生调整了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onLike</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    _likes.value = (_likes.value ?: <span class=\"number\">0</span>) + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此处简单介绍下其实现原理，Data Binding库里面包含众多Adapters（适配器），见<a href=\"https://android.googlesource.com/platform/frameworks/data-binding/+/master/extensions/baseAdapters/src/main/java/android/databinding/adapters/\" target=\"_blank\" rel=\"noopener\">源码</a>。对于xml布局文件里的UI组件，需要设置的属性均声明了相应的<strong>静态</strong>设值方法，比如对于<code>TextView</code>的<code>android:text</code>属性，就有如下<code>setText(TextView, CharSequence)</code>方法。当text值发生变更时，就会调用到这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter</span>(<span class=\"string\">\"android:text\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Some checks removed for clarity</span></span><br><span class=\"line\">    view.setText(text);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时还剩下两点功能没有完成，分别是LIKE按钮下方的进度条没有实时增加，以及LIKE图片没有更新。先看进度条相关的事项。对于进度条有3点需求，分别是：</p>\n<ol>\n<li>当LIKES=0时，进度条隐藏</li>\n<li>当LIKES增加时，进度条实时增长，且每5个LIKE一个循环，进度条归零</li>\n<li>当进度条拉满时，颜色变深</li>\n</ol>\n<p>这些需求都可以通过自定义<code>BindingAdapter</code>来实现，它可以为xml元素创建任意的自定义属性，并通过代码读取该属性，进而对xml元素原生的属性进行修改。在任意包下创建一个<code>BindingAdapters.kt</code>文件（不要担心路径，因为编译时会自动识别注解），借助于Kotlin的顶层函数，可以不声明<code>BindingAdapter</code>类而直接写函数。我们为所有的<code>View</code>创建一个<code>app:hideIfZero</code>属性，控制当该属性为0时隐藏UI元素。</p>\n<p><em>当LIKES=0时，进度条隐藏</em></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"app:hideIfZero\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">hideIfZero</span><span class=\"params\">(view: <span class=\"type\">View</span>, number: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    view.visibility = <span class=\"keyword\">if</span> (number == <span class=\"number\">0</span>) View.GONE <span class=\"keyword\">else</span> View.VISIBLE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后在xml布局文件中将该属性与<code>viewmodel.likes</code>进行绑定，这样当likes=0时，进度条就会自动隐藏。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:hideIfZero</span>=<span class=\"string\">\"@&#123;viewmodel.likes&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">...</span></span></span><br></pre></td></tr></table></figure>\n<p><em>当LIKES增加时，进度条实时增长，且每5个LIKE一个循环，进度条归零</em></p>\n<p>参考上面的<code>hideIfZero</code>属性，我们这次同样用自定义<code>BindingAdapter</code>来实现。不同之处在于，这次我们需要同时读取两个属性，在<code>@BindingAdapter</code>注解里面，通过字符串数组<code>[&quot;app:progressScaled&quot;, &quot;android:max&quot;]</code>来声明，同时<code>requireAll = true</code>表示必须两个属性都在xml得到声明时，才会调用该方法进行处理。如果有任一个没有赋值，则不进行方法。与之相对应的<code>requiredAll = false</code>则对至少一个属性进行相应，对于没有声明的属性会使用其默认值。</p>\n<p><a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/coerce-at-most.html\" target=\"_blank\" rel=\"noopener\">coerceAtMost</a>是Kotlin提供的扩展函数，表示“最大不超过<code>max</code>”。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(value = [<span class=\"meta-string\">\"app:progressScaled\"</span>, <span class=\"meta-string\">\"android:max\"</span>], requireAll = true)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setProgress</span><span class=\"params\">(progressBar: <span class=\"type\">ProgressBar</span>, likes: <span class=\"type\">Int</span>, max: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    progressBar.progress = (likes * max / <span class=\"number\">5</span>).coerceAtMost(max)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相应地，在布局文件中声明<code>app:progressScaled</code>和<code>android:max</code>两个属性。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ProgressBar</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/progressBar\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:hideIfZero</span>=<span class=\"string\">\"@&#123;viewmodel.likes&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:progressScaled</span>=<span class=\"string\">\"@&#123;viewmodel.likes&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:max</span>=<span class=\"string\">\"@&#123;100&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>当进度条拉满时，颜色变深</em></p>\n<p>如果前面的知识都已经掌握，这里也就不难了。我们声明一个自定义属性<code>app:progressTint</code>，表示会影响到progressBar的外显颜色，输入为popularity，方法内部先根据popularity计算出color（注意这里使用到的Context为View的Context），然后再将其设置到progressBar的<code>progressTintList</code>属性上。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindingAdapter(<span class=\"meta-string\">\"app:progressTint\"</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">tintPopularity</span><span class=\"params\">(view: <span class=\"type\">ProgressBar</span>, popularity: <span class=\"type\">Popularity</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> color = getAssociatedColor(popularity, view.context)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">        view.progressTintList = ColorStateList.valueOf(color)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后还有一个功能，是根据不同的popularity显示不同的图片，可以把它当做课后作业，参考答案<a href=\"https://codelabs.developers.google.com/codelabs/android-databinding/#9\" target=\"_blank\" rel=\"noopener\">在这里</a>。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-databinding\" target=\"_blank\" rel=\"noopener\">https://codelabs.developers.google.com/codelabs/android-databinding</a></li>\n</ul>\n","categories":[],"tags":["Jetpack","Kotlin"]},{"title":"一文带你读懂compileSdkVersion、minSdkVersion与targetSdkVersion","url":"https://lilei.pro/2020/03/16/Android-SDK-versions/","content":"<blockquote>\n<ul>\n<li>Thanks for saving me. - Don’t waster it. Don’t waste your life.</li>\n</ul>\n</blockquote>\n<h1 id=\"全文思维导图\"><a href=\"#全文思维导图\" class=\"headerlink\" title=\"全文思维导图\"></a>全文思维导图</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200306_android_sdk_versions/几种SdkVersion.png\" alt=\"结构脉络\" title=\"\">\n                </div>\n                <div class=\"image-caption\">结构脉络</div>\n            </figure>\n<h1 id=\"问题产生的背景\"><a href=\"#问题产生的背景\" class=\"headerlink\" title=\"问题产生的背景\"></a>问题产生的背景</h1><p>Android 是一个不断更新演进的系统，犹记得自己最初一部手机是在百脑汇购买的Samsung I9001，Android2.3系统 —— GINGERBREAD，现在几乎听不到这个词了。</p>\n<p>在版本迭代的过程中，Google会不断引入新的接口、并且为App增加新的限制。一方面是由于硬件和软件技术更新，为用户&amp;开发者提供了更强大的能力，比如陀螺仪、人脸识别等；另一方面是不断演进和强化的安全隐私需求。</p>\n<p>对于开发者而言，自然希望自己的App的受众范围越大越好，不仅是当前市面上已有的系统版本，甚至对于未来将要推出的版本也一并可以兼容。由此便引出了以下三个问题，这三个问题是开发者必须解决的，如何解决呢？借助Google提供的能力来完成。</p>\n<ol>\n<li>开发者写的代码是基于哪个版本的API —— 对应的是compileSdkVersion</li>\n<li>开发者提供的apk最低可以运行在什么版本的系统 —— 对应的是minSdkVersion</li>\n<li>开发者提供的apk是以哪个系统版本作为目标来开发的 —— 对应的是targetSdkVersion</li>\n</ol>\n<h1 id=\"解决系统版本适配和限制的问题\"><a href=\"#解决系统版本适配和限制的问题\" class=\"headerlink\" title=\"解决系统版本适配和限制的问题\"></a>解决系统版本适配和限制的问题</h1><p>接下来我们逐个分析以上三个需求。</p>\n<h2 id=\"开发者写的代码是基于哪个版本的API：compileSdkVersion\"><a href=\"#开发者写的代码是基于哪个版本的API：compileSdkVersion\" class=\"headerlink\" title=\"开发者写的代码是基于哪个版本的API：compileSdkVersion\"></a>开发者写的代码是基于哪个版本的API：compileSdkVersion</h2><p>首先作为开发者，在编写代码时一定会调用系统API，而不同系统版本提供的API是有区别的，比如有的接口在某一版本之前一直是<code>private</code>的，直到某一版本时被开发成<code>public</code>。开发者如何告诉编译器自己写的代码是基于哪个版本呢？这时就要用到<code>compileSdkVersion</code>了。</p>\n<p>使用compileSdkVersion，最直接的目的是在编译过程中使用指定版本的SDK进行编译，在此之前，在编写代码的时候，如果调用了高于compileSdkVersion的API，编译器会给出出错提示。需要注意的是compileSdkVersion只存在于编译前的阶段，在编译的生成物apk里是看不到任何与其相关信息的。</p>\n<p>另一个限制是，compileSdkVersion需要与Support Library Version首位匹配。比如你用的Support Library是<code>23.1.1</code>版本的，那么compileSdkVersion一定要是<code>23</code>。</p>\n<p>对compileSdkVersion的使用建议是，总使用当前最新的compileSdkVersion，一方面可以调用最新的系统接口，防止未来某一时刻老接口被废弃后不得不修改代码，变被动为主动。另一方面能够享受到最新SDK带来的编译速度提升。</p>\n<h2 id=\"开发者提供的apk最低可以运行在什么版本的系统：minSdkVersion\"><a href=\"#开发者提供的apk最低可以运行在什么版本的系统：minSdkVersion\" class=\"headerlink\" title=\"开发者提供的apk最低可以运行在什么版本的系统：minSdkVersion\"></a>开发者提供的apk最低可以运行在什么版本的系统：minSdkVersion</h2><p>“能够运行在市面上所有的系统版本上”是开发者一个美好的愿望，但实际上，随着Google不断推陈出新，老版本在市场上的占有量越来越小。可以参考Google的<a href=\"https://developer.android.com/about/dashboards/index.html\" target=\"_blank\" rel=\"noopener\">Dashboard</a>，它统计的规则是一周内访问Google Play的系统版本分布，可以看到4.4及更早版本加起来已经不到10%。</p>\n<p>当市面上老版本占有量趋近于无的时候，我们就不必为适配老版本写专门的代码了，这样能够减少适配工作，从而把开发者宝贵的精力投入到更有价值的新功能实现上。</p>\n<p>在项目中我们用minSdkVersion来说明自己的app最低可以运行在什么版本的系统上。在Google Play、vivo应用商店、游戏中心等应用分发系统中会检测本机版本，若低于应用声明的minSdkVersion就会提示用户，甚至直接拒绝安装，因为即使装上也无法使用。</p>\n<p>在边写代码过程中，你可以使用任何不低于compileSdkVersion的API，但是当你使用的API高于minSdkVersion时，就必须在代码里显示地进行版本判断，否则编译器/Lint工具会提示你。</p>\n<p>另一个限制是，主工程的minSdkVerison不低于其所有依赖库的版本。举例说明：如果项目里同时使用了如下依赖</p>\n<ol>\n<li>support(min=4)</li>\n<li>glide(min=7)</li>\n<li>google play(min=9)</li>\n</ol>\n<p>那么主工程的minSdkVersion就应当为9。该限制可以违背，需要人为保证安全，设置方法为在AndroidManifest里声明tools:overrideLibrary。这样做是有风险的，还是以上例说明，你不能在4的系统版本上调用glide接口，否则一定会报错。必须在代码逻辑里面保证这一点。</p>\n<p>对minSdkVersion的使用建议是，开发过程中若使用到了高于minSdkVersion的API，一定要进设备版本判断；其次在声明这个属性时，参考你应用的目标用户群体系统版本分布，这是一个权衡的过程，你希望应用的覆盖面更广，还是应用的特性更新。</p>\n<h2 id=\"开发者提供的apk是以哪个系统版本作为目标来开发的：targetSdkVersion\"><a href=\"#开发者提供的apk是以哪个系统版本作为目标来开发的：targetSdkVersion\" class=\"headerlink\" title=\"开发者提供的apk是以哪个系统版本作为目标来开发的：targetSdkVersion\"></a>开发者提供的apk是以哪个系统版本作为目标来开发的：targetSdkVersion</h2><p>到了本文要介绍的三个<code>SdkVersion</code>中最有趣的部分——targetSdkVersion。考虑这样一种需求，开发者基于5.0的API开发（即compileSdkVersion=5.0），当app发布时候，Google已经发布了Android 6.0，此时当然希望原App不需要任何改动就可以运行在6.0系统的手机上，通常是Google在6.0的SDK里做了这个兼容。</p>\n<p>拿6.0（API=23）的权限限制举例，Google希望在6.0开始控制App滥用权限的情况，列出了一些必须动态申请的敏感权限。这对手机用户而言是百利而无一害的事，而对开发者而言，如果不能及时修改代码，就会面临App不可用甚至无法上架Google Play的情况下。假如你作为一名应用开发者，日常有1000w的活跃用户，而由于手机系统升级，这1000w用户无法使用之前的App了；而你又恰好在度假中，无法及时修改更新，这将是一个灾难。</p>\n<p>针对上面的具体例子，可以通过在gradle文件里声明<code>targetSdkVersion=21</code>来告诉操作系统，App的代码是面向Android 5.0系统编写的，没有考虑动态权限的问题。这样的APK即使被安装在系统版本为6.0的手机上，也会依照之前的行为来运行，即在安装时申请所有必须权限，而非运行时动态申请。</p>\n<blockquote>\n<p>AOSP里有很多<code>getApplicationInfo().targetSdkVersion &lt; Buid.XXXX</code>样式的代码，就是用来判断<code>targetSdkVersion</code>的</p>\n</blockquote>\n<p>使用targetSdkVersion还有一个好处，你可以使用更高版本的API，且不需要关注行为变更。</p>\n<p>也许你会觉得，作为一名顽固恋旧的开发者，我就不要升级targetSdkVersion，Google好像也拿我没有办法。事实上并非如此，如果targetSdkVersion过低的话，Google、手机厂商都有权利拒绝上架你的App。</p>\n<p>对开发者选择targetSdkVersion的建议是，尽量保持最新的版本，以防应用市场把你的应用下架。升级targetSdkVersion后一定要进行针对性的测试。</p>\n<h1 id=\"学以致用\"><a href=\"#学以致用\" class=\"headerlink\" title=\"学以致用\"></a>学以致用</h1><p>了解这几个版本的含义之后，就要看看如何应用了。通常我们的项目是用gradle管理依赖的，我们需要在根project中声明这几个版本。</p>\n<h2 id=\"Gradle配置\"><a href=\"#Gradle配置\" class=\"headerlink\" title=\"Gradle配置\"></a>Gradle配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion 23</span><br><span class=\"line\">    buildToolsVersion 23.1.1</span><br><span class=\"line\">    // ... other config</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        minSdkVersion 20</span><br><span class=\"line\">        targetSdkVersion 28</span><br><span class=\"line\">        // ... other config</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>android</code>标签下的配置只会在编译期间生效，<code>defaultConfig</code>标签下的设置会打入最终的Apk中。</p>\n<h2 id=\"版本高低关系\"><a href=\"#版本高低关系\" class=\"headerlink\" title=\"版本高低关系\"></a>版本高低关系</h2><p>通常的版本关系是<strong>min&lt;=target&lt;=compile</strong>，最理想的状态则是<strong>min&lt;=target==compile</strong>，其中compile时刻保持最新。</p>\n<h1 id=\"targetSdkVersion适配指南\"><a href=\"#targetSdkVersion适配指南\" class=\"headerlink\" title=\"targetSdkVersion适配指南\"></a>targetSdkVersion适配指南</h1><p>从Android 6.0开始，每一个版本升级，<a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk\" target=\"_blank\" rel=\"noopener\">Google都会发布适配指南</a>，将其整理成思维导图。</p>\n<h2 id=\"适配思维导图大纲\"><a href=\"#适配思维导图大纲\" class=\"headerlink\" title=\"适配思维导图大纲\"></a>适配思维导图大纲</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200306_android_sdk_versions/targetAPI适配.png\" alt=\"targetSdkVersion适配\" title=\"\">\n                </div>\n                <div class=\"image-caption\">targetSdkVersion适配</div>\n            </figure>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://medium.com/androiddevelopers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd\" target=\"_blank\" rel=\"noopener\">Picking your compileSdkVersion, minSdkVersion, targetSdkVersion</a></li>\n<li><a href=\"https://www.race604.com/android-targetsdkversion/\" target=\"_blank\" rel=\"noopener\">targetSdkVersion原理</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels\" target=\"_blank\" rel=\"noopener\">API与英文名、系统版本对照表</a></li>\n<li><a href=\"https://developer.android.com/about/dashboards\" target=\"_blank\" rel=\"noopener\">dashboards</a></li>\n<li><a href=\"https://developer.android.com/distribute/best-practices/develop/target-sdk\" target=\"_blank\" rel=\"noopener\">Google target API 版本升级说明</a></li>\n</ul>\n","categories":[],"tags":["Android"]},{"title":"Kotlin让接口写法如此简单","url":"https://lilei.pro/2020/03/16/Kotlin-made-Interface-so-much-better/","content":"<blockquote>\n<p>这是对Medium上<a href=\"https://proandroiddev.com/kotlin-made-interface-so-much-better-bbeaa59abdd7\" target=\"_blank\" rel=\"noopener\">Kotlin made Interface so much better</a>一文的翻译，内容偏基础。</p>\n</blockquote>\n<p>在Java中，“接口”一开始是作为一项新的编程特性被提出的。它描述了一种“可以是”关系，而非“一定是”。这也使得它可以用于多重继承（例如，某物可以是许多特性的集合，但只能是某个事物。译者注：猫可以同时具有喵喵叫和会爬树两种属性，但猫只能是猫，不可能是狗）。</p>\n<p>然而，正如我们所见到的，直到Java7（Java7是Android工程师主要的开发语言。译者注：原文写于2018年10月），接口仍然有很多缺点，这些缺点使得接口变得很难用，以至于一些人宁愿用回抽象类。</p>\n<p>接着我们迎来了Kotlin，我将在本文为大家展示Kotlin在继承关系中的强大能力。</p>\n<h1 id=\"Kotlin扩展接口能力\"><a href=\"#Kotlin扩展接口能力\" class=\"headerlink\" title=\"Kotlin扩展接口能力\"></a>Kotlin扩展接口能力</h1><h2 id=\"在Java中\"><a href=\"#在Java中\" class=\"headerlink\" title=\"在Java中\"></a>在Java中</h2><p>在Java7中，接口自己不能包含方法实现，因此对于接口实现类而言，必须实现接口中的所有方法。</p>\n<p>这是一个麻烦，它削弱了接口的可扩展能力。</p>\n<p>假设我们有如下的<code>Movable</code>接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>突然我们发现除了统计腿的数量，还需要统计翅膀的数量。所以我们增加了<code>wingsCount()</code>方法。</p>\n<p>对于所有实现了<code>Movable</code>接口的类，这是一个坏消息，因为它们必须修改代码以适配接口变更。例如，<code>Horse</code>必须修改如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">wingsCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> <span class=\"keyword\">implements</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">wingsCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在Kotlin中\"><a href=\"#在Kotlin中\" class=\"headerlink\" title=\"在Kotlin中\"></a>在Kotlin中</h2><p>一开始我们有</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后我们可以轻松地扩展它</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">wingsCount</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125; <span class=\"comment\">// 注意这里可以为方法提供默认实现</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> = <span class=\"number\">4</span> <span class=\"comment\">// 实现类不需进行任何变动</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>甚至可以做的更加复杂，而<code>Horse</code>类不需要因此进行任何改动！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">wingsCount</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canFly</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span> &#123; <span class=\"keyword\">return</span> wingsCount() &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span> &#123; <span class=\"keyword\">return</span> legsCount() &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Kotlin使接口真正地“可覆写”\"><a href=\"#Kotlin使接口真正地“可覆写”\" class=\"headerlink\" title=\"Kotlin使接口真正地“可覆写”\"></a>Kotlin使接口真正地“可覆写”</h1><p>剑桥大辞典里对于“override”的定义是</p>\n<blockquote>\n<p>to decide against or refuse to accept a previous decision, an order, a person, etc.</p>\n</blockquote>\n<p>在Java世界中，接口没有覆写任何东西。</p>\n<p>但是在Kotlin世界里，见如下例子</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">wingsCount</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Int</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canFly</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Boolean</span> &#123; <span class=\"keyword\">return</span> wingsCount() &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Boolean</span> &#123; <span class=\"keyword\">return</span> legsCount() &gt; <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isSick = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> = <span class=\"number\">4</span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> : <span class=\"built_in\">Boolean</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSick) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.canWalk()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们让<code>isSick = true</code>，那么无论这个生物有多少条腿，<code>canWalk()</code>方法都会返回<code>false</code>。嗯，真正意义上的“覆写”。</p>\n<h1 id=\"Kotlin使接口更像一个对象\"><a href=\"#Kotlin使接口更像一个对象\" class=\"headerlink\" title=\"Kotlin使接口更像一个对象\"></a>Kotlin使接口更像一个对象</h1><p>在Java世界（我认为包括Java8和9），接口并不允许包含常量之外的任何属性。</p>\n<p>充其量我们可以声明一个变量的存取方法，例如<code>legsCount()</code>。</p>\n<h2 id=\"在Kotlin中-1\"><a href=\"#在Kotlin中-1\" class=\"headerlink\" title=\"在Kotlin中\"></a>在Kotlin中</h2><p>Kotlin允许接口中包含属性。</p>\n<p>比起这种写法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount() &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">legsCount</span><span class=\"params\">()</span></span> = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以将其简化成</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount : <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Boolean</span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在接口中使用属性有一些局限，它不可以有backfield属性，意味着它不可变。所以它仍然是无状态的。</p>\n</blockquote>\n<blockquote>\n<p>此外，不允许在接口中为属性赋初值。</p>\n</blockquote>\n<h1 id=\"Kotlin使接口更好地为组合服务\"><a href=\"#Kotlin使接口更好地为组合服务\" class=\"headerlink\" title=\"Kotlin使接口更好地为组合服务\"></a>Kotlin使接口更好地为组合服务</h1><p>你也许听说过“组合胜过继承”原则。Kotlin让它变得更加简单。</p>\n<p>假设你有<code>Horse</code>和<code>Dog</code>。它们都是有4条腿的动物。</p>\n<p>一种写法如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount : <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法太繁琐，具体表现在如下地方</p>\n<ul>\n<li>在每一个实现类里都重复<code>override val legsCount = 4</code>的代码段</li>\n<li>如果我们有更多要覆写的方法，或者更多4条腿的类，我们必须重复做一样的事</li>\n<li>未来某一天，如果我们必须把<code>4</code>改成<code>four</code>，或者增加更多功能……</li>\n</ul>\n<p>这将是一个灾难。太难扩展了。</p>\n<h2 id=\"也许我们可以利用类的继承关系？\"><a href=\"#也许我们可以利用类的继承关系？\" class=\"headerlink\" title=\"也许我们可以利用类的继承关系？\"></a>也许我们可以利用类的继承关系？</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourLegged</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">FourLegged</span></span>()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"type\">FourLegged</span></span>()</span><br></pre></td></tr></table></figure>\n<p>但是这种写法违背了“组合胜于继承”原则。<code>Horse</code>和<code>Dog</code>不仅仅是<code>FourLegged</code>，也可以是其他什么东西，这种写法让他们不可扩展成为其他类型（例如：<code>Pet</code>）。</p>\n<p>这是不可扩展的☹️</p>\n<h2 id=\"让我们用组合代替继承（传统写法）\"><a href=\"#让我们用组合代替继承（传统写法）\" class=\"headerlink\" title=\"让我们用组合代替继承（传统写法）\"></a>让我们用组合代替继承（传统写法）</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">object</span> FourLegged : Movable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> movable = FourLegged</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = movable.legsCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"type\">Movable &#123;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> movable = FourLegged</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = movable.legsCount</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不知道你怎么想，我并不喜欢这种写法，所以让我们稍事改动…</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">object</span> FourLegged : Movable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovableImpl</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> movable: Movable) : Movable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = movable.legsCount</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">MovableImpl</span></span>(FourLegged)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"type\">MovableImpl</span></span>(FourLegged)</span><br></pre></td></tr></table></figure>\n<p>现在这种写法要好一些，因为它的扩展性更好，假设未来我们同时有<code>FourLegged</code>和<code>TwoLegged</code>，我们可以很方便地替换它们。</p>\n<p>但是我仍然不喜欢这种写法，因为我不得不继承自类<code>MovableImpl</code>。所幸我们有Kotlin，我们看下Kotlin如何处理此类问题…</p>\n<h2 id=\"Kotlin的方式：使用By代理简化组合写法\"><a href=\"#Kotlin的方式：使用By代理简化组合写法\" class=\"headerlink\" title=\"Kotlin的方式：使用By代理简化组合写法\"></a>Kotlin的方式：使用By代理简化组合写法</h2><p>在Kotlin的接口写法中，我们可以使用<code>By</code>关键字轻松实现代理模式。来看看</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> FourLegged : Movable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Horse</span> : <span class=\"type\">Movable by FourLegged</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> : <span class=\"type\">Movable by FourLegged</span></span></span><br></pre></td></tr></table></figure>\n<p>太棒了！🤩。相信你也看得出这种写法的好处。</p>\n<p>如果你想对“组合胜于继承”有更深入的了解，可以阅读以下这篇文章：</p>\n<p><a href=\"https://proandroiddev.com/composition-over-inheritance-in-kotlin-way-fe341159bf1c\" target=\"_blank\" rel=\"noopener\">Composition over inheritance in Kotlin way</a></p>\n<h1 id=\"Kotlin使接口更好地实现多重继承\"><a href=\"#Kotlin使接口更好地实现多重继承\" class=\"headerlink\" title=\"Kotlin使接口更好地实现多重继承\"></a>Kotlin使接口更好地实现多重继承</h1><p>在Java7中使用多重继承是一件痛苦的事，因为我们不得不实现所有的接口，并覆写其中全部方法。</p>\n<blockquote>\n<p>译者注：原文这里用的是<strong>inherit from all interfaces</strong>，可见原作者对“继承”和“实现”并不是严格区分。实际上在Java中不可以“多重继承”（对抽象类而言），而应当是“多重实现”（对接口而言）。</p>\n</blockquote>\n<p>即使这样做，也无法从父类中继承任何属性。（当然了，Java的接口里是不允许有非常量属性的）</p>\n<h2 id=\"在Kotlin中-2\"><a href=\"#在Kotlin中-2\" class=\"headerlink\" title=\"在Kotlin中\"></a>在Kotlin中</h2><p>借助于By代理，我们来看看下面这个例子</p>\n<p>假设我们的动物接口有两个属性</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Movable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">canWalk</span><span class=\"params\">()</span></span> = legsCount &gt; <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Pet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> name: String</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">liveInhouse</span><span class=\"params\">()</span></span> = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>让我们提供一些更具体的内容（也就是接口实现），以便于我们可以使新创建的类使用这些具体内容（代理）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> FourLegged : Movable &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount = <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InHousePet</span></span>(<span class=\"keyword\">override</span> <span class=\"keyword\">val</span> name: String) : Pet &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">liveInHouse</span><span class=\"params\">()</span></span> = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们可以创建<code>Cat</code>类了，它是一个<code>FourLegged</code>动物，并且也是<code>InHousePet</code>。所以为了同时继承这两点，我们采用如下写法</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CatBy</span></span>(name: String) :</span><br><span class=\"line\">    Pet <span class=\"keyword\">by</span> InHousePet(name), Movable <span class=\"keyword\">by</span> FourLegged</span><br></pre></td></tr></table></figure>\n<p>只要你愿意，可以增加更多的属性</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classCatBy(name: String, trainer: Trainer):</span><br><span class=\"line\">        Pet <span class=\"keyword\">by</span> InHousePet(name),</span><br><span class=\"line\">        Movable <span class=\"keyword\">by</span> FourLegged,</span><br><span class=\"line\">        Trainable <span class=\"keyword\">by</span> Professional(trainer)</span><br></pre></td></tr></table></figure>\n<p>或者，你也可以覆写其中的值，只要你愿意！</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classCatBy(name: String, trainer: Trainer):</span><br><span class=\"line\">        Pet <span class=\"keyword\">by</span> InHousePet(name),</span><br><span class=\"line\">        Movable <span class=\"keyword\">by</span> FourLegged,</span><br><span class=\"line\">        Trainable <span class=\"keyword\">by</span> Professional(trainer) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> legsCount: <span class=\"built_in\">Int</span></span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">liveInHouse</span><span class=\"params\">()</span></span> = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>感觉自己像是在写C++🤪</p>\n<hr>\n<h1 id=\"译后感\"><a href=\"#译后感\" class=\"headerlink\" title=\"译后感\"></a>译后感</h1><p>在Kotlin的接口中可以声明只读属性，其实就相当于Java的<code>getXXX</code>方法，只不过通过Kotlin一贯的<code>get/set</code>省略写法进行了简化。</p>\n<p><code>by</code>关键字用于代理，是Kotlin里面中阶的知识，我们可以为一个接口声明一个代理对象，从而分散目标类的职责。</p>\n<p>在其它方面，Kotlin中的接口写法相比于Java并没有本质上的改动。</p>\n","categories":[],"tags":["Kotlin"]},{"title":"本周知识积累[2020/03] ViewPager使用指南；Kotlin单例写法；MediaPlayer状态机","url":"https://lilei.pro/2020/03/03/weekly-2020-03-01/","content":"<blockquote>\n<p>我们一路奋斗，不是为了改变世界，而是为了不被世界改变。</p>\n</blockquote>\n<h2 id=\"ViewPager使用指南\"><a href=\"#ViewPager使用指南\" class=\"headerlink\" title=\"ViewPager使用指南\"></a>ViewPager使用指南</h2><p><a href=\"https://abhiandroid.com/materialdesign/viewpager\" target=\"_blank\" rel=\"noopener\">ViewPager</a> 是Android SDK提供的用于实现左右滑动切换页面效果的控件，接入非常简单，可以实现如下图的效果。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200303_weekly/ViewPager-In-Android.gif\" alt=\"ViewPager\" title=\"\">\n                </div>\n                <div class=\"image-caption\">ViewPager</div>\n            </figure>\n<p>自顶向下地看，一个完整的包含ViewPager的页面由以下几个对象构成。</p>\n<ul>\n<li>Host：容器页面，可以是Activity，或者Fragment</li>\n<li>ViewPager：关联到页面上的一个View，可以左右滑动切换子页面</li>\n<li>Adapter：ViewPager内部用以获取每个子页面的适配器，参考RecyclerView/ListView的Adapter</li>\n<li>SubFragment：ViewPager内嵌的子页面</li>\n</ul>\n<p>让我们逐个分析（Host就是一个普通页面，略过不提，SubFragment也一样，与常见写法没有区别，同样略过）</p>\n<h3 id=\"ViewPager\"><a href=\"#ViewPager\" class=\"headerlink\" title=\"ViewPager\"></a>ViewPager</h3><p>相当于一个ViewGroup容器，使用的时候，首先在xml布局里声明<code>android.support.v4.view.ViewPager</code>，接着在代码里通过<code>findViewById</code>获取到这个ViewPager，并为其设置Adapter。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mViewPager = findViewById(R.id.view_pager)</span><br><span class=\"line\"><span class=\"comment\">// 这里需要传入一个FragmentManager，可见ViewPager内部是以Fragment作为每个子页面呈现方式的</span></span><br><span class=\"line\">mViewPager.adapter = YourAdapterClass(supportFragmentManager)</span><br></pre></td></tr></table></figure>\n<p>在使用ViewPager时，往往需要对当前选中页面的行为进行监听，比如当用户左右滑动切换页面时，对应地改变标题栏的文字，对应的是<code>addOnPageChangeListener</code>接口，注意这里是<code>add</code>并非<code>set</code>，意味着不要对同一个对象多次调用，否则会多次触发。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewPager.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addOnPageChangeListener</span><span class=\"params\">(@NonNull OnPageChangeListener listener)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mOnPageChangeListeners == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mOnPageChangeListeners = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mOnPageChangeListeners.add(listener);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnPageChangeListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 页面发生位移时调用，既包含用户手指拖动，也包含页面自身的动画移动。参数是位移的百分比和像素值，可以用来进行一些计算</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 页面被选中时调用，动画也许并没有结束，参数是被选中页面的index</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 页面状态发生变化时调用，不特指哪一个页面，而是所有页面。</span></span><br><span class=\"line\">    <span class=\"comment\">// 有三种状态：IDLE（页面静止，无动作）、DRAGGING（用户拖动中）、SETTING（用户已放手，页面归位中）</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接口还是比较简单的，同时，如果我们只关注三个回调中的一个（往往是<code>onPageSelected</code>），可以用另一个内部类来创建监听对象，以减少样板代码，<code>SimpleOnPageChangeListener</code>同样位于<code>ViewPager.java</code>中。</p>\n<p>这是很好的一种编程思想，对于包含多个回调函数的监听接口，增加一个内部类，为每个回调函数创建一个空函数，在使用时只覆写业务需要的接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleOnPageChangeListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnPageChangeListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> position, <span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This space for rent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageSelected</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This space for rent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageScrollStateChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> state)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This space for rent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Hint</strong>：如果要在<code>onPageSelected</code>回调里获取相应的SubFragment，不要使用<code>Adapter.getItem</code>，它会返回一个新创建的Fragment。应当调用的方法是<code>Adapter.instantiateItem</code>，这会返回已创建的Fragment，参考Stack Overflow上面的<a href=\"https://stackoverflow.com/questions/17685787/access-a-method-of-a-fragment-from-the-viewpager-activity\" target=\"_blank\" rel=\"noopener\">这个问题</a>。</p>\n<h3 id=\"Adapter\"><a href=\"#Adapter\" class=\"headerlink\" title=\"Adapter\"></a>Adapter</h3><p>有两种Adapter，FragmentPagerAdapter和FragmentStatePagerAdapter，简单地说，如果你的ViewPager只包含3到4个固定的页面，则使用FragmentPagerAdapter；如果有很多个页面，则使用FragmentStatePagerAdapter。</p>\n<p>这里以FragmentStatePagerAdapter为例，介绍Adapter的写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FragmentStatePagerAdapter.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentStatePagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...some code...</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里创建Fragment并返回</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...some code...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PagerAdapter.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PagerAdapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...some code...</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回Fragment总个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// ...some code...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见最简单的FragmentStatePagerAdapter只需要实现<code>getItem</code>和<code>getCount</code>两个方法。值得一提的是，如果需要在创建SubFragment时传递一些参数，用以下写法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Fragment时传入Arg_0</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getItem</span><span class=\"params\">(position: <span class=\"type\">Int</span>)</span></span>: Fragment &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> frag = YourFragmentClass()</span><br><span class=\"line\">    frag.arguments = Bundle().apply &#123;</span><br><span class=\"line\">        putString(ARG_0, some_value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ... some code ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在Fragment的onViewCreated里读取参数</span></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    arguments?.takeIf &#123; it.containsKey(ARG_0) &#125;?.apply &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> someValue = getString(ARG_0)</span><br><span class=\"line\">        <span class=\"comment\">// ... some code ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Activity-传递大数据\"><a href=\"#Activity-传递大数据\" class=\"headerlink\" title=\"- Activity 传递大数据\"></a>- Activity 传递大数据</h2><p>在使用Intent进行Activity之间的跳转时，系统提供了<code>putExtra</code>用于参数传递，如下例。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// caller activity</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> intent = Intent(<span class=\"keyword\">this</span>, TheNextActivity::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>)</span></span><br><span class=\"line\">i.putExtra(ARG_0, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// called activity</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> param = intent.extras?.getInt(ARG_0)</span><br></pre></td></tr></table></figure>\n<p>如果传递的参数不是基础类型，而是列表，则使用<code>putExtra(String, Parcelable)</code>和<code>getParcelableExtra(String)</code>做相应的存取。</p>\n<p>然而，实际上很多人并不知道，通过Intent传递的参数，是有大小限制的。当我们传递占内存非常大的数据，如1000个元素的列表、Bitmap等等时，稍不注意，就会出现<code>TransactionTooLargeException</code>，从异常名就可以看出，这是由于参数过大引起的。究其原因，是因为ActivityManagerService内部使用了Binder通信机制，其事务缓冲区限制了传输数据的大小。Binder事务缓冲区的大小为1MB，而且，这1MB还不是独享的，意味着有时尽管传递的数据没有超出1MB，也会触发异常。</p>\n<p>那么，对于需要传递大量数据的场景，有哪些方案？</p>\n<h3 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Singleton &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> items: List&lt;Foo&gt;? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> largeImg: Bitmap? = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不需要过多解释，注意不要出现内存泄漏，以及单例无法在进程之间共享。</p>\n<h3 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h3><p>利用网络、数据库、文件、SharedPreference等方式，将数据持久化保存，随后在新页面读取。优点是保存后可以跨进程甚至跨应用、跨平台使用，缺点则是效率低下，读写时没有控制好事务会发生异常。</p>\n<h3 id=\"使用EventBus\"><a href=\"#使用EventBus\" class=\"headerlink\" title=\"使用EventBus\"></a>使用EventBus</h3><p>在《阿里巴巴Android开发手册》中写到：“Activity 间的数据通信，对于数据量比较大的，避免使用 Intent + Parcelable 的方式，可以考虑 EventBus 等替代方案，以免造成 TransactionTooLargeException。”</p>\n<p>由于EventBus滥用会导致代码结构混乱，因此个人不推荐。</p>\n<p><strong>参考资料</strong>：<a href=\"https://juejin.im/post/5d8de547e51d45781f73bacc\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d8de547e51d45781f73bacc</a></p>\n<h2 id=\"Kotlin单例写法\"><a href=\"#Kotlin单例写法\" class=\"headerlink\" title=\"- Kotlin单例写法\"></a>- Kotlin单例写法</h2><p>单例模式是日常开发中最常使用到的设计模式，一个良好的单例模式实现应当兼顾代码性能与调用简便两个方面。在Java中我们通过“双锁”或者“静态内部类”来实现单例模式，相比之下我更喜欢静态内部类的写法，《Effective Java》一书的作者也是这样认为的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 样例代码，来自 wiki：https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Something</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Something</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LazyHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Something INSTANCE = <span class=\"keyword\">new</span> Something();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Something <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LazyHolder.INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无参数写法\"><a href=\"#无参数写法\" class=\"headerlink\" title=\"无参数写法\"></a>无参数写法</h3><p>今天主要讨论Kotlin的单例写法，在Kotlin中，单例被上升到了语言层面，关键字<code>object</code>可以用来声明一个不需要参数的单例对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> SomeSingleton &#123;</span><br><span class=\"line\">    init &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里添加初始化代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>借助于JVM加载类的过程，它编译后的等效Java代码也是线程安全的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上述Kotlin代码的Java等价版本</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSingleton</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SomeSingleton INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SomeSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      INSTANCE = (SomeSingleton)<span class=\"keyword\">this</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"init complete\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">new</span> SomeSingleton();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"有参数写法\"><a href=\"#有参数写法\" class=\"headerlink\" title=\"有参数写法\"></a>有参数写法</h3><p>有时我们需要在单例初始化时传入一些参数，比如<code>Glide.with(Context)</code>，此时<code>object</code>关键字就捉襟见肘了。在<a href=\"https://stackoverflow.com/questions/40398072/singleton-with-parameter-in-kotlin\" target=\"_blank\" rel=\"noopener\">Stack Overflow这个问题</a>下面可以学习到，借助伴生对象的“伪静态方法”，能达到传入初始化参数的目的。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UsersDatabase</span> : <span class=\"type\">RoomDatabase</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Volatile</span> <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> INSTANCE: UsersDatabase? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: UsersDatabase =</span><br><span class=\"line\">            INSTANCE ?: synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                INSTANCE ?: buildDatabase(context).also &#123; INSTANCE = it &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">buildDatabase</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span> =</span><br><span class=\"line\">            Room.databaseBuilder(context.applicationContext,</span><br><span class=\"line\">                    UsersDatabase::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>, <span class=\"type\">\"Sample.db\")</span></span></span><br><span class=\"line\">                    .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上这种写法，需要关注以下几点。</p>\n<ol>\n<li>单例成员<code>INSTANCE</code>需要有<code>@Volatile</code>声明，以保证对象唯一</li>\n<li><code>synchronized</code>加锁防止重复初始化</li>\n<li>借助<code>also</code>返回原对象</li>\n</ol>\n<p>如果代码里只有一个单例类要实现，上面这种写法就足够了。但是，若有很多个单例类，这种写法产生的样板代码可不少。是不是可以把样板代码逻辑抽出，一次书写，多处调用？答案是肯定的。</p>\n<h3 id=\"有参数写法，Write-Once，Use-Many\"><a href=\"#有参数写法，Write-Once，Use-Many\" class=\"headerlink\" title=\"有参数写法，Write Once，Use Many\"></a>有参数写法，Write Once，Use Many</h3><p>首先区分上述实现方式里，可变的部分与不变的部分，思路是把不变的部分抽象成流程，把可变的部分提取作为参数。</p>\n<p>不变的部分是检查、维护、调用构建函数，将其抽出一个类，这个类一定是用于被继承，因此我们将其声明为<code>open</code>，通过lambda表达式参数<code>constructor</code>，开放出构建对象的能力</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SingletonHolder.kt</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingletonHolder</span>&lt;<span class=\"type\">out T, in A</span>&gt;</span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> <span class=\"keyword\">constructor</span>: (A) -&gt; T) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Volatile</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> instance: T? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">(arg: <span class=\"type\">A</span>)</span></span>: T &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">            instance != <span class=\"literal\">null</span> -&gt; instance!!</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"literal\">null</span>) instance = <span class=\"keyword\">constructor</span>(arg)</span><br><span class=\"line\">                instance!!</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，有一个类需要增加单例实现，并且其构造函数需要一个<code>Context</code>类型的参数，我们只需要在其内部声明一个伴生对象，继承自<code>SingletonHolder&lt;MyManager, Context&gt;</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MyManager.kt</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyManager</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>(context: Context) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> : SingletonHolder&lt;MyManager, Context&gt;(::MyManager)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对单例的调用者而言，写法与Java无异。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyManager.getInstance(context).doSomething()</span><br></pre></td></tr></table></figure>\n<p>怎么样，是不是与Glide的<code>Glide.with(context).load(img_url)</code>完全一致？Bravo！</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@BladeCoder/kotlin-singletons-with-argument-194ef06edd9e\" target=\"_blank\" rel=\"noopener\">https://medium.com/@BladeCoder/kotlin-singletons-with-argument-194ef06edd9e</a></li>\n<li><a href=\"https://stackoverflow.com/questions/40398072/singleton-with-parameter-in-kotlin\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/40398072/singleton-with-parameter-in-kotlin</a></li>\n</ul>\n<h2 id=\"Vimium的页面检索技巧\"><a href=\"#Vimium的页面检索技巧\" class=\"headerlink\" title=\"Vimium的页面检索技巧\"></a>Vimium的页面检索技巧</h2><p>在使用浏览器时，有时我们会打开很多个页面，此时如果想要在打开的页面里找到特定页面，往往需要从头翻到尾，十分之麻烦。Vimium考虑到了这一点，并为我们提供快捷键<code>T</code>解决。这个功能属于<strong>Vomnibar</strong>功能集，是Vimium提供的一组页面新建、搜索快捷键，一共有5个。</p>\n<ul>\n<li><code>o</code>，在当前Tab打开URL、书签或浏览历史</li>\n<li><code>O</code>，新建Tab打开URL、书签或浏览历史</li>\n<li><code>b</code>，在当前Tab打开书签</li>\n<li><code>B</code>，新建Tab打开书签</li>\n<li><code>T</code>，也就是刚刚介绍过的，在已打开的Tab中进行搜索</li>\n</ul>\n<p>（顺带提一下，Sublime的copy line快捷键是<code>Ctrl+Shift+D</code>，在写着一段时用到的。）</p>\n<h2 id=\"使用默认参数简化自定义View的构造函数\"><a href=\"#使用默认参数简化自定义View的构造函数\" class=\"headerlink\" title=\"使用默认参数简化自定义View的构造函数\"></a>使用默认参数简化自定义View的构造函数</h2><p>在编写自定义View的类时，如果自定义View继承自<code>android.view.View</code>，通常需要覆写多个构造函数，以支持View的多种构建方式。这种处理不仅麻烦，还带来大量样板代码，稀释了我们的代码质量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// View.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(context, attrs, defStyleAttr, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">View</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr, <span class=\"keyword\">int</span> defStyleRes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>联想到Kotlin函数的默认参数功能，是不是可以将其应用在这种场景中呢？答案当然是可以。结合<code>@JvmOverloads</code>注解和默认参数，写法如下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    context: Context,</span><br><span class=\"line\">    attrs: AttributSet? = <span class=\"literal\">null</span>,</span><br><span class=\"line\">    defStyle: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">    defStyleRes: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    ) : View(context, attrs, defStyle, defStyleRes) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// class body</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>在此基础上，借助<code>init{ ... }</code>代码块，可以执行自定义的初始化代码。</p>\n<p><strong>参考</strong>：<a href=\"https://stackoverflow.com/questions/20670828/how-to-create-constructor-of-custom-view-with-kotlin\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/20670828/how-to-create-constructor-of-custom-view-with-kotlin</a></p>\n<h2 id=\"MediaPlayer状态机\"><a href=\"#MediaPlayer状态机\" class=\"headerlink\" title=\"MediaPlayer状态机\"></a>MediaPlayer状态机</h2><p>MediaPlayer是Android SDK提供的音视频播放组件，尽管目前有更优秀的IJKPlayer、EXOPlayer等开源项目，MediaPlayer作为功能单一、接口清晰的播放器，有其值得学习的意义。一切故事，从一张状态机图片开始。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200303_weekly/mediaplayer_state_diagram.gif\" alt=\"状态机\" title=\"\">\n                </div>\n                <div class=\"image-caption\">状态机</div>\n            </figure>\n<p><strong>图例说明</strong>：<code>单箭头</code>表示同步调用，<code>双箭头</code>表示异步调用，双层椭圆（仅End）表示终结态。</p>\n<p>这张图乍一看像是一团乱麻，其实可以按照播放前、播放中、播放后的阶段进行区分。</p>\n<h3 id=\"播放前\"><a href=\"#播放前\" class=\"headerlink\" title=\"播放前\"></a>播放前</h3><ul>\n<li>以<code>Prepared</code>为界，之前的状态都可以认为是“播放前”</li>\n<li>通过<code>new</code>创建一个播放器，或者对已有播放器调用<code>reset</code>，均可以得到一个处于<code>Idle</code>状态的播放器。不过这两种方式有一个显著区别，即对<code>Idle</code>态播放器调用<code>getCurrentPosition()</code>, <code>getDuration()</code>, <code>getVideoHeight()</code>, <code>getVideoWidth()</code>, <code>setAudioAttributes()</code>, <code>setLooping()</code>, <code>setVolume()</code>, <code>pause()</code>, <code>start()</code>, <code>stop()</code>, <code>seekTo()</code>, <code>prepare()</code>, <code>prepareAsync()</code>方法时，如果是新构建的播放器，不会抛出任何一场，而如果是通过<code>reset</code>得到的<code>Idle</code>播放器，则会进入<code>OnErrorListener.onError()</code>回调</li>\n<li>播放器在开始播放前，必须进入<code>Prepared</code>态。有两种方法，分别是同步的<code>prepare()</code>和异步的<code>prepareAsync()</code>。同步方法的返回是很快的，几乎是瞬间。对于异步调用，可以通过<code>setOnPreparedListener()</code>设置监听</li>\n<li>当播放器处于<code>Prepared</code>态时，可以设置音量、屏幕常亮、循环播放等属性</li>\n</ul>\n<h3 id=\"播放中\"><a href=\"#播放中\" class=\"headerlink\" title=\"播放中\"></a>播放中</h3><ul>\n<li>播放过程可能因为各种原因发生异常，诸如不支持的音视频格式、受损的文件、分辨率过高、解码超市等等原因，或者是对于播放器调用了不属于其状态的方法。在这些错误发生时，会走到<code>OnErrorListener.onError()</code>回调中，因此在播放前设置监听<code>setOnErrorListener()</code>是非常重要的</li>\n<li>设置<code>onError</code>监听并不能避免播放器进入<code>Error</code>态，只是在进入时发出程序可以观测到的监听事件</li>\n<li>如果在错误的状态调用<code>prepare()</code>, <code>prepareAsync()</code>, <code>setDatasource()</code>，会导致<code>IllegalStateException</code></li>\n<li>基于上一条，在调用<code>setDatasource</code>以及它的众多重载方法时，必须捕获<code>IllegalArgumentException</code>和<code>IOException</code></li>\n<li>通过<code>start()</code>启动播放，通过<code>isPlaying()</code>判断当前是否处于播放中，可以在<code>start()</code>后继续调用<code>start()</code>，但这不会产生任何影响</li>\n<li>在开始播放后，可以通过<code>setOnBufferingUpdateListener()</code>监听视频缓冲进度</li>\n<li>对于播放中的视频，调用<code>pause()</code>进入<code>Paused</code>态，这是一个略微有延迟（seconds）的调用，意味着<code>isPlaying()</code>可能不会立即反映当前状态，反之亦然</li>\n<li>对于<code>Started</code>, <code>Paused</code>, <code>Prepared</code>, <code>PlaybackCompleted</code>态的播放器调用<code>stop()</code>，使其进入<code>Stopped</code>态；对于<code>Stopped</code>态的播放器，必须使其再次进入<code>Prepared</code>态后，方可用于播放</li>\n<li>与<code>start()</code>一样，多次调用<code>stop()</code>不会产生任何影响</li>\n<li>用<code>seekTo()</code>设置播放进度，这是一个异步方法，<code>OnSeekComplete.onSeekComplete()</code>用于监听；可以在<code>Prepared</code>, <code>Paused</code>, <code>PlaybackCompleted</code>多个态调用，且调用<code>seekTo()</code>后播放器仍保持原状态，同时改变当前帧；相应的，<code>getCurrentPosition()</code>可以返回当前的播放进度</li>\n</ul>\n<h3 id=\"播放后\"><a href=\"#播放后\" class=\"headerlink\" title=\"播放后\"></a>播放后</h3><ul>\n<li>一旦播放器不再使用，建议立即调用<code>release()</code>释放资源，此后播放器进入<code>End</code>态，且再也无法通过任何方法使其恢复</li>\n<li>如果设置了Looping，播放完成后会保持<code>Started</code>态，否则会进入<code>OnCompletionListener</code>回调，并进入<code>PlaybackCompleted</code>态</li>\n</ul>\n<h3 id=\"播放器的权限要求\"><a href=\"#播放器的权限要求\" class=\"headerlink\" title=\"播放器的权限要求\"></a>播放器的权限要求</h3><p>视需求而定，可能需要<code>WAKE_LOCK</code>以及<code>Internet</code>权限。</p>\n<h3 id=\"线程限制\"><a href=\"#线程限制\" class=\"headerlink\" title=\"线程限制\"></a>线程限制</h3><p>必须在UI线程创建播放器，只有这样才能正常收到为播放器设置的各种回调。</p>\n<p><strong>参考</strong>：<a href=\"https://developer.android.com/reference/android/media/MediaPlayer\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/reference/android/media/MediaPlayer</a></p>\n","categories":[],"tags":["Android","每周积累"]},{"title":"本周知识积累[2020/02] RecyclerView布局预览；Uri对象常用操作；轻松创建MainDispatcher与Deferred","url":"https://lilei.pro/2020/02/28/weekly-2020-02-01/","content":"<blockquote>\n<p>In case of I don’t see you. Good afternoon, good evening and good night.</p>\n</blockquote>\n<h2 id=\"在xml预览中查看RecyclerView布局\"><a href=\"#在xml预览中查看RecyclerView布局\" class=\"headerlink\" title=\"在xml预览中查看RecyclerView布局\"></a>在xml预览中查看RecyclerView布局</h2><p>在功能开发的前期，我们做好布局后，希望可以在IDE的xml预览里查看效果。在使用到RecyclerView时，看到的往往是item 0、item 1、item 2这样的占位文字，如下左图所示。如果我们想查看设计好的item布局（如下右），应当如何做呢？</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20200228_weekly/RecyclerView预览.jpg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>可以使用<strong>tools</strong>的命名空间。</p>\n<blockquote>\n<p><code>tools</code> namespace enables design-time features (such as which layout to show in a fragment) or compile-time behaviors (such as which shrinking mode to apply to your XML resources) It is really powerful feature that is developing and allows you not compile code every time to see changes.</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 样例代码 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- AndroidX --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layoutManager</span>=<span class=\"string\">\"androidx.recyclerview.widget.GridLayoutManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\">&lt;!-- support --&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:layoutManager</span>=<span class=\"string\">\"android.support.v7.widget.GridLayoutManager\"</span></span></span><br><span class=\"line\"><span class=\"tag\"></span></span><br><span class=\"line\">    &lt;!-- common --&gt;</span><br><span class=\"line\">    xmlns:android=\"http://schemas.android.com/apk/res/android\"</span><br><span class=\"line\">    xmlns:tools=\"http://schemas.android.com/tools\"</span><br><span class=\"line\">    android:layout_width=\"match_parent\"</span><br><span class=\"line\">    android:layout_height=\"match_parent\"</span><br><span class=\"line\">    tools:itemCount=\"5\"</span><br><span class=\"line\">    tools:listitem=\"@layout/item_video\"</span><br><span class=\"line\">    tools:orientation=\"horizontal\"</span><br><span class=\"line\">    tools:scrollbars=\"horizontal\"</span><br><span class=\"line\">    tools:spanCount=\"2\" /&gt;</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong> <a href=\"https://stackoverflow.com/questions/29929963/is-there-a-way-to-show-a-preview-of-a-recyclerviews-contents-in-the-android-stu\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/29929963/is-there-a-way-to-show-a-preview-of-a-recyclerviews-contents-in-the-android-stu</a></p>\n<h2 id=\"Uri对象的基本操作\"><a href=\"#Uri对象的基本操作\" class=\"headerlink\" title=\"Uri对象的基本操作\"></a>Uri对象的基本操作</h2><p>不属于新知识，做网络请求开发时经常会遇到，以前每次碰到时都是现查的，不知道是不是年纪大了记忆力下降的缘故 :-( 这里整理作为备忘。</p>\n<p>Uri是不可变对象，构建出来后即不可修改。</p>\n<p>Uri采用构建器模式进行构建。</p>\n<p>初始化一个Uri.Builder对象：<code>Uri.parse(SAMPLE_URL).buildUpon()</code>，如下例</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> uriBuilder = Uri.parse(<span class=\"string\">\"https://www.google.com\"</span>).buildUpon()</span><br></pre></td></tr></table></figure>\n<p>进行UTF8编码：<code>encode(String s)</code></p>\n<p>增加参数：<code>appendQueryParameter(&quot;key&quot;, &quot;value&quot;)</code></p>\n<p>分开设置协议和主机：<code>scheme(&quot;https&quot;)</code>，<code>authority(&quot;www.google.com&quot;)</code></p>\n<p>举例说明，如果想要构建如下的URL地址</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.myawesomesite.com/turtles/types?type=1&amp;sort=relevance#section-name</span><br></pre></td></tr></table></figure>\n<p>则使用以下代码实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri.Builder builder = <span class=\"keyword\">new</span> Uri.Builder();</span><br><span class=\"line\">builder.scheme(<span class=\"string\">\"https\"</span>)</span><br><span class=\"line\">    .authority(<span class=\"string\">\"www.myawesomesite.com\"</span>)</span><br><span class=\"line\">    .appendPath(<span class=\"string\">\"turtles\"</span>)</span><br><span class=\"line\">    .appendPath(<span class=\"string\">\"types\"</span>)</span><br><span class=\"line\">    .appendQueryParameter(<span class=\"string\">\"type\"</span>, <span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">    .appendQueryParameter(<span class=\"string\">\"sort\"</span>, <span class=\"string\">\"relevance\"</span>)</span><br><span class=\"line\">    .fragment(<span class=\"string\">\"section-name\"</span>);</span><br><span class=\"line\">String myUrl = builder.build().toString();</span><br></pre></td></tr></table></figure>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/net/Uri\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/reference/android/net/Uri</a></li>\n<li><a href=\"https://developer.android.com/reference/android/net/Uri.Builder\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/reference/android/net/Uri.Builder</a></li>\n</ul>\n<h2 id=\"轻松创建MainDispatcher与Deferred\"><a href=\"#轻松创建MainDispatcher与Deferred\" class=\"headerlink\" title=\"轻松创建MainDispatcher与Deferred\"></a>轻松创建MainDispatcher与Deferred</h2><h3 id=\"构建主线程调度器\"><a href=\"#构建主线程调度器\" class=\"headerlink\" title=\"构建主线程调度器\"></a>构建主线程调度器</h3><p>Dispatcher/调度器是协程上下文里很重要的一个元素，它决定了代码运行在哪个线程中。尤其是做Android开发时，经常需要把UI操作发送给主线程进行，像ViewModel就为我们提供了MainDispatcher。</p>\n<p>如果当前没有MainDispatcher，需要手动创建时，要怎么方便地进行构建呢？Kotlin在<code>Handler</code>类上新增了一个扩展函数<code>asCoroutineDispatcher()</code>，用法如下</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> mainDispatcher = Handler(Looper.getMainLooper()).asCoroutineDispatcher()</span><br></pre></td></tr></table></figure>\n<p>只要通过MainLooper就可以构建出主线程调度器了，是不是很方便。</p>\n<h3 id=\"构建即时Deferred对象\"><a href=\"#构建即时Deferred对象\" class=\"headerlink\" title=\"构建即时Deferred对象\"></a>构建即时Deferred对象</h3><p>Deferred是一种泛型，在协程中用于表示耗时操作结果，当我们需要取值时，通过<code>Deferred.await()</code>即可。它有点类似Java中的<code>Future</code>，表示一种“进行中的操作，即将返回结果”。</p>\n<p>构建Deferred对象有两种方法，一种是通过<code>async</code>的携程构建器，另一种是今天要介绍的方法，对于已知的值（比如 10），可以直接用<code>CompletableDeferred(10)</code>来创建一个Deferred对象，你可以直接把它用在任何需要Deferred对象的地方，取值时则会直接返回10。</p>\n<p><strong>参考</strong> <a href=\"https://stackoverflow.com/questions/53273361/how-to-return-deferred-with-the-instant-results\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/53273361/how-to-return-deferred-with-the-instant-results</a></p>\n","categories":[],"tags":["Android","每周积累"]},{"title":"Kotlin 协程基础课 03.揭开协程上下文CoroutineContext的神秘面纱","url":"https://lilei.pro/2019/12/13/kotlin-coroutines-03/","content":"<blockquote>\n<p>限定目的，能使人生变得简洁。</p>\n</blockquote>\n<h1 id=\"协程上下文是个啥？\"><a href=\"#协程上下文是个啥？\" class=\"headerlink\" title=\"协程上下文是个啥？\"></a>协程上下文是个啥？</h1><p>CoroutineContext，译作“协程上下文”，在协程中是非常重要的概念。你可能会比较好奇，为什么之前都没有注意到它的存在呢？因为协程框架已经为我们包装得非常好了。让我们来看一下<code>launch</code>和<code>async</code>两个函数的签名：</p>\n<h2 id=\"launch\"><a href=\"#launch\" class=\"headerlink\" title=\"launch\"></a>launch</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">launch</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    onCompletion: <span class=\"type\">CompletionHandler</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.()</span></span> -&gt; <span class=\"built_in\">Unit</span></span><br><span class=\"line\">): Job</span><br></pre></td></tr></table></figure>\n<h2 id=\"async\"><a href=\"#async\" class=\"headerlink\" title=\"async\"></a>async</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T&gt;</span> CoroutineScope.<span class=\"title\">async</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    context: <span class=\"type\">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    start: <span class=\"type\">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    onCompletion: <span class=\"type\">CompletionHandler</span>? = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    block: <span class=\"type\">suspend</span> <span class=\"type\">CoroutineScope</span>.()</span></span> -&gt; T</span><br><span class=\"line\">): Deferred&lt;T&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到这两个函数的第一个参数都是<code>CoroutineContext</code>类型的。所有协程构建函数（如<code>launch</code>和<code>async</code>）都是以<code>CoroutineScope</code>的扩展函数的形式被定义的，而<code>CoroutineScope</code>接口唯一的成员就是<code>CoroutineContext</code>类型。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">CoroutineScope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * The context of this scope.</span></span><br><span class=\"line\"><span class=\"comment\">     * Context is encapsulated by the scope and used for implementation of coroutine builders that are extensions on the scope.</span></span><br><span class=\"line\"><span class=\"comment\">     * Accessing this property in general code is not recommended for any purposes except accessing the [Job] instance for advanced usages.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * By convention, should contain an instance of a [job][Job] to enforce structured concurrency.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">val</span> coroutineContext: CoroutineContext</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>协程上下文是协程必备的组成部分，它管理了协程的线程绑定、生命周期、异常处理和调试功能，接下来我们分析上下文具体的结构组成。</p>\n<h1 id=\"协程上下文的结构\"><a href=\"#协程上下文的结构\" class=\"headerlink\" title=\"协程上下文的结构\"></a>协程上下文的结构</h1><blockquote>\n<p>It is an indexed set of Element instances. An indexed set is a mix between a set and a map. Every element in this set has a unique Key. Keys are compared by reference.</p>\n</blockquote>\n<p>CoroutineContext接口跟Map很类似，具有如下特点：</p>\n<ul>\n<li>有序Map</li>\n<li>Key唯一</li>\n<li>类型安全</li>\n</ul>\n<p>##跟Map类似，为什么不直接用Map</p>\n<p>那么我们为什么不直接用Map来实现呢？参考下面一段代码，它用Map实现了类似CoroutineContext的功能</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typealias CoroutineContext = Map&lt;CoroutineContext.Key&lt;*&gt;, CoroutineContext.Element&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">get</span><span class=\"params\">(key: <span class=\"type\">CoroutineContext</span>.<span class=\"type\">Key</span>&lt;*&gt;)</span></span>: CoroutineContext.Element?</span><br></pre></td></tr></table></figure>\n<p>如果使用这种实现，我们每次调用<code>get</code>之后，必须用显式的类型转换，才能得到想要的<code>Element</code>类型。而CoroutineContext则通过泛型（CoroutineContext的Key即带有类型信息）为我们解决了类型转换的痛点：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;E : Element&gt;</span> <span class=\"title\">get</span><span class=\"params\">(key: <span class=\"type\">Key</span>&lt;<span class=\"type\">E</span>&gt;)</span></span>: E?</span><br></pre></td></tr></table></figure>\n<h1 id=\"在CoroutineContext上可进行的操作\"><a href=\"#在CoroutineContext上可进行的操作\" class=\"headerlink\" title=\"在CoroutineContext上可进行的操作\"></a>在CoroutineContext上可进行的操作</h1><p>CoroutineContext并未实现标准的集合接口，因此无法使用<code>iterator()</code>等集合标准操作。它有独特的一套操作。</p>\n<h2 id=\"“拼装”上下文对象\"><a href=\"#“拼装”上下文对象\" class=\"headerlink\" title=\"“拼装”上下文对象\"></a>“拼装”上下文对象</h2><p>对CoroutineContext来说，最重要的操作是<code>plus</code>，<code>plus</code>操作用于把两个CoroutineContext对象合并成一个。合并时有一个优先级规则：<code>plus</code>右侧对象的属性会覆盖左侧对象中的同名属性。</p>\n<blockquote>\n<p>[The plus operator] returns a context containing elements from this context and elements from other context. The elements from this context with the same key as in the other one are dropped.</p>\n</blockquote>\n<h2 id=\"Element即是CoroutineContext\"><a href=\"#Element即是CoroutineContext\" class=\"headerlink\" title=\"Element即是CoroutineContext\"></a>Element即是CoroutineContext</h2><p>我们知道CoroutineContext中的Value是Element，其实Element本身也是继承于CoroutineContext。这样做的好处是，当我们只有一个CoroutineContext.Element对象时，也可以把它作为一个CoroutineContext来使用，这种一般称之为<strong>singleton context</strong>。</p>\n<h2 id=\"空对象\"><a href=\"#空对象\" class=\"headerlink\" title=\"空对象\"></a>空对象</h2><p>除了<strong>singleton context</strong>，还有一种特殊的上下文对象，<code>EmptyCoroutineContext</code>。它不含有任何Element，因此，当使用<code>plus</code>连接符连接一个<code>EmptyCoroutineContext</code>和另一个上下文对象时，总是得到与另一个上下文对象相同的对象。</p>\n<h1 id=\"认识一下那些Elements\"><a href=\"#认识一下那些Elements\" class=\"headerlink\" title=\"认识一下那些Elements\"></a>认识一下那些Elements</h1><p>如果我们想要查看CoroutineContext里都可以包含哪些Elements，可以搜索CoroutineContext.Key接口的实现，因为CoroutineContext是一个保存类型确定元素的Map。经过搜索后，我们发现以下几个典型Element：</p>\n<h2 id=\"指定执行线程：ContinuationInterceptor\"><a href=\"#指定执行线程：ContinuationInterceptor\" class=\"headerlink\" title=\"指定执行线程：ContinuationInterceptor\"></a>指定执行线程：ContinuationInterceptor</h2><p>用于处理协程挂载在线程上的逻辑，抽象类<strong>CoroutineDispatcher</strong>实现了该接口，一般常用的Dispatcher都会继承于<strong>CoroutineDispatcher</strong>。</p>\n<h2 id=\"层级关系管理：Job\"><a href=\"#层级关系管理：Job\" class=\"headerlink\" title=\"层级关系管理：Job\"></a>层级关系管理：Job</h2><p>用于管理任务层级，处理任务父子关系。</p>\n<ul>\n<li>手动终止父Job时，其中的子Job也被终止</li>\n<li>当所有子Job运行结束时，父Job才可以运行结束</li>\n</ul>\n<h2 id=\"处理异常：CoroutineExceptionHandler\"><a href=\"#处理异常：CoroutineExceptionHandler\" class=\"headerlink\" title=\"处理异常：CoroutineExceptionHandler\"></a>处理异常：CoroutineExceptionHandler</h2><p>如果你在构建协程时使用了无法传递异常的构建器，如<code>launch</code>和<code>actor</code>，当异常发生时，需要有一个异常处理器来处理它。<code>CoroutineExceptionHandler</code>就是充当这样的异常处理器。</p>\n<h2 id=\"名字：CoroutineName\"><a href=\"#名字：CoroutineName\" class=\"headerlink\" title=\"名字：CoroutineName\"></a>名字：CoroutineName</h2><p>协程的别名，一般是用于调试，以区分多个协程。</p>\n<p>上述Element内部都以伴生对象的形式定义了相应的Key，可以通过<code>coroutineContext[element type name]</code>的形式方便地获取到Element对象。比如<code>coroutineContext[Job]</code>会返回Job或者null（如果没有Job）。</p>\n<h1 id=\"协程构建过程中的CoroutineContext\"><a href=\"#协程构建过程中的CoroutineContext\" class=\"headerlink\" title=\"协程构建过程中的CoroutineContext\"></a>协程构建过程中的CoroutineContext</h1><p>前面讲过<code>CoroutineScope</code>实际上是一个<code>CoroutineContext</code>的封装，当我们需要启动一个协程时，会在<code>CoroutineScope</code>的实例上调用构建函数，如<code>async</code>和<code>launch</code>。在构建函数中，一共出现了3个CoroutineContext：</p>\n<ul>\n<li><strong>inherited context</strong>：从<code>CoroutineScope</code>中继承得到的上下文对象</li>\n<li><strong>context argument</strong>：构建函数中传入的第一个参数，默认为<code>EmptyCoroutineContext</code></li>\n<li><strong>coroutine context</strong>：挂起代码块（lambda函数）运行时的上下文对象</li>\n</ul>\n<p>如果我们查看协程构建函数<code>async</code>和<code>launch</code>的源码，会发现它们第一行都是如下代码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> newContext = newCoroutineContext(context)</span><br></pre></td></tr></table></figure>\n<p>再进一步查看：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CoroutineContext.kt</span></span><br><span class=\"line\"><span class=\"meta\">@ExperimentalCoroutinesApi</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> actual <span class=\"function\"><span class=\"keyword\">fun</span> CoroutineScope.<span class=\"title\">newCoroutineContext</span><span class=\"params\">(context: <span class=\"type\">CoroutineContext</span>)</span></span>: CoroutineContext &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> combined = coroutineContext + context</span><br><span class=\"line\">    <span class=\"keyword\">val</span> debug = <span class=\"keyword\">if</span> (DEBUG) combined + CoroutineId(COROUTINE_ID.incrementAndGet()) <span class=\"keyword\">else</span> combined</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">if</span> (combined !== Dispatchers.Default &amp;&amp; combined[ContinuationInterceptor] == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        debug + Dispatchers.Default <span class=\"keyword\">else</span> debug</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里就比较清晰了：构建器函数内部进行了一个CoroutineContext拼接操作，plus的左值是<code>CoroutineScope</code>内部的<code>CoroutineContext</code>，右值是作为构建函数参数的<code>CoroutineContext</code>。根据我们前面讲到的拼接操作，左值具有更高的优先级。</p>\n<p>此外，抽象类<code>AbstractCoroutineScope</code>实现了<code>CoroutineScope</code>和<code>Job</code>接口，大部分CoroutineScope的实现都继承自<code>AbstractCoroutineScope</code>，意味着他们同时也是一个<code>Job</code>。可以得到：<strong>coroutine context = parent context + coroutine job</strong>。</p>\n<h1 id=\"Elements默认值\"><a href=\"#Elements默认值\" class=\"headerlink\" title=\"Elements默认值\"></a>Elements默认值</h1><p>对于上述4个Elements，如果既没有显示指明，则会取相应的默认值：</p>\n<ul>\n<li>ContinuationInterceptor：默认值为<code>Dispatchers.Default</code>，基于线程池实现，线程数目=CPU数目，且最少为2支</li>\n<li>Job：默认值为null，在这种情况下，协程是孤儿（没有父协程，无法被父协程取消，例如<code>GlobalScope</code>）</li>\n<li>CoroutineExceptionHandler：它的情况比较复杂，当异常发生时，若没有指定<code>CoroutineExceptionHandler</code>，会使用全局的异常处理器，在全局异常处理器中调用当前线程的<code>uncaughtExceptionHandler</code>。代码如下：</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CoroutineExceptionHandlerImpl.kt</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> actual <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">handleCoroutineExceptionImpl</span><span class=\"params\">(context: <span class=\"type\">CoroutineContext</span>, exception: <span class=\"type\">Throwable</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use additional extension handlers</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (handler <span class=\"keyword\">in</span> handlers) &#123;</span><br><span class=\"line\">        handler.handleException(context, exception)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// use thread's handler</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> currentThread = Thread.currentThread()</span><br><span class=\"line\">    currentThread.uncaughtExceptionHandler.uncaughtException(currentThread, exception)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Name：默认为“coroutine”</li>\n</ul>\n<p>对于上述默认值，用代码实现起来也并不复杂：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> defaultExceptionHandler = CoroutineExceptionHandler &#123; ctx, t -&gt;</span><br><span class=\"line\">    ServiceLoader.load(</span><br><span class=\"line\">        serviceClass, </span><br><span class=\"line\">        serviceClass.classLoader</span><br><span class=\"line\">    ).forEach&#123;</span><br><span class=\"line\">        it.handleException(ctx, t)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Thread.currentThread().let &#123; </span><br><span class=\"line\">        it.uncaughtExceptionHandler.uncaughtException(it, exception)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CoroutineContext</span></span>(</span><br><span class=\"line\">        <span class=\"keyword\">val</span> continuationInterceptor: ContinuationInterceptor = </span><br><span class=\"line\">                Dispatchers.Default,</span><br><span class=\"line\">        <span class=\"keyword\">val</span> parentJob: Job? = </span><br><span class=\"line\">                <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"keyword\">val</span> coroutineExceptionHandler: CoroutineExceptionHandler = </span><br><span class=\"line\">                defaultExceptionHandler,</span><br><span class=\"line\">        <span class=\"keyword\">val</span> name: CoroutineName = </span><br><span class=\"line\">                CoroutineName(<span class=\"string\">\"coroutine\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h1 id=\"用例浅析\"><a href=\"#用例浅析\" class=\"headerlink\" title=\"用例浅析\"></a>用例浅析</h1><p>上述4个Elements中，最重要的是Dispatcher和Job两个，我们来看一些例子。</p>\n<h2 id=\"Global-Scope-Context\"><a href=\"#Global-Scope-Context\" class=\"headerlink\" title=\"Global Scope Context\"></a>Global Scope Context</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GlobalScope.launch &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>全局Scope使用全默认的4个Elements，意味着它使用<code>Dispatchers.Default</code>和为空的<code>Job</code>（无法通过父Job取消）。</p>\n<h2 id=\"Fully-Qualified-Context\"><a href=\"#Fully-Qualified-Context\" class=\"headerlink\" title=\"Fully Qualified Context\"></a>Fully Qualified Context</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">launch(</span><br><span class=\"line\">        Dispatchers.Main + </span><br><span class=\"line\">                Job() + </span><br><span class=\"line\">                CoroutineName(<span class=\"string\">\"HelloCoroutine\"</span>) + </span><br><span class=\"line\">                CoroutineExceptionHandler &#123; _, _ -&gt; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>全限定Context，即全部显式指定具体值的Elements。不论你用哪一个<code>CoroutineScope</code>构建该协程，它都具有一致的表现，不会受到<code>CoroutineScoipe</code>任何影响。</p>\n<h2 id=\"CoroutineScope-Context\"><a href=\"#CoroutineScope-Context\" class=\"headerlink\" title=\"CoroutineScope Context\"></a>CoroutineScope Context</h2><p>这里我们基于Activity生命周期实现一个CoroutineScope：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScopedAppActivity</span>:<span class=\"type\"></span></span></span><br><span class=\"line\">        AppCompatActivity(),</span><br><span class=\"line\">        CoroutineScope</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> job: Job</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">val</span> coroutineContext: CoroutineContext</span><br><span class=\"line\">        <span class=\"keyword\">get</span>() = job + Dispatchers.Main <span class=\"comment\">// 注意这里使用+拼接CoroutineContext</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        job = Job()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy()</span><br><span class=\"line\">        job.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Dispatcher：使用<code>Dispatcher.Main</code>，以在UI线程进行绘制</li>\n<li>Job：在<code>onCreate</code>时构建，在<code>onDestroy</code>时销毁，所有基于该CoroutineContext创建的协程，都会在Activity销毁时取消，从而避免Activity泄露的问题</li>\n</ul>\n<h2 id=\"临时指定参数\"><a href=\"#临时指定参数\" class=\"headerlink\" title=\"临时指定参数\"></a>临时指定参数</h2><p>前面数次提到过，CoroutineContext的参数主要有两个来源：从scope中继承+参数指定。我们可以用<code>withContext</code>便捷地指定某个参数启动子协程，例如我们想要在协程内部执行一个无法被取消的子协程：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">withContext(NonCancellable) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取协程上下文参数\"><a href=\"#读取协程上下文参数\" class=\"headerlink\" title=\"读取协程上下文参数\"></a>读取协程上下文参数</h2><p>可以通过顶级挂起只读属性<code>coroutineContext</code>获取协程上下文参数，它位于 <a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines/coroutine-context.html\" target=\"_blank\" rel=\"noopener\">kotlin-stdlib / kotlin.coroutines / coroutineContext</a>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">println(<span class=\"string\">\"Running in <span class=\"subst\">$&#123;coroutineContext[CoroutineName]&#125;</span>\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Nested-Context\"><a href=\"#Nested-Context\" class=\"headerlink\" title=\"Nested Context\"></a>Nested Context</h2><p>内嵌上下文切换是指：在协程A内部构建协程B时，B会自动继承A的Dispatcher，如果没有注意这一点，很容易发生诸如“主线程执行耗时操作”的错误。</p>\n<p>我们可以在调用<code>async</code>时加入Dispatcher参数，以切换到工作线程。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的做法，在主线程中直接调用async，若耗时过长则阻塞UI</span></span><br><span class=\"line\">GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = async &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确的做法，在工作线程执行协程任务</span></span><br><span class=\"line\">GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> deferred = async(Dispatchers.Default) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><ul>\n<li>协程上下文环境参数可以用加号<code>+</code>拼接，左值优先</li>\n<li>上下文环境可以继承</li>\n<li>上下文环境可以单独制定参数</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>本文的70%都翻译总结自Medium上的这篇文章，写的非常棒，建议有英文阅读能力的同学直接阅读原文</p>\n<ul>\n<li><a href=\"https://proandroiddev.com/demystifying-coroutinecontext-1ce5b68407ad\" target=\"_blank\" rel=\"noopener\">Demystifying CoroutineContext</a></li>\n</ul>\n","categories":[],"tags":["Kotlin"]},{"title":"Kotlin 协程基础课 02.suspend函数","url":"https://lilei.pro/2019/12/10/kotlin-coroutines-02/","content":"<blockquote>\n<p>这是《Kotlin 协程基础课》的第2篇文章。</p>\n</blockquote>\n<blockquote>\n<p>Everyone must choose one of two pains: The pain of discipline or the pain of regret. Choose WISELY.</p>\n</blockquote>\n<p>在上篇文章里我们学习了如何通过协程简化耗时操作的写法，其中有一个关键字<code>suspend</code>，用于在定义函数时进行声明。本篇文章将对suspend进行进一步介绍，旨在学会它的含义和用法。</p>\n<h1 id=\"suspend限定词的含义\"><a href=\"#suspend限定词的含义\" class=\"headerlink\" title=\"suspend限定词的含义\"></a>suspend限定词的含义</h1><p><strong>suspend</strong>，翻译过来就是<strong>中断，挂起</strong>，跟<strong>public、static</strong>等关键字相同，用在函数声明前，表示这是一个“挂起函数”。</p>\n<p>挂起函数只能在协程或另一个挂起函数中被调用，如果你在非协程中使用到了挂起函数，会看到编译器有如下报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Kotlin: Suspend functions are only allowed to be called from a coroutine or another suspend function</span><br></pre></td></tr></table></figure>\n<p>前面用到的<code>delay</code>就是一个挂起函数。<strong>suspend</strong>关键字表明函数内部进行了耗时操作，可以是计算密集型的CPU任务，也可以是网络、磁盘操作密集型的IO任务。基本上可以看做“但凡用callback实现的回调函数，都能用一个相对应的挂起函数实现”。</p>\n<p>所以我们使用<strong>suspend</strong>关键字的时机就非常明确了：当函数要进行耗时操作时，就把它声明为<code>suspend</code>。</p>\n<h1 id=\"suspend做了什么事\"><a href=\"#suspend做了什么事\" class=\"headerlink\" title=\"suspend做了什么事\"></a>suspend做了什么事</h1><p><em>方便起见，后续用“挂起”指代“suspend”。</em></p>\n<p>作为及物动词，“挂起”应当有一个宾语，这里“挂起”的对象是<strong>协程</strong>。接下来我们对挂起的过程中发生了什么一探究竟，记住下面这句话：</p>\n<p><strong>“挂起”是指协程从它当前线程脱离，切换到另一个线程运行。</strong>当线程运行到<code>suspend</code>函数时，会暂时挂起这个函数及后续代码的执行。这里涉及到两个角色：线程和协程。</p>\n<h2 id=\"线程的行为\"><a href=\"#线程的行为\" class=\"headerlink\" title=\"线程的行为\"></a>线程的行为</h2><p>当线程运行到“挂起”代码块时，会跳出当前的代码块，不再执行后续代码。接下来线程会做什么呢？</p>\n<p>如果它是一个后台线程：</p>\n<ul>\n<li>要么无事可做，被系统回收</li>\n<li>要么被调度执行别的后台任务</li>\n</ul>\n<p>跟Java线程池里的线程在工作结束之后的表现完全一样：<strong>回收或者再利用</strong>。</p>\n<p>如果它是Android主线程：</p>\n<ul>\n<li>继续UI刷新工作</li>\n</ul>\n<h2 id=\"协程的行为\"><a href=\"#协程的行为\" class=\"headerlink\" title=\"协程的行为\"></a>协程的行为</h2><p>上面讲到线程运行到挂起代码块时，会暂时退出当前代码块的执行。那么，剩余的协程代码在哪里得到执行呢？答案就在挂起函数的实现中——即我们为挂起函数指定的线程。</p>\n<p><code>withContext</code>函数可以指定协程代码的运行线程，常见的Dispatcher有Main、IO、Default。协程从挂起的地方开始，切换到这些线程之中的一个继续运行，当运行完毕时，会<strong>自动切换回原线程执行</strong>。</p>\n<p>在协程的源码里，“自动切换回来”是通过<a href=\"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/-continuation/resume.html\" target=\"_blank\" rel=\"noopener\">resume</a>实现的。挂起函数之所以必须在协程中调用，就是因为协程框架会自动帮我们处理这个自动切换的过程。</p>\n<h2 id=\"suspend-不会真正操作挂起\"><a href=\"#suspend-不会真正操作挂起\" class=\"headerlink\" title=\"suspend 不会真正操作挂起\"></a>suspend 不会真正操作挂起</h2><p>并不是声明了<code>suspend</code>后，线程运行到该位置，就自动进行挂起切换的，参照下面一个例子，挂起函数仍然运行在主线程中。为什么没有切换线程？因为编译器根本不知道要往哪里切，需要我们在编码时明确告诉它，这个挂起函数要切换到哪一个线程继续运行。我们可以用<code>withContext</code>指明待切换的线程。在实现一个挂起函数时，仅仅加上<code>suspend</code>关键字是不够的，必须在函数内部直接或间接地调用协程框架自带的<code>suspend</code>函数。</p>\n<p><code>suspend</code>只是一个提醒，它只有一个效果，就是限制函数只能在协程里调用，如果在非协程里使用了<code>suspend</code>函数，则编译不通过。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 仍然运行在Main</span></span><br><span class=\"line\">suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">suspendingPrint</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">I/System.<span class=\"keyword\">out</span>: Thread: main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行在IO</span></span><br><span class=\"line\">suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">suspendingPrint</span><span class=\"params\">()</span></span> = withContext(Dispatchers.IO) &#123;</span><br><span class=\"line\">  println(<span class=\"string\">\"Thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"如何写一个suspend函数\"><a href=\"#如何写一个suspend函数\" class=\"headerlink\" title=\"如何写一个suspend函数\"></a>如何写一个suspend函数</h1><p>最简单的方式是：</p>\n<ol>\n<li>声明函数为<code>suspend</code></li>\n<li>使用<code>withContext</code>指定目标线程，或者在函数内部调用另一个<code>suspend</code>函数</li>\n</ol>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了协程中最常见的关键字<code>suspend</code>的含义和用法，阅读完本文后你应当掌握：</p>\n<ul>\n<li>挂起函数运行时的表现</li>\n<li>什么情况下使用挂起函数</li>\n<li>如何写一个简单的挂起函数</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.im/post/5da81352f265da5b774fc39d\" target=\"_blank\" rel=\"noopener\">掘金-扔物线</a></li>\n</ul>\n","categories":[],"tags":["Kotlin"]},{"title":"Kotlin 协程基础课 01.协程的基本概念与用法","url":"https://lilei.pro/2019/11/17/kotlin-coroutines-01/","content":"<blockquote>\n<p>这是《Kotlin 协程基础课》的第1篇文章。</p>\n</blockquote>\n<blockquote>\n<p>正因为她觉得一切都无所谓，所以生活给她什么，她便接受什么。少年时代，她觉得选择为时过早，而现在已是青年，她又觉得改变为时过晚。</p>\n</blockquote>\n<h1 id=\"系列基础课前言\"><a href=\"#系列基础课前言\" class=\"headerlink\" title=\"系列基础课前言\"></a>系列基础课前言</h1><p>对于Kotlin学习而言，要想从“入门”走到“精通”，协程（Coroutines）是必须迈过去的一道坎。接下来一周时间，我会在之前零散学习的基础上，总结成一系列基础课文章，作为对协程的阶段性学习小结。文章目录如下：</p>\n<ul>\n<li>01.协程的基本概念与用法</li>\n<li>02.非阻塞式挂起（suspend）函数</li>\n<li>03.理解协程的域（Scope）和调度器（Dispatcher）</li>\n<li>04.用AAC&amp;协程优化Android架构设计</li>\n</ul>\n<h1 id=\"什么是协程\"><a href=\"#什么是协程\" class=\"headerlink\" title=\"什么是协程\"></a>什么是协程</h1><p>但凡学一门新知识，总是离不开5w1h。说起“协程”，很多人第一反应是2号线北新泾那家做旅游的互联网公司，不过，此“协程”非彼“携程”，协程（Coroutines）并不是一个新的概念，它的年纪要比Kotlin语言大得多。“协程 Coroutines”源自 Simula 和 Modula-2 语言，这个术语早在 1958 年就被 Melvin Edward Conway 发明并用于构建汇编程序，说明协程是一种编程思想，并不局限于特定的语言。目前很多现代语言都有协程的实现，比如Go、JavaScript、C#等。</p>\n<p>协程作为一种编程思想，目的是简化并行代码编写，可以让我们以同步的方式写异步逻辑。对于Kotlin而言，“协程”一词是指实现了协程思想的一系列API的总称。Kotlin协程的底层实现是线程。</p>\n<h1 id=\"没有协程的日子里\"><a href=\"#没有协程的日子里\" class=\"headerlink\" title=\"没有协程的日子里\"></a>没有协程的日子里</h1><p>由于Android是单一UI线程的框架，势必要进行很多UI线程以外的耗时操作，在协程之前，我们通常用这些技术来实现诸如网络请求、数据库读写等功能：</p>\n<ul>\n<li>AsyncTask：是Android原生的异步任务写法，写过的人就知道它有多难用，业务逻辑被分散在前中后三个方法里，冗长的boilerplate代码。更有甚者，一旦发生嵌套，光是一层层回调就能把人搞疯掉。</li>\n<li>Thread：直接开线程并不是一种好的设计，只有新手才这么干。</li>\n<li>ThreadPool or ExecutorService：这比<code>new Thread</code>好一些，但同样要处理UI、工作线程切换的问题，以及无法避免的回调。</li>\n<li>Handler：一个工作线程的Handler用来处理耗时任务，处理完成后丢给主线程Handler，简单、直接、朴实无华。</li>\n</ul>\n<p>这时协程（Coroutines）来了，为我们推翻回调地狱、样板代码、内存泄漏、线程切换几座大山，Android开发者终于翻身农奴把歌唱，敢叫日月换新天。</p>\n<h1 id=\"第一个协程Demo\"><a href=\"#第一个协程Demo\" class=\"headerlink\" title=\"第一个协程Demo\"></a>第一个协程Demo</h1><h2 id=\"用Thread-sleep模拟耗时操作\"><a href=\"#用Thread-sleep模拟耗时操作\" class=\"headerlink\" title=\"用Thread.sleep模拟耗时操作\"></a>用Thread.sleep模拟耗时操作</h2><p>在本文我们暂且不谈Android环境，在更通用的环境下展现协程的用法。首先我们模拟一个耗时操作与非耗时操作混合的场景，看下面一段代码，它在<code>main</code>函数里依次打印<code>one two three</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"one\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"two\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时有另一个函数，它会耗时3s后，打印出参数在控制台。我们用直白的<code>Thread.sleep</code>来进行延时模拟。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDelayed</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">3000</span>)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将主程序的<code>print(two)</code>改为耗时任务。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"one\"</span>)</span><br><span class=\"line\">    printDelayed(<span class=\"string\">\"two\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行后，输出如下，非常符合预期。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one</span><br><span class=\"line\">three</span><br><span class=\"line\">// 这里等待3s</span><br><span class=\"line\">two</span><br></pre></td></tr></table></figure>\n<h2 id=\"用delay模拟耗时操作\"><a href=\"#用delay模拟耗时操作\" class=\"headerlink\" title=\"用delay模拟耗时操作\"></a>用delay模拟耗时操作</h2><p>Kotlin的协程库提供了另一种延时的API，<code>delay</code>，我们把原来的<code>Thread.sleep</code>替换为<code>delay</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDelayed</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">3000</span>L)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时Android Studio会在<code>delay</code>处提示错误：<em>suspend function delay should be called only from a coroutine or another suspend function</em>。翻译过来就是“delay是一个挂起函数，它只能在协程中、或者另一个挂起函数里面被调用”。我们把程序整体改写一下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">printDelayed</span><span class=\"params\">(msg: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    delay(<span class=\"number\">3000</span>L)</span><br><span class=\"line\">    println(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"one\"</span>)</span><br><span class=\"line\">    printDelayed(<span class=\"string\">\"two\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    print123Blocking()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行后发现程序的输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one</span><br><span class=\"line\">// 等待3s</span><br><span class=\"line\">two</span><br><span class=\"line\">three</span><br></pre></td></tr></table></figure>\n<p>为什么不是132而是123呢，要从<code>runBlocking</code>的定义说起。它会“新起一个协程运行后续代码，并且在该协程的运行过程中阻塞原线程（在demo中是主线程），直至协程运行结束”。而在协程运行时是按照代码顺序逐行运行的。所以打印出来的是123而非132。</p>\n<h2 id=\"为runBlocking指定运行线程\"><a href=\"#为runBlocking指定运行线程\" class=\"headerlink\" title=\"为runBlocking指定运行线程\"></a>为runBlocking指定运行线程</h2><p>我们在<code>print123blocking</code>方法里打印出当前线程名。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one - in thread: main @coroutine#1</span><br><span class=\"line\">two - in thread: main @coroutine#1</span><br><span class=\"line\">three - in thread: main @coroutine#1</span><br></pre></td></tr></table></figure>\n<p>可见这个方法是在当前（main）线程里运行的，并且同属于<code>@coroutine#1</code>。</p>\n<p>我们可以为<code>runBlocking</code>指定运行的线程，在协程的语言里，使用<code>Dispatcher</code>来表明这一概念。我们改写一下<code>print123Blocking</code>方法，使用<code>Dispatcher.Default</code>打印1和2。样例代码与系统输出如下，可见我们为其指定了Dispatcher的代码段运行在另一个线程里，且打印顺序仍然为123，这就是<strong>Blocking</strong>的厉害之处。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    runBlocking(Dispatchers.Default) &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">        printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one - in thread: DefaultDispatcher-worker-1 @coroutine#1</span><br><span class=\"line\">two - in thread: DefaultDispatcher-worker-1 @coroutine#1</span><br><span class=\"line\">// 此处等待3s</span><br><span class=\"line\">three - in thread: main</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何利用协程打印出132\"><a href=\"#如何利用协程打印出132\" class=\"headerlink\" title=\"如何利用协程打印出132\"></a>如何利用协程打印出132</h2><h3 id=\"全局后台线程：GlobalScope-launch\"><a href=\"#全局后台线程：GlobalScope-launch\" class=\"headerlink\" title=\"全局后台线程：GlobalScope.launch\"></a>全局后台线程：GlobalScope.launch</h3><p>可以在blocking域中使用<code>GlobalScope.launch{ ... }</code>来指定后台线程运行任务，我们基于此将原有代码改造一下。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">        printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码的输出是不可知的，有可能是以下两种情况，只打印3或者打印31，这是什么原因呢？因为我们是在后台全局线程中启动的“打印12任务”，后台线程是不会阻止主线程运行结束的，所以2是肯定打不出来，而1能否打印出来就看运行时线程调度情况了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// case 1</span><br><span class=\"line\">three - in thread: main @coroutine#1</span><br><span class=\"line\">one - in thread: DefaultDispatcher-worker-1 @coroutine#2</span><br><span class=\"line\">// case 2</span><br><span class=\"line\">three - in thread: main @coroutine#1</span><br></pre></td></tr></table></figure>\n<h3 id=\"等待任务完成\"><a href=\"#等待任务完成\" class=\"headerlink\" title=\"等待任务完成\"></a>等待任务完成</h3><p>我们可以简单粗暴地使用<code>delay</code>来等待后台任务完成。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">        printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    delay(<span class=\"number\">4000</span>L) <span class=\"comment\">// 因为我们知道printDelayed会延迟3秒，故这里等待4秒</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">three - in thread: main @coroutine#1</span><br><span class=\"line\">one - in thread: DefaultDispatcher-worker-1 @coroutine#2</span><br><span class=\"line\">two - in thread: DefaultDispatcher-worker-1 @coroutine#2</span><br></pre></td></tr></table></figure>\n<p>但是这种处理方法非常丑陋，而且这个<code>delay</code>的时长很难设置，设置长了吧，会导致无用的等待浪费时间；设置短了吧，有可能在后台线程输出之前就结束任务，有没有更优雅的写法呢？答案是有的，<code>job.join()</code>为我们提供了等待任务完成的功能，代码如下所示。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> job = GlobalScope.launch &#123;</span><br><span class=\"line\">        println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">        printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    job.join()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义Dispatcher\"><a href=\"#自定义Dispatcher\" class=\"headerlink\" title=\"自定义Dispatcher\"></a>自定义Dispatcher</h2><p>Dispatcher为协程的运行指定了线程，常见Dispatchers如下：</p>\n<ul>\n<li>Dispatcher.IO：进行IO密集型操作，如数据库读写、文件读写、网络交互</li>\n<li>Dispatcher.Default：进行CPU密集型操作，如列表排序、JSON解析、DiffUtils</li>\n<li>Dispatcher.Main：仅存在于Android框架，调用<code>suspend</code>方法、进行UI操作、更新LiveData</li>\n</ul>\n<p>看到这里你可能已经理解了，Dispatcher其实就是线程的另一种表现形式，我们甚至可以自定义一个Dispatcher：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">print123Blocking</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"one - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">val</span> customDispatcher = Executors.newFixedThreadPool(<span class=\"number\">2</span>).asCoroutineDispatcher()</span><br><span class=\"line\">    launch(customDispatcher) &#123;</span><br><span class=\"line\">        printDelayed(<span class=\"string\">\"two - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(<span class=\"string\">\"three - in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">    (customDispatcher.executor <span class=\"keyword\">as</span> ExecutorService).shutdown() <span class=\"comment\">// ！主动停止，否则线程会一直运行下去</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下（在play.kotlin上面总是超时不知道为啥），意味着我们完全可以高度定制Dispatcher的实现，虽然大部分时间使用默认的Dispatcher就已足够。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">one - from thread main</span><br><span class=\"line\">three - from thread main</span><br><span class=\"line\">two - from thread pool-1-thread-1</span><br></pre></td></tr></table></figure>\n<h2 id=\"有返回值的suspend函数\"><a href=\"#有返回值的suspend函数\" class=\"headerlink\" title=\"有返回值的suspend函数\"></a>有返回值的suspend函数</h2><p>最后一部分内容是跟Android开发密切相关的，大部分时间我们需要通过网络、数据库进行一些读取数据耗时操作，函数会有返回值，我们模拟一个网络操作，它读取一个<code>startNum</code>参数，等待1s延时后，返回<code>startNum * 10</code>。通过 <code>async { ... }.await()</code> 可以获取耗时函数的返回值，代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模拟1s延时网络操作</span></span><br><span class=\"line\">suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">calculateHardThings</span><span class=\"params\">(startNum: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">  delay(<span class=\"number\">1000</span>)</span><br><span class=\"line\">  println(<span class=\"string\">\"result: <span class=\"subst\">$&#123;result&#125;</span>, in thread: <span class=\"subst\">$&#123;Thread.currentThread().name&#125;</span>\"</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> startNum * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用延时操作，分别await，耗时共3s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">exampleAsyncAwait</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred1 = async &#123; calculateHardThings(<span class=\"number\">10</span>) &#125;.await()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred2 = async &#123; calculateHardThings(<span class=\"number\">20</span>) &#125;.await()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred3 = async &#123; calculateHardThings(<span class=\"number\">30</span>) &#125;.await()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> sum = deferred1 + deferred2 + deferred3</span><br><span class=\"line\">  <span class=\"keyword\">val</span> endTime = System.currentTimeMillis()</span><br><span class=\"line\">  println(<span class=\"string\">\"sum = <span class=\"variable\">$sum</span>, time = <span class=\"subst\">$&#123;endTime - startTime&#125;</span>\"</span>) <span class=\"comment\">// sum = 600, time = 3030</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发进行耗时操作\"><a href=\"#并发进行耗时操作\" class=\"headerlink\" title=\"并发进行耗时操作\"></a>并发进行耗时操作</h3><p>因为是3个耗时1s操作并发，我们自然而然希望它们同时运行，总耗时1s而不是3s，要如何实现呢？把所有的<code>await()</code>调用写入同一个语句，编译器会优化它们，使其同时运行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用延时操作，同时await，耗时共1s</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">exampleAsyncAwait</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred1 = async &#123; calculateHardThings(<span class=\"number\">10</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred2 = async &#123; calculateHardThings(<span class=\"number\">20</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred3 = async &#123; calculateHardThings(<span class=\"number\">30</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> sum = deferred1.await() + deferred2.await() + deferred3.await()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> endTime = System.currentTimeMillis()</span><br><span class=\"line\">  println(<span class=\"string\">\"sum = <span class=\"variable\">$sum</span>, time = <span class=\"subst\">$&#123;endTime - startTime&#125;</span>\"</span>) <span class=\"comment\">// sum = 600, time = 1065</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用withContext的简化写法\"><a href=\"#使用withContext的简化写法\" class=\"headerlink\" title=\"使用withContext的简化写法\"></a>使用withContext的简化写法</h3><p>async/await 会运行在当前线程中，对于网络操作一般的做饭是让其在IO线程运行，对于计算密集型操作则是在CPU（Default）线程运行，使用<code>withContext</code>可以同时完成<code>async/await</code>的操作，但缺点是这三个操作只能相继运行，无法同时运行。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用延时操作</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">exampleWithContext</span><span class=\"params\">()</span></span> = runBlocking &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> startTime = System.currentTimeMillis()</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred1 = withContext(Dispatchers.Default) &#123; calculateHardThings(<span class=\"number\">10</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred2 = withContext(Dispatchers.Default) &#123; calculateHardThings(<span class=\"number\">20</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> deferred3 = withContext(Dispatchers.Default) &#123; calculateHardThings(<span class=\"number\">30</span>) &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> sum = deferred1 + deferred2 + deferred3</span><br><span class=\"line\">  <span class=\"keyword\">val</span> endTime = System.currentTimeMillis()</span><br><span class=\"line\">  println(<span class=\"string\">\"sum = <span class=\"variable\">$sum</span>, time = <span class=\"subst\">$&#123;endTime - startTime&#125;</span>\"</span>) <span class=\"comment\">// sum = 600, time = 3029</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了协程的基本用法，在阅读完本文后，你应当掌握以下知识点：</p>\n<ul>\n<li>声明耗时函数，以及在协程代码块里调用耗时函数</li>\n<li>切换运行环境</li>\n<li>等待任务完成</li>\n<li>并行进行耗时操作，获取操作结果</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.youtube.com/watch?v=jYuK1qzFrJg\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=jYuK1qzFrJg</a></li>\n</ul>\n","categories":[],"tags":["Kotlin"]},{"title":"【转】Android Studio Debug 的 9 个小技巧","url":"https://lilei.pro/2019/11/11/android-studio-debug-skills/","content":"<blockquote>\n<p>Pain is inevitable. Suffering is optional. 痛楚难以避免，而磨难可以选择。</p>\n</blockquote>\n<p>这是一篇转载的文章。</p>\n<ul>\n<li>作者：wanbo</li>\n<li>链接：<a href=\"https://juejin.im/post/5dbf8036f265da4d4b5fe7c2\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5dbf8036f265da4d4b5fe7c2</a></li>\n<li>来源：掘金</li>\n</ul>\n<hr>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/dev_summit_19.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>周末看 Android Dev Summit ‘19 的视频的时候，看到一章关于 Android Studio Debug 的介绍，有很多日常非常有用的小技巧，学习了这些小技巧能很大程度的降低我们 Debug 的成本，快速定位问题的本质，今天就向大家介绍一下 Android Studio Debug 的 9 个小技巧。</p>\n<p>没关注的小伙伴记得关注订阅😝，如果觉得这些文章有点意思，记得分享转发评论点赞😝！</p>\n<h2 id=\"Log-过滤和折叠\"><a href=\"#Log-过滤和折叠\" class=\"headerlink\" title=\"Log 过滤和折叠\"></a>Log 过滤和折叠</h2><p>有时候 Logcat 中 log 的信息很长，同时还有些我们不需要的信息也打印出来，例如下图中的【时间+线程 ID】。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/log_filter_0.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这个时候我们可以点击 Logcat 窗口上的【设置】按钮，设置一条 Log 需要显示哪些关键信息，可设置的项有：时间、线程ID、包名、Tag name。我们可以根据自己的需要控制显示，并且下面还会有一条 Sample Log 提供设置后的预览效果，就像下图中这样。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/log_filter_1.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>日常开发的时候我们还会遇到另一种情况，比如根据当前 UI 的渲染情况，我们需要时刻打印 UI 的某个值，来帮助我们观察 UI，同时当到达某种条件的时候，输入一条我们得到的【结果 log】。也就是说在获得我们的【结果 log】之前会有很多没用但是又必须打印的 log，这样当我们需要查找【结果 log】的时候就会非常麻烦。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/log_filter_2.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>就像上图中这样，我们的【结果 log】被上下【循环打印 log】包围了，很难一下子找出来，这时候我们可以选关键字【右键】，选择【Fold Lines Like This】，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/log_filter_3.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这样我们相同关键字的 log 就会被折叠，当然也可以展开查看详细 log。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/log_filter_4.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"自定义断点执行条件\"><a href=\"#自定义断点执行条件\" class=\"headerlink\" title=\"自定义断点执行条件\"></a>自定义断点执行条件</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/custom_break_0.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们来看上面这段代码，通过字面意思我们可以得知：这是一个点击事件执行的方法，点击发生后通过 NavController 从当前 HomeFragment 跳转到 EmailFragment。然后我们在第一行打了一个断点，我们已经得知当 email 的 subject 包含 【Bonjour】关键字的时候，这段代码会发生崩溃，反之不包含则不会发生崩溃，所以我们不需要每次断点都生效。</p>\n<p>这里我们可以右键断点，在 Condition 里输入我们的条件判断语句，当条件允许的时候，断点才生效。条件语句的代码支持 Kotlin 和 Java 两种语言的写法，如下图所示。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/custom_break_1.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>然后如果我们想在跳转到 EmailFragment 之后进一步去追踪问题，于是我在 EmailFragment 的 onCreate 方法打了一个断点（如下图所示），然后这里还会遇到我们之前说的问题：不符合条件的时候断点也会生效，这时候我们该怎么办呢？</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/custom_break_2.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们可以在这个断点上面，右键、点击更多。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/custom_break_3.png\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>左边选择当前断点之后，在右边点击【Disable until breakpoint hit】，选择我们之前有条件判断的断点，那么这个新的断点会在它所跟随的断点生效之后才会生效。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/custom_break_4.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"挂起线程\"><a href=\"#挂起线程\" class=\"headerlink\" title=\"挂起线程\"></a>挂起线程</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/suspend.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当我们右键任意一个断点的时候，会有一个 Suspend 选项【All、Thread】，All 也就意味着当我们在一个多线程的应用中 debug 问题的时候，一旦这个断点生效，所有的线程都会被挂起，Thread 表示只挂起当前线程。所以当我们在某个后台线程中 debug 问题的时候就可以选择 Thread，这样就不会在 debug 的时候阻塞主线程的正常功能。</p>\n<p>还有一个打开关闭断点的快捷键也分享一下：Windows 用户 Alt + Click ，Mac Option + Click 。</p>\n<h2 id=\"动态打印\"><a href=\"#动态打印\" class=\"headerlink\" title=\"动态打印\"></a>动态打印</h2><p>详细很多人包括我之前在 debug 的时候，都会在需要 debug 的地方增加 print 输出一下信息供自己排查错误，这里提供一种快捷方便的方法，可以既不污染我们的代码，又可以随时输出任意信息。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/eval_and_log.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>如上图所示，在需要打印的地方增加断点，然后取消所有线程的挂起，选择【Evaluate and log】，属于我们需要打印的语句，当代码执行到断点的时候，不会暂停，而会根据我们设置的打印信息输出 log，是不是很方便？</p>\n<h2 id=\"断点分组\"><a href=\"#断点分组\" class=\"headerlink\" title=\"断点分组\"></a>断点分组</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/group.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>通常遇到一个问题的时候，我们需要增加很多断点去追踪问题的原因，当问题解决之后，往往会忘记取消这些断点，导致在某次调试的时候，设备会被之前的断点所暂停，会让我们很无语。这里我们可以 debug 的时候在某个断点上：右键、更多，然后选择这个问题所有相关的断点，将它们分到同一个 Group 里面，那么这一个组的断点就可以统一开关、统一删除。</p>\n<h2 id=\"断点上一步\"><a href=\"#断点上一步\" class=\"headerlink\" title=\"断点上一步\"></a>断点上一步</h2><p>说到这个真的很痛心，常常因为自己在 debug 的时候，由于下一步点击的太快了而错过了问题关键行，只能重新运行一次代码，重新 debug 然后自己一次次点击下一步。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/drop_frame.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>在运行 Android 10 的设备上，debug 界面中提供了一个叫【Drop frame】的按钮，可以供我们跳出当前方法栈，返回上一步，这样就会避免我们因为错过断点而不得不重新运行代码。</p>\n<h2 id=\"观察对象\"><a href=\"#观察对象\" class=\"headerlink\" title=\"观察对象\"></a>观察对象</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/mark_obj_0.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>当我们 debug 的时候，可以从 debug 窗口中观察当前作用域中的对象以及对象的属性，有时候我们会观察在不同页面是否是同一个对象，之前我的做法很粗暴…就是找张纸，把这个对象的 ID 记下来，然后在另一个页面 debug 看 ID 是否一致😂</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/mark_obj_1.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>这里我们可以在对象上右键、选择【Mark Object】之后会让你自定义一个 Label，然后在整个 debug 期间，相同的对象会以你设置的 Label 为 name 出现，帮助我们方便的分析是否是统一对象。</p>\n<p>顺便提一下，在任意一段代码上，点击行号，可以从当前断点快速执行到目标行并暂停，这个我真是第一次知道，感觉之前 Android Studio 都白用了😭</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/mark_obj_2.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>而且在 debug 的时候我们可以选择 debug 窗口中的【Evaluate expression】按钮来动态观察对象，点击之后会弹出一个计算框，我们可以输入任意当前作用域中的对象以及属性观察。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/mark_obj_3.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>不得不说这个真的很方便，以前遇到这种情况我只有一种方法就是：print 😂，当然这里不仅仅是观察对象，我们可以写任意代码观察我们想要的值，就像下图这样。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/mark_obj_4.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h2 id=\"增量更新\"><a href=\"#增量更新\" class=\"headerlink\" title=\"增量更新\"></a>增量更新</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/hot_reload.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我试了一下，这两个按钮是真的很好用啊，比重新全量运行应用真是快了不少，非常方便。</p>\n<h2 id=\"错误栈分析\"><a href=\"#错误栈分析\" class=\"headerlink\" title=\"错误栈分析\"></a>错误栈分析</h2><p>通常我们 App 中会继承一下线上 bug 反馈的 SDK 比如 bugly，在 bugly 我们会得到崩溃的异常栈信息，类似下图这样。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/analyze_stack_0.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>我们可以全选复制，打开我们的 Android Studio，选择 Analyze → Analyze Stack Trace or Thread Dump，然后把异常栈信息粘贴进去，点击确定。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/analyze_stack_1.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>Android Studio 会在控制台显示这段异常栈信息，并且与现有代码 Link 在一起，我们可以点击跳转到问题所在行。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191111_as_debug_skills/analyze_stack_2.webp\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<p>好了这就是今天要分享的全部内容，关于更多详细的内容，大家可以点击【阅读原文】在油管上查看，真希望有大佬可以出一个【Android Studio 使用全攻略】，感觉自己对 AS 真的只是会用，但还有很多东西需要去学习和探索。😂</p>\n<p>我是 wanbo 大家加油！</p>\n","categories":[],"tags":["Android","Android Studio"]},{"title":"Kotlin域函数小结","url":"https://lilei.pro/2019/10/28/kotlin-scope-functions/","content":"<blockquote>\n<p>并非意志坚强就可以无所不能，人世不是那么单纯的。老实说，我甚至觉得每天坚持跑步同意志强弱并没有太大关联。我能够坚持跑二十年，恐怕还是因为合乎我的性情，至少“不觉得那么痛苦”。人生来如此，喜欢的事自然可以坚持下去，不喜欢的事怎么也坚持不了。 ——<strong>当我谈跑步时我谈些什么</strong></p>\n</blockquote>\n<p>想要掌握Kotlin，域函数是不得不迈过的一道坎。</p>\n<h1 id=\"所谓“域函数”\"><a href=\"#所谓“域函数”\" class=\"headerlink\" title=\"所谓“域函数”\"></a>所谓“域函数”</h1><p>一句话，域函数（scope functions）是为给定的对象创建一个临时的域，在这个域中执行一些操作。相比于传统的对象-函数调用写法，域函数在减少代码量的同时，还可以让编码在逻辑上看起来更加清晰，便于扩展和维护。</p>\n<p>对比一下域函数写法与普通写法。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 域函数写法</span></span><br><span class=\"line\">Person(<span class=\"string\">\"Alice\"</span>, <span class=\"number\">20</span>, <span class=\"string\">\"Amsterdam\"</span>).let &#123;</span><br><span class=\"line\">    println(it)</span><br><span class=\"line\">    it.moveTo(<span class=\"string\">\"London\"</span>)</span><br><span class=\"line\">    it.incrementAge()</span><br><span class=\"line\">    println(it)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 普通写法</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> alice = Person(<span class=\"string\">\"Alice\"</span>, <span class=\"number\">20</span>, <span class=\"string\">\"Amsterdam\"</span>)</span><br><span class=\"line\">println(alice)</span><br><span class=\"line\">alice.moveTo(<span class=\"string\">\"London\"</span>)</span><br><span class=\"line\">alice.incrementAge()</span><br><span class=\"line\">println(alice)</span><br></pre></td></tr></table></figure>\n<p>域函数要结合lambda表达式使用。Kotlin中一共有五个域函数：<code>let</code>, <code>run</code>, <code>with</code>, <code>apply</code>, <code>also</code>。这些域函数有两个区别点。</p>\n<ul>\n<li>域函数中如何引用上下文对象</li>\n<li>域函数返回值</li>\n</ul>\n<h1 id=\"区别点：上下文对象\"><a href=\"#区别点：上下文对象\" class=\"headerlink\" title=\"区别点：上下文对象\"></a>区别点：上下文对象</h1><p>域函数中用<code>this</code>或者<code>it</code>指代上下文对象。</p>\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a>this</h2><p><code>run</code>, <code>with</code>和<code>apply</code>在lambda表达式中用<code>this</code>指代上下文对象，就好像lambda表达式是在对象内部调用的一样，<code>this</code>是可以省略的。对于调用对象内部方法、属性的代码，应当选择使用<code>this</code>指代的域函数。如果在域内要调用其他对象的函数，不要选择<code>this</code>指代，因为容易弄混。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> adam = Person(<span class=\"string\">\"Adam\"</span>).apply &#123;</span><br><span class=\"line\">  age = <span class=\"number\">20</span> <span class=\"comment\">// same as this.age = 20</span></span><br><span class=\"line\">  city = <span class=\"string\">\"Hangzhou\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"it\"><a href=\"#it\" class=\"headerlink\" title=\"it\"></a>it</h2><p><code>let</code>, <code>also</code>在lambda表达式中用<code>it</code>指代上下文对象，与<code>this</code>不同，在访问方法和对象时<code>it</code>是不能省略的。当上下文对象需要在域内充当函数参数时，就选用<code>it</code>类型的域函数。另一个便捷之处在于，可以为<code>it</code>指代别名。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRandomInt</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Random.nextInt(<span class=\"number\">100</span>).also &#123;</span><br><span class=\"line\">        writeToLog(<span class=\"string\">\"getRandomInt() generated value <span class=\"variable\">$it</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> i = getRandomInt()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为it指代别名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRandomInt</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123; value -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Random.nextInt(<span class=\"number\">100</span>).also &#123;</span><br><span class=\"line\">        writeToLog(<span class=\"string\">\"getRandomInt() generated value <span class=\"variable\">$value</span>\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"区别点：返回值\"><a href=\"#区别点：返回值\" class=\"headerlink\" title=\"区别点：返回值\"></a>区别点：返回值</h1><h2 id=\"Lambda表达式结果\"><a href=\"#Lambda表达式结果\" class=\"headerlink\" title=\"Lambda表达式结果\"></a>Lambda表达式结果</h2><p><code>let</code>, <code>run</code>和<code>with</code>返回lambda表达式的结果（最后一行），可以用这些域函数来进行赋值，也可以进行链式调用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> countEndsWithE = numbers.run &#123; </span><br><span class=\"line\">    add(<span class=\"string\">\"four\"</span>)</span><br><span class=\"line\">    add(<span class=\"string\">\"five\"</span>)</span><br><span class=\"line\">    count &#123; it.endsWith(<span class=\"string\">\"e\"</span>) &#125; <span class=\"comment\">// 返回count数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(<span class=\"string\">\"There are <span class=\"variable\">$countEndsWithE</span> elements that end with e.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 无视返回值，只是执行域函数内部操作</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">with(numbers) &#123; <span class=\"comment\">// with是this指代，可省略</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> firstItem = first()</span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastItem = last()        </span><br><span class=\"line\">    println(<span class=\"string\">\"First item: <span class=\"variable\">$firstItem</span>, last item: <span class=\"variable\">$lastItem</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"上下文对象\"><a href=\"#上下文对象\" class=\"headerlink\" title=\"上下文对象\"></a>上下文对象</h2><p><code>also</code>, <code>apply</code>返回上下文对象，可以继续对此进行链式调用，也可以直接返回上下文对象。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链式调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numberList = mutableListOf&lt;<span class=\"built_in\">Double</span>&gt;()</span><br><span class=\"line\">numberList.also &#123; println(<span class=\"string\">\"Populating the list\"</span>) &#125;</span><br><span class=\"line\">    .apply &#123; <span class=\"comment\">// 注意apply使用this指代（省略掉）</span></span><br><span class=\"line\">        add(<span class=\"number\">2.71</span>)</span><br><span class=\"line\">        add(<span class=\"number\">3.14</span>)</span><br><span class=\"line\">        add(<span class=\"number\">1.0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .also &#123; println(<span class=\"string\">\"Sorting the list\"</span>) &#125;</span><br><span class=\"line\">    .sort()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getRandomInt</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Random.nextInt(<span class=\"number\">100</span>).also &#123;</span><br><span class=\"line\">        writeToLog(<span class=\"string\">\"getRandomInt() generated value <span class=\"variable\">$it</span>\"</span>) <span class=\"comment\">// it指代上下文对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> i = getRandomInt()</span><br></pre></td></tr></table></figure>\n<h1 id=\"逐个函数讲解\"><a href=\"#逐个函数讲解\" class=\"headerlink\" title=\"逐个函数讲解\"></a>逐个函数讲解</h1><h2 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h2><p><strong>上下文对象</strong>是<code>it</code>，<strong>返回值</strong>是lambda表达式计算结果（最后一行）。</p>\n<p><code>let</code>可以作为链式调用中的一环来使用。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 链式调用</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>, <span class=\"string\">\"four\"</span>, <span class=\"string\">\"five\"</span>)</span><br><span class=\"line\">numbers.map &#123; it.length &#125;.filter &#123; it &gt; <span class=\"number\">3</span> &#125;.let &#123; </span><br><span class=\"line\">    println(it)</span><br><span class=\"line\">    <span class=\"comment\">// and more function calls if needed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 更加精简</span></span><br><span class=\"line\">numbers.map &#123; it.length &#125;.filter &#123; it &gt; <span class=\"number\">3</span> &#125;.let(::println)</span><br></pre></td></tr></table></figure>\n<p><code>let</code>经常用来在非空对象上执行一系列操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> str: String? = <span class=\"string\">\"Hello\"</span>   </span><br><span class=\"line\"><span class=\"comment\">//processNonNullString(str)       // compilation error: str can be null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> length = str?.let &#123; </span><br><span class=\"line\">    println(<span class=\"string\">\"let() called on <span class=\"variable\">$it</span>\"</span>)        </span><br><span class=\"line\">    processNonNullString(it)      <span class=\"comment\">// OK: 'it' is not null inside '?.let &#123; &#125;'</span></span><br><span class=\"line\">    it.length</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>let</code>另一个用法是为变量<code>it</code>创建别名，以增强代码可阅读性。借助于IDE，通常我们可以看到<code>it</code>指代的是什么对象，对这个用法的需求并非十分强烈。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numbers = listOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>, <span class=\"string\">\"four\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> modifiedFirstItem = numbers.first().let &#123; firstItem -&gt;</span><br><span class=\"line\">    println(<span class=\"string\">\"The first item of the list is '<span class=\"variable\">$firstItem</span>'\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstItem.length &gt;= <span class=\"number\">5</span>) firstItem <span class=\"keyword\">else</span> <span class=\"string\">\"!\"</span> + firstItem + <span class=\"string\">\"!\"</span></span><br><span class=\"line\">&#125;.toUpperCase()</span><br><span class=\"line\">println(<span class=\"string\">\"First item after modifications: '<span class=\"variable\">$modifiedFirstItem</span>'\"</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"with\"><a href=\"#with\" class=\"headerlink\" title=\"with\"></a>with</h2><p><code>with</code>不是扩展函数，它接收<strong>上下文对象</strong>作为函数参数，在lambda表达式中用<code>this</code>指代，返回结果是lambda表达式的值。</p>\n<p>建议在使用<code>with</code>时不要处理它的返回结果，这样<code>with</code>就可以根据字面含义简单的理解成“在这个对象上进行如下操作”。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">with(numbers) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">\"'with' is called with argument <span class=\"variable\">$this</span>\"</span>)</span><br><span class=\"line\">    println(<span class=\"string\">\"It contains <span class=\"variable\">$size</span> elements\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另一种用法是创建一个辅助对象，它的属性或者方法可以用来计算出某个值。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> firstAndLast = with(numbers) &#123; <span class=\"comment\">// 相当于声明了一个局部函数</span></span><br><span class=\"line\">    <span class=\"string\">\"The first element is <span class=\"subst\">$&#123;first()&#125;</span>,\"</span> +</span><br><span class=\"line\">    <span class=\"string\">\" the last element is <span class=\"subst\">$&#123;last()&#125;</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">println(firstAndLast)</span><br></pre></td></tr></table></figure>\n<h2 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h2><p>使用<code>this</code>指代上下文对象，返回结果是lambda表达式值。</p>\n<p><code>run</code>在含义上与<code>with</code>一致，在调用方式上与<code>let</code>一致。当需要进行对象初始化、并同时要返回一个计算结果时，应当使用<code>run</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> service = MultiportService(<span class=\"string\">\"https://example.kotlinlang.org\"</span>, <span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> result = service.run &#123;</span><br><span class=\"line\">    port = <span class=\"number\">8080</span></span><br><span class=\"line\">    query(prepareRequest() + <span class=\"string\">\" to port <span class=\"variable\">$port</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the same code written with let() function:</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> letResult = service.let &#123;</span><br><span class=\"line\">    it.port = <span class=\"number\">8080</span></span><br><span class=\"line\">    it.query(it.prepareRequest() + <span class=\"string\">\" to port <span class=\"subst\">$&#123;it.port&#125;</span>\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了在接收者对象上调用以外，<code>run</code>还可以让我们在需要一个表达式的地方传入一个代码块（这种用法略复杂）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> hexNumberRegex = run &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> digits = <span class=\"string\">\"0-9\"</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> hexDigits = <span class=\"string\">\"A-Fa-f\"</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> sign = <span class=\"string\">\"+-\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Regex(<span class=\"string\">\"[<span class=\"variable\">$sign</span>]?[<span class=\"variable\">$digits</span><span class=\"variable\">$hexDigits</span>]+\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (match <span class=\"keyword\">in</span> hexNumberRegex.findAll(<span class=\"string\">\"+1234 -FFFF not-a-number\"</span>)) &#123; <span class=\"comment\">// findAll正则匹配</span></span><br><span class=\"line\">    println(match.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * output: </span></span><br><span class=\"line\"><span class=\"comment\"> * +1234</span></span><br><span class=\"line\"><span class=\"comment\"> * -FFFF</span></span><br><span class=\"line\"><span class=\"comment\"> * -a</span></span><br><span class=\"line\"><span class=\"comment\"> * be</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><p>使用<code>this</code>指代上下文对象，返回值是上下文对象本身。</p>\n<p><code>apply</code>适用的场景是不需要返回值，且主要是操作对象成员的过程。常见的就是对象配置，“在对象上进行如下操作”。</p>\n<p><code>apply</code>可以很容易地变成链式操作。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> adam = Person(<span class=\"string\">\"Adam\"</span>).apply &#123;</span><br><span class=\"line\">    age = <span class=\"number\">32</span></span><br><span class=\"line\">    city = <span class=\"string\">\"London\"</span>        </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"also\"><a href=\"#also\" class=\"headerlink\" title=\"also\"></a>also</h2><p>使用<code>it</code>指代上下文对象，返回值是上下文对象本身。</p>\n<p><code>also</code>的使用场景是将对象作为一系列操作的参数，在这些操作中<strong>不应该对参数产生副作用</strong>，因此你可以在一个链式调用中很方便地加上<code>also</code>，或者从链式调用中把<code>also</code>摘掉，且不影响原有逻辑。</p>\n<p>当你在代码中看到<code>also</code>时，可以将其理解为“还需要做这些事情”。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> numbers = mutableListOf(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>)</span><br><span class=\"line\">numbers</span><br><span class=\"line\">    .also &#123; println(<span class=\"string\">\"The list elements before adding new one: <span class=\"variable\">$it</span>\"</span>) &#125;</span><br><span class=\"line\">    .add(<span class=\"string\">\"four\"</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>用一张表格列出函数的对象引用与返回值。</p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Object reference</th>\n<th>Return value</th>\n<th>Is extension function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>let</td>\n<td>it</td>\n<td>Lambda result</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>run</td>\n<td>it</td>\n<td>Lambda result</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>run</td>\n<td>-</td>\n<td>Lambda result</td>\n<td>No: called without the context object</td>\n</tr>\n<tr>\n<td>with</td>\n<td>this</td>\n<td>Lambda result</td>\n<td>No: takes the context object as an argument</td>\n</tr>\n<tr>\n<td>apply</td>\n<td>this</td>\n<td>Context object</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td>also</td>\n<td>it</td>\n<td>Context object</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<p>一个简单的函数选用指南如下，它们的应用场景有重叠的部分，使用时应当具体情况具体分析。</p>\n<ul>\n<li>在非空对象上调用lambda表达式：<code>let</code></li>\n<li>在域内将表达式抽象成一个变量：<code>let</code></li>\n<li>对象配置：<code>apply</code></li>\n<li>对象配置并计算结果：<code>run</code></li>\n<li>执行一系列表达式，非扩展函数：<code>run</code></li>\n<li>附加效果：<code>also</code></li>\n<li>将对于某个对象的函数调用组合：<code>with</code></li>\n</ul>\n<p>尽管作用域函数功能强大，在使用时应当谨慎，避免出错，尤其是嵌套的情况应当越少越好；当你在写链式调用时，一定要小心分辨当前的上下文对象。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://kotlinlang.org/docs/reference/scope-functions.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n</ul>\n","categories":[],"tags":["Android","Kotlin"]},{"title":"移动设备ID那些事","url":"https://lilei.pro/2019/10/12/unique-device-id/","content":"<h2 id=\"为什么需要设备ID\"><a href=\"#为什么需要设备ID\" class=\"headerlink\" title=\"为什么需要设备ID\"></a>为什么需要设备ID</h2><p>“设备ID”即用于标识设备唯一身份的ID，即 Unique Device Identifier。基于以下原因，我们经常需要处理设备ID相关功能：</p>\n<ol>\n<li>统计需求。DAU，MAU，转化率，用户行为等统计。</li>\n<li>业务需求。个性化推荐，日志收集，灰度发布，AB Test等业务侧需求。</li>\n<li>风控需求。防刷单，反作弊等。</li>\n</ol>\n<h2 id=\"设备ID的特征\"><a href=\"#设备ID的特征\" class=\"headerlink\" title=\"设备ID的特征\"></a>设备ID的特征</h2><p>为了满足以上需求，一个良好的设备ID方案应当具有“唯一性”和“稳定性”两个特征。</p>\n<ul>\n<li>唯一性：系统中的任意两台设备，它们的设备ID应当不同。</li>\n<li>稳定性：同一台设备在重启、清空应用数据、卸载应用重装、系统升级、Android 版本升级、刷机等情况下，设备ID应当保持不变。</li>\n</ul>\n<p>遗憾的是，Android 平台并没有稳定的API可以提供具有上面两点特征的ID。</p>\n<h2 id=\"可选方案及限制\"><a href=\"#可选方案及限制\" class=\"headerlink\" title=\"可选方案及限制\"></a>可选方案及限制</h2><p>关于Android设备ID，常见的方案有IMEI、MAC地址、Serial、AndroidID等，下面逐一介绍它们是什么，以及为何无法承担唯一ID的职责。</p>\n<h3 id=\"IMEI\"><a href=\"#IMEI\" class=\"headerlink\" title=\"IMEI\"></a>IMEI</h3><p>是 <strong>国际设备识别码（Imternational Mobile Equipment Identity）</strong> 的缩写，即通常所说的手机串号，用于在移动电话网络中识别每一部独立的手机等移动通信设备，共15~17位数字。在拨号键盘输入<code>*#06#</code>即可查看。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取IMEI的样例代码，需要 READ_PHONE_STATE 权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getIMEI</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> tm = getSystemService(Context.TELEPHONY_SERVICE) <span class=\"keyword\">as</span> TelephonyManager</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tm.deviceId</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在早些时候，IMEI是很多应用采取的设备ID方案，因为它读取方便，且同时具备唯一性和稳定性的特征。然而自从Android 6开始，<code>READ_PHONE_STATE</code>被列入<code>dangerous</code>的保护级别，意味着我们不仅要在<code>AndroidManifest.xml</code>文件里申请，还应当在应用到这个权限之前动态申请。尤其在中文的安卓系统上，弹窗里的文字提示是“申请电话设备信息”，很容易让人误以为这是要获取电话号码、短信内容等敏感信息。</p>\n<p>如果说Android 6只是提高了使用IMEI作为设备ID的门槛，Android 10则是完全堵死了这条路。在Android 10的系统里，即使申请了<code>READ_PHONE_STATE</code>权限，也无法获取IMEI，会抛出<code>SecurityException</code>异常或者返回null。</p>\n<h3 id=\"MAC地址\"><a href=\"#MAC地址\" class=\"headerlink\" title=\"MAC地址\"></a>MAC地址</h3><p>MAC地址（Media Access Control Address），用于标识可上网设备的唯一地址，设备有几张网卡，就会有几个MAC地址。在OSI七层模型中，MAC地址位于第二层数据链路层。看到这里你也许以为MAC地址是作为设备ID解决方案的最佳选择，实则不然，首先，MAC地址的获取方法历经多次修改，足见Google正欲收紧MAC地址权限，以后完全堵死也并非不可能。</p>\n<p>在 (?, 6.0)，[6.0, 7.0)，[7.0, ?) 三种不同的Android版本下，有着不同的获取MAC地址方式，可以参考简书这篇文章 <a href=\"https://www.jianshu.com/p/16d4ff4c4cbe\" target=\"_blank\" rel=\"noopener\">《Android 版本兼容 — Android 6.0 和 7.0后获取Mac地址》</a>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取MAC地址，适用于目前Android全版本，不保证以后继续适用（很大可能不再适用）</span></span><br><span class=\"line\"><span class=\"comment\">// 需要 android.permission.INTERNET 权限，为非dangerous权限，可以在AndroidManifst.xml中直接申请</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getMAC</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> enumeration = getNetworkInterfaces() ?: <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (enumeration.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> netInterface = enumeration.nextElement()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (netInterface.name == <span class=\"string\">\"wlan0\"</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> addr = netInterface.hardwareAddress</span><br><span class=\"line\">                <span class=\"keyword\">val</span> result = StringBuilder()</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (b <span class=\"keyword\">in</span> addr) &#123;</span><br><span class=\"line\">                    result.append(String.format(<span class=\"string\">\"%02X:\"</span>, b))</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result.isNotEmpty()) &#123;</span><br><span class=\"line\">                    result.deleteCharAt(result.length - <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result.toString()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        Log.e(<span class=\"string\">\"tag\"</span>, e.message, e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Serial\"><a href=\"#Serial\" class=\"headerlink\" title=\"Serial\"></a>Serial</h3><p>何为Serial？Serial即“设备序列号”，是设备厂商提供的设备唯一串号，唯一性由各厂商保证。拿vivo举例，它会保证自己生产的每一台设备序列号都是不同的，但是不是与OPPO的也不一样呢？这就无法保证了。一个方案是用<code>厂商ID_设备型号_序列号</code>拼接起来，作为设备ID，这样可以避免不同厂商设备具有相同Serial的问题。但是，并非所有厂商都会严格按照这个规定来做。我曾经在RK3399的开发板上做过开发，试过很多张板子，它们的Serial都是0123456789，让人哭笑不得。</p>\n<p>更糟糕的是，Android 10又堵死了获取Serial的路，会直接抛出<code>SecurityException</code>，除非应用是系统签名且具备<code>android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE</code>权限。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取Serial，需要 READ_PHONE_STATE 权限</span></span><br><span class=\"line\"><span class=\"comment\">// Android 10 异常 </span></span><br><span class=\"line\"><span class=\"comment\">// java.lang.SecurityException: getSerial: The user 10236 does not meet the requirements to access device identifiers.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getSerial</span><span class=\"params\">()</span></span> = android.os.Build.getSerial()</span><br></pre></td></tr></table></figure>\n<h3 id=\"AndroidID\"><a href=\"#AndroidID\" class=\"headerlink\" title=\"AndroidID\"></a>AndroidID</h3><p>AndroidID是SDK提供的获取ID方法，它不需要申明任何权限，具有64bit的取值范围，且唯一性也还不错。但是，它最大的硬伤在于无法满足稳定性：</p>\n<ul>\n<li>刷机、root、恢复出厂设置后都会变化</li>\n<li>对安装在8.0系统的应用来说，AndroidID取决于应用签名+设备两者的组合</li>\n<li>在8.0之前安装的应用，如果在系统升级到8.0后，卸载重装该应用，读取到的AndroidID会变化</li>\n</ul>\n<p>由于以上原因，在一些要求不严格的场景中，可以采用AndroidID作为设备ID，比如记录激活数、曝光数据等。但是在严格的场景中就不能用AndroidID了，如以设备ID标识用户身份，提供相应服务的场景。</p>\n<p>读取AndroidID的样例代码如下：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 读取AndroidID，不需要额外申请任何权限</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getAndroidID</span><span class=\"params\">()</span></span> = Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID)</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选方案总结\"><a href=\"#可选方案总结\" class=\"headerlink\" title=\"可选方案总结\"></a>可选方案总结</h2><p>用一张表格总结上述方案：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>概述</th>\n<th>限制</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IMEI</td>\n<td>具备唯一性和稳定性，过去的最佳选择</td>\n<td>Android10堵死，无法获取</td>\n</tr>\n<tr>\n<td>MAC</td>\n<td>网卡地址，唯一且稳定</td>\n<td>权限逐渐收紧，未来极有可能关闭</td>\n</tr>\n<tr>\n<td>Serial</td>\n<td>手机厂商提供的设备序列号</td>\n<td>不保证唯一性，Android10堵死</td>\n</tr>\n<tr>\n<td>AndroidID</td>\n<td>Android SDK 提供，不需要申请权限，唯一性较好</td>\n<td>不具备稳定性</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"设计一个新方案\"><a href=\"#设计一个新方案\" class=\"headerlink\" title=\"设计一个新方案\"></a>设计一个新方案</h2><p>上述四个方案里，没有哪一个是解决设备ID问题的终极武器（银弹），只有各种方法综合运用，才是解决之道。下面提出一种设备ID方案，综合使用多个硬件ID，借助服务器生成唯一虚拟设备ID（VDID），可以最大限度地保证唯一性和稳定性。</p>\n<h3 id=\"稳定性：拜占庭容错\"><a href=\"#稳定性：拜占庭容错\" class=\"headerlink\" title=\"稳定性：拜占庭容错\"></a>稳定性：拜占庭容错</h3><p>稳定性要求当获取不到某种ID，或者某种ID发生变化时，系统能够辨识出这个设备。借助“拜占庭容错”可以解决稳定性的问题。</p>\n<p>拜占庭容错机制源于古老 <strong>拜占庭将军（Byzantine failures）</strong> 问题。用简单的语言解释： <strong>如果系统中有n个故障节点，系统要想正确运行，必须至少要有2n+1个正常节点。</strong> 。但对于Android设备ID，我们采用弱化的拜占庭容错机制，即客户端每次上传4个ID（IMEI、MAC、Serial、AndroidID），服务器根据这4个ID生成一个随机的唯一ID即VDID。后续客户端再请求时，可以使用VDID，或者再次使用4个ID，由服务器拿这4个ID在数据库中进行查找VDID，若找到则返回，若未找到，再使用4个ID中的3个进行查找，3个不行则用2个，以此类推。</p>\n<h3 id=\"获取VDID的时序图\"><a href=\"#获取VDID的时序图\" class=\"headerlink\" title=\"获取VDID的时序图\"></a>获取VDID的时序图</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20191012_unique_device_id/vdid_sequence.png\" alt=\"vdid_sequence\" title=\"\">\n                </div>\n                <div class=\"image-caption\">vdid_sequence</div>\n            </figure>\n<h3 id=\"唯一性：VDID的生成方式与取值范围\"><a href=\"#唯一性：VDID的生成方式与取值范围\" class=\"headerlink\" title=\"唯一性：VDID的生成方式与取值范围\"></a>唯一性：VDID的生成方式与取值范围</h3><p>要实现VDID的唯一性，有两种方案可以考虑：</p>\n<h4 id=\"方案一：自增主键ID\"><a href=\"#方案一：自增主键ID\" class=\"headerlink\" title=\"方案一：自增主键ID\"></a>方案一：自增主键ID</h4><p>自增、分步自增、分段构造、Redis分布式ID等方法，可以保证唯一性。但是在传输此类ID时，应当进行hash操作，且保证hash后的ID不可碰撞。</p>\n<p>自增ID的优点是可作为索引，检索速度快；缺点是生成规则存在被破解的风险。</p>\n<h4 id=\"方案二：随机生成ID\"><a href=\"#方案二：随机生成ID\" class=\"headerlink\" title=\"方案二：随机生成ID\"></a>方案二：随机生成ID</h4><p>这是另一种生成唯一ID的方法，当位数足够多时，可以认为碰撞概率趋近于0。首先看一下这张表，它描述了随机数位数与发生碰撞的概率。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/20191012_unique_device_id/random_collision.png\" alt=\"random_collision\" title=\"\">\n                </div>\n                <div class=\"image-caption\">random_collision</div>\n            </figure>\n<p>假设我们应用的活跃用户数为20,000,000，即两千万。可以看到至少要有128Bits，才能在2*10^7（两千万）的数量级有极小的碰撞概率，符合我们的业务需求。</p>\n<p>随机ID的优点是具有隐蔽性，缺点是检索效率一般。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>本文是笔者阅读郭霖公众号推文<a href=\"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&amp;mid=2650247428&amp;idx=1&amp;sn=9d52f7b3262622f9ad25af8af167fcd8&amp;chksm=8863606bbf14e97deb5ecd030ff02ee76f6d320f1c0f586034e442903d00ff79dd7fc5bb3d91&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1570535190224&amp;sharer_shareid=50472349a2a49142535b8b535dc7dac9&amp;key=042d6afab53eaf2ecfd1c244abe072a53b13e46580bd8c41a7ed57b6b5f3360221dd5c5a4ea8dc0fcde4b6632ba630de39d070bbd64a7e4f24155cec02abb5dc1e36d0ecbc6e250d6f3f87c039ad1407&amp;ascene=1&amp;uin=OTUwMTI1NjEw&amp;devicetype=Windows+10&amp;version=62060833&amp;lang=zh_CN&amp;pass_ticket=hOoinQFE6HGs3U8dFKy9YsMWbVerXZqDJCY6dO0Rh4aIO4VWSduOo5tRbTZkwcN3\" target=\"_blank\" rel=\"noopener\">《漫谈设备唯一ID的那些秘密》</a>后的总结归纳，此处向原作者@呼啸长风致谢。然而作者原文中有一处纰漏，设备序列号（SERIAL）在Android 10上基本是无法获取的，这也会影响原作者提出的解决方案。笔者已经在Github上对此提了<a href=\"https://github.com/No89757/Udid/issues/1\" target=\"_blank\" rel=\"noopener\">issue</a>。</p>\n<p>出于对用户隐私的保护，Google一直试图收紧的设备ID的获取权限。而由于“账户”的概念在国内市场并不普遍，再加上各大OEM碎片化严重，国内的各种业务不得不依赖于设备ID进行展开。这也是开发者近年来不得不面对的问题，希望未来国内的Android生态可以更加统一，也希望Google也对此类需求提供更好的权限方案，能让开发者可以不必为此头痛。</p>\n","categories":[],"tags":["Android"]},{"title":"Flash Boys 读书笔记","url":"https://lilei.pro/2019/10/11/flash-boys/","content":"<h2 id=\"前言-背景与动机\"><a href=\"#前言-背景与动机\" class=\"headerlink\" title=\"前言-背景与动机\"></a>前言-背景与动机</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191011_flashboys/cover.jpg\" alt=\"cover\" title=\"\">\n                </div>\n                <div class=\"image-caption\">cover</div>\n            </figure>\n<p>Flash Boys，中译《高频交易员》，是金融畅销书作家迈克尔刘易斯 2015 年的作品，作者之前出版过《大空头》、《说谎者的扑克牌》等华尔街领域的流行作品。在这本书中，刘易斯借助“胜山”的角色，讲解了一些 HFT 的基础知识，可以给我等小白用来入门 HFT。</p>\n<p>书的前 2/3 值得细读，后 1/3 基本上都是给 IEX 做广告，一扫而过即可。</p>\n<h2 id=\"定义：何为-HFT（高频交易）\"><a href=\"#定义：何为-HFT（高频交易）\" class=\"headerlink\" title=\"定义：何为 HFT（高频交易）\"></a>定义：何为 HFT（高频交易）</h2><p>短线交易是经典力学，研究对象为每个周期的成交价格，最短 6 秒。</p>\n<p>高频交易是量子力学，6秒内可以发生上百次交易，最终成交价只是最后一笔订单的价格。</p>\n<p>交易所保留数据的频度是秒，二市场中高频交易主体的数据频度是纳秒级，1秒=10亿纳秒。</p>\n<p><strong>高频交易（High-Frequency Trading）</strong>是投资银行、对冲基金和专业交易公司等利用高速计算机进行程序化证券交易的投资策略的总称，主要包括以下几种策略：</p>\n<ul>\n<li>流动性回扣交易（Liquidity Rebate Trading）</li>\n<li>猎物算法交易（Predatory Algorithmic Trading）</li>\n<li>自动做市商交易（Automated Market Maker Trading, AMMs）</li>\n<li>闪电订单（Flash Order）</li>\n<li>暗池（Dark Pool）</li>\n</ul>\n<h2 id=\"理解：高频交易何以赚钱\"><a href=\"#理解：高频交易何以赚钱\" class=\"headerlink\" title=\"理解：高频交易何以赚钱\"></a>理解：高频交易何以赚钱</h2><p>假设某支股票价格在400~500元之间波动，股民老王下了一个单：当股票价格低于450元时，买入100股。当这个订单在交易所之间传递时（美国有十几家交易所，纽交所、纳斯达克是其中最耳熟能详的），需要几十毫秒的延迟时间，高频交易员就是在这几十毫秒里做文章。</p>\n<p>当股民老王的订单从交易所A传递给交易所B时，借助于高速网络，高频交易员先于交易所B得到这个信息，即“有一个订单是当股票价格低于450元时买100股”，此时如果交易所B的股票价格低于450，比如说是440，交易员就会买入它，再转手以450元的价格履行刚才得到的订单。在这笔交易中，高频交易员获利1000元，股民老王也以预期的450元价格购入了目标股票。</p>\n<blockquote>\n<p>2013年年初，最大的高频交易公司之一Virtu Financial公开称，在其5年半的交易中心仅有一天没有赚到钱，那一天还是因为出现了“人为误差”。</p>\n</blockquote>\n<p>一个高频交易公司可以在市场上疯狂交易而不带来任何附加价值，而且可以不承担任何风险，当它买入时，它知道有确切的卖家，当它卖出时，它知道肯定有人买。在每个交易日结束时，它在任何市场都完全不持有头寸。</p>\n<p>高频交易公司每天闭市时都是平仓的，他们作为买卖双方桥梁的时间极短，以至于根本没有人知道其存在。</p>\n<h2 id=\"高频交易的分类\"><a href=\"#高频交易的分类\" class=\"headerlink\" title=\"高频交易的分类\"></a>高频交易的分类</h2><h3 id=\"电子抢先交易（electronic-frontrunning）\"><a href=\"#电子抢先交易（electronic-frontrunning）\" class=\"headerlink\" title=\"电子抢先交易（electronic frontrunning）\"></a>电子抢先交易（electronic frontrunning）</h3><p>在一个地方探知投资者的交易信息后，在另一个地方抢在投资者之前通过一系列订单推高或拉低价格，并从中获利</p>\n<h3 id=\"回扣套利（rebate-arbitrage）\"><a href=\"#回扣套利（rebate-arbitrage）\" class=\"headerlink\" title=\"回扣套利（rebate arbitrage）\"></a>回扣套利（rebate arbitrage）</h3><p>交易所通常会为创造流动性的券商提供一定的交易费用回扣，高频交易者利用速度优势创造虚假流动性，骗取交易所的回扣</p>\n<h3 id=\"慢市场套利（slow-market-arbitrage）\"><a href=\"#慢市场套利（slow-market-arbitrage）\" class=\"headerlink\" title=\"慢市场套利（slow market arbitrage）\"></a>慢市场套利（slow market arbitrage）</h3><p>高频交易者在一个交易所探知到股票价格变动之后，再利用速度优势在另一个交易所反应过来之前进行买卖操作。这可能是使用最广的</p>\n<h2 id=\"疑问：赢家拿走一切\"><a href=\"#疑问：赢家拿走一切\" class=\"headerlink\" title=\"疑问：赢家拿走一切\"></a>疑问：赢家拿走一切</h2><p>在高频交易的战场上，是否意味着“赢家拿走一切”？如果甲的算法/线路比乙快10%，最终甲会获取所有的订单并完成交易，乙一分钱都拿不到？</p>\n","categories":[],"tags":["高频交易"]},{"title":"架构学习之 master-v2","url":"https://lilei.pro/2019/10/11/architecture-master-v2/","content":"<blockquote>\n<p>Move stones, not mountains.</p>\n</blockquote>\n<p>Google 官方的 <a href=\"https://github.com/googlesamples/android-architecture\" target=\"_blank\" rel=\"noopener\">Android Architecture Blueprints</a> 推出了 v2 版本，相比于之前的 v1 版本，v2 采取了更先进的设计思想与组件：</p>\n<ul>\n<li>采用 Kotlin Coroutines 处理后台操作</li>\n<li>单一 Activity 结构，用 <a href=\"https://developer.android.com/guide/navigation/navigation-getting-started\" target=\"_blank\" rel=\"noopener\">Navigation component</a> 处理Fragment 之间跳转</li>\n<li>由 Fragment(View) 和 ViewModel 组成的 Presentation 层，即 <strong>MVVM</strong> 模式</li>\n<li>基于 LiveData 和 DataBinding 的响应式（Reactive）UI</li>\n<li>data 层使用一个 Repository 和两个 Datasource（本地数据、远端数据），采用直观的调用方式（非回调、非 data stream）</li>\n<li>两个 product flavor，分别是<code>mock</code>和<code>prod</code>，对应着测试与开发环境</li>\n<li>一系列单元测试、集成测试以及端到端测试</li>\n</ul>\n<p>接下来从源码角度解析 master 分支工程，看看 v2 究竟可以为我们带来什么便利。</p>\n<hr>\n<h2 id=\"程序入口\"><a href=\"#程序入口\" class=\"headerlink\" title=\"程序入口\"></a>程序入口</h2><p>入口在<code>TasksActivity.java</code>，注意到这是一个“SPA”，即 Single Page Application，在<code>AndroidManifest.xml</code>中只声明了这一个 Activity。<code>TasksActivity</code>实际上只是一个壳页面，只处理了 Navigation、ActionBar、NavigationDrawer 等基础功能。它在<code>onCreate</code>里进行这些初始化：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> drawerLayout: DrawerLayout</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> appBarConfiguration: AppBarConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">    setContentView(R.layout.tasks_act)</span><br><span class=\"line\">    setupNavigationDrawer()</span><br><span class=\"line\">    setSupportActionBar(findViewById(R.id.toolbar))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> navController: NavController = findNavController(R.id.nav_host_fragment)</span><br><span class=\"line\">    appBarConfiguration =</span><br><span class=\"line\">        AppBarConfiguration.Builder(R.id.tasks_fragment_dest, R.id.statistics_fragment_dest)</span><br><span class=\"line\">            .setDrawerLayout(drawerLayout)</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">    setupActionBarWithNavController(navController, appBarConfiguration)</span><br><span class=\"line\">    findViewById&lt;NavigationView&gt;(R.id.nav_view)</span><br><span class=\"line\">        .setupWithNavController(navController)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该应用采用 Navigation component 管理页面跳转，跳转关系在<code>nav_graph.xml</code>文件中以可视化的方式呈现。我们这里不需要关心跳转组件的具体用法， 只要知道它可以启动我们要分析的<code>TasksFragment</code>就可以了。</p>\n<h2 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h2><p>我习惯从数据开始分析代码走向，看一下<code>data</code>目录的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">λ tree data</span><br><span class=\"line\">data</span><br><span class=\"line\">|-- Result.kt</span><br><span class=\"line\">|-- Task.kt</span><br><span class=\"line\">`-- <span class=\"built_in\">source</span></span><br><span class=\"line\">    |-- DefaultTasksRepository.kt</span><br><span class=\"line\">    |-- TasksDataSource.kt</span><br><span class=\"line\">    |-- TasksRepository.kt</span><br><span class=\"line\">    `-- <span class=\"built_in\">local</span></span><br><span class=\"line\">        |-- TasksDao.kt</span><br><span class=\"line\">        |-- TasksLocalDataSource.kt</span><br><span class=\"line\">        `-- ToDoDatabase.kt</span><br></pre></td></tr></table></figure>\n<h3 id=\"Result-kt-与-Task-kt\"><a href=\"#Result-kt-与-Task-kt\" class=\"headerlink\" title=\"Result.kt 与 Task.kt\"></a>Result.kt 与 Task.kt</h3><p><code>Result.kt</code>是一个数据请求的结果封装类，业务层对数据的请求均是通过 Result 对象进行封装。这个类使用到了多个 Kotlin 特性，容我在注释里一一说明。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">sealed</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span>&lt;<span class=\"type\">out R</span>&gt; </span>&#123; <span class=\"comment\">// 密封类，将继承限制在类内部；out 类型，协变，保留子类型化关系</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Success</span>&lt;<span class=\"type\">out T</span>&gt;</span>(<span class=\"keyword\">val</span> <span class=\"keyword\">data</span>: T) : Result&lt;T&gt;() <span class=\"comment\">// data 类，协变类型T可以用作构造参数</span></span><br><span class=\"line\">    <span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Error</span></span>(<span class=\"keyword\">val</span> exception: Exception) : Result&lt;<span class=\"built_in\">Nothing</span>&gt;() <span class=\"comment\">// Nothing类型，永不返回</span></span><br><span class=\"line\">    <span class=\"keyword\">object</span> Loading : Result&lt;<span class=\"built_in\">Nothing</span>&gt;() <span class=\"comment\">// object直接创建对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">toString</span><span class=\"params\">()</span></span>: String &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">when</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">is</span> Success&lt;*&gt; -&gt; <span class=\"string\">\"Success[data=<span class=\"variable\">$data</span>]\"</span> <span class=\"comment\">// *表示不关心具体类型</span></span><br><span class=\"line\">            <span class=\"keyword\">is</span> Error -&gt; <span class=\"string\">\"Error[exception=<span class=\"variable\">$exception</span>]\"</span></span><br><span class=\"line\">            Loading -&gt; <span class=\"string\">\"Loading\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * `true` if [Result] is of type [Success] &amp; holds non-null [Success.data].</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> Result&lt;*&gt;.succeeded <span class=\"comment\">// 扩展属性，注意命名不是isSuccess（Chinglish）</span></span><br><span class=\"line\">  <span class=\"keyword\">get</span>() = <span class=\"keyword\">this</span> <span class=\"keyword\">is</span> Success &amp;&amp; <span class=\"keyword\">data</span> != <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n<p><code>Task.kt</code>描述了任务对象，由<code>title</code>、<code>description</code>、<code>completed</code>和<code>id</code>四个字段构成，同时借助 Room 组件自动关联到名为<strong>tasks</strong>的数据表。</p>\n<h3 id=\"数据接口：TasksDataSource-kt-与-TasksRepository-kt\"><a href=\"#数据接口：TasksDataSource-kt-与-TasksRepository-kt\" class=\"headerlink\" title=\"数据接口：TasksDataSource.kt 与 TasksRepository.kt\"></a>数据接口：TasksDataSource.kt 与 TasksRepository.kt</h3><p><code>TasksDataSource.kt</code>和<code>TasksRepository.kt</code>是两个接口类，内容十分相似：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TasksDataSource.kt</span></span><br><span class=\"line\"><span class=\"comment\">// Main entry point for accessing tasks data.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TasksDataSource</span> </span>&#123;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTasks</span><span class=\"params\">()</span></span>: Result&lt;List&lt;Task&gt;&gt;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span>: Result&lt;Task&gt;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">completeTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">completeTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activateTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activateTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">clearCompletedTasks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteAllTasks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TasksRepository.kt</span></span><br><span class=\"line\"><span class=\"comment\">// Interface to the data layer.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TasksRepository</span> </span>&#123;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTasks</span><span class=\"params\">(forceUpdate: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span>: Result&lt;List&lt;Task&gt;&gt;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>, forceUpdate: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span>: Result&lt;Task&gt;</span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">saveTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">completeTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">completeTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activateTask</span><span class=\"params\">(task: <span class=\"type\">Task</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">activateTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">clearCompletedTasks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteAllTasks</span><span class=\"params\">()</span></span></span><br><span class=\"line\">    suspend <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">deleteTask</span><span class=\"params\">(taskId: <span class=\"type\">String</span>)</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到两者的方法几乎是一样的：名字和数量相同，区别仅仅在于<code>TasksRepository</code>中的个别方法多了<code>forceUpdate</code>参数。不过，这两个接口在语义上是不同的。</p>\n<ul>\n<li><code>TasksDatasource</code>是底层数据封装，数据可能来自网络，也可能来自于文件、数据库。</li>\n<li><code>TasksRepository</code>是数据层对外的接口，业务代码通过该接口对数据进行增删改查。<code>forceUpdate</code>参数作用于接口实现类内部的缓存。</li>\n<li><code>suspend</code>关键字说明它们均为 Coroutines 接口。</li>\n</ul>\n<p>然后我们来看下对外的接口是如何给到使用者的。<code>TodoApplication</code>类继承自<code>Application</code>，其中有一个成员变量<code>taskRepository</code>。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TodoApplication.kt</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> taskRepository: TasksRepository</span><br><span class=\"line\">    <span class=\"keyword\">get</span>() = ServiceLocator.provideTasksRepository(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// ServiceLocator.kt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">provideTasksRepository</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: TasksRepository &#123;</span><br><span class=\"line\">    synchronized(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tasksRepository ?: tasksRepository ?: createTasksRepository(context)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">createTasksRepository</span><span class=\"params\">(context: <span class=\"type\">Context</span>)</span></span>: TasksRepository &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DefaultTasksRepository(FakeTasksRemoteDataSource, createTaskLocalDataSource(context))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// TodoApplication.taskRepository 通过 Fragment 的扩展方法给到各个 Fragment</span></span><br><span class=\"line\"><span class=\"comment\">// FragmentExt.kt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Fragment.<span class=\"title\">getViewModelFactory</span><span class=\"params\">()</span></span>: ViewModelFactory &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> repository = (requireContext().applicationContext <span class=\"keyword\">as</span> TodoApplication).taskRepository</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ViewModelFactory(repository)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"local-目录：本地数据实现\"><a href=\"#local-目录：本地数据实现\" class=\"headerlink\" title=\"local 目录：本地数据实现\"></a>local 目录：本地数据实现</h3><p>local 目录下是<code>TasksDatasource</code>的本地实现，与此相对的，若数据来源于网络，则还应当有一个 remote 目录。</p>\n<ul>\n<li><code>ToDoDatabase</code> 是数据库声明</li>\n<li><code>TasksDao</code> 声明 tasks 表的 CRUD 操作</li>\n<li><code>TasksLocalDataSource</code> 是<code>TasksDataSource</code>的本地实现，使用<code>Dispatchers.IO</code>作为协程上下文，调用<code>TasksDao</code>完成数据操作</li>\n</ul>\n<h3 id=\"数据层总结\"><a href=\"#数据层总结\" class=\"headerlink\" title=\"数据层总结\"></a>数据层总结</h3><p>相比于曾经分析过的<strong>todo-mvp</strong>和<strong>todo-mvp-clean</strong>，最直观的感受是，v2在保证数据接口语义不变的前提下，借助 Coroutines 简化了原有的回调写法，用同步的方式写异步的代码。此外，像使用 Room 做 ORM、local/remote 两套数据实现等，与之前的项目并无不同。</p>\n<hr>\n<h2 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h2><h3 id=\"背景知识：ViewModel-与-LiveData\"><a href=\"#背景知识：ViewModel-与-LiveData\" class=\"headerlink\" title=\"背景知识：ViewModel 与 LiveData\"></a>背景知识：ViewModel 与 LiveData</h3><p>ViewModel 与 LiveData 都是 Android Jetpack 中的架构组件，它们通常组合使用，达到将数据和视图解耦的目的。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191011_architecture_master_v2/jetpack.png\" alt=\"jetpack\" title=\"\">\n                </div>\n                <div class=\"image-caption\">jetpack</div>\n            </figure>\n<p><strong>ViewModel</strong></p>\n<ul>\n<li>避免屏幕旋转等事件发生时，保存在 Activity 中的数据被销毁并重建</li>\n<li>异步回调时防止内存泄漏、Context 为 Null</li>\n<li>将数据和视图解耦，防止出现 God Activities 和 God Fragments</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/191011_architecture_master_v2/viewmodel.png\" alt=\"viewmodel\" title=\"\">\n                </div>\n                <div class=\"image-caption\">viewmodel</div>\n            </figure>\n<p><strong>LiveData</strong></p>\n<ul>\n<li>DataBinding 思想的一种实现，数据/视图双向绑定</li>\n<li>与生命周期关联，页面销毁后自动将其从订阅者列表去除</li>\n</ul>\n<h3 id=\"ViewModelFactory\"><a href=\"#ViewModelFactory\" class=\"headerlink\" title=\"ViewModelFactory\"></a>ViewModelFactory</h3><p>ViewModel 的创建采用工厂模式进行统一管理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ViewModelFactory.kt</span></span><br><span class=\"line\"><span class=\"meta\">@Suppress(<span class=\"meta-string\">\"UNCHECKED_CAST\"</span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewModelFactory</span> <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tasksRepository: TasksRepository</span><br><span class=\"line\">) : ViewModelProvider.NewInstanceFactory() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"type\">&lt;T : ViewModel&gt;</span> <span class=\"title\">create</span><span class=\"params\">(modelClass: <span class=\"type\">Class</span>&lt;<span class=\"type\">T</span>&gt;)</span></span> =</span><br><span class=\"line\">        with(modelClass) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">                isAssignableFrom(StatisticsViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>) -&gt;</span></span><br><span class=\"line\">                    StatisticsViewModel(tasksRepository)</span><br><span class=\"line\">                isAssignableFrom(TaskDetailViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>) -&gt;</span></span><br><span class=\"line\">                    TaskDetailViewModel(tasksRepository)</span><br><span class=\"line\">                isAssignableFrom(AddEditTaskViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>) -&gt;</span></span><br><span class=\"line\">                    AddEditTaskViewModel(tasksRepository)</span><br><span class=\"line\">                isAssignableFrom(TasksViewModel::<span class=\"class\"><span class=\"keyword\">class</span>.<span class=\"title\">java</span>) -&gt;</span></span><br><span class=\"line\">                    TasksViewModel(tasksRepository)</span><br><span class=\"line\">                <span class=\"keyword\">else</span> -&gt;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> IllegalArgumentException(<span class=\"string\">\"Unknown ViewModel class: <span class=\"subst\">$&#123;modelClass.name&#125;</span>\"</span>)</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">as</span> T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还记得上文提到过为 Fragment 增加的扩展函数吗？在每一个页面（Fragment）里通过这个扩展函数获取到工厂类，进而获得对应 ViewModel 类的实例。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FragmentExt.kt</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> Fragment.<span class=\"title\">getViewModelFactory</span><span class=\"params\">()</span></span>: ViewModelFactory &#123;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> repository = (requireContext().applicationContext <span class=\"keyword\">as</span> TodoApplication).taskRepository</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ViewModelFactory(repository)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TasksFragment.kt</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksFragment</span> : <span class=\"type\">Fragment</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> viewModel <span class=\"keyword\">by</span> viewModels&lt;TasksViewModel&gt; &#123; getViewModelFactory() &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来是 ViewModel 类，它承担了与 Presenter 类似的职责，是处理业务逻辑的地方。如果需要的话，可以增加一个 Domain 层，负责提取出来的业务逻辑（Use cases），提供复用，这样就变成了 <a href=\"https://github.com/googlesamples/android-architecture/tree/usecases\" target=\"_blank\" rel=\"noopener\">MVVM-Clean</a> 模式。在 master 分支上还没有 domain 层。</p>\n<h3 id=\"TasksViewModel\"><a href=\"#TasksViewModel\" class=\"headerlink\" title=\"TasksViewModel\"></a>TasksViewModel</h3><p>ViewModel 接受一个 TasksRepository 参数，用作数据层接口。（在clean架构里，这里传入的不是Repository，而是UseCases）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksViewModel</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tasksRepository: TasksRepository</span><br><span class=\"line\">) : ViewModel() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后声明了一系列变量作为页面数据&amp;状态，这里采用“一个对象，两个变量”的成对写法，略显繁琐，不知道有没有更优美的处理方法。这样做的目的是把对变量的修改关闭，对外（即LiveData）仅提供读取变量的接口，只可以在 ViewModel 内部修改变量。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _items = MutableLiveData&lt;List&lt;Task&gt;&gt;().apply &#123; value = emptyList() &#125; <span class=\"comment\">// 以下划线开头的为私有变量，apply 和 with 的用法要分清，相当于调用 _items.setValue(emptyList()); return _items;</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> items: LiveData&lt;List&lt;Task&gt;&gt; = _items</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _dataLoading = MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> dataLoading: LiveData&lt;<span class=\"built_in\">Boolean</span>&gt; = _dataLoading</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _currentFilteringLabel = MutableLiveData&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> currentFilteringLabel: LiveData&lt;<span class=\"built_in\">Int</span>&gt; = _currentFilteringLabel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _noTasksLabel = MutableLiveData&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> noTasksLabel: LiveData&lt;<span class=\"built_in\">Int</span>&gt; = _noTasksLabel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _noTaskIconRes = MutableLiveData&lt;<span class=\"built_in\">Int</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> noTaskIconRes: LiveData&lt;<span class=\"built_in\">Int</span>&gt; = _noTaskIconRes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _tasksAddViewVisible = MutableLiveData&lt;<span class=\"built_in\">Boolean</span>&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> tasksAddViewVisible: LiveData&lt;<span class=\"built_in\">Boolean</span>&gt; = _tasksAddViewVisible</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _snackbarText = MutableLiveData&lt;Event&lt;<span class=\"built_in\">Int</span>&gt;&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> snackbarText: LiveData&lt;Event&lt;<span class=\"built_in\">Int</span>&gt;&gt; = _snackbarText</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">var</span> _currentFiltering = TasksFilterType.ALL_TASKS   <span class=\"comment\">// Not used at the moment private val isDataLoadingError = MutableLiveData&lt;Boolean&gt;()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _openTaskEvent = MutableLiveData&lt;Event&lt;String&gt;&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> openTaskEvent: LiveData&lt;Event&lt;String&gt;&gt; = _openTaskEvent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">val</span> _newTaskEvent = MutableLiveData&lt;Event&lt;<span class=\"built_in\">Unit</span>&gt;&gt;()</span><br><span class=\"line\"><span class=\"keyword\">val</span> newTaskEvent: LiveData&lt;Event&lt;<span class=\"built_in\">Unit</span>&gt;&gt; = _newTaskEvent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This LiveData depends on another so we can use a transformation.</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> empty: LiveData&lt;<span class=\"built_in\">Boolean</span>&gt; = Transformations.map(_items) &#123;</span><br><span class=\"line\"> it.isEmpty()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以说管理上面这些数据是 ViewModel 最主要的职责了，从功能上区分，这些数据可以分成<strong>3种</strong>。</p>\n<ol>\n<li>业务实体如 items（任务对象列表），ViewModel 通过修改这类对象，借助于 DataBinding 更新 UI</li>\n<li>数据状态对象如 dataLoading（是否正在加载数据）、currentFilteringLabel（当前的过滤器文字）、noTasksLabel（没有任务的文字）、snackbarText（提示栏文字），这一类对象不进行持久化存储，但是也会影响到 UI 显示</li>\n<li>事件包装对象如 openTaskEvent（打开某个任务，在点击列表中的任务时触发）、newTaskEvent（创建一个任务，在点击+时触发），它们负责通知页面进行跳转——这部分设计得不佳，为了 DataBinding 而强行 DataBinding</li>\n</ol>\n<p>总之贯彻的思想是：一切变动都是数据变动，数据变动通过 DataBinding 自动投射到 UI。</p>\n<hr>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图也就是<code>TasksFragment.kt</code>类，负责初始化布局，触发 ViewModel 进行首次加载。这里的 Fragment 继承自 androidx 中的 Fragment。</p>\n<p>在<code>onCreateView</code>里初始化 DataBinding（数据）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreateView</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    inflater: <span class=\"type\">LayoutInflater</span>, container: <span class=\"type\">ViewGroup</span>?,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  savedInstanceState: <span class=\"type\">Bundle</span>?</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span>: View? &#123;</span><br><span class=\"line\">    viewDataBinding = TasksFragBinding.inflate(inflater, container, <span class=\"literal\">false</span>).apply &#123;</span><br><span class=\"line\">    viewmodel = viewModel</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  setHasOptionsMenu(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> viewDataBinding.root</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>onActivityCreated</code>里初始化 UI（视图），初始化完成后启动加载（代码最后一行）。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set the lifecycle owner to the lifecycle of the view</span></span><br><span class=\"line\">    viewDataBinding.lifecycleOwner = <span class=\"keyword\">this</span>.viewLifecycleOwner</span><br><span class=\"line\">    setupSnackbar()</span><br><span class=\"line\">    setupListAdapter()</span><br><span class=\"line\">    setupRefreshLayout(viewDataBinding.refreshLayout, viewDataBinding.tasksList)</span><br><span class=\"line\">    setupNavigation()</span><br><span class=\"line\">    setupFab()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Always reloading data for simplicity. Real apps should only do this on first load and</span></span><br><span class=\"line\">    <span class=\"comment\">// when navigating back to this destination. <span class=\"doctag\">TODO:</span> https://issuetracker.google.com/79672220</span></span><br><span class=\"line\">    viewModel.loadTasks(<span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此外，Fragment 中还会进行设置 OnClickListener、Adapter 等操作，比较简单，不赘述。</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>v2 的项目设计时采取了 MVVM 思想，旨在解决 MVP 模式下Presenter 层过于庞大的问题。其实 MVP-Clean 模式已经对此有一些缓解。而 MVVM 做的更彻底，干脆把数据对 UI 的控制完全交给框架自动进行。这样做的好处显而易见，但也并不是没有缺点，比如一旦出了问题，如果没有掌握个中原理，调试时必定摸不清头绪。总而言之，这是一个值得学习与尝试的架构设计。</p>\n<hr>\n<h2 id=\"Bonus：usecases\"><a href=\"#Bonus：usecases\" class=\"headerlink\" title=\"Bonus：usecases\"></a>Bonus：usecases</h2><p><a href=\"https://github.com/googlesamples/android-architecture/tree/usecases\" target=\"_blank\" rel=\"noopener\">usecases</a> 是 v2 中的一个 Stable<br> 分支（另一个是<a href=\"https://github.com/googlesamples/android-architecture/tree/dagger-android\" target=\"_blank\" rel=\"noopener\">dagger-android</a>)。usecases 以解耦、抽象、单向依赖为核心设计理念，这也是 Clean 架构的核心思想。</p>\n<ul>\n<li>表现层只能访问到领域层/用例层，不知道数据层的存在</li>\n<li>领域层/用例层只能访问到数据层，无法访问表现层</li>\n<li>数据层无法访问表现层和领域层</li>\n</ul>\n<p>领域层（或者叫用例层），即 Domain Layer，是由多个 UseCase 组成的，每一个 UseCase 对应一个业务逻辑。以“加载单个Task”为例，可以看到 UseCase 里直接将请求转发给 TasksRepository 来处理，逻辑十分简单。</p>\n<p>在分析具体差别之前，可以先看一遍 usecase 分支与 master 分支的 diff：<a href=\"https://github.com/googlesamples/android-architecture/compare/usecases#files_bucket\" target=\"_blank\" rel=\"noopener\">https://github.com/googlesamples/android-architecture/compare/usecases#files_bucket</a></p>\n<p><strong>GetTaskUseCase.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTaskUseCase</span></span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tasksRepository: TasksRepository</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    suspend <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">invoke</span><span class=\"params\">(taskId: <span class=\"type\">String</span>, forceUpdate: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>)</span></span>: Result&lt;Task&gt; &#123;</span><br><span class=\"line\">    wrapEspressoIdlingResource &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tasksRepository.getTask(taskId, forceUpdate)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而获取 Tasks 列表的 Usecase 相对复杂一些，包括了原本在 TasksViewModel 中处理的过滤逻辑，从另一个角度看，这相当于减轻了 ViewModel 的负担。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTasksUseCase</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> tasksRepository: TasksRepository</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    suspend <span class=\"keyword\">operator</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">invoke</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        forceUpdate: <span class=\"type\">Boolean</span> = <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        currentFiltering: <span class=\"type\">TasksFilterType</span> = ALL_TASKS</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    )</span></span>: Result&lt;List&lt;Task&gt;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        wrapEspressoIdlingResource &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">val</span> tasksResult = tasksRepository.getTasks(forceUpdate)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Filter tasks</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tasksResult <span class=\"keyword\">is</span> Success &amp;&amp; currentFiltering != ALL_TASKS) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> tasks = tasksResult.<span class=\"keyword\">data</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">val</span> tasksToShow = mutableListOf&lt;Task&gt;()</span><br><span class=\"line\">                <span class=\"comment\">// We filter the tasks based on the requestType</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (task <span class=\"keyword\">in</span> tasks) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">when</span> (currentFiltering) &#123;</span><br><span class=\"line\">                        ACTIVE_TASKS -&gt; <span class=\"keyword\">if</span> (task.isActive) &#123;</span><br><span class=\"line\">                            tasksToShow.add(task)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        COMPLETED_TASKS -&gt; <span class=\"keyword\">if</span> (task.isCompleted) &#123;</span><br><span class=\"line\">                            tasksToShow.add(task)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span> -&gt; NotImplementedError()</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Success(tasksToShow)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tasksResult</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至于 ViewModel 里，将原来的 Repository 参数改为当前 ViewModel 用到的 UseCase 参数即可，所有处理数据的请求都有 UseCase 来接管。</p>\n<p><strong>TasksViewModel.kt</strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksViewModel</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> getTasksUseCase: GetTasksUseCase,</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> clearCompletedTasksUseCase: ClearCompletedTasksUseCase,</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> completeTaskUseCase: CompleteTaskUseCase,</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> activateTaskUseCase: ActivateTaskUseCase</span><br><span class=\"line\">) : ViewModel() &#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Over~</p>\n","categories":[],"tags":["架构"]},{"title":"《Java 并发编程实战》勘误表 2019-08-27","url":"https://lilei.pro/2019/08/27/jcip-errata/","content":"<p>Java Concurrency in Practice 是一本讲解 JVM 下并发编程知识的经典作品，建议有志于资深的 Java 工程师将其纳入自己的读书计划中，相信一定会大有裨益。</p>\n<p>在阅读这本书的过程中，我发现中文版本有很多显而易见的错误，尤其是代码里条件判断有时根本是反着来的（本应是<code>&gt;=</code>的条件，书里面却是<code>&lt;</code>）。Google 搜索之后发现在 <a href=\"http://jcip.net/errata.html\" target=\"_blank\" rel=\"noopener\">http://jcip.net/errata.html</a> 有英文原版的勘误表，由于中文版本没有勘误表，故翻译在此，希望可以有所帮助。</p>\n<p>使用之前请确认自己手中的书籍版本是否相符。</p>\n<h1 id=\"本文适用的中文版本\"><a href=\"#本文适用的中文版本\" class=\"headerlink\" title=\"本文适用的中文版本\"></a>本文适用的中文版本</h1><ul>\n<li>书名：《Java 并发编程实战》，Java Concurrency in Practice</li>\n<li>作者：Brain Goetz, Tim Peierls 等</li>\n<li>译者：童云兰 等</li>\n<li>ISBN：978-7-111-37004-8</li>\n<li>出版社：机械工业出版社</li>\n<li>出版时间：2012.2 第一版，2018.9 重印</li>\n<li>定价：69 元</li>\n<li>豆瓣链接：<a href=\"https://book.douban.com/subject/10484692/\" target=\"_blank\" rel=\"noopener\">https://book.douban.com/subject/10484692/</a></li>\n</ul>\n<h1 id=\"勘误数据来源\"><a href=\"#勘误数据来源\" class=\"headerlink\" title=\"勘误数据来源\"></a>勘误数据来源</h1><p><a href=\"http://jcip.net/errata.html\" target=\"_blank\" rel=\"noopener\">官方勘误表</a></p>\n<h1 id=\"中文版勘误表\"><a href=\"#中文版勘误表\" class=\"headerlink\" title=\"中文版勘误表\"></a>中文版勘误表</h1><table>\n<thead>\n<tr>\n<th>页码</th>\n<th>勘误</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>p.5</td>\n<td>程序清单 1-1 下面的第一段，<code>someVariable++</code>应为<code>value++</code></td>\n</tr>\n<tr>\n<td>p.6</td>\n<td>程序清单 1-2，<code>Value</code>应为<code>value</code></td>\n</tr>\n<tr>\n<td>p.53</td>\n<td>4.3 节上面的最后一段，<code>getLocation</code>应为<code>getLocations</code></td>\n</tr>\n<tr>\n<td>p.58</td>\n<td>程序清单 4-11，<code>SafePoint(int x, int y)</code>构造函数的函数体可以精简为<code>set(x, y)</code></td>\n</tr>\n<tr>\n<td>p.62</td>\n<td>程序清单 4-16，<code>if(contains)</code>应为<code>if(!contains)</code></td>\n</tr>\n<tr>\n<td>p.75</td>\n<td>5.3.1 第一段，<code>DiskCrawler</code>应为<code>FileCrawler</code></td>\n</tr>\n<tr>\n<td>p.100</td>\n<td>程序清单 6-7 下面第二段，<code>在 ExcutorService 关闭后提交的任务将由“拒绝执行处理器（Rejected Execution Handler）来处理</code>表述有误，<code>Rejected Execution Handler</code>是仅在<code>ThreadPoolExecutor</code>实现中提供的，并非所有的<code>ExecutorService</code>实现都具备此功能</td>\n</tr>\n<tr>\n<td>p.122</td>\n<td>第二行，<code>那么调用 close 或 wakeup 方法会使线程抛出 ClosedSelectorException</code>，只有<code>close</code>方法会抛出该异常，<code>wakeup</code>方法不会</td>\n</tr>\n<tr>\n<td>p.163</td>\n<td>程序清单 9-6，第一个<code>if(runningTask != null)</code>判断条件应为<code>(runningTask == null)</code></td>\n</tr>\n<tr>\n<td>p.214</td>\n<td>程序清单 12-9，<code>Executors.newFixedThreadPool(MAX_SIZE)</code>方法调用应该增加第二个参数<code>threadFactory</code></td>\n</tr>\n<tr>\n<td>p.229</td>\n<td>程序清单 13-3，代码倒数第三行<code>if (System.nanoTime() &lt; stopTime)</code>判断条件里的<code>&lt;</code>应为<code>&gt;=</code></td>\n</tr>\n</tbody>\n</table>\n<p>以上就是中文版《Java 并发编程实战》的勘误表，如有遗漏，欢迎通过文末留言联系我进行补充。</p>\n","categories":[],"tags":["Java"]},{"title":"架构学习之 mvp-clean","url":"https://lilei.pro/2019/08/21/architecture-todo-mvp-clean/","content":"<blockquote>\n<p>I am the STORM!!!</p>\n</blockquote>\n<p>上一篇文章介绍了 MVP 模式，作为 Android 最朴实的架构，MVP 足以应对复杂度较低的业务场景，回想 2014~2015 年在 DP 做预订闪惠的日子，用的便是 MVP。</p>\n<p>然而随着业务复杂度增加，Presenter 层的逻辑会随之变重，导致的结果便是 Presenter 类过大，动辄一两千行代码，实在是丑陋。在这种场景下，Clean 架构是一个很好的选择。</p>\n<h2 id=\"关于-Clean\"><a href=\"#关于-Clean\" class=\"headerlink\" title=\"关于 Clean\"></a>关于 Clean</h2><h3 id=\"什么是-Clean\"><a href=\"#什么是-Clean\" class=\"headerlink\" title=\"什么是 Clean\"></a>什么是 Clean</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp_clean/CleanArchitecture.jpg\" alt=\"CleanArchitecture\" title=\"\">\n                </div>\n                <div class=\"image-caption\">CleanArchitecture</div>\n            </figure>\n<p>Clean 架构最初并不是为了针对 Android 平台的问题而提出，而是作为<strong>软件系统</strong>的通用架构被设计出来，如上面的同心圆所示，它的核心思想是<strong>The Dependency Rule（单向依赖原则）</strong>，即只能从外层向内层依赖，内层对外层一无所知，外层的变动不应当影响到内层。</p>\n<p>另一个重要概念是<strong>Use Case（用例）</strong>，<strong>用例</strong>是业务逻辑的最小抽象单元，它调用数据模块的接口，向上（Presenter）提供业务逻辑操作入口。</p>\n<h3 id=\"Android-Clean\"><a href=\"#Android-Clean\" class=\"headerlink\" title=\"Android Clean\"></a>Android Clean</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp_clean/mvp-clean.png\" alt=\"mvp-clean\" title=\"\">\n                </div>\n                <div class=\"image-caption\">mvp-clean</div>\n            </figure>\n<p>Android 平台在 Presenter 和 Model 之间定义了<strong>Domain Layer（域层）</strong>，用于承载<strong>Use Case</strong>，如上图所示，Use Case 的背后是业务逻辑。Domain Layer 脱胎于 MVP 的 Presenter，这样可以避免相同的业务逻辑代码出现在两个 Presenter 中的问题。</p>\n<h4 id=\"Use-Cases-异步性\"><a href=\"#Use-Cases-异步性\" class=\"headerlink\" title=\"Use Cases 异步性\"></a>Use Cases 异步性</h4><p>鉴于 Domain Layer 是 UI 无关的，这里可以统一将 Use Case 放入工作线程运行，通过异步回调进行通信。至于更底层的数据库/网络操作，出于简化的目的，可以直接使用同步接口。</p>\n<h4 id=\"不同-Layer-是否需要定义各自的-Model\"><a href=\"#不同-Layer-是否需要定义各自的-Model\" class=\"headerlink\" title=\"不同 Layer 是否需要定义各自的 Model\"></a>不同 Layer 是否需要定义各自的 Model</h4><p>标准的做法是在视图层（View Layer）、域层（Domain Layer）和数据层（Data/Model Layer）分别使用不同的对象，如 VO、BO、DO 等。这样带来的问题是重复性增加。如果对象是不可变的，在各层之间具有相同的属性和方法，则可以只定义一个对象，共通使用。</p>\n<p>如果视图层对象包含 Android 相关的方法或属性，则应当为其单独定义一个类，然后使用<code>Mapper</code>在不同层之间进行对象转换。</p>\n<h2 id=\"如何抽象业务场景\"><a href=\"#如何抽象业务场景\" class=\"headerlink\" title=\"如何抽象业务场景\"></a>如何抽象业务场景</h2><p>这里我们将 Clean 模式应用在 todo-app 上，想想还有点小激动。</p>\n<h3 id=\"Use-Cases-amp-Domain-Layer\"><a href=\"#Use-Cases-amp-Domain-Layer\" class=\"headerlink\" title=\"Use Cases &amp; Domain Layer\"></a>Use Cases &amp; Domain Layer</h3><p>把 Use Case 的声明和运行机制拆开，是不是跟 Runnable + Executor 的机制很像？没错，这就是设计模式中的<strong>命令模式</strong>。设计模式不是彼此孤立的，一个项目里可以整体采用 Clean 架构，不同的子模块，应用不同的设计模式。设计模式是死的，人是活的。</p>\n<p>抽象类<code>UseCase</code>即是<strong>命令</strong>，包含入参、出参、回调通知对象、运行的抽象过程（这里又出现了<strong>模版模式</strong>）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCase</span>&lt;<span class=\"title\">Q</span> <span class=\"keyword\">extends</span> <span class=\"title\">UseCase</span>.<span class=\"title\">RequestValues</span>, <span class=\"title\">P</span> <span class=\"keyword\">extends</span> <span class=\"title\">UseCase</span>.<span class=\"title\">ResponseValue</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Q mRequestValues;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> UseCaseCallback&lt;P&gt; mUseCaseCallback; <span class=\"comment\">// 任务完成后（成功or失败）的回调</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// set and get</span></span><br><span class=\"line\">  <span class=\"comment\">//..</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// Executor 运行入口</span></span><br><span class=\"line\">    executeUseCase(mRequestValues);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> voi8d <span class=\"title\">executeUseCase</span><span class=\"params\">(Q requestValues)</span></span>; <span class=\"comment\">// 子类必需实体化这个方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RequestValues</span> </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ResponseValues</span> </span>&#123;&#125; <span class=\"comment\">// 接口约束</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UseCaseCallback</span>&lt;<span class=\"title\">R</span>&gt; </span>&#123; <span class=\"comment\">// 任务完成后的回调</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(R response)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后选取一个“加载全部任务”的场景为例，看它是如何实现抽象类的，以下是<code>GetTask.java</code>的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GetTasks</span> <span class=\"keyword\">extends</span> <span class=\"title\">UseCase</span>&lt;<span class=\"title\">GetTasks</span>.<span class=\"title\">RequestValues</span>, <span class=\"title\">GetTasks</span>.<span class=\"title\">ResponseValues</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksRepository mTasksRepository; <span class=\"comment\">// 更底层的数据源对象</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> FilterFactory mFilterFactory; <span class=\"comment\">// 过滤器工厂类</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GetTasks</span><span class=\"params\">(@NonNull TaskRepository tasksRepository, @NonNull FilterFactory filterFactory)</span> </span>&#123; <span class=\"comment\">// 构造时传入数据源对象和过滤器工厂</span></span><br><span class=\"line\">    mTasksRepository = checkNotNull(tasksRepository, <span class=\"string\">\"tasksRepository cannot be null!\"</span>);</span><br><span class=\"line\">    mFilterFactory = checkNotNull(filterFactory, <span class=\"string\">\"filterFactory cannot be null!\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">executeUseCase</span><span class=\"params\">(<span class=\"keyword\">final</span> RequestValues values)</span> </span>&#123; <span class=\"comment\">// 利用泛型约束，在不同UseCase实现类里使用不同参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (values.isForceUpdate()) &#123;</span><br><span class=\"line\">      mTasksRepository.refreshTasks();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mTasksRepository.getTasks(<span class=\"keyword\">new</span> TasksDataSource.LoadTasksCallback() &#123; <span class=\"comment\">// 调用数据源异步方法</span></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTasksLoaded</span><span class=\"params\">(List&lt;Task&gt; tasks)</span> </span>&#123;</span><br><span class=\"line\">        TasksFilterType currentFiltering = values.getCurrentFiltering();</span><br><span class=\"line\">        TaskFilter taskfilter = mFilterFactory.create(currentFiltering);</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Task&gt; tasksFiltered = taskFilter.filter(tasks);</span><br><span class=\"line\">        ResponseValue responseValue = <span class=\"keyword\">new</span> ResponseValue(tasksFiltered);</span><br><span class=\"line\">        getUseCaseCallback().onSuccess(responseValue);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDataNotAvailable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        getUseCallback().onError();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestValues</span> <span class=\"keyword\">implements</span> <span class=\"title\">UseCase</span>.<span class=\"title\">RequestValues</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksFilterType mCurrentFiltering;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mForceUpdate;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// constructor, get and set</span></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseValues</span> <span class=\"keyword\">implements</span> <span class=\"title\">UseCase</span>.<span class=\"title\">ResponseValues</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;Task&gt; mTasks;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我在上述代码的注释里增加了一些说明，此外，有几处需要额外的注意：</p>\n<ol>\n<li>Use Case 构造函数里需要传入底层数据源对象，这意味着不可以在 Presenter 层直接构造 Use Case，因为 Presenter 不应当跨过 Domain Layer 直接访问数据源。—— 想想如何实现？IOC，DI，Bingo！</li>\n<li>在 Use Case 的类内部，以静态类的方式声明<code>RequestValues</code>和<code>ResponseValues</code>，代码集中，易于管理。<code>UseCase.java</code>基类中提供的空接口也利于不同的子类声明各自不同的参数类型。在模版方法<code>executeUseCase</code>里分别进行调用，化元归一。</li>\n</ol>\n<h3 id=\"Executor：任务执行机制\"><a href=\"#Executor：任务执行机制\" class=\"headerlink\" title=\"Executor：任务执行机制\"></a>Executor：任务执行机制</h3><p><strong>命令模式</strong>由命令与执行机制两部分组成，Java 中的<code>Executor</code>框架就是一种典型应用。虽然<code>Executor</code>只是一个简单的接口，但它却为灵活而强大的异步任务执行框架提供了基础，该框架能支持多种不同类型的任务执行策略。它提供了一种标准的方法将任务的提交过程和执行过程解耦开来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java 中的 Executor，不负责运行结果通知</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Executor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable command)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目里使用同样的机制作为<code>UseCase</code>的运行框架。</p>\n<p><code>UseCaseScheduler.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UseCaseScheduler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// todo-mvp-clean 中的 Executor</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable runnable)</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">// 增加结果通知回调</span></span><br><span class=\"line\">  &lt;V extends UseCase.ResponseValue&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">notifyResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> V response, <span class=\"keyword\">final</span> UseCase.UseCaseCallback&lt;V&gt; useCaseCallback)</span></span>;</span><br><span class=\"line\">  &lt;V extends UseCase.ResponseValue&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">final</span> UseCase.UseCaseCallback&lt;V&gt; useCaseCallback)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>它的实现类采用线程池方式实现：</p>\n<p><code>UseCaseThreadPoolScheduler.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCaseThreadPoolScheduler</span> <span class=\"keyword\">implements</span> <span class=\"title\">UseCaseScheduler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler mHandler = <span class=\"keyword\">new</span> Handler(); <span class=\"comment\">// 将运算结果通知主线程</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> POOL_SIZE = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX_POOL_SIZE = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TIMEOUT = <span class=\"number\">30</span>;</span><br><span class=\"line\">  ThreadPoolExecutor mThreadPoolExecutor; <span class=\"comment\">// 使用线程池提供复用</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UseCaseThreadPoolScheduler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    mThreadPoolExecutor = <span class=\"keyword\">new</span> ThreadPoolExecutor(POOL_SIZE, MAX_POOL_SIZE, TIMEOUT, TimeUnit.SECONDS, <span class=\"keyword\">new</span> ArrayBlockingQueue&lt;Runnable&gt;(POOL_SIZE));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</span><br><span class=\"line\">    mThreadPoolExecutor.execute(runnable); <span class=\"comment\">// 任务提交给线程池处理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;V extends UseCase.ResponseValue&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">notifyResponse</span><span class=\"params\">(<span class=\"keyword\">final</span> V response, <span class=\"keyword\">final</span> UseCase.UseCaseCallback&lt;V&gt; useCaseCallback)</span> </span>&#123;</span><br><span class=\"line\">    mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        useCaseCallback.onSuccess(response); <span class=\"comment\">// 主线程处理结果</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;V extends UseCase.ResponseValue&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(<span class=\"keyword\">final</span> UseCase.UseCaseCallback&lt;V&gt; useCaseCallback)</span> </span>&#123;</span><br><span class=\"line\">    mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        useCaseCallback.onError(); <span class=\"comment\">// 主线程处理结果</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"UseCaseHandler：任务执行机制包装\"><a href=\"#UseCaseHandler：任务执行机制包装\" class=\"headerlink\" title=\"UseCaseHandler：任务执行机制包装\"></a>UseCaseHandler：任务执行机制包装</h3><p>上文介绍了项目里采用<code>Executor</code>作为命令的运行框架，<code>Executor</code>接收的是<code>Runnable</code>类型的任务，我们还需要一层<strong>UseCase处理器</strong>，用于将<code>UseCase</code>封装成<code>Runnable</code>，并且处理任务的返回值。<code>UseCaseHandler</code>就是负责处理<code>UseCase</code>的组件。</p>\n<p><code>UseCaseHandler.java</code>，省略部分代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCaseHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> UseCaseHandler INSTANCE; <span class=\"comment\">// 单例模式，饿汉</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> &lt;T extends UseCase.RequestValues, R extends UseCase.ResponseValue&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">final</span> UseCase&lt;T, R&gt; useCase, T values, UseCase.UseCaseCallback&lt;R&gt; callback)</span> </span>&#123;</span><br><span class=\"line\">    useCase.setRequestValues(values);</span><br><span class=\"line\">    useCase.setUseCaseCallback(<span class=\"keyword\">new</span> UiCallbackWrapper(callback, <span class=\"keyword\">this</span>));</span><br><span class=\"line\">    mUseCaseScheduler.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        useCase.run();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// UI回调包装器类，将成功/失败事件交给UI线程处理</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UiCallbackWrapper</span>&lt;<span class=\"title\">V</span> <span class=\"keyword\">extends</span> <span class=\"title\">UseCase</span>.<span class=\"title\">ResponseValue</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">UseCase</span>.<span class=\"title\">UseCaseCallback</span>&lt;<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UseCase.UseCaseCallback&lt;V&gt; mCallback;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UseCaseHandler mUseCaseHandler;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UiCallbackWrapper</span><span class=\"params\">(UseCase.UseCaseCallback&lt;V&gt; callback, UseCaseHandler useCaseHandler)</span> </span>&#123;</span><br><span class=\"line\">      mCallback = callback;</span><br><span class=\"line\">      mUseCaseHandler = useCaseHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSuccess</span><span class=\"params\">(V response)</span> </span>&#123;</span><br><span class=\"line\">      mUseCaseHandler.notifyResponse(response, mCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      mUseCaseHandler.notifyError(mCallback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>UseCaseHandler</code>隐藏了任务的执行机制，对外暴露出通过<code>UseCase</code>提交命令的接口，此时 Presenter 就可以借助<code>UseCaseHandler</code>来提交各项异步任务，并且获取回调。注意到回调是在 UI 线程发生的，意味着 Presenter 可以在回调中直接操作 UI 元素。</p>\n<h3 id=\"Activity：穿针引线的组织者\"><a href=\"#Activity：穿针引线的组织者\" class=\"headerlink\" title=\"Activity：穿针引线的组织者\"></a>Activity：穿针引线的组织者</h3><p>与 MVP 架构一样，在 MVP clean 架构中，Activity 同样担任初始化 Fragment、Presenter 的职责。Activity 类是十分简单的，80% 的逻辑都写在<code>onCreate</code>当中。</p>\n<p><code>TaskActivity.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">  setContentView(R.layout.tasks_act);    <span class=\"comment\">// Set up the toolbar.</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化 ActionBar</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 初始化 DrawerLayout</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// FragmentManager与Activity是一一对应的，所以这里通过R.id.contentFrame获取Fragment，在Activity B中也可以用R.id.contentFrame获取B当中的Fragment，不用担心重复</span></span><br><span class=\"line\">  TasksFragment tasksFragment = (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tasksFragment == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create the fragment</span></span><br><span class=\"line\">    tasksFragment = TasksFragment.newInstance();</span><br><span class=\"line\">    ActivityUtils.addFragmentToActivity(getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 将使用到的Task用作构造参数，创建Presenter</span></span><br><span class=\"line\">  mTasksPresenter = <span class=\"keyword\">new</span> TasksPresenter(</span><br><span class=\"line\">    Injection.provideUseCaseHandler(),</span><br><span class=\"line\">    tasksFragment,</span><br><span class=\"line\">    Injection.provideGetTasks(getApplicationContext()),</span><br><span class=\"line\">    Injection.provideCompleteTasks(getApplicationContext()),</span><br><span class=\"line\">    Injection.provideActivateTask(getApplicationContext()),</span><br><span class=\"line\">    Injection.provideClearCompleteTasks(getApplicationContext())</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"comment\">// Load previously saved state, if available.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    TasksFilterType currentFiltering = (TasksFilterType) savedInstanceState.getSerializable(CURRENT_FILTERING_KEY);</span><br><span class=\"line\">  mTasksPresenter.setFiltering(currentFiltering);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后在<code>View.onResume</code>中会调用<code>Presenter.start</code>来首次加载数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">  mPresenter.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，MVP-clean 架构的设计思路就被我们分析透彻了，可以看出，相比于 MVP，clean 架构抽象出来 Domain 层，使具体的业务操作独立可复用，且减轻了 Presenter 类的负担。</p>\n<p>还有一个好处是每一个 Use Case 都是可测试的，单元测试粒度被细化，更容易定位问题，从而针对性解决。关于测试我讲的不多，可以直接参考<a href=\"https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean\" target=\"_blank\" rel=\"noopener\">源码</a>进行理解。</p>\n<h2 id=\"任务列表功能类图\"><a href=\"#任务列表功能类图\" class=\"headerlink\" title=\"任务列表功能类图\"></a>任务列表功能类图</h2><p>最后，我们将 todo app 的任务列表功能绘制成类图，加深理解。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp_clean/mvp-clean-%E7%B1%BB%E5%9B%BE.png\" alt=\"mvp-clean-类图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">mvp-clean-类图</div>\n            </figure>\n","categories":[],"tags":["架构"]},{"title":"架构学习之 mvp","url":"https://lilei.pro/2019/08/21/architecture-todo-mvp/","content":"<blockquote>\n<p>Life doesn’t give you what your want, it gives you what you DESERVE!</p>\n</blockquote>\n<h1 id=\"0x00-序言\"><a href=\"#0x00-序言\" class=\"headerlink\" title=\"0x00 序言\"></a>0x00 序言</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp/aab-logov2.png\" alt=\"Android Architecture Blueprints\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Android Architecture Blueprints</div>\n            </figure>\n<p>Google 官方在 GitHub 推出的<a href=\"https://github.com/googlesamples/android-architecture\" target=\"_blank\" rel=\"noopener\">Android 架构 Demo</a>项目非常值得学习，通过 TODO app 的例子，讲解各种应用架构模式如何在实现需求的基础上，达到可维护性、扩展性、可测试性的优秀设计。</p>\n<p>本系列博客文章聚焦于以下几点：</p>\n<ol>\n<li>简明扼要介绍各个架构的思想与基础模型</li>\n<li>在该架构模式下如何对 TODO App 的各个模块进行划分，以及划分的依据</li>\n<li>取一个页面为例，作出类图，解析代码</li>\n</ol>\n<p><strong>Talk is cheap, show me the code.</strong></p>\n<h1 id=\"0x01-业务逻辑\"><a href=\"#0x01-业务逻辑\" class=\"headerlink\" title=\"0x01 业务逻辑\"></a>0x01 业务逻辑</h1><p>建议 clone 代码后真机运行体验，用一张图概括如下。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp/页面流程图.png\" alt=\"页面流程图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">页面流程图</div>\n            </figure>\n<p>Google 也给出了一个<a href=\"https://github.com/googlesamples/android-architecture/wiki/To-do-app-specification\" target=\"_blank\" rel=\"noopener\">wiki 页面</a>说明 TODO app 的特性。至于为什么选择这样一个应用作为 demo，官方给出的解释如下：</p>\n<blockquote>\n<p>它必须足够简单，便于你很快地理解其功能；同时也要足够复杂，这样才能展现不同设计的决策以及提供测试场景。</p>\n</blockquote>\n<h1 id=\"0x02-todo-mvp\"><a href=\"#0x02-todo-mvp\" class=\"headerlink\" title=\"0x02 todo-mvp\"></a>0x02 todo-mvp</h1><h2 id=\"关于-MVP\"><a href=\"#关于-MVP\" class=\"headerlink\" title=\"关于 MVP\"></a>关于 MVP</h2><p>MVP 脱胎于大名鼎鼎的 MVC（Model-View-Controller）。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp/mvc.png\" alt=\"mvc\" title=\"\">\n                </div>\n                <div class=\"image-caption\">mvc</div>\n            </figure>\n<p>但凡做软件开发的人应该对 MVC 都不感到陌生，它的基本思想是将数据、视图、控制逻辑拆分。这三部分可以自由进行替换，比如在不改变数据接口的情况下，替换数据来源；或者是调整 UI 显示，而无需改动业务逻辑。</p>\n<p>MVC 是一个具有历史意义的架构模式，它对天马行空、一团乱麻的软件设计进行规约，使后续对程序的修改和扩展简化，并且使重用成为可能。但是，它并不是最适合 Android 开发的架构模式。</p>\n<h3 id=\"MVC-为什么不适合-Android-开发\"><a href=\"#MVC-为什么不适合-Android-开发\" class=\"headerlink\" title=\"MVC 为什么不适合 Android 开发\"></a>MVC 为什么不适合 Android 开发</h3><p>MVC 的核心思想是解耦，单一职责。在 Android 开发中，不使用 MVC 的主要原因是 Activity 的职责太重，往往要同时承担 View 和 Controller 的工作，这会造成 Activity 类非常庞大，UI 代码和逻辑代码交织，耦合严重。</p>\n<h3 id=\"MVP-为什么适合-Android-开发\"><a href=\"#MVP-为什么适合-Android-开发\" class=\"headerlink\" title=\"MVP 为什么适合 Android 开发\"></a>MVP 为什么适合 Android 开发</h3><p>MVP 的架构如下图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp/mvp.png\" alt=\"MVP\" title=\"\">\n                </div>\n                <div class=\"image-caption\">MVP</div>\n            </figure>\n<p>它单独抽出了 Presenter 对象，实现了业务逻辑，用于控制 View 的显示变化，以及与 Model 进行数据交互。Presenter 和 View 互相持有，Model 仅被 Presenter 持有。</p>\n<p>在理想状态下，Presenter 和 Model 仅包含 Java 代码，不含 Android SDK 内容。MVP 架构解决了 MVC 中 Activity 职责过多的问题，将 UI 功能分配给 View 单独管理，View 的接口仅向 Presenter 开放，相比 MVC，更好地实现了职责单一、解耦的需求。</p>\n<h2 id=\"如何抽象业务场景\"><a href=\"#如何抽象业务场景\" class=\"headerlink\" title=\"如何抽象业务场景\"></a>如何抽象业务场景</h2><h3 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h3><p>设计从数据层开始，数据层要承担什么职责呢？其实就是<strong>CRUD</strong>：</p>\n<ul>\n<li>保存新建的任务</li>\n<li>查询已创建任务</li>\n<li>更新任务状态（未完成 -&gt; 已完成）</li>\n<li>删除任务</li>\n</ul>\n<p>数据的持久化方式，数据操作结果采用同步还是异步，这些问题也是设计过程中要考虑的。</p>\n<h4 id=\"基本的任务对象：Task\"><a href=\"#基本的任务对象：Task\" class=\"headerlink\" title=\"基本的任务对象：Task\"></a>基本的任务对象：Task</h4><p>首先设计一个<code>Task.java</code>类，表示任务对象，它是一个典型的 Java Bean。在这里我们将 Task 设计成一个不可变的对象。在一个任务从“未完成”变为“完成”状态时，并不是修改原对象，而是丢弃掉原对象，再以相同<code>id</code>重新创建一个完成状态的对象。这样做的好处是逻辑简单，不可变对象线程绝对安全。缺点是当对象创建、销毁成本高的时候，会产生性能损失。在实际业务中应当酌情选择重用或者舍弃。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mTitle;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mDescription;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> mCompleted;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Model-层对外暴露的接口：TasksDataSource\"><a href=\"#Model-层对外暴露的接口：TasksDataSource\" class=\"headerlink\" title=\"Model 层对外暴露的接口：TasksDataSource\"></a>Model 层对外暴露的接口：TasksDataSource</h4><p>本着面向接口编程的原则，隐藏数据操作具体实现代码，暴露出管理任务的接口（包含回调）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TasksDataSource</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoadTasksCallback</span> </span>&#123; <span class=\"comment\">// 加载复数任务回调</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onTasksLoaded</span><span class=\"params\">(List&lt;Task&gt; tasks)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDataNotAvailable</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">GetTaskCallback</span> </span>&#123; <span class=\"comment\">// 加载单条任务回调</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onTaskLoaded</span><span class=\"params\">(Task task)</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onDataNotAvailable</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTasks</span><span class=\"params\">(@NonNull LoadTasksCallback callback)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getTask</span><span class=\"params\">(@NonNull String taskId, @NonNull GetTaskCallback callback)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">saveTask</span><span class=\"params\">(@NonNull Task task)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">completeTask</span><span class=\"params\">(@NonNull Task task)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">completeTask</span><span class=\"params\">(@NonNull String taskId)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activateTask</span><span class=\"params\">(@NonNull Task task)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">activateTask</span><span class=\"params\">(@NonNull String taskId)</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clearCompletedTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">refreshTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAllTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteTask</span><span class=\"params\">(@NonNull String taskId)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个接口里有两处与我的编程思路有出入。首先是加载任务回调，我认为可以仅保留复数任务的接口，对于加载单条任务的需求，返回一个长度为 1 的列表就可以了。其次，在命名上，我习惯于将同步接口以<code>getXXX</code>，异步接口以<code>loadXXX</code>来声明。</p>\n<p>有了这个接口，就可以提供给任务详情、任务列表等页面使用。接下来创建一个接口实现类，这个类对外的职责是实现数据操作接口，对内的职责是隐藏两种具体的数据操作实现（内存缓存、数据库、网络）。</p>\n<p>数据源共有三级缓存：</p>\n<ul>\n<li>In-memory cache - Fast</li>\n<li>Disk (SQLiteDb) - Slow</li>\n<li>Network - Very slow</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TasksRepository</span> <span class=\"keyword\">implements</span> <span class=\"title\">TasksDataSource</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksDatasource mTasksRemoteDataSource; <span class=\"comment\">// 网络数据源</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TasksDatasource mTasksLocalDataSource; <span class=\"comment\">// 本地数据源</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>读写数据策略可以概括为“依次读，全部写”，括号里是我补充的内容：</p>\n<ul>\n<li><p>In every <code>get</code>operation:</p>\n<ul>\n<li>Return cache if available, or</li>\n<li>return local copy if it exists (and update cache) , or</li>\n<li>return remote copy ( and update local copy &amp; cache)</li>\n</ul>\n</li>\n<li><p>Every <code>write</code>/<code>delete</code>operation will simply:</p>\n<ul>\n<li>Update cache</li>\n<li>Update local</li>\n<li>Update remote</li>\n</ul>\n</li>\n</ul>\n<p>具体的网络数据源、本地数据库设计为常见写法，不赘述。</p>\n<h3 id=\"Fragment-即是-View\"><a href=\"#Fragment-即是-View\" class=\"headerlink\" title=\"Fragment 即是 View\"></a>Fragment 即是 View</h3><p>处理所有 UI 变化事件，比如显示 loading、显示任务列表、显示任务详情、显示任务状态变更 SnackBar 等，值得注意的是页面跳转操作也属于 UI 变化，是在 Fragment 里面实现的。不妨思考一下为什么“跳转”不放在 Presenter 中进行？一个原因是 Presenter 与 Android SDK 无关，而跳转需要 Context 对象，违背了这一原则。比如从“任务列表”跳转到“任务详情”时：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TasksFragment.java</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showAddTask</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Intent intent = <span class=\"keyword\">new</span> Intent(getContext(), AddEditTaskActivity.class);</span><br><span class=\"line\">  startActivityForResult(intent, AddEditTaskActivity.REQUEST_ADD_TASK);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>View 里面没有任何业务逻辑，主要处理以下事件：</p>\n<ul>\n<li>加载中、加载成功、失败页面展示</li>\n<li>展现 Toast、SnackBar 等提示</li>\n<li>处理按钮、菜单点击事件（通常是将其甩给 Presenter 处理）</li>\n<li>处理页面跳转</li>\n<li>声明 Adapter</li>\n<li>在<code>onResume</code>时调用 Presenter 的<code>start</code>方法，启动页面</li>\n<li>提供<code>isActive</code>方法，供 Presenter 在异步回调返回时判断页面是否存活</li>\n</ul>\n<p>最后一点是容易漏掉的，如果异步请求回调时页面被销毁，会导致各种难以预料的问题。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isActive</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isAdded();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Presenter-业务逻辑载体\"><a href=\"#Presenter-业务逻辑载体\" class=\"headerlink\" title=\"Presenter - 业务逻辑载体\"></a>Presenter - 业务逻辑载体</h3><p>承担了业务逻辑实现的职责，有时业务逻辑过于复杂会导致 Presenter 类太大，此时要考虑拆分业务逻辑到单独的类中，就变成了<code>mvp-clean</code>架构，clean 架构中使用<code>Use Case（用例）</code>处理细分的业务逻辑。</p>\n<p>Presenter 由 Activity 构造，并且提供方法给 Activity 以及 View（Fragment）使用。</p>\n<h3 id=\"Activity-将一切粘合到一起\"><a href=\"#Activity-将一切粘合到一起\" class=\"headerlink\" title=\"Activity - 将一切粘合到一起\"></a>Activity - 将一切粘合到一起</h3><p>现在我们有了 Model、View、Presenter 各个部分，而 Android 应用的页面入口是 Activity 类，我们在 Activity 中创建 Fragment（View）及 Presenter，在这两者之间建立关联。同时还要处理一些必须放在 Activity 中进行的操作，比如<code>onSaveInstanceState</code>、<code>onOptionsItemSelected</code> 等等。</p>\n<h2 id=\"任务列表功能实现\"><a href=\"#任务列表功能实现\" class=\"headerlink\" title=\"任务列表功能实现\"></a>任务列表功能实现</h2><p>用类图来表示 MVP 模式下的任务列表功能相关类：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190821_todo_mvp/mvp类图.png\" alt=\"mvp\" title=\"\">\n                </div>\n                <div class=\"image-caption\">mvp</div>\n            </figure>\n","categories":[],"tags":["架构"]},{"title":"ACE-PTM 第 II 部分 领导和实施","url":"https://lilei.pro/2019/07/14/ace-cpt-part-2/","content":"<h1 id=\"第-2-章-激励和坚持原则\"><a href=\"#第-2-章-激励和坚持原则\" class=\"headerlink\" title=\"第 2 章 - 激励和坚持原则\"></a>第 2 章 - 激励和坚持原则</h1><p>只有约20%的美国成人同时符合有氧活动和肌肉强化指南要求。健身专业人员面临着两大挑战：<strong>让人们积极开始</strong>以及之后<strong>坚持运动计划</strong>。本章重点是提高人们在开始之后坚持计划的可能性。</p>\n<p>激励人开始锻炼的因素不一定是使他们长期参与运动计划的因素。健康和健身行业的真正挑战是创造出适宜的计划和运动环境，使人们尽可能提高坚持计划并选择积极生活方式的可能性。</p>\n<h2 id=\"了解激励\"><a href=\"#了解激励\" class=\"headerlink\" title=\"了解激励\"></a>了解激励</h2><p>用于评估激励的两种最常讨论方法是<strong>内在与外在激励</strong>和<strong>自我效能</strong>。</p>\n<h3 id=\"内在和外在激励\"><a href=\"#内在和外在激励\" class=\"headerlink\" title=\"内在和外在激励\"></a>内在和外在激励</h3><p>在运动背景下，要实现内在激励，意味着一个人是因为参与本身所带来的内在愉悦和体验而从事运动活动。</p>\n<p>与其认为需要让自己的客户受到更多的内在激励，私人教练应更努力增加参与计划所带来的愉悦感和成就感。私人教练通过鼓励客户<strong>拥有并参与计划以及教授自足性和自主性</strong>，可以帮助促进内在激励的形成。</p>\n<h3 id=\"自我效能\"><a href=\"#自我效能\" class=\"headerlink\" title=\"自我效能\"></a>自我效能</h3><p>在运动背景下，自我效能定义为个体对自身成功参与体力活动计划的能力和信念。自我效能与激励呈正相关。</p>\n<p>许多健身专业人员所犯的一个重大错误是安排整堂课进行评估，不要让客户感觉像在做测试，在某些情况下，甚至不要让客户知道你在收集评估信息。</p>\n<h2 id=\"用于保持客户激励的策略\"><a href=\"#用于保持客户激励的策略\" class=\"headerlink\" title=\"用于保持客户激励的策略\"></a>用于保持客户激励的策略</h2><p>私人教练应当告知客户可能会出现回复原态并使其提前做好准备，以便他们能够在回复原态后立即重新坚持活动计划。第一步是<strong>宣教</strong>，第二步是<strong>支持</strong>。</p>\n<h3 id=\"社会支持\"><a href=\"#社会支持\" class=\"headerlink\" title=\"社会支持\"></a>社会支持</h3><p>开发和维护运动的社会支持网络。教练应当尽量多利用团体参与和社交互动的机会，让客户感觉自己属于该计划，并且是具有共同兴趣和目标的成员所组成团队的一部分。</p>\n<h3 id=\"自我肯定\"><a href=\"#自我肯定\" class=\"headerlink\" title=\"自我肯定\"></a>自我肯定</h3><p>教导客户进行自我肯定。</p>\n<h3 id=\"自我调节\"><a href=\"#自我调节\" class=\"headerlink\" title=\"自我调节\"></a>自我调节</h3><p>教导客户成为有效的自律者，自我监督行为、日程、时间和优先事项。</p>\n<h3 id=\"高风险情况\"><a href=\"#高风险情况\" class=\"headerlink\" title=\"高风险情况\"></a>高风险情况</h3><p>时间管理技能不佳、缺乏社会支持或日程繁忙的个人最有可能回复圆台。私人教练必须不断了解并观察客户是否出现受打击、沮丧或疲惫的迹象。</p>\n<h2 id=\"影响运动参与和坚持度的因素\"><a href=\"#影响运动参与和坚持度的因素\" class=\"headerlink\" title=\"影响运动参与和坚持度的因素\"></a>影响运动参与和坚持度的因素</h2><p>体力活动的潜在决定因素可分为三类：</p>\n<ul>\n<li>个人特质</li>\n<li>环境因素</li>\n<li>体力活动因素</li>\n</ul>\n<h3 id=\"个人特质\"><a href=\"#个人特质\" class=\"headerlink\" title=\"个人特质\"></a>个人特质</h3><h4 id=\"人口统计变量\"><a href=\"#人口统计变量\" class=\"headerlink\" title=\"人口统计变量\"></a>人口统计变量</h4><h4 id=\"健康状况\"><a href=\"#健康状况\" class=\"headerlink\" title=\"健康状况\"></a>健康状况</h4><h4 id=\"过往的运动经验\"><a href=\"#过往的运动经验\" class=\"headerlink\" title=\"过往的运动经验\"></a>过往的运动经验</h4><h4 id=\"心理特质\"><a href=\"#心理特质\" class=\"headerlink\" title=\"心理特质\"></a>心理特质</h4><h4 id=\"认识、态度和信念\"><a href=\"#认识、态度和信念\" class=\"headerlink\" title=\"认识、态度和信念\"></a>认识、态度和信念</h4><h3 id=\"环境因素\"><a href=\"#环境因素\" class=\"headerlink\" title=\"环境因素\"></a>环境因素</h3><h4 id=\"设施便利性\"><a href=\"#设施便利性\" class=\"headerlink\" title=\"设施便利性\"></a>设施便利性</h4><h4 id=\"时间\"><a href=\"#时间\" class=\"headerlink\" title=\"时间\"></a>时间</h4><h4 id=\"社会支持-1\"><a href=\"#社会支持-1\" class=\"headerlink\" title=\"社会支持\"></a>社会支持</h4><h3 id=\"体力活动因素\"><a href=\"#体力活动因素\" class=\"headerlink\" title=\"体力活动因素\"></a>体力活动因素</h3><h4 id=\"强度\"><a href=\"#强度\" class=\"headerlink\" title=\"强度\"></a>强度</h4><h4 id=\"损伤\"><a href=\"#损伤\" class=\"headerlink\" title=\"损伤\"></a>损伤</h4><h2 id=\"反馈\"><a href=\"#反馈\" class=\"headerlink\" title=\"反馈\"></a>反馈</h2><ul>\n<li>外部反馈：私人教练为客户提供的强化、纠错和鼓励。</li>\n<li>内部反馈：客户根据自己的感觉系统（感受到、看到或听到的内容）为自己提供的相应信息。长期计划坚持度取决于客户提供自我反馈的能力。</li>\n</ul>\n<h2 id=\"领导特质\"><a href=\"#领导特质\" class=\"headerlink\" title=\"领导特质\"></a>领导特质</h2><p>对客户的进展表现出持续不断地关心和兴趣是贯穿私教职业生涯的一部分。私人教练使用系统性目标设定以及教授回复原态预防技巧的目的是，告诉客户他们对客户的关心远远超出这一小时课程的范围。</p>\n<h2 id=\"私人教练爱建立坚持度中的作用\"><a href=\"#私人教练爱建立坚持度中的作用\" class=\"headerlink\" title=\"私人教练爱建立坚持度中的作用\"></a>私人教练爱建立坚持度中的作用</h2><h3 id=\"计划设计\"><a href=\"#计划设计\" class=\"headerlink\" title=\"计划设计\"></a>计划设计</h3><p>私人教练必须能够针对每个客户的偏好、时间表、经验、顾虑和约束条件（例如，钱、便利性和时间）设计计划。</p>\n<h3 id=\"角色清晰度\"><a href=\"#角色清晰度\" class=\"headerlink\" title=\"角色清晰度\"></a>角色清晰度</h3><p>在一段关系中分歧和冲突产生的常见原因是角色模糊。</p>\n<h3 id=\"目标设定\"><a href=\"#目标设定\" class=\"headerlink\" title=\"目标设定\"></a>目标设定</h3><p>目标设定应当遵循<em>SMART</em>原则。</p>\n<ul>\n<li>避免设定过多目标</li>\n<li>避免设定负向目标</li>\n<li>设定短期和长期目标以及过程目标和成绩目标</li>\n<li>定期重审目标</li>\n</ul>\n<h3 id=\"合同-协议\"><a href=\"#合同-协议\" class=\"headerlink\" title=\"合同/协议\"></a>合同/协议</h3><p>使用行为合约和书面协议。</p>\n<h2 id=\"第-2-章-习题集\"><a href=\"#第-2-章-习题集\" class=\"headerlink\" title=\"第 2 章 - 习题集\"></a>第 2 章 - 习题集</h2><h3 id=\"1-对于刚开始参加运动方案的个体而言，最重要的因素是什么？\"><a href=\"#1-对于刚开始参加运动方案的个体而言，最重要的因素是什么？\" class=\"headerlink\" title=\"1. 对于刚开始参加运动方案的个体而言，最重要的因素是什么？\"></a>1. 对于刚开始参加运动方案的个体而言，最重要的因素是什么？</h3><ol>\n<li>家庭和朋友的大力支持</li>\n<li>运动设施的便利性</li>\n<li>与运动有关的行为改变意愿度</li>\n<li>与私人教练联络</li>\n</ol>\n<p>错误选项（1），正确答案（3）。真正的动机都来源于内心。</p>\n<h3 id=\"4-为了确保客户坚持参加训练，私人教练最好采用下列哪种策略？\"><a href=\"#4-为了确保客户坚持参加训练，私人教练最好采用下列哪种策略？\" class=\"headerlink\" title=\"4. 为了确保客户坚持参加训练，私人教练最好采用下列哪种策略？\"></a>4. 为了确保客户坚持参加训练，私人教练最好采用下列哪种策略？</h3><ol>\n<li>为客户设计运动方案，这样客户就只训练，而不会对运动本身想太多</li>\n<li>通过内在动机因素对客户进行激励，以提升其自我效能</li>\n<li>鼓励客户独立安排运动方案，从而促进客户提升内在动机</li>\n<li>主要通过指引（而非教育）建立自己的运动教学风格</li>\n</ol>\n<p>错误选项（2），正确答案（3）。教练不是通过“内在动机”对客户进行激励的。教练的目的是<strong>提升内在动机</strong>。</p>\n<h3 id=\"9-在监督式环境中运动，最可能与运动坚持水平无关的因素是？\"><a href=\"#9-在监督式环境中运动，最可能与运动坚持水平无关的因素是？\" class=\"headerlink\" title=\"9. 在监督式环境中运动，最可能与运动坚持水平无关的因素是？\"></a>9. 在监督式环境中运动，最可能与运动坚持水平无关的因素是？</h3><ol>\n<li>教育</li>\n<li>年龄</li>\n<li>收入</li>\n<li>性别</li>\n</ol>\n<p>错误选项（3），正确答案（2）。其余几个选项都有相关。</p>\n<h3 id=\"11-坚持的定义为：一种将行为赋予方向和目的的心理驱动力。\"><a href=\"#11-坚持的定义为：一种将行为赋予方向和目的的心理驱动力。\" class=\"headerlink\" title=\"11. 坚持的定义为：一种将行为赋予方向和目的的心理驱动力。\"></a>11. 坚持的定义为：一种将行为赋予方向和目的的心理驱动力。</h3><ol>\n<li>正确</li>\n<li>错误</li>\n</ol>\n<p>错误选项（1），正确答案（2）。<strong>坚持</strong>是积极主动地参加运动方案；<strong>激励</strong>则是心理驱动力。</p>\n<h3 id=\"13-身体活动的三种主要潜在决定因素不包括哪一项？\"><a href=\"#13-身体活动的三种主要潜在决定因素不包括哪一项？\" class=\"headerlink\" title=\"13. 身体活动的三种主要潜在决定因素不包括哪一项？\"></a>13. 身体活动的三种主要潜在决定因素不包括哪一项？</h3><ol>\n<li>个人特质</li>\n<li>身体特质</li>\n<li>环境因素</li>\n<li>体育活动因素</li>\n</ol>\n<p>错误选项（1），正确答案（2）。其中1、3、4是体育活动的潜在决定因素。</p>\n<h3 id=\"18-下列术语种，哪一项的定义为：相信自己有能力成功开始并坚持某种行为？\"><a href=\"#18-下列术语种，哪一项的定义为：相信自己有能力成功开始并坚持某种行为？\" class=\"headerlink\" title=\"18. 下列术语种，哪一项的定义为：相信自己有能力成功开始并坚持某种行为？\"></a>18. 下列术语种，哪一项的定义为：相信自己有能力成功开始并坚持某种行为？</h3><ol>\n<li>内在激励</li>\n<li>自我效能</li>\n<li>外在激励</li>\n<li>心里控制源</li>\n</ol>\n<p>错误选项（1），正确答案（2）。注意这是“效能”的定义。</p>\n<hr>\n<h1 id=\"第-3-章-沟通和教学技巧\"><a href=\"#第-3-章-沟通和教学技巧\" class=\"headerlink\" title=\"第 3 章 - 沟通和教学技巧\"></a>第 3 章 - 沟通和教学技巧</h1><h1 id=\"第-4-章-行为改变与健康心理学基础\"><a href=\"#第-4-章-行为改变与健康心理学基础\" class=\"headerlink\" title=\"第 4 章 - 行为改变与健康心理学基础\"></a>第 4 章 - 行为改变与健康心理学基础</h1>","categories":[],"tags":["健身","ACE-CPT"]},{"title":"ACE-PTM 第 I 部分 简介","url":"https://lilei.pro/2019/07/14/ace-cpt-part-1/","content":"<h1 id=\"笔记前言\"><a href=\"#笔记前言\" class=\"headerlink\" title=\"笔记前言\"></a>笔记前言</h1><blockquote>\n<p>作为学习 <a href=\"https://www.acefitness.org/\" target=\"_blank\" rel=\"noopener\">ACE-CPT</a> 的读书笔记，这一系列将按章节分为七个部分。</p>\n</blockquote>\n<h2 id=\"第-I-部分-简介\"><a href=\"#第-I-部分-简介\" class=\"headerlink\" title=\"第 I 部分 - 简介\"></a>第 I 部分 - 简介</h2><p>介绍私人教练的角色定位与执业范围，哪些事情应该做，哪些事情可以做，哪些事情不能做。</p>\n<h2 id=\"第-II-部分-领导和实施\"><a href=\"#第-II-部分-领导和实施\" class=\"headerlink\" title=\"第 II 部分 - 领导和实施\"></a>第 II 部分 - 领导和实施</h2><p>从沟通、激励会员角度给出指导意见，是贯彻执教过程始终的中心思想，帮助教练与会员建立相互信赖的关系。</p>\n<h2 id=\"第-III-部分-ACE-整合式健身训练模式\"><a href=\"#第-III-部分-ACE-整合式健身训练模式\" class=\"headerlink\" title=\"第 III 部分 - ACE 整合式健身训练模式\"></a>第 III 部分 - ACE 整合式健身训练模式</h2><p>即 ACE-IFT 训练模式，是 ACE 独家的训练计划与模式，先评估，然后在稳定性、抗阻、心肺等多方面分别给出指导。</p>\n<h2 id=\"第-IV-部分-特殊运动计划制定主题\"><a href=\"#第-IV-部分-特殊运动计划制定主题\" class=\"headerlink\" title=\"第 IV 部分 - 特殊运动计划制定主题\"></a>第 IV 部分 - 特殊运动计划制定主题</h2><p>讲解身心运动以及特殊人群的运动方法。</p>\n<h2 id=\"第-V-部分-损伤预防和急救\"><a href=\"#第-V-部分-损伤预防和急救\" class=\"headerlink\" title=\"第 V 部分 - 损伤预防和急救\"></a>第 V 部分 - 损伤预防和急救</h2><p>常见损伤对运动过程的影响，以及遭遇损伤时候的紧急程序。</p>\n<h2 id=\"第-VI-部分-职业和法律责任以及业务策略\"><a href=\"#第-VI-部分-职业和法律责任以及业务策略\" class=\"headerlink\" title=\"第 VI 部分 - 职业和法律责任以及业务策略\"></a>第 VI 部分 - 职业和法律责任以及业务策略</h2><p>私人教练职业的法律指南。</p>\n<h2 id=\"第-VII-部分-补充\"><a href=\"#第-VII-部分-补充\" class=\"headerlink\" title=\"第 VII 部分 - 补充\"></a>第 VII 部分 - 补充</h2><p>涵盖不属于上述章节的内容。</p>\n<hr>\n<h1 id=\"第-1-章-私人教练的角色和执业范围\"><a href=\"#第-1-章-私人教练的角色和执业范围\" class=\"headerlink\" title=\"第 1 章 - 私人教练的角色和执业范围\"></a>第 1 章 - 私人教练的角色和执业范围</h1><h2 id=\"健康照护联盟\"><a href=\"#健康照护联盟\" class=\"headerlink\" title=\"健康照护联盟\"></a>健康照护联盟</h2><p>健康照护联盟由医疗保健专业人员组成，他们通过执照、注册和/或许可证获得认可，并提供相关服务以识别、预防和治疗疾病和病症。</p>\n<p>团队成员构成如下：</p>\n<ul>\n<li>针灸师</li>\n<li>脊椎按摩师</li>\n<li>营养师</li>\n<li>自然疗法医生</li>\n<li>护士</li>\n<li>医生</li>\n<li>行为医师</li>\n<li>物理治疗师</li>\n<li>职业物理治疗师</li>\n<li>运动教练</li>\n</ul>\n<h2 id=\"ACE-私人教练认证\"><a href=\"#ACE-私人教练认证\" class=\"headerlink\" title=\"ACE 私人教练认证\"></a>ACE 私人教练认证</h2><p>专业能力门槛被称为从事某种行业所需的“<strong>最低能力</strong>”。对于专业人员而言，执照可以将其与未证明自己处于同一能力水平的人区分开。通过获得 ACE 私人教练认证，专业人员证明了其在以下方面的能力：应用相关知识在各种实际情况下做出安全有效的运动计划决策，同时最大限度地减少客户风险和伤害。</p>\n<h3 id=\"“执业范围”的定义\"><a href=\"#“执业范围”的定义\" class=\"headerlink\" title=\"“执业范围”的定义\"></a>“执业范围”的定义</h3><h3 id=\"ACE-认证的私人教练的执业范围\"><a href=\"#ACE-认证的私人教练的执业范围\" class=\"headerlink\" title=\"ACE 认证的私人教练的执业范围\"></a>ACE 认证的私人教练的执业范围</h3><p>根据 <strong>IDEA 私人健身教练的执业范围</strong> 表格，私人教练不可以做以下事情：</p>\n<ul>\n<li>进行诊断</li>\n<li>开处方</li>\n<li>为客户规定饮食或推荐具体的补充剂</li>\n<li>治疗伤害或疾病</li>\n<li>监督医疗转介绍客户的进展</li>\n<li>提供康复服务</li>\n<li>提供咨询</li>\n<li>与患者合作</li>\n</ul>\n<h3 id=\"ACE-认证的私人教练的知识、技能和能力\"><a href=\"#ACE-认证的私人教练的知识、技能和能力\" class=\"headerlink\" title=\"ACE 认证的私人教练的知识、技能和能力\"></a>ACE 认证的私人教练的知识、技能和能力</h3><p>ACE 私人教练考试包括以下领域</p>\n<ul>\n<li>客户面谈和评估 - 31%</li>\n<li>计划设计和执行 - 33%</li>\n<li>进阶和调整 - 19%</li>\n<li>专业行为、安全性和风险管理 - 17%</li>\n</ul>\n<h4 id=\"教育和经验\"><a href=\"#教育和经验\" class=\"headerlink\" title=\"教育和经验\"></a>教育和经验</h4><p>建议应试者流出平均三至四个月的学习时间来充分准备私人教练认证考试。</p>\n<h3 id=\"执业责任和道德规范\"><a href=\"#执业责任和道德规范\" class=\"headerlink\" title=\"执业责任和道德规范\"></a>执业责任和道德规范</h3><p>ACE 制定了<strong>ACE 道德准则</strong>，所有 ACE 认证的专业人员和应试者都必须熟悉并遵守道德准则和专业时间和纪律程序。</p>\n<h4 id=\"ACE-专业实践和纪律程序\"><a href=\"#ACE-专业实践和纪律程序\" class=\"headerlink\" title=\"ACE 专业实践和纪律程序\"></a>ACE 专业实践和纪律程序</h4><h4 id=\"执照期和续期\"><a href=\"#执照期和续期\" class=\"headerlink\" title=\"执照期和续期\"></a>执照期和续期</h4><p>ACE 认证有效期为<strong>两年</strong>，从获得认证之日起开始计算，于当月最后一天到期。续期则需要完成至少 20 小时的持续教育学分（2.0 CEC），并持有当前的<strong>心肺复苏（CPR）</strong>证书。如果持证人生活在北美，则必须能够正确使用<strong>自动外部除颤器（AED）</strong>。</p>\n<p>ACE 为超过截止期限的专业人员的续期留出六个月的延长期限。</p>\n<h4 id=\"客户隐私\"><a href=\"#客户隐私\" class=\"headerlink\" title=\"客户隐私\"></a>客户隐私</h4><h4 id=\"转介绍\"><a href=\"#转介绍\" class=\"headerlink\" title=\"转介绍\"></a>转介绍</h4><h4 id=\"补充剂和其他营养相关问题\"><a href=\"#补充剂和其他营养相关问题\" class=\"headerlink\" title=\"补充剂和其他营养相关问题\"></a>补充剂和其他营养相关问题</h4><p>补充剂<strong>不受美国食品和药物管理局（FDA）管制，因此无法保证起强度、纯度、安全性和效果。</strong>私人教练仅仅有资格向客户推荐补充剂，而没有资格推荐药物或开具药物。</p>\n<h4 id=\"所提供服务超出执业范围的后果\"><a href=\"#所提供服务超出执业范围的后果\" class=\"headerlink\" title=\"所提供服务超出执业范围的后果\"></a>所提供服务超出执业范围的后果</h4><h2 id=\"由-NCCA-进行的健康照护联盟资格证书认证\"><a href=\"#由-NCCA-进行的健康照护联盟资格证书认证\" class=\"headerlink\" title=\"由 NCCA 进行的健康照护联盟资格证书认证\"></a>由 NCCA 进行的健康照护联盟资格证书认证</h2><h3 id=\"健身与健康行业的认可\"><a href=\"#健身与健康行业的认可\" class=\"headerlink\" title=\"健身与健康行业的认可\"></a>健身与健康行业的认可</h3><h3 id=\"教育界的认可\"><a href=\"#教育界的认可\" class=\"headerlink\" title=\"教育界的认可\"></a>教育界的认可</h3><p>ACE 教育伙伴计划提供四门独立的大学课程：</p>\n<ul>\n<li>私教</li>\n<li>团体运动</li>\n<li>健康教练</li>\n<li>特殊人群运动课程</li>\n</ul>\n<h3 id=\"劳工部的认可\"><a href=\"#劳工部的认可\" class=\"headerlink\" title=\"劳工部的认可\"></a>劳工部的认可</h3><h2 id=\"职业发展\"><a href=\"#职业发展\" class=\"headerlink\" title=\"职业发展\"></a>职业发展</h2><h3 id=\"持续教育\"><a href=\"#持续教育\" class=\"headerlink\" title=\"持续教育\"></a>持续教育</h3><h4 id=\"高级知识\"><a href=\"#高级知识\" class=\"headerlink\" title=\"高级知识\"></a>高级知识</h4><h4 id=\"专业化\"><a href=\"#专业化\" class=\"headerlink\" title=\"专业化\"></a>专业化</h4><h3 id=\"学位\"><a href=\"#学位\" class=\"headerlink\" title=\"学位\"></a>学位</h3><h3 id=\"额外的健身执照\"><a href=\"#额外的健身执照\" class=\"headerlink\" title=\"额外的健身执照\"></a>额外的健身执照</h3><h3 id=\"健康照护联盟的新专业领域\"><a href=\"#健康照护联盟的新专业领域\" class=\"headerlink\" title=\"健康照护联盟的新专业领域\"></a>健康照护联盟的新专业领域</h3><hr>\n<h1 id=\"第-1-章-习题集\"><a href=\"#第-1-章-习题集\" class=\"headerlink\" title=\"第 1 章 - 习题集\"></a>第 1 章 - 习题集</h1><h2 id=\"6-下列哪一项属于-ACE-认证私人教练的执业范围？\"><a href=\"#6-下列哪一项属于-ACE-认证私人教练的执业范围？\" class=\"headerlink\" title=\"6. 下列哪一项属于 ACE 认证私人教练的执业范围？\"></a>6. 下列哪一项属于 ACE 认证私人教练的执业范围？</h2><ol>\n<li>帮助客户更好地了解食物分量与健康食品，从而帮助他们做出更明智的选择</li>\n<li>为客户提供 4 周食谱与购物清单，帮助他们走上健康饮食的正轨</li>\n<li>回顾过去 24 小时的饮食情况，帮助客户了解自己缺少哪些微量元素</li>\n<li>就惊喜代谢率（RMR）以及热量摄入要小于 RMR 等知识对客户进行教育，帮助客户减轻体重</li>\n</ol>\n<p>错误选项（4），正确答案（1）。关键点在于选择权由客户持有，而非私人教练做出选择 or 决定。</p>\n<h2 id=\"9-关于私人教练向客户推荐营养补充剂，下列叙述最恰当的一项是\"><a href=\"#9-关于私人教练向客户推荐营养补充剂，下列叙述最恰当的一项是\" class=\"headerlink\" title=\"9. 关于私人教练向客户推荐营养补充剂，下列叙述最恰当的一项是\"></a>9. 关于私人教练向客户推荐营养补充剂，下列叙述最恰当的一项是</h2><ol>\n<li>只能向客户推荐自己已投职业责任险的补充剂</li>\n<li>如果私人教练未持有注册营养师或医学博士学位等其他帧数，则不具有向他人推荐补充剂的合法资质</li>\n<li>私人教练应接受专门的知识培训后才能向客户推荐营养补充剂</li>\n<li>由于服用补充剂与其他药物可能会引起并发症，私人教练只能向客户推荐植物性补充剂</li>\n</ol>\n<p>错误选项（3），正确答案（2）。“专门的知识培训”不够精确。</p>\n<h2 id=\"15-“执业范围”的定义不包括哪一项？\"><a href=\"#15-“执业范围”的定义不包括哪一项？\" class=\"headerlink\" title=\"15. “执业范围”的定义不包括哪一项？\"></a>15. “执业范围”的定义不包括哪一项？</h2><ol>\n<li>专业健身人员在特定领域可提供的合法服务范围</li>\n<li>在工作场所必须遵守的职业道德准则</li>\n<li>可以供私教服务的场所</li>\n<li>必须遵守的指南或参数标准</li>\n</ol>\n<p>错误选项（3），正确答案（2）。道德是道德，业务是业务。</p>\n<h2 id=\"20-如果客户提到自己参加周末网球比赛后肌肉酸痛，教练给予的最恰当的回应是？\"><a href=\"#20-如果客户提到自己参加周末网球比赛后肌肉酸痛，教练给予的最恰当的回应是？\" class=\"headerlink\" title=\"20. 如果客户提到自己参加周末网球比赛后肌肉酸痛，教练给予的最恰当的回应是？\"></a>20. 如果客户提到自己参加周末网球比赛后肌肉酸痛，教练给予的最恰当的回应是？</h2><ol>\n<li>推荐客户服用抗炎类非处方药</li>\n<li>建议客户在下次比赛前服用肌酸补充剂</li>\n<li>对深层组织进行按摩处理，帮助缓解肌肉酸痛</li>\n<li>与客户探讨对患处进行冷敷的正确方法</li>\n</ol>\n<p>错误选项（3），正确答案（4）。其余选项超出执业范围。</p>\n","categories":[],"tags":["健身","ACE-CPT"]},{"title":"ACE-CPT 考试信息汇总","url":"https://lilei.pro/2019/07/14/ace-cpt-qualification/","content":"<p><a href=\"https://zhuanlan.zhihu.com/p/64605617\" target=\"_blank\" rel=\"noopener\">国内自考ACE-CPT心得（一）考试流程</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/67532892\" target=\"_blank\" rel=\"noopener\">国内自考ACE-CPT心得（二）读者问答</a></p>\n<p><a href=\"https://www.zhihu.com/question/54711544\" target=\"_blank\" rel=\"noopener\">教材哪里买</a></p>\n<h2 id=\"四大认证\"><a href=\"#四大认证\" class=\"headerlink\" title=\"四大认证\"></a>四大认证</h2><ul>\n<li>ACSM</li>\n<li>NSCA</li>\n<li>ACE</li>\n<li>NASM</li>\n</ul>\n<h2 id=\"教材\"><a href=\"#教材\" class=\"headerlink\" title=\"教材\"></a>教材</h2><p>1000页教材，需要100h学习时间。</p>\n<ul>\n<li>官网英文版</li>\n<li>官网翻译版</li>\n<li>培训机构翻译版</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190714_acecpt/教材.jpg\" alt=\"教材\" title=\"\">\n                </div>\n                <div class=\"image-caption\">教材</div>\n            </figure>\n<ol>\n<li>Personal Trainer Manual —— 主要教材，80%考题来源于此</li>\n<li>Essential of Exercise Science —— 辅助材料，解剖、营养、生理等</li>\n<li>Study Companion —— 课后习题</li>\n<li>宣传手册 —— 没用</li>\n</ol>\n<p>官网有在线模拟题。</p>\n<p>考题分布。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190714_acecpt/考题分布.jpg\" alt=\"考题分布\" title=\"\">\n                </div>\n                <div class=\"image-caption\">考题分布</div>\n            </figure>\n<h2 id=\"考试\"><a href=\"#考试\" class=\"headerlink\" title=\"考试\"></a>考试</h2><p>携带身份证、驾照、护照、CPR证。</p>\n<p>3小时，150道单选题，125题计入总分。每道题都有英文原文和中文翻译。开考前会提供纸笔。</p>\n<p>电脑上有工具：</p>\n<ul>\n<li>题目标记</li>\n<li>未答题数量</li>\n<li>计算器</li>\n</ul>\n<p>考试提交后立马出分数。总分800分，超过500分及格。</p>\n<h2 id=\"报名\"><a href=\"#报名\" class=\"headerlink\" title=\"报名\"></a>报名</h2><p>官网报名。399刀。</p>\n<p>提前一个月申请考场。</p>\n<p>急救培训：CPR or AED，在当地红十字会报名，一周末拿证。</p>\n<h2 id=\"继续教育\"><a href=\"#继续教育\" class=\"headerlink\" title=\"继续教育\"></a>继续教育</h2><p>两年内 2.0 学分 + CPR</p>\n","categories":[],"tags":["健身","ACE-CPT"]},{"title":"《高效能人士的七个习惯》第四部分 自我提升和完善","url":"https://lilei.pro/2019/04/07/Seven-Habbits-9/","content":"<ul>\n<li>习惯七：不断更新</li>\n</ul>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第三部分 公众领域的成功","url":"https://lilei.pro/2019/04/07/Seven-Habbits-5/","content":"<ul>\n<li>习惯一：积极主动</li>\n<li>习惯二：以终为始</li>\n<li>习惯三：要事第一</li>\n</ul>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第二部分 习惯三 要事第一","url":"https://lilei.pro/2019/04/07/Seven-Habbits-4/","content":"<h1 id=\"回答两个问题\"><a href=\"#回答两个问题\" class=\"headerlink\" title=\"回答两个问题\"></a>回答两个问题</h1><ul>\n<li>在你目前的生活中，有哪些事情能够彻底改观你的个人生活，但是你一直没有去做？</li>\n<li>在你目前的生活中，有哪些事情能够彻底改观你的工作局面，但是你一直没有去做？</li>\n</ul>\n<p>习惯三是习惯一、二的具体实践。习惯一告诉你，你是创造者，你掌控自己的人生，其基础是人类特有的四大天赋：想象力、良知、独立意志、自我意识。</p>\n<p>习惯二是关于第一次的创造或者智力上的创造的习惯，其原则基础是<strong>想象力</strong>和<strong>良知</strong>这两大天赋。</p>\n<p>习惯三是关于第二次的创造或者体力上的创造的习惯，是对前面两个习惯的实施、执行和自然表现。</p>\n<p>左脑进行管理，右脑进行领导。</p>\n<p>有效的管理指的就是要事第一，先做最重要的事情。领导者首先要决定的，就是哪些事情是重要的；而作为管理者，就是要将这些重要的事务优先安排。自我管理的实质就是自律和条理，是对计划的实施。</p>\n<p>《成功的普遍共性》一文的作者格雷（E.M.Gray）说：“<strong>成功者能为失败者所不能为，纵使并非心甘情愿，但为了理想与目标，仍可以凭毅力克服心理障碍。</strong>”</p>\n<h1 id=\"四代时间管理理论的演进\"><a href=\"#四代时间管理理论的演进\" class=\"headerlink\" title=\"四代时间管理理论的演进\"></a>四代时间管理理论的演进</h1><p>如何分辨轻重缓急与培养组织能力，是时间管理的精髓。</p>\n<ol>\n<li>第一代理论着重利用便条与备忘录，在忙碌中调配时间与精力</li>\n<li>第二代理论强调行事历与日程表，反映出时间管理已经注意到规划未来的重要。</li>\n<li>第三代是讲求优先顺序的概念，依据轻重缓急设定短中长期目标。</li>\n<li>第四代理论从根本否定“时间管理”，主张关键在于“个人管理”，重心应当放在维持产出与产能平衡上。</li>\n</ol>\n<h1 id=\"别让琐务牵着鼻子走\"><a href=\"#别让琐务牵着鼻子走\" class=\"headerlink\" title=\"别让琐务牵着鼻子走\"></a>别让琐务牵着鼻子走</h1><p>第四代时间管理理论从重要性和紧急程度两个维度对事务进行划分。重要性与目标有关，凡有价值、有利于实现个人目标的就是要事。紧急程度与时间紧迫性有关，紧迫之事通常都显而易见，推诿不得。</p>\n<h2 id=\"第一类事务，重要且紧急\"><a href=\"#第一类事务，重要且紧急\" class=\"headerlink\" title=\"第一类事务，重要且紧急\"></a>第一类事务，重要且紧急</h2><p>在矩阵中，第一类事务通常既紧迫又重要，需要立即处理，通常被称为“危机”或者“问题”。如果你过分注重第一类事务，它们的范围会变得越来越大，最终占据你全部的时间和精力。</p>\n<p>大部分时间精力都用于处理危机的人（第一类事务）</p>\n<ul>\n<li>压力大</li>\n<li>精疲力尽</li>\n<li>被危机牵着鼻子走</li>\n<li>忙于收拾残局</li>\n</ul>\n<h2 id=\"第三类事务，紧急不重要\"><a href=\"#第三类事务，紧急不重要\" class=\"headerlink\" title=\"第三类事务，紧急不重要\"></a>第三类事务，紧急不重要</h2><p>这些人将时间致力于紧急不重要的第三类事务，却自以为在处理第一类事务。殊不知紧迫之事往往是别人的优先，对别人很重要，对自己却不然。</p>\n<ul>\n<li>急功近利</li>\n<li>被危机牵着鼻子走</li>\n<li>被视为巧言令色</li>\n<li>轻视目标和计划</li>\n<li>认为自己是受害者，缺乏自制力</li>\n<li>人际关系肤浅，甚至破裂</li>\n</ul>\n<h2 id=\"第四类事务，既不重要也不紧急\"><a href=\"#第四类事务，既不重要也不紧急\" class=\"headerlink\" title=\"第四类事务，既不重要也不紧急\"></a>第四类事务，既不重要也不紧急</h2><p>有些不负责任的人，将时间都花在第三和第四类事务上</p>\n<ul>\n<li>完全不负责任</li>\n<li>被炒鱿鱼</li>\n<li>基本生活都需要依赖他人或社会机构</li>\n</ul>\n<h2 id=\"第二类事务，重要不紧急\"><a href=\"#第二类事务，重要不紧急\" class=\"headerlink\" title=\"第二类事务，重要不紧急\"></a>第二类事务，重要不紧急</h2><p>包括建立人际关系、撰写使命宣言、规划长期目标、防患于未然等等。高效能人士避免陷入第三和第四类事务，通过花费更多时间在第二类事务来减少第一类事务的数量。</p>\n<ul>\n<li>愿景，远见</li>\n<li>平衡</li>\n<li>自律</li>\n<li>自制</li>\n<li>很少发生危机</li>\n</ul>\n<h1 id=\"勇敢说“不”\"><a href=\"#勇敢说“不”\" class=\"headerlink\" title=\"勇敢说“不”\"></a>勇敢说“不”</h1><p>若要集中精力于当急的要务，就得排除次要事务的牵绊，此时需要有说“不”的勇气。</p>\n<blockquote>\n<p>我曾聘用一位极有才华又独立自主的专员，有一天有件急事想拜托他。他说：“你要我做什么都可以，不过请先了解目前的状况。”他指着墙壁上的工作计划表，显示超过 20 个计划正在进行，这是我俩早已谈妥的。然后他说：“这件急事至少占去几天时间，你希望我放下或取消哪个计划来空出时间？”</p>\n</blockquote>\n<p>很多人坦陈自己“缺乏自制力”，实际上，这是“确认目标”的功夫还不到家，而且不能由衷接收“事有轻重缓急”的观念，自然容易半途而废。</p>\n<h1 id=\"集大成的时间管理理论\"><a href=\"#集大成的时间管理理论\" class=\"headerlink\" title=\"集大成的时间管理理论\"></a>集大成的时间管理理论</h1><p>第一代的时间管理理论丝毫没有“优先”的概念。固然做完备忘录上的一件事，会带给人成就感，可是这种成就不一定符合人生大目标。因此，所完成的只是必要而非重要的事。</p>\n<p>然而好此道者不在少数，因为阻力最小，痛苦与压力也最少。</p>\n<p>更何况，根据外在要求与规律行事，容易推卸责任。这类人缺乏效率，缺乏自制力与自尊。</p>\n<p>第四代理论强调以原则为重心，配合个人对使命的认知，兼顾重要性与急迫性；强调产出与产能齐头并进，着重第二类事务的完成。</p>\n<h1 id=\"管理方法六标准\"><a href=\"#管理方法六标准\" class=\"headerlink\" title=\"管理方法六标准\"></a>管理方法六标准</h1><ol>\n<li>和谐一致。</li>\n<li>平衡功能。</li>\n<li>围绕中心理想的管理方法。</li>\n<li>以人为本。</li>\n<li>灵活变通。</li>\n<li>便于携带的管理工具。</li>\n</ol>\n<h1 id=\"个人管理四步骤\"><a href=\"#个人管理四步骤\" class=\"headerlink\" title=\"个人管理四步骤\"></a>个人管理四步骤</h1><h2 id=\"第一步-确认角色\"><a href=\"#第一步-确认角色\" class=\"headerlink\" title=\"第一步 确认角色\"></a>第一步 确认角色</h2><p>写出你自己的关键角色，在家庭中、工作中乃至教会和社区事务中的角色。列举自己想要持续投入时间和精力去做的一些事情。</p>\n<h2 id=\"第二步-选定周目标\"><a href=\"#第二步-选定周目标\" class=\"headerlink\" title=\"第二步 选定周目标\"></a>第二步 选定周目标</h2><p>思考下一个周计划中每一个任务栏下你最想做的一两件要事，作为你选定的目标。这些目标中一定要有几个<strong>第二类事务</strong>，根据自己的感觉判断每个角色中哪些事情是比较重要的，并为每个角色确立一个或两个目标。</p>\n<h2 id=\"第三步-安排进度\"><a href=\"#第三步-安排进度\" class=\"headerlink\" title=\"第三步 安排进度\"></a>第三步 安排进度</h2><p>为每一项目标安排具体的实施时间。有些目标需要在工作日完成，有些目标需要在周末完成。确保自己有充分的自由和灵活性以应付突发事件，让你享受到自发的乐趣。你会感觉很踏实，因为你知道自己已经安排好了一周的要务，照顾到了工作生活中的每一个重要领域。</p>\n<h2 id=\"第四部-每日调整\"><a href=\"#第四部-每日调整\" class=\"headerlink\" title=\"第四部 每日调整\"></a>第四部 每日调整</h2><p>根据突发事件、人际关系的意外发展及崭新机会对每天的要务安排进行适当调整。</p>\n<p>在每天早晨审视自己一天的日程安排。</p>\n<h1 id=\"付诸实践\"><a href=\"#付诸实践\" class=\"headerlink\" title=\"付诸实践\"></a>付诸实践</h1><p>诚心正意，对人不可讲效率，效率是对事而言的，对人应当讲<strong>效用</strong>。第四代个人管理理论的特点在于承认人比事更重要。</p>\n<h1 id=\"第四代时间管理方法的优点\"><a href=\"#第四代时间管理方法的优点\" class=\"headerlink\" title=\"第四代时间管理方法的优点\"></a>第四代时间管理方法的优点</h1><p>第四代时间管理方法比前三代更加先进，这种先进体现在五个方面</p>\n<ol>\n<li>以原则为基础，切实地创造出一个核心模式，让你能够在一个更大的范围内分配自己的时间，看清楚什么是真正重要和有效的。</li>\n<li>接受你内心良知的指导，让你有机会更好地安排自己的生活，并且最大限度地同你的价值观保持一致。同时给你自由和变通，让你在牺牲既定日程安排，服从更重要的价值观的时候心平气和，毫不内疚。</li>\n<li>这种方法确认了你的个人使命，包括价值观和长期目标。</li>\n<li>这种方法帮助你明确自己的角色，平衡自己生活中的各个方面。每个星期为每个关键角色确立要达到的目标，并作出具体的日程安排。</li>\n<li>以一个星期为单位计划生活，不必局限于短暂的一天时间。通过审视自己的主要角色而让自己保持清醒，经常想到自己内心深处的价值观。</li>\n</ol>\n<p>有一条主线贯穿这五个方面，那就是将人际关系和效果放在第一位，将时间放在第二位。</p>\n<h1 id=\"高效能的秘诀——授权\"><a href=\"#高效能的秘诀——授权\" class=\"headerlink\" title=\"高效能的秘诀——授权\"></a>高效能的秘诀——授权</h1><p>把责任分配给其他成熟老练的员工，才有余力从事更高层次的活动。授权是事必躬亲与管理之间的最大分野，事必躬亲者凡事不假外求。反之，管理者注重建立制度，然后汇集群力共同完成工作。</p>\n<p>授权可以划分为两种类型：<strong>指令型授权</strong>和<strong>责任型授权</strong>。</p>\n<h2 id=\"指令型授权\"><a href=\"#指令型授权\" class=\"headerlink\" title=\"指令型授权\"></a>指令型授权</h2><p>指令型授权关注重点是<strong>方法</strong>，管理者自己为最后的结果负责。</p>\n<h2 id=\"责任型授权\"><a href=\"#责任型授权\" class=\"headerlink\" title=\"责任型授权\"></a>责任型授权</h2><p>责任型授权的关注重点是<strong>最终结果</strong>，它给人们自由，允许自行选择做事的具体方法，并为最终的结果负责。起初，这种授权方式费时费力，但却十分值得。通过责任型授权，可以将杠杆的支点向右移动，提高杠杆的作用。</p>\n<p>责任型授权要求双方就以下<strong>五个方面</strong>达成清晰、坦诚的共识，并作出承诺。</p>\n<ol>\n<li>预期结果。双方都要明确并且完全理解最终想要的结果。要以“结果”而不是以“方法”为中心。要有具体的日程，明确截止期限。</li>\n<li>指导方针。确认适用的评估标准，避免成为指令型授权。但是一定要有明确的限制性规定。</li>\n<li>可用资源。告诉他们可以使用哪些人力、财务、技术或者组织资源来取得缩预期的成果。</li>\n<li>责任归属。制定业绩标准，并用这些标准来评估他们的成果。制定具体的时间表，说明何时提交业绩报告，何时进行评估。</li>\n<li>明确奖惩。明确地告诉他们评估可能导致的结果，好的和不好的后果都要告诉他们。</li>\n</ol>\n<p>信任是促使人进步的最大动力，因为信任能够让人表现出自己最好的一面。</p>\n<p>授权的大原则不变，权限却因人而异。对不够成熟的人，目标不必订得太高，指示要详尽，并且充分提供资源；监督考核则较频繁，奖惩也更直接。对成熟的人，可分配挑战性高的任务，精简指示，减少监督考核的次数，考评标准则较为抽象。</p>\n<h1 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h1><ol>\n<li>找出一项平时被你忽略的第二类事务。</li>\n<li>画出一个时间管理矩阵，按照百分比将你的时间分配给每一类事务。然后以十五分钟为计时单位连续记录自己三天的活动状况。对照一下自己的计划，看是否有很大的出入。</li>\n<li>将你认为可以授权给他人作的事情列在一张纸上，然后列出你认为可以做这些工作的人选或者通过培训可以胜任的工作人选。思考一下应该如何开始授权程序或者开展培训工作。</li>\n<li>计划你的下周活动，你的计划应当能够体现你的人生目标和主导价值观。并在星期结束的时候进行总结。</li>\n<li>承诺以后每周都制定一个周计划，并规定一个具体的时间专门做这件事情。</li>\n<li>将目前使用的时间管理工具升级为第四代时间管理工具。</li>\n<li>阅读附录二——高效能人士的一天。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯 第三部分 习惯五 知彼解己——移情沟通的原则","url":"https://lilei.pro/2019/04/07/Seven-Habbits-7/","content":"<h1 id=\"你真的听懂了吗\"><a href=\"#你真的听懂了吗\" class=\"headerlink\" title=\"你真的听懂了吗\"></a>你真的听懂了吗</h1><p>如果你要和我交往，想对我有影响力，你首先要了解我，而做到这一点不能只靠技巧。如果我觉察到你在使用某种技巧，就会有受骗和被操纵的感觉。我不知道你为什么这样做，有什么动机。</p>\n<p>你的影响力在于你的榜样作用和引导能力，前者源于你的品德，是你的真我，别人的评论或者你希望别人如何看你都没有意义，我在同你的交往中已经清楚了解了你。</p>\n<p>你的品德时刻发挥着影响力，并起着沟通的作用。久而久之，我就会本能地信任或者不信任你这个人以及你对我所做的事情。</p>\n<h1 id=\"移情聆听\"><a href=\"#移情聆听\" class=\"headerlink\" title=\"移情聆听\"></a>移情聆听</h1><p>“知彼”是交往模式的一大转变，因为我们通常把让别人理解自己放在首位。大部分人在聆听时并不是想理解对方，而是为了做出回应。这种人要么说话，要么准备说话，不断地用自己的模式过滤一切，用自己的经历理解别人的生活。</p>\n<p>事实上，大部分人都是这么自以为是。我们的聆听通常有层次之分。一是充耳不闻，压根就不听别人说话；二是装模作样，“是的！嗯！没错！”三是选择接受，只听一部分，通常学龄前儿童喋喋不休会让我们采取这种方式；四是聚精会神，努力听到每一个字，但是，很少有人会达到第五个层次，即最高层次——移情聆听。</p>\n<p><strong>移情聆听</strong>是指以理解为目的的聆听，要求听者站在说话者的角度理解他们的思维模式和感受。</p>\n<p>移情（Empathy）不是同情（Sympathy）。后者是一种认同和判断形式，更适合用来表达感情和做出回应，却容易养成对方的依赖性。移情聆听的本质不是你要赞同对方，而是要在情感和理智上充分而深入地理解对方。</p>\n<p>据专家估计，人际沟通仅有10%通过语言来进行，30%取决于语调与声音，其余60%则得靠肢体语言。所以在移情聆听的过程中，不仅要耳到，还要眼到、心到；用眼睛去观察，用心灵去体会。</p>\n<h1 id=\"心理空气\"><a href=\"#心理空气\" class=\"headerlink\" title=\"心理空气\"></a>心理空气</h1><p>除了物质，人类最大的生存需求源自心理，即被人理解、肯定、认可和欣赏。</p>\n<p>移情聆听是有风险的。只有当你做好了被对方影响的准备，才能深入到移情聆听的阶段，而这是需要足够的安全感的，因为这时候的你会变得很脆弱。从某种意义上说，这很矛盾，因为在影响对方之前，你必须先被影响，即真正理解对方。</p>\n<h1 id=\"先诊断后开方\"><a href=\"#先诊断后开方\" class=\"headerlink\" title=\"先诊断后开方\"></a>先诊断后开方</h1><p>平庸的业务员推销产品，杰出的业务员销售解决问题、满足需求之道。万一产品不符合客户需要，也要勇于承认。</p>\n<h1 id=\"四种自传式回应\"><a href=\"#四种自传式回应\" class=\"headerlink\" title=\"四种自传式回应\"></a>四种自传式回应</h1><p>我们在听别人讲话时总是会联系我们自己的经理，因此自以为是的人往往会有四种“自传式回应”（Autobiographical Response）的倾向：</p>\n<ul>\n<li>价值判断——对旁人的意见只有接受或不接受。</li>\n<li>追根究底——依自己的价值观探查别人的隐私。</li>\n<li>好为人师——以自己的经验提供忠告。</li>\n<li>自以为是——根据自己的行为与动机衡量别人的行为与动机。</li>\n</ul>\n<h1 id=\"表达也要讲技巧\"><a href=\"#表达也要讲技巧\" class=\"headerlink\" title=\"表达也要讲技巧\"></a>表达也要讲技巧</h1><p>古希腊人有一种很经典的哲学观点，即品德第一，感情第二，理性第三。我认为这三个词集中体现了让他人理解自己以及有效表达自己的精髓。</p>\n<p>品德指的是你个人的可信度，是人们对你的诚信和能力的认可，是人们对你的信任，是你的情感账户。感情指的是你的移情能力，是感性的，说明你能通过交流迅速理解他人的情感。理性是你的逻辑能力，即合理表达自己的能力。</p>\n<h1 id=\"一对一沟通\"><a href=\"#一对一沟通\" class=\"headerlink\" title=\"一对一沟通\"></a>一对一沟通</h1><p>你现在就可以练习习惯五。下次同别人交流的时候，你可以试着抛开自己的经验，尽力真正了解对方。你应该睿智、敏感而又头脑清楚。不论在办公室或者家中，敞开胸怀，凝神倾听。不要急功近利，即使短期内未获回馈也绝不气馁。</p>\n<p>如果你真正爱一个人，那么花时间了解对方将有益于今后的坦诚相待，这样一来，很多困扰家庭和婚姻的问题都将被扼杀在萌芽状态，没有发展壮大的机会，即便有这样的机会，充足的情感账户储蓄也会让问题迎刃而解。</p>\n<p>先理解别人。在问题出现之前，在评估和判断之前，在你表达个人观点之前，先理解别人，这是有效的相互依赖关系中最有用的习惯。</p>\n<h1 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h1><ol>\n<li>选择一个情感账户出现赤字的人际关系，试着从对方的角度理解并记下他的处境。下一次见面时，通过聆听来理解对方，将现在听到的和以前记下的做一个比较。看看你的想法是否准确？——你真的理解对方的立场和观点么？</li>\n<li>与一个亲近的人分享移情这个概念，告诉他你想要做到真正的移情聆听，并让他在一个星期之后提供反馈意见。——你做的怎么样？那个人有什么感觉？</li>\n<li>下次有机会旁观他人交流的时候，捂住自己的耳朵，只用眼睛观察。哪些情感不是用语言表达出来的？</li>\n<li>下次发现你表现出不恰当的自传式回应的时候，立即承认错误，尽力扭转局面，将情感账户的支出变成存入。（“对不起，我刚才并不是真的努力去理解你，我们可以再来一次吗？”）</li>\n<li>下次表达自己观点的时候，首先做到移情。要能够和对方的同伴一样（甚至更好地）描述对方的观点，然后站在对方的立场上，争取让自己的观点得到理解。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第三部分 习惯四 双赢思维——人际领导的原则","url":"https://lilei.pro/2019/04/07/Seven-Habbits-6/","content":"<h1 id=\"人际交往的六个模式\"><a href=\"#人际交往的六个模式\" class=\"headerlink\" title=\"人际交往的六个模式\"></a>人际交往的六个模式</h1><ul>\n<li>利人利己（双赢）</li>\n<li>损人利己（赢/输）</li>\n<li>舍己为人（输/赢）</li>\n<li>两败俱伤（输/输）</li>\n<li>独善其身（赢）</li>\n<li>好聚好散（无交易）</li>\n</ul>\n<h2 id=\"利人利己（双赢）\"><a href=\"#利人利己（双赢）\" class=\"headerlink\" title=\"利人利己（双赢）\"></a>利人利己（双赢）</h2><p>双赢者把生活看作合作的舞台，而不是竞技场。但是大多数人都用两分法看问题，非强即弱，不胜则败。实际上这种想法是站不住脚的，它以力量和地位，而非原则为准绳。</p>\n<h2 id=\"损人利己（赢-输）\"><a href=\"#损人利己（赢-输）\" class=\"headerlink\" title=\"损人利己（赢/输）\"></a>损人利己（赢/输）</h2><p>大多数人从小就被这种模式浸染。学校、赛场、法律把人分为敌对双方，不是你死，就是我活。诚然，在竞争激烈和信任薄弱的环境里，我们需要赢/输模式。但是竞争在生活中只居少数，我们不需要每天都和配偶、孩子、同事、邻居、朋友竞争。现实生活需要互相依赖，而不是单枪匹马，你的很多梦想都需要通过与其他人合作才能实现，而赢/输模式是这种合作最大的障碍。</p>\n<h2 id=\"舍己为人（输-赢）\"><a href=\"#舍己为人（输-赢）\" class=\"headerlink\" title=\"舍己为人（输/赢）\"></a>舍己为人（输/赢）</h2><p>有些人则正好相反，他们信奉输/赢模式。</p>\n<ul>\n<li>“我认输，你赢了。”</li>\n<li>“就这样吧，我听你的。”</li>\n<li>“我是个和事佬，只要能息事宁人，我做什么都行。”</li>\n</ul>\n<p>这种人没有标准，没有要求，没有期望，也没有将来。他们通常喜欢取悦他人，喜欢满足他人的希望。别人的认同和接受能够给他们力量，他们没有勇气表达自己的感受和信念，总是服从别人的意志。</p>\n<p>在谈判时，他们常常不是放弃就是退让，如果成为领导，也对下属嫉妒纵容。赢/输模式意味着做好人，然而<strong>好人不长命</strong>。</p>\n<p>可是被压抑的情感并不会消失，累积到一定程度后，反而以更丑恶的方式爆发出来，有些精神疾病就是这样形成的。</p>\n<p>赢/输模式和输/赢模式都存在人格缺陷。短期来看，赢/输模式的人较有效率，因为他们通常在能力和智力方面高人一筹，而输/赢模式自始至终都居于劣势。</p>\n<h2 id=\"两败俱伤（输-输）\"><a href=\"#两败俱伤（输-输）\" class=\"headerlink\" title=\"两败俱伤（输/输）\"></a>两败俱伤（输/输）</h2><p>为了报复，不惜牺牲自身的利益，却不问是否值得；只有不够成熟、掌握不了人生方向的人，才会这样。</p>\n<h2 id=\"独善其身（赢）\"><a href=\"#独善其身（赢）\" class=\"headerlink\" title=\"独善其身（赢）\"></a>独善其身（赢）</h2><p>当竞争和对抗意义不大的时候，独善其身的模式是多数人的处事方法，他们只在意自己的利益无损，别人的就留给他们自己去保护吧。</p>\n<h2 id=\"哪一种最好\"><a href=\"#哪一种最好\" class=\"headerlink\" title=\"哪一种最好\"></a>哪一种最好</h2><p>长远来看，不是双赢，就一定是两败俱伤。</p>\n<p>如果真的抱着双赢的态度，就会多与业主交流，听取意见，并有勇气表达自己的观点，直到结果让双方都满意。</p>\n<h1 id=\"不能双赢就好聚好散\"><a href=\"#不能双赢就好聚好散\" class=\"headerlink\" title=\"不能双赢就好聚好散\"></a>不能双赢就好聚好散</h1><p>如果实在无法达成共识，实现双赢，就不如好聚好散（放弃交易）。</p>\n<p>在相互依赖的环境里，任何非双赢的解决方案都不是最好的，因为他们终将对长远关系产生这样那样的不利影响，你必须慎重对待这些影响的代价。如果你无法同对方达成双赢的协议，那么最好选择放弃。</p>\n<h1 id=\"双赢思维的五个要领\"><a href=\"#双赢思维的五个要领\" class=\"headerlink\" title=\"双赢思维的五个要领\"></a>双赢思维的五个要领</h1><p>双赢的原则是所有人际交往的基础，包括五个独立的方面：<strong>双赢品德</strong>是基础，接着建立起<strong>双赢关系</strong>，由此衍生出<strong>双赢协议</strong>，需要<strong>双赢体系（结构）</strong>作为培育环境，通过双赢的<strong>双赢过程</strong>来完成。</p>\n<h2 id=\"双赢品德\"><a href=\"#双赢品德\" class=\"headerlink\" title=\"双赢品德\"></a>双赢品德</h2><p>双赢品德有三个基本特征。</p>\n<ul>\n<li>诚信。有明确的价值观，信守承诺。</li>\n<li>成熟。成熟就是在表达自己的情感和信念的同时又能体谅他人的想法和感受的能力。</li>\n<li>知足。即相信资源充足，人人有份。公众领域的成功的意思不是压倒旁人，而是通过成功的有效交往让所有的参与者获利，大家一起工作，一起探讨，一起实现单枪匹马无法完成的理想，这种成功要以知足心态为基础。</li>\n</ul>\n<h2 id=\"双赢关系\"><a href=\"#双赢关系\" class=\"headerlink\" title=\"双赢关系\"></a>双赢关系</h2><p>双赢的精髓就是信用，即情感账户。如果情感账户储蓄充足，信用就不再是问题，已有的投入让我们相知相敬，我们可以全神贯注于问题本身，而不是性格或者立场。</p>\n<p>你对双赢的态度越坚持，越真诚，越积极，越投入，你对他人的影响力就越大。</p>\n<h2 id=\"双赢协议\"><a href=\"#双赢协议\" class=\"headerlink\" title=\"双赢协议\"></a>双赢协议</h2><p>关系确立之后，就需要有协议来说明双赢的定义和方向，这种协议有时被称为“绩效协议”或“合作协议”，它让纵向交往转为水平交往，从属关系转为合作关系，上级监督转为自我监督。</p>\n<p>在双赢协议中，对以下五个要素应该有明确的规定：</p>\n<ul>\n<li>预期结果：确认目标和时限，方法不计。</li>\n<li>指导方针：确认实现目标的原则、方针和行为限度。</li>\n<li>可用资源：包括人力、财力、技术或者组织资源。</li>\n<li>任务考核：建立业绩评估标准和时间。</li>\n<li>奖惩制度：根据任务考核确定奖惩的意义。</li>\n</ul>\n<h3 id=\"双赢的管理培训\"><a href=\"#双赢的管理培训\" class=\"headerlink\" title=\"双赢的管理培训\"></a>双赢的管理培训</h3><p>……培训之前，向受训者语言这次培训不会一帆风顺，阻力一定会存在。</p>\n<h3 id=\"双赢绩效协议\"><a href=\"#双赢绩效协议\" class=\"headerlink\" title=\"双赢绩效协议\"></a>双赢绩效协议</h3><p>管理哲学家兼顾问彼得·德鲁克（Peter Drucker）建议，经理和员工之间可以用“给经理的信”这种形式来表述绩效协议的要点。首先就预期结果、指导方针和可用资源深入探讨，保证其与组织的总目标一致，然后写在“给经理的信”中，并提议下一次绩效计划和讨论的时间。</p>\n<p>有四种管理者或家长都可以掌控的奖惩方法：<strong>金钱、精神、机会</strong>以及<strong>责任</strong>。</p>\n<h2 id=\"双赢体系\"><a href=\"#双赢体系\" class=\"headerlink\" title=\"双赢体系\"></a>双赢体系</h2><p>双赢必须有相应体系支撑，包括培训、规划、交流、预算、信息、薪酬等，而且所有体系都要建立在双赢原则的基础上。</p>\n<p>通常情况下，问题都源于体系，而不是人。再好的人置身于一个糟糕的体系中，也不会有好结果。</p>\n<h2 id=\"双赢过程\"><a href=\"#双赢过程\" class=\"headerlink\" title=\"双赢过程\"></a>双赢过程</h2><p>我建议不同的人和机构采用以下四个步骤完成双赢过程：</p>\n<ol>\n<li>首先，从对方的角度看问题。真正理解对方的想法、需要和顾虑，有时甚至比对方理解的更为透彻。</li>\n<li>其次，认清主要问题和顾虑（而非立场）。</li>\n<li>第三，确定大家都能接受的结果。</li>\n<li>第四，实现这种结果的各种可能途径。</li>\n</ol>\n<h1 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h1><ol>\n<li>认真想一下你最近需要打交道的人或者想要解决的问题，在敢作敢为和善解人意间找到平衡点。</li>\n<li>列出最能妨碍双赢模式的因素，设法清除在个人影响圈内的那一部分。</li>\n<li>选择一个你想签订双赢协议的人际关系；尽量设身处地为对方着想，记下你认为对方会接受的结果；从自己的角度出发，列出对自己有利的结果；询问对方是否愿意就这个问题进行交流；一起商讨两全其美的对策。</li>\n<li>列出你生活中最重要的三个人际关系，估算一下与这些人的情感账户余额，记下有助于增加存款的感情投资。</li>\n<li>反省自己的交往模式，是赢/输式的吗？这种模式对你于他人的交往有什么影响？形成这种模式的主要原因是什么？这种模式对你有何助益？</li>\n<li>找到一个双赢模式的榜样，也就是即使身处困境也不忘双赢的人，仔细观察并向他学习。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第四部分 再论由内而外造就自己","url":"https://lilei.pro/2019/04/07/Seven-Habbits-11/","content":"<h1 id=\"利用刺激与回应之间的距离\"><a href=\"#利用刺激与回应之间的距离\" class=\"headerlink\" title=\"利用刺激与回应之间的距离\"></a>利用刺激与回应之间的距离</h1><p>上帝行事由内而外，尘世行事由外而内；尘世让世人摆脱贫穷，耶稣则先让世人摆脱内心的贫穷，然后由他们自己摆脱贫穷；尘世通过改变环境来造就人，耶稣则通过改变人来造就环境：尘世塑造人的行为，而耶稣改变人的本质。</p>\n<p>刺激与回应之间存在一段距离，成长和幸福的关键就在于我们如何利用这段距离。</p>\n<p>我们用新颖而有趣的方式利用刺激与回应之间的那段距离，思考自己如何变成了今天的自己以及这些过程如何决定了我们的世界观。</p>\n<p>从一开始，我们就极力互相支持、鼓励和体谅，这让我们能够更进一步地探索彼此的内心世界，而我们之间的关系也得到滋养。</p>\n<p>我们逐渐有了两项心照不宣的基本规则。一是“不要刨根问底”：无论哪个人露出了内心最脆弱的一面，另一人都不得追根究底，而是要尽力体谅对方，否则就显得太过咄咄逼人、霸道和刻板。二是在话题过于尖锐或痛苦的时候，我们就要及时打住，晚些时候或者等到第二天再说，直到当事人愿意再次开口。</p>\n<p>我们发现，看似琐碎的小事，往往也源自铭心刻骨的情感经历，如果只看表面，而没有挖掘深层的敏感问题，无异于在践踏对方心中的圣土。</p>\n<p>爱情保鲜的秘诀就是交谈，特别是讨论彼此的感受。</p>\n<h1 id=\"代际传承\"><a href=\"#代际传承\" class=\"headerlink\" title=\"代际传承\"></a>代际传承</h1><p>我们的行为模式会对子女的生活产生难以置信的影响，就好像我们的父母影响了我们一样。他们不仅让我们了解了自己是什么样子的人，而且让我们知道自己通过努力可以成为什么样的人。</p>\n<p>一个关系紧密、几代同堂的大家庭往往有一种超常的力量，能帮人们确认自我。让孩子们在这样的“部落”中找到自己的位置，时时感到被关怀。几代同堂的和睦家庭可能蕴含着最富有成效，回报最高，最令人满意的相互依赖关系，许多人都能感觉到这种关系的重要性。</p>\n<h1 id=\"成为转型者\"><a href=\"#成为转型者\" class=\"headerlink\" title=\"成为转型者\"></a>成为转型者</h1><p>在你的家族中已经延续数代的趋势可以在你这里画一个句号。你是一个转型者，连接着过去和未来，你自身的变化可以影响到后世的许多人。</p>\n<p>真正的变革是由内向外实现的，只是利用性格魅力的技巧，在态度和行为方面做些表面功夫根本不行，一定要从根本上改变那些决定了我们的人格和世界观的思想构造和行为模式才行。</p>\n<p>再次引用艾默生（Emerson）的名言：“在我们的不懈努力下，事情变得可以迎刃而解，这并不是因为任务的性质发生了变化，而是因为我们的能力增强了。”</p>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第三部分 习惯六 统合综效——创造性合作的原则","url":"https://lilei.pro/2019/04/07/Seven-Habbits-8/","content":"<p>统合综效的基本态度是如果以为具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以了解。</p>\n<p>与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。假如两人意见相同，其中一人必属多余。与所见略同的人沟通，毫无益处，要有分歧才有收获。</p>\n<p>统合综效的精髓是判断和尊重差异，取长补短。</p>\n<h1 id=\"敞开胸怀，博采众议\"><a href=\"#敞开胸怀，博采众议\" class=\"headerlink\" title=\"敞开胸怀，博采众议\"></a>敞开胸怀，博采众议</h1><p>所谓统合综效的沟通，是指敞开胸怀、接纳一切奇怪的想法，同时也贡献自己的浅见。</p>\n<p>凡是创新就得承担，不怕失败，不断尝试错误。只愿稳扎稳打的人，经不起此种煎熬。</p>\n<h1 id=\"沟通三层次\"><a href=\"#沟通三层次\" class=\"headerlink\" title=\"沟通三层次\"></a>沟通三层次</h1><p>低层次的沟通源自低度信任，其特点是人与人之间互相提防，步步为营，经常借助法律说话，为情况恶化作打算，其结果只能是赢/输或者输/赢，而且毫无效率可言，即产出/产能不平衡，结果只能是让人们更有理由进行自我防御和保护。</p>\n<p>中间一层是彼此尊重的交流方式，唯有相当成熟的人才办得到。但是为了避免冲突，双方都保持礼貌，却不一定为对方设想。在相互依赖的环境中，最常用的态度是<strong>妥协</strong>。</p>\n<p>统合综效意味着1+1等于8或者16，甚至1600。源自高度信任沟通的层次。</p>\n<h1 id=\"寻求第三条道路\"><a href=\"#寻求第三条道路\" class=\"headerlink\" title=\"寻求第三条道路\"></a>寻求第三条道路</h1><p>高余额的情感账户、双赢模式、先理解别人的原则，所有这些加在一起，就是实现创造性统合综效的理想环境。</p>\n<h1 id=\"消极协作减效\"><a href=\"#消极协作减效\" class=\"headerlink\" title=\"消极协作减效\"></a>消极协作减效</h1><p>人际关系最可贵的地方就是能接触到不同的模式。相同不是统一，一致也不等于团结，统一和团结意味着互补，而不是相同。相同毫无创造性可言，而且沉闷乏味。统合综效的精髓就是尊重差异。</p>\n<h1 id=\"尊重差异\"><a href=\"#尊重差异\" class=\"headerlink\" title=\"尊重差异\"></a>尊重差异</h1><p>自以为是的人总以为自己最可观，别人都有所偏颇，其实这才是画地为牢。反之，虚怀若谷的人承认自己有不足之处，而乐于在与人交往之中汲取丰富的知识见解，重视不同的意见，因而增广见闻。</p>\n<h1 id=\"化阻力为动力\"><a href=\"#化阻力为动力\" class=\"headerlink\" title=\"化阻力为动力\"></a>化阻力为动力</h1><p>在互赖关系中，统合综效是对付阻挠成长与改变的最有力途径。</p>\n<p>动力通常是积极、合理、自觉、符合经济效益的力量；相反地，阻力多半消极、负面、不合逻辑、情绪化、不自觉，具社会性与心理性因素。这两组作用力都是真实存在的，在应变时都要考虑周全。</p>\n<p>不涉法削减阻力，只一味增加推力，就仿佛施力于弹簧上，终有一天引起反弹。</p>\n<p>这并不意味着拒绝采取法律手段，有些时候法律手段时绝对必要的，但是我认为它只应该在最后关头发挥作用，而不是问题刚一出现的时候，过早使用只会让恐惧心理和法律模式制约了统合综效的可能性。</p>\n<h1 id=\"自然界是统合综效的最佳典范\"><a href=\"#自然界是统合综效的最佳典范\" class=\"headerlink\" title=\"自然界是统合综效的最佳典范\"></a>自然界是统合综效的最佳典范</h1><p>你应该尊重自己善于分析的一面和富有创造力的一面，尊重它们的差异会催生你的创造力。</p>\n<p>即使处于不利境地，也不应该放弃追求统合综效。不要在意别人的无礼行径，避开那些消极力量，发现并利用别人的优势，提高自己的认识，扩展自己的视野。你应该在相互依赖的环境中勇敢而坦率地表达自己的观点、情感和经历，借此鼓励他人同样地坦诚相待。</p>\n<p>尊重人与人之间的差异，当有人不同意你的观点的时候，你应该说：“你跟我有不一样的看法，这很好。”</p>\n<h1 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h1><ol>\n<li>想一想谁总是跟你的看法不一样，用什么方法可以把这些差异变成通往第三条道路的阶梯。可以就当前的某个项目或者某个问题请教这个人的意见，珍惜这些不同的见解。</li>\n<li>列一张名单，写上让你觉得不快的人的名字。如果你内心有更充足的安全感，能够做到尊重差异，你是否会觉得这些人代表了不同意见，而你可借此实现与他们的统合综效？</li>\n<li>想一想在什么情况下你更需要统合综效？统合综效需要哪些条件来支持？怎样才能创造出这些条件？</li>\n<li>下一次当你同某人意见相左或者发生冲突的时候，尽量理解他的立场和顾虑，以创造性的、互惠互利的方式解决问题。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第四部分 习惯七 不断更新——平衡的自我更新的原则","url":"https://lilei.pro/2019/04/07/Seven-Habbits-10/","content":"<p>人生最值得的投资就是锻炼自己，因为生活与服务人群都得靠自己，这是最真贵的工具。</p>\n<p>工作本身并不能带来经济上的安全感，具备良好的思考、学习、创造与适应能力，才能立于不败之地。拥有财富，并不代表经济独立，拥有创造财富的能力才真正可靠。</p>\n<h1 id=\"自我提升和完善的四个层面\"><a href=\"#自我提升和完善的四个层面\" class=\"headerlink\" title=\"自我提升和完善的四个层面\"></a>自我提升和完善的四个层面</h1><p>习惯七就是个人产能。它保护并优化你所拥有的最重要的资产——你自己。它从四个层面更新你的天性，那就是：身体、精神、智力、社会/情感。</p>\n<h2 id=\"身体层面\"><a href=\"#身体层面\" class=\"headerlink\" title=\"身体层面\"></a>身体层面</h2><p>身体层面指有效呵护我们的身体——健康饮食，充足休息以及定期锻炼。</p>\n<p>锻炼属于第二类事务，但是由于不具紧迫性，所以很少人能坚持不懈，结果终有一天我们会发现自己陷入了第一类事务，不得不面对健康问题和危机，而原因正是之前对锻炼的忽视。</p>\n<p>锻炼的所有好处几乎都产生于最后阶段。我想增强力量，就必须等到肌肉纤维撕裂，神经纤维感到疼痛才行，因为这时候自然机制才会予以过度补偿，纤维在 48 小时后会变得更加坚韧。</p>\n<p>情感“肌肉”（比如耐心）也是一样。当对耐心的磨练超越过去的记录时，情感纤维就会断裂，自然机制就会予以过度补偿，下一次纤维就会更加坚韧。</p>\n<p>刚开始时也许你并不喜欢锻炼，甚至还很厌恶，但是一定要积极一点，坚持下去。在你执行慢跑计划期间，即使清晨有雨，也不能放弃。而是要想太好了！下雨了！我可以在锻炼身体的同时磨练意志。</p>\n<h2 id=\"精神层面\"><a href=\"#精神层面\" class=\"headerlink\" title=\"精神层面\"></a>精神层面</h2><p>精神层面的更新为你指引人生的方向，与习惯二密切相关。</p>\n<p>有些人是通过欣赏优秀的文学或音乐作品来实现精神层面的更新，还有些人是通过与自然交流来达到同样目的。我的做法是每天认真阅读和思考《圣经》。</p>\n<p>大自然会赐福给哪些沉浸在自然中的人。当你远离城市的喧嚣与混乱，尽情享受过大自然的和谐与韵律，再回到城市时会感到耳目一新，在一段时间内，没有什么能够干扰你或让你惊慌失措，直到外界的喧嚣混乱再次侵蚀到你内心的静谧和安详。</p>\n<p>个人的使命宣言至关重要。一旦深刻理解了生活的中心和目标，我们就可以不断反思，持之以恒，在更新精神层面的过程中，就可以抱着坚定的信念，构想并实践每一天的活动。</p>\n<p>仔细聆听，设法回头，检讨动机，把忧愁埋进沙子里。</p>\n<h2 id=\"智力层面\"><a href=\"#智力层面\" class=\"headerlink\" title=\"智力层面\"></a>智力层面</h2><p>我们大多数人的智力发育和学习习惯都源自正规教育。但是，一旦脱离了学校的训导，许多人的头脑就会退化：不再认真读书，不再探索身外的新世界，不再用心思考，也不再写作，至少是不再重视写作，不再把它当作考验我们准确、扼要表达自己的能力的方式。相反，我们把时间花在了看电视（或者是网上冲浪）中。</p>\n<p>电视的确让生活变得丰富多彩，但是，还有很多电视节目完全是在浪费我们的时间和头脑。</p>\n<p>养成定期阅读优秀文学作品的习惯是拓展思维的最佳方式。可以从每个月读一本书开始，然后每两周读一本书，接着是每周读一本书。</p>\n<p>磨砺心志的另一种有效方式是写作。如果能够在写信的时候与他人深入交流思想、感受和理念，而不是肤浅地停留在事物表面，也有助于我们提高思考、推理和获取他人理解的能力。</p>\n<h2 id=\"社会-情感层面\"><a href=\"#社会-情感层面\" class=\"headerlink\" title=\"社会/情感层面\"></a>社会/情感层面</h2><p>社会/情感层面的更新并不像其它层面的更新那样需要花费大量的时间，我们可以在与他人的日常交往中完成这项工作，但练习还是必要的。习惯四、五、六是你在练习当中需要时时关注的地方，这些习惯成功的关键不是智力问题，而是情感问题，与我们个人的安全感密切相关。</p>\n<h1 id=\"改变他人\"><a href=\"#改变他人\" class=\"headerlink\" title=\"改变他人\"></a>改变他人</h1><p>后来，当她又要恢复到旧有的行为模式时，生命垂危的骑士把她叫到病床前，唱起了那曲动人的《无法实现的梦》（The Impossible Dream）。他凝视她的双眼，轻声说：“永远不要忘记，你是杜尔西内娅”。</p>\n<p>我们可以选择清晰而真实地反映出他人的形象，肯定他们的积极性和责任心，帮助他们改变行为模式，成为讲原则，懂判断，独立自主，有价值的个体。知足心态让我们意识到，反映他人的正面形象并不会贬低我们自己，而会使我们更强大，因为它增加了我们与其他积极主动者有效交往的机会。</p>\n<p>歌德（Goethe）说：“以一个人的现有表现期许之，他不会有所长进。以他的潜能和应有成就期许之，他定能不负所望。”</p>\n<h1 id=\"平衡更新\"><a href=\"#平衡更新\" class=\"headerlink\" title=\"平衡更新\"></a>平衡更新</h1><p>自我提升和完善的过程必须包括天性中的所有四个层面：身体、精神、智力、社会/情感。</p>\n<p>企业力争上游的道理也是这样。谋利固然是企业经营的基本目的，但并非企业存在的唯一目的。犹如生命少不了食物，但人绝非为吃而活。</p>\n<h1 id=\"更新中的统合综效\"><a href=\"#更新中的统合综效\" class=\"headerlink\" title=\"更新中的统合综效\"></a>更新中的统合综效</h1><p>人生的四个层面休戚相关：身体健全有助于心智发展，精神提升有益于人际关系的圆满。因此，平衡才能产生最佳的整体效果。</p>\n<p>身体层面的自我更新等同于强化个人愿景（习惯一）。它帮助我们增强积极性、自我意识和独立意志，让我们知道自己是自由的，不需要被动地承受他人的行为后果，这也许是锻炼身体的最大好处。</p>\n<p>精神层面的更新等同于强化自我领导（习惯二）。它帮助我们更好地按照想象和良知（而不只是回忆）行事，深入理解个人思维和价值观，确定核心的正确原则，明确自己在生活中的独特使命，改变思维和行为模式，以及坚持正确原则并利用个人的资源优势。</p>\n<p>精神层面的更新让个人的生活变得更加丰富。</p>\n<p>智力层面的更新等同于强化自我管理（习惯三）。它帮助你在做计划的时候确定第二类事务的重要活动，优先能够有效利用时间和精力的目标与活动，然后围绕这些组织并展开活动。不断接受教育帮助你巩固知识基础，增加选择范围。稳定的经济基础并非来自于工作，而是来自于<strong>个人的产能</strong>（思考、学习、创造、调整）。<strong>真正的经济独立指的不是家财万贯，而是拥有创造财富的能力</strong>，这是内在的。</p>\n<p>“每天的个人领域的成功”（每天至少用一个小时实现身体、精神和智力层面的更新）是培养七个习惯的关键，完全在个人的影响圈范围内。</p>\n<h1 id=\"螺旋式上升\"><a href=\"#螺旋式上升\" class=\"headerlink\" title=\"螺旋式上升\"></a>螺旋式上升</h1><p>良知是人类独特的天赋，帮助我们判断自己是否背离了正确的原则，然后引导我们向这些原则靠拢。</p>\n<p>垃圾食品和缺乏锻炼会毁掉运动员的健康。同样，淫秽、粗俗或色情的东西会使我们的灵魂陷入黑暗之中，削弱我们的判断能力，不再关心是非对错（自然而神圣的良知），只在乎自己是否会被揭发“社会良知”。</p>\n<p>哈马舍尔德（Dag Hammarskjold，前联合国秘书长）说过：把玩内心兽性的人，早晚会变成真正的野兽；整天弄虚作假的人，终将失去获得真理的权利；暴虐成性的人，头脑的判断力会日益减退。如果真的要保持花园整洁，就不能让杂草有立足之地。</p>\n<p>要实现这个良性循环，就必须学习、坚持、实践，并沿着螺旋式上升的路线不断提高实践的层次。如果以为做到一项就已足够，完全是在自欺欺人。</p>\n<h1 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h1><ol>\n<li>写出有助于保持良好的身体状态，符合你的生活方式，能让你从中得到乐趣的活动清单。</li>\n<li>挑选其中一项活动，把它列为你下周的个人活动的目标。</li>\n<li>到一周结束时，评估自己的表现，如果没有实现目标，就思考一下原因，是因为你更看重一种更高尚的价值观，还是因为你未能遵循自己的价值观行事。</li>\n<li>列出在精神和智力层面自我提升和完善的活动清单，在社会、情感层面希望改善的人际关系以及能依靠公众成功来提高效能的具体领域。在每个层面中挑选一项活动，列为本周目标，付诸实施并加以评估。</li>\n<li>坚持每周写下所有四个层面的具体“磨刀”行动，付诸实施并评估自己的表现和效果。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第二部分 习惯二 以终为始","url":"https://lilei.pro/2019/04/07/Seven-Habbits-3/","content":"<h1 id=\"第四章-习惯二-以终为始——自我领导的原则\"><a href=\"#第四章-习惯二-以终为始——自我领导的原则\" class=\"headerlink\" title=\"第四章 习惯二 以终为始——自我领导的原则\"></a>第四章 习惯二 以终为始——自我领导的原则</h1><h2 id=\"设想一段悼词\"><a href=\"#设想一段悼词\" class=\"headerlink\" title=\"设想一段悼词\"></a>设想一段悼词</h2><p>请找个僻静的角落，抛开一切杂念，敞开心扉，跟着我走过这段心灵之旅。</p>\n<p>假设你正在前往殡仪馆的路上，要去参加一位至亲的葬礼。抵达之后，居然发现亲朋好友齐聚一堂，是为了向你告别。姑且假定这时亲族代表、友人、同事或社团伙伴，即将上台追述你的生平。请你认真想一想</p>\n<ul>\n<li>你希望人们对你以及你的生活有什么样的评价？</li>\n<li>你希望他们怎样评价你的人格？</li>\n<li>你希望他们回忆起你的哪些成就和贡献？</li>\n<li>你希望对周围人的生活施加过什么样的影响？</li>\n</ul>\n<h2 id=\"以终为始的定义\"><a href=\"#以终为始的定义\" class=\"headerlink\" title=\"以终为始的定义\"></a>以终为始的定义</h2><p>以你的人生目标作为衡量一切的标准，你的一言一行、一举一动，无论发生在何时，都必须遵循这一原则，即由个人最忠实的期许或价值观来决定一切。</p>\n<p>你希望在盖棺定论时获得的评价，才是你心目中真正渴望的成功。</p>\n<h2 id=\"任何事物都需要两次创造\"><a href=\"#任何事物都需要两次创造\" class=\"headerlink\" title=\"任何事物都需要两次创造\"></a>任何事物都需要两次创造</h2><h3 id=\"第一次创造\"><a href=\"#第一次创造\" class=\"headerlink\" title=\"第一次创造\"></a>第一次创造</h3><p>在头脑中构思，即智力上的第一次创造（Mental/First Creation）</p>\n<h3 id=\"第二次创造\"><a href=\"#第二次创造\" class=\"headerlink\" title=\"第二次创造\"></a>第二次创造</h3><p>付诸实践，体力上的第二次创造（Physical/Second Creation）</p>\n<h2 id=\"主动设计还是被动接受\"><a href=\"#主动设计还是被动接受\" class=\"headerlink\" title=\"主动设计还是被动接受\"></a>主动设计还是被动接受</h2><p>“任何事物都是两次创造而成”是个客观原则，但“第一次的创造”未必都是有意的设计。有些人自我意识薄弱，不愿主动设计自己的生活，结果就让影响圈外的人或事控制了自己。这种人的人生方向大多源自个人喜好，不符合客观原则，之所以会被接收，是因为某些人内心脆弱，依赖心理过重，渴望被接纳和获得归属感，向往他人的关怀和爱护，而且一定要别人来肯定自己价值和重要性。</p>\n<h2 id=\"领导与管理：两次创造\"><a href=\"#领导与管理：两次创造\" class=\"headerlink\" title=\"领导与管理：两次创造\"></a>领导与管理：两次创造</h2><p>“以终为始”的另一个原则基础是自我领导，但领导（Leadershi）不同于管理（Management）。领导是第一次的创造，必需先于管理；管理是第二次的创造。</p>\n<p>领导与管理就好比思想与行为。管理关注基层，思考的是“怎样才能有效地把事情做好”；领导关注高层，思考的是“我想成就的是什么事业”。领导是“做正确的事”，管理是“正确地做事”。管理是有效地顺着成功的梯子往上爬，领导则判断这个梯子是否搭在正确的墙上。</p>\n<p>个人生活中的领导意识更为匮乏，很多人连自己的价值观都没有搞清楚，就忙于提高效率，制定目标或完成任务。</p>\n<h2 id=\"改写人生剧本：成为自己的第一次创造者\"><a href=\"#改写人生剧本：成为自己的第一次创造者\" class=\"headerlink\" title=\"改写人生剧本：成为自己的第一次创造者\"></a>改写人生剧本：成为自己的第一次创造者</h2><ul>\n<li>自我意识</li>\n<li>想象力：在心里演练哪些尚未释放的潜能</li>\n<li>良知：遵循自然法则或原则</li>\n</ul>\n<h2 id=\"个人使命宣言\"><a href=\"#个人使命宣言\" class=\"headerlink\" title=\"个人使命宣言\"></a>个人使命宣言</h2><p>以终为始的最有效方法，就是撰写一份个人使命宣言，即人生哲学或基本信念。</p>\n<ul>\n<li>想成为怎样的人（品德）</li>\n<li>想成就什么样的事业（贡献和成就）</li>\n<li>为此奠基的价值观和原则</li>\n</ul>\n<p>对于个人来说，基于正确原则的个人使命宣言也同样是评价一切的标准，成为我们以不变应万变的力量源泉。</p>\n<h2 id=\"核心区\"><a href=\"#核心区\" class=\"headerlink\" title=\"核心区\"></a>核心区</h2><p>制定个人使命宣言必须从影响圈的核心开始，基本的思维定式就在这里，即我们用来观察世界的“透镜”。当我们专注于这个核心并取得丰硕成果时，影响圈就会被扩大，这是最高水平的产能，会提升我们在各生活领域的效能。</p>\n<ul>\n<li>安全感：代表价值观、认同、情感的归属、自尊自重与是否拥有个人的基本能力。</li>\n<li>人生方向：时“地图”的和内心的准绳，人类一次为解释外界事物的理据以及决策与行为的原则和内在标准。</li>\n<li>智慧：是人类对生命的认知、对平衡的感知和对事物间联系的理解，包括判断力、洞察力和理解力，是这些能力的统一体。</li>\n<li>力量：采取行动、达成目标的能力，是做出选择的关键性力量，也包括培育出更有效的习惯以替代旧习惯的能力。</li>\n</ul>\n<h2 id=\"以原则为中心\"><a href=\"#以原则为中心\" class=\"headerlink\" title=\"以原则为中心\"></a>以原则为中心</h2><p>以原则为中心的人会保持冷静和客观，不受情绪或其它因素的干扰，纵观全局——工作需要、家庭需要、其他相关因素以及不同决定的可能后果，深思熟虑后才做出正确选择。</p>\n<h2 id=\"善用整个大脑\"><a href=\"#善用整个大脑\" class=\"headerlink\" title=\"善用整个大脑\"></a>善用整个大脑</h2><p>左脑负责逻辑思考与语言能力，右脑执掌创造力与直觉。左脑处理文字，右脑擅长图像；左脑重局部与分析，右脑重整体与整合。</p>\n<p><strong>拓宽思路</strong>和<strong>心灵演练</strong>是开发右脑的两个途径。</p>\n<h3 id=\"拓宽思路\"><a href=\"#拓宽思路\" class=\"headerlink\" title=\"拓宽思路\"></a>拓宽思路</h3><p>有时，人会因为意外打击而在瞬间从左脑思维变成右脑思维，比如亲人离世、罹患重病、经济危机或陷入困境的时候，我们会扪心自问：什么才是最重要的？我们究竟在追求什么？</p>\n<p>积极主动者不需要这种刺激，就能拓宽思路、自觉转换思维定式。比如设想自己的葬礼，或者银婚及金婚纪念日的情景，邀请你的配偶与你一起来畅想，两人共同的理想婚姻关系应当怎样，怎样通过日常活动来付诸实施？</p>\n<p>你也可以设想自己退休后的情形，那时自己有怎样的贡献和成就，退休后又有什么计划，是否想二次创业？</p>\n<h3 id=\"心灵演练\"><a href=\"#心灵演练\" class=\"headerlink\" title=\"心灵演练\"></a>心灵演练</h3><p>心灵演练与确认施行自我领导不是只要撰写一个使命宣言就完成了，他是一个确立愿景和价值观，并让自己的生活遵从这些重要原则的过程。右脑会在这个过程中帮助你进行心灵演练（Visualization），并对正确行为加以确认（Affirmation）。这会让你的生活更符合使命宣言。</p>\n<p>确认应该包括五个基本要素：个人、积极、果断、可视、情感。例如“发现子女行为不当时，我（个人）能以智慧、爱心、坚定的立场与自制力（积极）及时应对（果断），结果让我深感欣慰（情感）。”</p>\n<h2 id=\"确定角色和目标\"><a href=\"#确定角色和目标\" class=\"headerlink\" title=\"确定角色和目标\"></a>确定角色和目标</h2><p>在撰写使命宣言时，不妨分开不同的角色领域，一一订立目标。事业、生活、政治、信仰等。</p>\n<h2 id=\"家庭的使命宣言\"><a href=\"#家庭的使命宣言\" class=\"headerlink\" title=\"家庭的使命宣言\"></a>家庭的使命宣言</h2><p>每个家庭都有共同的价值观及理念，作为生活的重心，撰写家庭使命宣言正可以凸显这个生活中心，时全家人团结在共同的目标下。</p>\n<h2 id=\"组织的使命宣言\"><a href=\"#组织的使命宣言\" class=\"headerlink\" title=\"组织的使命宣言\"></a>组织的使命宣言</h2><p>一个真正反映每隔成员的共同愿景和价值观的使命宣言，能调动他们的创造力和奉献精神，使他们不再需要旁人的指导、监督和批评，因为他们已经接受了不变的核心原则，接受了企业为之奋斗的共同目标。</p>\n<h2 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h2><ol>\n<li>把你参加葬礼心灵演练时的心得列表整理。</li>\n<li>根据目前理解，写下自己的人生角色。检讨你对目前扮演的角色和自己的生活是否满意。</li>\n<li>每天抽空撰写个人使命宣言。</li>\n<li>阅读各种生活中心，看你的行为符合其中哪种类型？他们是否让你的日常行为有了一定依据？你是否满意？</li>\n<li>为编写使命宣言而手机笔记、引言、想法以及可能有用的各种资料。</li>\n<li>设想近期内可能会从事的某个项目，用心灵演练的原则，写下你希望获得的结果与应采取的步骤。</li>\n<li>向家人呢或同事讲述本章的精华，并建议大家共同拟定家庭或团队的使命宣言。</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第二部分 习惯一 积极主动","url":"https://lilei.pro/2019/04/07/Seven-Habbits-2/","content":"<h1 id=\"第三章-习惯一-积极主动——个人愿景的原则\"><a href=\"#第三章-习惯一-积极主动——个人愿景的原则\" class=\"headerlink\" title=\"第三章 习惯一 积极主动——个人愿景的原则\"></a>第三章 习惯一 积极主动——个人愿景的原则</h1><h2 id=\"自我思维（Self-paradigm）\"><a href=\"#自我思维（Self-paradigm）\" class=\"headerlink\" title=\"自我思维（Self-paradigm）\"></a>自我思维（Self-paradigm）</h2><blockquote>\n<p>行有不得，反求诸己</p>\n</blockquote>\n<p>试着跳出自我的框框，把意识转移到屋子的某个角落，然后用心客观地审视自己，站在旁观泽的角度观察自己，描述现在的心情与精神状态，思考你头脑的工作方式，它是否反应灵敏。</p>\n<h2 id=\"社会之镜（Social-Mirro）\"><a href=\"#社会之镜（Social-Mirro）\" class=\"headerlink\" title=\"社会之镜（Social Mirro）\"></a>社会之镜（Social Mirro）</h2><p>社会观点认为，环境与条件对我们起着决定性的作用。我们不否认条件作用的影响巨大，但并不等于承认它凌驾于一切之上，甚至可以决定我们的命运。根据这种看法绘制的社会地图可以分为三种，也被称作揭示人性的三种“决定论”：</p>\n<ol>\n<li>基因决定论（Genetic Determinism）：人的本性由DNA决定，自先祖遗传下来。</li>\n<li>心理决定论（Psychic Determinism）：人的本性由父母的言行决定，即原生家庭论。</li>\n<li>环境决定论（Environmental Determinism）：环境决定人的本性，如周遭的人与事，例如老板、配偶、子女乃至自然环境和经济环境。</li>\n</ol>\n<p>这三种社会地图都已“刺激-回应”理论为基础，来源于巴甫洛夫所做的关于狗的实验，基本观点认为我们会受条件左右，以某一特定方式回应某一特定刺激。</p>\n<h2 id=\"选择的自由\"><a href=\"#选择的自由\" class=\"headerlink\" title=\"选择的自由\"></a>选择的自由</h2><p>人类的自我意识是独立的，能够超脱肉体的束缚，以旁观者的身份审视自己的遭遇。他可以决定外界刺激对自己的影响程度，或者说，在遭遇（刺激）与对遭遇的回应之间，他有选择回应方式的自由和能力。</p>\n<p>即，在刺激与回应之间，人类有选择的自由。这便是“积极主动”的价值。</p>\n<p>责任感（Responsibility）从构词法来说是能够回应（Response-able）的意思，即选择回应的能力，人类应当有营造有利的外在环境的积极性和责任感。积极主动是人的天性，即使生活受到了外界条件的制约，那也是因为我们有意或无意地选择了被外界条件控制，这种选择成为消极被动（Reactive）。</p>\n<h2 id=\"除非你愿意，否则没人能伤害你\"><a href=\"#除非你愿意，否则没人能伤害你\" class=\"headerlink\" title=\"除非你愿意，否则没人能伤害你\"></a>除非你愿意，否则没人能伤害你</h2><p>伤害我们的并非悲惨遭遇本身，而是我们对于悲惨遭遇的回应。尽管这些事的确会让人身心受创或者经济受损，但是品德和本性完全可以不受影响。事实上月痛苦的经历，越能磨练意志，开发潜能，提升自如应对困境的能力，甚至还可能感召他人争取同样的自由。</p>\n<h2 id=\"聆听自己的语言\"><a href=\"#聆听自己的语言\" class=\"headerlink\" title=\"聆听自己的语言\"></a>聆听自己的语言</h2><p>消极被动的人，言语中往往会暴露出推卸责任的意图，例如：</p>\n<ul>\n<li>“我就是这样做事的。”天生如此，爱看不看。</li>\n<li>“他把我气疯了！”责任不在我，是外界因素控制了我的情绪。</li>\n<li>“我根本没时间做。”外界因素——时间扼住了我的咽喉。</li>\n<li>“我只能这样做。”迫于环境（外界因素）</li>\n</ul>\n<p>推卸责任的言语往往会强化宿命论。说者一遍遍被自己洗脑，变得更加自怨自艾，怪罪别人和环境，甚至把星座也扯了进去。</p>\n<h2 id=\"关注圈与影响圈\"><a href=\"#关注圈与影响圈\" class=\"headerlink\" title=\"关注圈与影响圈\"></a>关注圈与影响圈</h2><p>积极主动的人专注于“影响圈”，他们专心做自己力所能及的事，他们的能量是积极的，能够使影响圈不断扩大、扩张和成长。只要我们的焦点在关注权，就等于是允许自己受制于外界条件，自然就不会主动采取必要措施来推动积极变化。</p>\n<p>一个人的关注圈可能会小于影响圈，这说明此人由于自己的缘故，在情感方面缺乏远见和判断力，消极而又自私，全部精力都放在关注圈内。</p>\n<h2 id=\"三种问题\"><a href=\"#三种问题\" class=\"headerlink\" title=\"三种问题\"></a>三种问题</h2><p>可直接控制/可间接控制/无法控制</p>\n<blockquote>\n<p>上帝啊，请赐我勇气，改变那些我能改变的；请赐我胸襟，接收那些我无法改变的；请赐我慧眼，能够分辨这两者。</p>\n</blockquote>\n<h2 id=\"“如果”和“我可以”\"><a href=\"#“如果”和“我可以”\" class=\"headerlink\" title=\"“如果”和“我可以”\"></a>“如果”和“我可以”</h2><p>与关注圈相关的语句多半带有假设性质，“如果”；与影响圈相关的语句多半体现了这个人的品德修养，“我可以”。</p>\n<h2 id=\"对待错误的态度\"><a href=\"#对待错误的态度\" class=\"headerlink\" title=\"对待错误的态度\"></a>对待错误的态度</h2><p>马上承认， 改正并从中吸取教训，这样才能反败为胜。如果不肯承认而后改正，也不丛中吸取教训，等于错上加错，自欺欺人。</p>\n<h2 id=\"两种直接掌控人生的途径\"><a href=\"#两种直接掌控人生的途径\" class=\"headerlink\" title=\"两种直接掌控人生的途径\"></a>两种直接掌控人生的途径</h2><p>一、作出承诺，信守诺言<br>二、确立目标，付诸实践</p>\n<h2 id=\"付诸行动\"><a href=\"#付诸行动\" class=\"headerlink\" title=\"付诸行动\"></a>付诸行动</h2><ol>\n<li>用一整天的时间，听自己和周围的人说话，注意看是否常有“但愿”、“我办不到”、“我不得不”等消极语言出现</li>\n<li>想一想近期是否会发生一些按照以前的习惯拟会消极对待的事情？他是否在你的影响圈之内？你应如何以积极主动的原则应对？在心里演练一下积极的应对方式；提醒自己刺激与回应之间存在空间；想自己承诺，要抓住选择回应的自由</li>\n<li>找出一个工作或生活中令你备感挫折的问题，判断它属于直接控制、间接控制还是无法控制的问题，然后在影响圈内找出解决问题的第一个步骤，并付诸行动</li>\n<li>实行积极主动的原则30天，观察自己的影响圈有何变化</li>\n</ol>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"《高效能人士的七个习惯》第一部分 重新探索自我","url":"https://lilei.pro/2019/04/07/Seven-Habbits-1/","content":"<h1 id=\"第一章-由内而外全面造就自己\"><a href=\"#第一章-由内而外全面造就自己\" class=\"headerlink\" title=\"第一章 由内而外全面造就自己\"></a>第一章 由内而外全面造就自己</h1><h2 id=\"本书要阐述的内容\"><a href=\"#本书要阐述的内容\" class=\"headerlink\" title=\"本书要阐述的内容\"></a>本书要阐述的内容</h2><p>以原则为中心，以品德为基础，要求“由内而外”地实现个人效能和人际效能。</p>\n<p>由内而外的观点认为个人领域的成功必需先于公众领域的成功；只有先信守对自己的承诺，才能信守对他人的承诺。由内而外是一个持续的更新过程，以主宰人类成长和进步的自然法则为基础，是螺旋向上的，它让我们不断进步，直到实现独立自强与有效的互赖。</p>\n<h1 id=\"第二章-七个习惯概论\"><a href=\"#第二章-七个习惯概论\" class=\"headerlink\" title=\"第二章 七个习惯概论\"></a>第二章 七个习惯概论</h1><h2 id=\"习惯的引力\"><a href=\"#习惯的引力\" class=\"headerlink\" title=\"习惯的引力\"></a>习惯的引力</h2><p>宇宙飞船必须先摆脱强大的地球引力，为此在刚发射的几分钟，即刚升空时的几公里消耗的能量比之后几天几十万公里旅程消耗的能量还要多。习惯也一样有极大的引力，只是许多人不加注意或不肯承认罢了。要根除根深蒂固的不良习惯，仅有一点点毅力，只作一点点改变是不够的。</p>\n<h2 id=\"习惯的定义\"><a href=\"#习惯的定义\" class=\"headerlink\" title=\"习惯的定义\"></a>习惯的定义</h2><p>习惯是知识、技巧、意愿相互交织的结果。</p>\n<ul>\n<li>知识：理论范畴，指点“做什么”及“为何做”</li>\n<li>技巧：告诉“如何做”</li>\n<li>意愿：促使“想要做”</li>\n</ul>\n<h2 id=\"成熟模式图\"><a href=\"#成熟模式图\" class=\"headerlink\" title=\"成熟模式图\"></a>成熟模式图</h2><ul>\n<li>依赖：以“你”为核心</li>\n<li>独立：以“我”为核心</li>\n<li>互赖：以“我们”为核心</li>\n</ul>\n<p>只重独立并不适于互赖的现实生活。只知独立却不懂互赖的人只能称为独个的“生产标兵”，却与“优秀领导”或“最佳合作者”之类的称呼无缘，也不会拥有美满的家庭、婚姻或集体生活。</p>\n<p>互赖是一个更为成熟和高级的概念。生理上互赖的人，可以自力更生，但也明白合作会比单干更有成效；情感上互赖的人，能充分认识自己的价值，但也知道爱心、关怀以及付出的必要性；智力上互赖的人懂得取人之长，补己之短。</p>\n<h2 id=\"七个习惯\"><a href=\"#七个习惯\" class=\"headerlink\" title=\"七个习惯\"></a>七个习惯</h2><h3 id=\"依赖-gt-独立，个人领域的成功\"><a href=\"#依赖-gt-独立，个人领域的成功\" class=\"headerlink\" title=\"依赖 -&gt; 独立，个人领域的成功\"></a>依赖 -&gt; 独立，个人领域的成功</h3><ul>\n<li>积极主动</li>\n<li>以终为始</li>\n<li>要事第一</li>\n</ul>\n<h3 id=\"独立-gt-互赖，公众领域的成功\"><a href=\"#独立-gt-互赖，公众领域的成功\" class=\"headerlink\" title=\"独立 -&gt; 互赖，公众领域的成功\"></a>独立 -&gt; 互赖，公众领域的成功</h3><ul>\n<li>双赢思维</li>\n<li>知彼解己</li>\n<li>统合综效</li>\n</ul>\n<h3 id=\"螺旋上升\"><a href=\"#螺旋上升\" class=\"headerlink\" title=\"螺旋上升\"></a>螺旋上升</h3><ul>\n<li>不断更新</li>\n</ul>\n<h2 id=\"什么是高效能\"><a href=\"#什么是高效能\" class=\"headerlink\" title=\"什么是高效能\"></a>什么是高效能</h2><p><strong>产出与产能平衡的原则是效能的精髓</strong>，放之四海而皆准，不管你是否遵从，它都会存在。它是指导人生的灯塔，是效能的定义和模式，是本书中七个习惯的基础。</p>\n","categories":[],"tags":["高效能人士的七个习惯"]},{"title":"友情链接","url":"https://lilei.pro/2019/03/10/links/","content":"<table>\n<thead>\n<tr>\n<th>Title</th>\n<th>Content</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"noopener\">hexo-theme-indigo</a></td>\n<td>本博客使用的 Hexo 主题</td>\n</tr>\n</tbody>\n</table>\n","categories":[],"tags":["工具"]},{"title":"Java SE 8 Lambda 快速入门","url":"https://lilei.pro/2018/11/01/java8-lambda/","content":"<blockquote>\n<p>本文是对<a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html\" target=\"_blank\" rel=\"noopener\">Java SE 8: Lambda Quick Start</a>的翻译，供个人学习Lambda表达式之用。成文日期：2018-11-01，所有以引文出现的文字为笔者阅读过程中添加，非原文内容。<br>强烈建议CET4以上的读者阅读原文。</p>\n</blockquote>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h2><p>本文旨在介绍在 Java SE 8 中引进的 Lambda 表达式。</p>\n<h2 id=\"阅读时间\"><a href=\"#阅读时间\" class=\"headerlink\" title=\"阅读时间\"></a>阅读时间</h2><p>大约 1 小时</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Lambda 表达式是 Java SE 8 新引入的重要特性。它提供了通过一个表达式表示指代接口的简洁方法。Lambda 表达式也在遍历、过滤、以及读取数据方面优化了<code>Collection</code>类的使用。此外，新的并发特性提升了多核环境下的程序性能。</p>\n<blockquote>\n<p>总结一下就是三个优点：1.更简洁的匿名类写法，2.更便利的集合类处理，3.多核环境性能优化。</p>\n</blockquote>\n<p>本文首先提供了对 Lambda 表达式的介绍说明，然后介绍匿名内部函数，接着对函数借口和新的 Lambda 语法进行讨论。然后列举出一些常用使用方法模版。</p>\n<p>下节通过对一个搜索场景的讨论，引申出 Lambda 表达式如何优化这种功能实现。然后介绍了一些<code>java.util.function</code>包里面常用的函数接口，如<code>Predicate</code>和<code>Function</code>，并举了一些栗子。</p>\n<p>文末介绍如何通过 Lambda 优化集合类使用。</p>\n<p>提供所有样例源码。</p>\n<h2 id=\"硬件和软件需求\"><a href=\"#硬件和软件需求\" class=\"headerlink\" title=\"硬件和软件需求\"></a>硬件和软件需求</h2><p>以下是硬件和软件需求列表</p>\n<ul>\n<li>JDK 8</li>\n<li>NetBeans 7.4</li>\n</ul>\n<blockquote>\n<p>可以用IDEA代替NetBeans</p>\n</blockquote>\n<h2 id=\"（运行样例的）先决条件\"><a href=\"#（运行样例的）先决条件\" class=\"headerlink\" title=\"（运行样例的）先决条件\"></a>（运行样例的）先决条件</h2><p>要运行样例，你的电脑上必须安装有JDK 8和NetBeans 7.4或更高版本。你可以在<a href=\"http://openjdk.java.net/projects/lambda/\" target=\"_blank\" rel=\"noopener\">the main Lambda site</a>找到下载链接。或者可以直接使用下面的链接。</p>\n<ul>\n<li><a href=\"https://jdk8.java.net/download.html\" target=\"_blank\" rel=\"noopener\">Java Development Kit 8 (JDK8) Early Access</a></li>\n<li><a href=\"http://netbeans.org/\" target=\"_blank\" rel=\"noopener\">NetBeans 7.4 or later</a></li>\n</ul>\n<p><strong>注意：</strong> 安装包适用于所有主流操作系统。本文基于 Linux Mint 13（Ubuntu/Debian）完成。</p>\n<p>安装完成JDK8和NetBeans后。将它们的<code>bin</code>文件夹添加到你的环境变量<code>PATH</code>中。</p>\n<p><strong>注意：</strong> 本文最后更新于 2013 年十二月。</p>\n<blockquote>\n<p>竟然是5年以前的文章了…</p>\n</blockquote>\n<h1 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h1><h2 id=\"匿名内部类（Anonymous-Inner-Class）\"><a href=\"#匿名内部类（Anonymous-Inner-Class）\" class=\"headerlink\" title=\"匿名内部类（Anonymous Inner Class）\"></a>匿名内部类（Anonymous Inner Class）</h2><p>在 Java 中，匿名内部类提供一种实现仅使用一次的类的途径。例如，在标准的 Swing 或者 JavaFX 应用中，需要用一系列的 handler 来处理键盘和鼠标事件。除了为每一个事件单独写一个事件处理类（该类需要实现 ActionListener 接口）这种方式，你可以用以下代码来实现类似需求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JButton testButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Test Button\"</span>);</span><br><span class=\"line\">testButton.addActionListener(<span class=\"keyword\">new</span> ActionListener()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Click Detected by Anon Class\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>除此之外，你需要为每一个事件都写下类似的代码，它们都需要实现<code>ActionListener</code>接口。通过上述匿名内部类的写法，代码似乎变得容易阅读一些。然而这种写法很不优雅，因为有太多无用的模版代码，我们需要的其实只是“在函数里我要做什么事”这个信息。</p>\n<h2 id=\"函数接口（Functional-Interfaces）\"><a href=\"#函数接口（Functional-Interfaces）\" class=\"headerlink\" title=\"函数接口（Functional Interfaces）\"></a>函数接口（Functional Interfaces）</h2><p>定义<code>ActionListener</code>的类代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> java.awt.event;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.EventListener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ActionListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ActionListener</code>的梨子是一个只含有一个函数声明的接口。在 Java SE 8 中，这种模式的接口被称为“函数接口”。</p>\n<p><strong>注意：</strong> 这种接口之前被称为“Single Abstrace Method type”（单一抽象方法类型）</p>\n<p>在 Java 中使用匿名类实现函数接口是一种常见写法。除了<code>EventListener</code>类以外，像<code>Runnable</code>和<code>Comparator</code>这样的接口也有一样的模式。因此，函数式接口是我们使用 Lambda 表达式的一个重要原因。</p>\n<h2 id=\"Lambda-表达式语法\"><a href=\"#Lambda-表达式语法\" class=\"headerlink\" title=\"Lambda 表达式语法\"></a>Lambda 表达式语法</h2><p>Lambda 可以把匿名内部类的代码从 5 行精简到 1 行，极大的缩减了代码的冗余。如下这种“水平的”解决方案解决了匿名内部类带来的“垂直的”问题。</p>\n<blockquote>\n<p>这里“水平”和“垂直”是指代码块在页面中呈现的形式</p>\n</blockquote>\n<p>一个 Lambda 表达式由三部分构成</p>\n<table>\n<thead>\n<tr>\n<th>Argument List</th>\n<th>Arrow Token</th>\n<th>Body</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(int x, int y)</td>\n<td>-&gt;</td>\n<td>x + y</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这三个部分可以翻译为“参数列表”、“箭头标志”、“函数体”，不过下文仍然以英文称呼，为了加深记忆。</p>\n</blockquote>\n<p>Body 部分可以是一个简单的表达式（expression）或者代码块（statement block）。在上面的模版中，body 中进行了简单的计算和返回。在代码块格式中，body 呈现形式与普通函数写法一样，同样需要一个 return 语句来返回结果给匿名函数的调用者。<code>break</code>和<code>continue</code>关键字在最外层是禁止使用的，不过如果代码里存在循环（loops），则可以使用。如果 body 需要返回一个结果值，每一条控制路径都必需有值返回，或者抛出异常。</p>\n<p>看一下这些栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) -&gt; x + y</span><br><span class=\"line\"></span><br><span class=\"line\">() -&gt; <span class=\"number\">42</span></span><br><span class=\"line\"></span><br><span class=\"line\">(String s) -&gt; &#123; System.out.println(s); &#125;</span><br></pre></td></tr></table></figure>\n<p>第一个表达式读取两个整型参数，<code>x</code>和<code>y</code>，然后返回<code>x+y</code>的结果。第二个表达式不需要参数，使用“表达式”格式的返回结果，值为42。第三个表达式读取字符串参数，然后将它打印在控制台，不返回任何结果。</p>\n<p>有了上面的基础知识，我们再来看一些样例。</p>\n<h1 id=\"Lambda-样例（Lambda-Examples）\"><a href=\"#Lambda-样例（Lambda-Examples）\" class=\"headerlink\" title=\"Lambda 样例（Lambda Examples）\"></a>Lambda 样例（Lambda Examples）</h1><p>这里是一些使用到上面提到的栗子的常见用法。</p>\n<h2 id=\"Runnable-Lambda\"><a href=\"#Runnable-Lambda\" class=\"headerlink\" title=\"Runnable Lambda\"></a>Runnable Lambda</h2><p>你可以用 Lambda 来写一个实现了 Runnable 接口的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RunnableTest</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"=== RunnableTest ===\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Anonymous Runnable</span></span><br><span class=\"line\">    Runnable r1 = <span class=\"keyword\">new</span> Runnable()&#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello world one!\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Lambda Runnable</span></span><br><span class=\"line\">    Runnable r2 = () -&gt; System.out.println(<span class=\"string\">\"Hello world two!\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Run em!</span></span><br><span class=\"line\">    r1.run();</span><br><span class=\"line\">    r2.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在两种场景里，请注意到接口不需要读取参数，也没有返回值。<code>Runnable</code>的 Lambda 表达式使用了代码块模式，将 5 行代码浓缩为 1 行。</p>\n<blockquote>\n<p>“代码块”应为原作者笔误，实际上是“表达式”格式。</p>\n</blockquote>\n<h2 id=\"Comparator-Lambda\"><a href=\"#Comparator-Lambda\" class=\"headerlink\" title=\"Comparator Lambda\"></a>Comparator Lambda</h2><p><code>Comparator</code>类在 Java 中用于给集合排序。在以下的例子中，一个由<code>Person</code>对象构成的<code>ArrayList</code>被按照<code>surName</code>进行排序。以下是<code>Person</code>类的成员变量</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String givenName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String surName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Gender gender;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String eMail;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String address;</span><br></pre></td></tr></table></figure>\n<p>以下代码分别使用了匿名内部类和 Lambda 表达式两种方式生成<code>Comparator</code>进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ComparatorTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    List&lt;Person&gt; personList = Person.createShortList();</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// Sort with Inner Class</span></span><br><span class=\"line\">    Collections.sort(personList, <span class=\"keyword\">new</span> Comparator&lt;Person&gt;()&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compare</span><span class=\"params\">(Person p1, Person p2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p1.getSurName().compareTo(p2.getSurName());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"=== Sorted Asc SurName ===\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:personList)&#123;</span><br><span class=\"line\">      p.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Use Lambda instead</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Print Asc</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"=== Sorted Asc SurName ===\"</span>);</span><br><span class=\"line\">    Collections.sort(personList, (Person p1, Person p2) -&gt; p1.getSurName().compareTo(p2.getSurName()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:personList)&#123;</span><br><span class=\"line\">      p.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Print Desc</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"=== Sorted Desc SurName ===\"</span>);</span><br><span class=\"line\">    Collections.sort(personList, (p1,  p2) -&gt; p2.getSurName().compareTo(p1.getSurName()));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:personList)&#123;</span><br><span class=\"line\">      p.printName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于 Markdown 不支持代码行数表示，这里的行数请自行体会。</p>\n</blockquote>\n<p>17 - 21 行的排序语句可以被 32 行的 Lambda 表达式精简。注意到第一个 Lambda 表达式声明了传进来的参数类型。第二个 Lambda 表达式则省略了类型声明。Lambda 支持“target typing”（类型自动匹配？），意味着它可以自动从上下文中获取到对象类型信息。因为我们将<code>Comparator</code>应用于泛型集合类（personList），编译器能够自动判断参数类型为<code>Person</code>。</p>\n<h2 id=\"Listener-Lambda\"><a href=\"#Listener-Lambda\" class=\"headerlink\" title=\"Listener Lambda\"></a>Listener Lambda</h2><p>最后我们来看一下<code>ActionListener</code>的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListenerTest</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    JButton testButton = <span class=\"keyword\">new</span> JButton(<span class=\"string\">\"Test Button\"</span>);</span><br><span class=\"line\">    testButton.addActionListener(<span class=\"keyword\">new</span> ActionListener()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">actionPerformed</span><span class=\"params\">(ActionEvent ae)</span></span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Click Detected by Anon Class\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    testButton.addActionListener(e -&gt; System.out.println(<span class=\"string\">\"Click Detected by Lambda Listner\"</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Swing stuff</span></span><br><span class=\"line\">    JFrame frame = <span class=\"keyword\">new</span> JFrame(<span class=\"string\">\"Listener Test\"</span>);</span><br><span class=\"line\">    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class=\"line\">    frame.add(testButton, BorderLayout.CENTER);</span><br><span class=\"line\">    frame.pack();</span><br><span class=\"line\">    frame.setVisible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 Lambda 表达式作为参数被传入。类型自动匹配可以应用在很多场景中，以下举例说明：</p>\n<ul>\n<li>Variable declarations（变量声明）</li>\n<li>Assignments（赋值）</li>\n<li>Return statements（返回语句）</li>\n<li>Array initializers（数组初始化）</li>\n<li>Method or constructor arguments（方法或构造器参数）</li>\n<li>Lambda expression bodies（Lambda 表达式体）</li>\n<li>Conditional expressions?:（三元运算符?:）</li>\n<li>Cast expressions（类型转换语句）</li>\n</ul>\n<blockquote>\n<p>简单说就是所有为<code>expression</code>的地方，都可以使用 Lambda 表达式，它本身就是一个 expression/statement。</p>\n</blockquote>\n<h2 id=\"资源下载\"><a href=\"#资源下载\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h2><p>本小节中的 NetBeans 工程样例代码可以在下面下载到</p>\n<p><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/examples/LambdaExamples01.zip\" target=\"_blank\" rel=\"noopener\">LambdaExamples01.zip</a></p>\n<h1 id=\"通过-Lambda-表达式优化代码\"><a href=\"#通过-Lambda-表达式优化代码\" class=\"headerlink\" title=\"通过 Lambda 表达式优化代码\"></a>通过 Lambda 表达式优化代码</h1><p>在你掌握了前面展示的例子后，本节将介绍如何借助 Lambda 改进你的代码。Lambda 表达式将帮助你轻松实现“Don’t Repeat Yourself(DRY)”原则，并且使你的代码更加简洁易于阅读。</p>\n<h2 id=\"一个查询的-Case\"><a href=\"#一个查询的-Case\" class=\"headerlink\" title=\"一个查询的 Case\"></a>一个查询的 Case</h2><p>一个常见的应用程序场景是，从一个集合中遍历，找出那些符合某种过滤条件的成员。在 2012 年的 JavaOne 大会上，Stuart Marks 和 Mike Duigou 通过格外出色的<a href=\"http://www.youtube.com/watch?v=bzO5GSujdqI\" target=\"_blank\" rel=\"noopener\">Jump-Starting Lambda</a>展示了这种应用场景。给你一个名单列表以及一系列筛选条件，需要找出那些符合条件的人并且自动呼叫他们。这个指南在有一些轻微变更的情况下实现了上述需求。</p>\n<p>在这个例子中，我们需要从以下三个美国群体中提取出消息：</p>\n<ul>\n<li><strong>司机：</strong> 年龄大于 16 岁</li>\n<li><strong>入伍人员：</strong> 男性，18 ~ 25 岁</li>\n<li><strong>飞行员（特指商业飞行员）：</strong> 23 ~ 65 岁</li>\n</ul>\n<p>我们将要实现上述需求，不过不是通过打电话或者发邮件，而是在控制台输出信息。信息内容包括姓名、年龄和联系方式（例如邮件地址或者电话号码）</p>\n<h2 id=\"Person-类\"><a href=\"#Person-类\" class=\"headerlink\" title=\"Person 类\"></a>Person 类</h2><p>属性定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String givenName;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String surName;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> Gender gender;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String eMail;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> String address;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Person</code>类通过<code>Builder</code>来创建新对象，使用<code>createShortList</code>来创建人员列表。如下方代码片段所示。<strong>注意：</strong> 以下所有样例代码都可以在本节末尾给出的 NetBeans 工程里找到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Person&gt; <span class=\"title\">createShortList</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  List&lt;Person&gt; people = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">  </span><br><span class=\"line\">  people.add(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Person.Builder()</span><br><span class=\"line\">          .givenName(<span class=\"string\">\"Bob\"</span>)</span><br><span class=\"line\">          .surName(<span class=\"string\">\"Baker\"</span>)</span><br><span class=\"line\">          .age(<span class=\"number\">21</span>)</span><br><span class=\"line\">          .gender(Gender.MALE)</span><br><span class=\"line\">          .email(<span class=\"string\">\"bob.baker@example.com\"</span>)</span><br><span class=\"line\">          .phoneNumber(<span class=\"string\">\"201-121-4678\"</span>)</span><br><span class=\"line\">          .address(<span class=\"string\">\"44 4th St, Smallville, KS 12333\"</span>)</span><br><span class=\"line\">          .build() </span><br><span class=\"line\">    );</span><br><span class=\"line\">  </span><br><span class=\"line\">  people.add(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Person.Builder()</span><br><span class=\"line\">          .givenName(<span class=\"string\">\"Jane\"</span>)</span><br><span class=\"line\">          .surName(<span class=\"string\">\"Doe\"</span>)</span><br><span class=\"line\">          .age(<span class=\"number\">25</span>)</span><br><span class=\"line\">          .gender(Gender.FEMALE)</span><br><span class=\"line\">          .email(<span class=\"string\">\"jane.doe@example.com\"</span>)</span><br><span class=\"line\">          .phoneNumber(<span class=\"string\">\"202-123-4678\"</span>)</span><br><span class=\"line\">          .address(<span class=\"string\">\"33 3rd St, Smallville, KS 12333\"</span>)</span><br><span class=\"line\">          .build() </span><br><span class=\"line\">    );</span><br><span class=\"line\">  </span><br><span class=\"line\">  people.add(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Person.Builder()</span><br><span class=\"line\">          .givenName(<span class=\"string\">\"John\"</span>)</span><br><span class=\"line\">          .surName(<span class=\"string\">\"Doe\"</span>)</span><br><span class=\"line\">          .age(<span class=\"number\">25</span>)</span><br><span class=\"line\">          .gender(Gender.MALE)</span><br><span class=\"line\">          .email(<span class=\"string\">\"john.doe@example.com\"</span>)</span><br><span class=\"line\">          .phoneNumber(<span class=\"string\">\"202-123-4678\"</span>)</span><br><span class=\"line\">          .address(<span class=\"string\">\"33 3rd St, Smallville, KS 12333\"</span>)</span><br><span class=\"line\">          .build()</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<h2 id=\"第一次尝试\"><a href=\"#第一次尝试\" class=\"headerlink\" title=\"第一次尝试\"></a>第一次尝试</h2><p>有了上面的<code>Person</code>类，加上定义好的检索条件，你可以写一个<code>RoboContact</code>类。一个可以参考的写法中定义了每种使用场景里的方法：</p>\n<p><code>RoboContactMethods.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboContactMethods</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callDrivers</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.getAge() &gt;= <span class=\"number\">16</span>)&#123;</span><br><span class=\"line\">        roboCall(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emailDraftees</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span> &amp;&amp; p.getGender() == Gender.MALE)&#123;</span><br><span class=\"line\">        roboEmail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mailPilots</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span>)&#123;</span><br><span class=\"line\">        roboMail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboCall</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Calling \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getPhone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboEmail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"EMailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getEmail());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboMail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Mailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getAddress());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上所示，上面列出的方法说明了对不同对象采取的行为（打电话、发电子邮件、发实体邮件）。可以清楚地看出过滤条件和采取的行为。然而，这种设计存在一些缺陷：</p>\n<ul>\n<li>没有践行 DRY 原则<ul>\n<li>每一个方法都是重复的模版</li>\n<li>必须为每个方法重写过滤条件</li>\n</ul>\n</li>\n<li>每个用户场景都需要实现大量的方法（比如今天是打电话给入伍人员，发邮件给飞行员；明天可能就是打电话给飞行员，发邮件给入伍人员）</li>\n<li>代码呆板。如果过滤条件发生改变，不得不改动大量代码。因此，这段代码是难以维护的。</li>\n</ul>\n<h2 id=\"重构这些方法\"><a href=\"#重构这些方法\" class=\"headerlink\" title=\"重构这些方法\"></a>重构这些方法</h2><p>如何修复这个类？可以从过滤条件入手。如果可以把过滤调价提取出一个独立的方法，将会有一些提升。</p>\n<p><code>RoboContactMethods2.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboContactMethods2</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">callDrivers</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDriver(p))&#123;</span><br><span class=\"line\">        roboCall(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emailDraftees</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isDraftee(p))&#123;</span><br><span class=\"line\">        roboEmail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mailPilots</span><span class=\"params\">(List&lt;Person&gt; pl)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isPilot(p))&#123;</span><br><span class=\"line\">        roboMail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDriver</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.getAge() &gt;= <span class=\"number\">16</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isDraftee</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span> &amp;&amp; p.getGender() == Gender.MALE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPilot</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboCall</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Calling \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getPhone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboEmail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"EMailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getEmail());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboMail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Mailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getAddress());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比起上一个例子，这次的过滤条件被封装在单独的方法里。这些判断用的代码可以复用，需求变更时也避免了在类里面进行大范围的修改。然而，仍然存在着大量重复代码，以及必需为每种联系方法（打电话、发电子邮件、发邮件）单独写一个方法。是否有更好的将过滤条件传递给这些联系方法的方式？</p>\n<h1 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h1><p>在 Lambda 表达式问世之前，可采用匿名内部类的方案。例如，一个解决方法是声明一个具有返回布尔值的<code>test</code>方法的<code>MyTest.java</code>类。把过滤条件在这个方法里，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyTest</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更新后的模拟联系方式类如下：</p>\n<p><code>RobocontactAnon.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboContactAnon</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">phoneContacts</span><span class=\"params\">(List&lt;Person&gt; pl, MyTest&lt;Person&gt; aTest)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aTest.test(p))&#123;</span><br><span class=\"line\">        roboCall(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emailContacts</span><span class=\"params\">(List&lt;Person&gt; pl, MyTest&lt;Person&gt; aTest)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aTest.test(p))&#123;</span><br><span class=\"line\">        roboEmail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mailContacts</span><span class=\"params\">(List&lt;Person&gt; pl, MyTest&lt;Person&gt; aTest)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (aTest.test(p))&#123;</span><br><span class=\"line\">        roboMail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboCall</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Calling \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getPhone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboEmail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"EMailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getEmail());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboMail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Mailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getAddress());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里无疑是有了一些优化，因为只需要 3 个用于进行联系的方法。然而，在实际进行调用时，代码会有一些丑陋。看下面的测试代码：</p>\n<p><code>RoboCallTest03.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboCallTest03</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    RoboContactAnon robo = <span class=\"keyword\">new</span> RoboContactAnon();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n==== Test 03 ====\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Calling all Drivers ===\"</span>);</span><br><span class=\"line\">    robo.phoneContacts(pl, </span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyTest&lt;Person&gt;()&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.getAge() &gt;=<span class=\"number\">16</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Emailing all Draftees ===\"</span>);</span><br><span class=\"line\">    robo.emailContacts(pl, </span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyTest&lt;Person&gt;()&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span> &amp;&amp; p.getGender() == Gender.MALE;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Mail all Pilots ===\"</span>);</span><br><span class=\"line\">    robo.mailContacts(pl, </span><br><span class=\"line\">        <span class=\"keyword\">new</span> MyTest&lt;Person&gt;()&#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是“垂直”代码的一个典型案例。这样的代码难以阅读。此外，我们必须为每一种使用场景单独写自定义的过滤条件。</p>\n<h2 id=\"Lambda-表达式解千愁\"><a href=\"#Lambda-表达式解千愁\" class=\"headerlink\" title=\"Lambda 表达式解千愁\"></a>Lambda 表达式解千愁</h2><p>Lambda 表达式可以解决目前为止我们遇到的一切问题。不过，让我们先了解一点别的。</p>\n<p><code>java.uitl.function</code></p>\n<p>在上一个例子中，<code>MyTest</code>函数接口将匿名内部类传递给方法调用。然而，写一个接口并不是必需的。Java SE 8 提供了<code>java.util.function</code>包，其中有一系列标准的函数借口。在这种场景下，<code>Predicate</code>接口符合我们的需求。</p>\n<blockquote>\n<p><code>Predict</code>意为“谓语，断言”，即判断条件的意思</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Predicate</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">test</span><span class=\"params\">(T t)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>test</code>方法接收一个泛型类，返回一个布尔值。这正是我们所需要的过滤场景。下面是模拟联系方式类的最终版本。</p>\n<p><code>RobocontactsLambda.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboContactLambda</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">phoneContacts</span><span class=\"params\">(List&lt;Person&gt; pl, Predicate&lt;Person&gt; pred)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pred.test(p))&#123;</span><br><span class=\"line\">        roboCall(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">emailContacts</span><span class=\"params\">(List&lt;Person&gt; pl, Predicate&lt;Person&gt; pred)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pred.test(p))&#123;</span><br><span class=\"line\">        roboEmail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mailContacts</span><span class=\"params\">(List&lt;Person&gt; pl, Predicate&lt;Person&gt; pred)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (pred.test(p))&#123;</span><br><span class=\"line\">        roboMail(p);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboCall</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Calling \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getPhone());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboEmail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"EMailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getEmail());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roboMail</span><span class=\"params\">(Person p)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Mailing \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\" age \"</span> + p.getAge() + <span class=\"string\">\" at \"</span> + p.getAddress());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这种写法里，只需要三个方法用来模拟联系候选人。Lambda 表达式作为参数被传递给方法，用来过滤需要联系的人员。</p>\n<h2 id=\"垂直问题迎刃而解\"><a href=\"#垂直问题迎刃而解\" class=\"headerlink\" title=\"垂直问题迎刃而解\"></a>垂直问题迎刃而解</h2><p>Lambda 表达式解决了垂直代码的问题，并且更容易重用。来看看新的使用了 Lambda 表达式的测试类。</p>\n<p><code>RoboCallTest04.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoboCallTest04</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    RoboContactLambda robo = <span class=\"keyword\">new</span> RoboContactLambda();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Predicates</span></span><br><span class=\"line\">    Predicate&lt;Person&gt; allDrivers = p -&gt; p.getAge() &gt;= <span class=\"number\">16</span>;</span><br><span class=\"line\">    Predicate&lt;Person&gt; allDraftees = p -&gt; p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span> &amp;&amp; p.getGender() == Gender.MALE;</span><br><span class=\"line\">    Predicate&lt;Person&gt; allPilots = p -&gt; p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n==== Test 04 ====\"</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Calling all Drivers ===\"</span>);</span><br><span class=\"line\">    robo.phoneContacts(pl, allDrivers);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Emailing all Draftees ===\"</span>);</span><br><span class=\"line\">    robo.emailContacts(pl, allDraftees);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Mail all Pilots ===\"</span>);</span><br><span class=\"line\">    robo.mailContacts(pl, allPilots);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Mix and match becomes easy</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Mail all Draftees ===\"</span>);</span><br><span class=\"line\">    robo.mailContacts(pl, allDraftees);  </span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Call all Pilots ===\"</span>);</span><br><span class=\"line\">    robo.phoneContacts(pl, allPilots);    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到，我们为每组联系人（allDrivers, allDraftees, allPilots）声明了一个断言（<code>Predicate</code>）。你可以将任何一个断言传给模拟联系的方法。代码简洁易于阅读，并且减少了重复代码。</p>\n<h2 id=\"资源下载-1\"><a href=\"#资源下载-1\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h2><p>本小节中的 NetBeans 工程样例代码可以在下面下载到</p>\n<p><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/examples/RoboCallExample.zip\" target=\"_blank\" rel=\"noopener\">RoboCallExample.zip</a></p>\n<h1 id=\"java-util-function包\"><a href=\"#java-util-function包\" class=\"headerlink\" title=\"java.util.function包\"></a><code>java.util.function</code>包</h1><p>上节介绍的<code>Predicate</code>并不是 Java SE 8 所提供的唯一函数接口。开发者可以使用一系列的标准接口帮助开发。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/181101_lambda/6_heroes_more.jpg\" alt=\"像我这么吊的\" title=\"\">\n                </div>\n                <div class=\"image-caption\">像我这么吊的</div>\n            </figure>\n<ul>\n<li><code>Predicate</code>：参数对象的某个属性</li>\n<li><code>Consumer</code>：对参数对象执行的某种操作</li>\n<li><code>Function</code>：把 T 转换为 U</li>\n<li><code>Supplieer</code>：提供一个 T 的实例（例如工厂）</li>\n<li><code>UnaryOperator</code>：一个单元运算符，T -&gt; T</li>\n<li><code>BinaryOperator</code>：一个双元运算符，(T, T) -&gt; T</li>\n</ul>\n<p>此外，很多接口都有原始形式（类似上文中的<code>Predicate</code>和人工过滤器这种比较），可以帮助你更好地理解 Lambda 表达式。</p>\n<h2 id=\"东方取名法以及方法调用\"><a href=\"#东方取名法以及方法调用\" class=\"headerlink\" title=\"东方取名法以及方法调用\"></a>东方取名法以及方法调用</h2><p>在写上面一个例子时，我认为<code>Person</code>类应当具备一个灵活的输出系统。一个需求是以西方和东方两种命名方式打印出名字。在西方，名在前，姓在后。在东方则恰好相反。</p>\n<h2 id=\"老式写法的例子\"><a href=\"#老式写法的例子\" class=\"headerlink\" title=\"老式写法的例子\"></a>老式写法的例子</h2><p>这是在未使用 Lambda 表达式时的写法</p>\n<p><code>Person.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printWesternName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"\\nName: \"</span> + <span class=\"keyword\">this</span>.getGivenName() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.getSurName() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"Age: \"</span> + <span class=\"keyword\">this</span>.getAge() + <span class=\"string\">\"  \"</span> + <span class=\"string\">\"Gender: \"</span> + <span class=\"keyword\">this</span>.getGender() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"EMail: \"</span> + <span class=\"keyword\">this</span>.getEmail() + <span class=\"string\">\"\\n\"</span> + </span><br><span class=\"line\">           <span class=\"string\">\"Phone: \"</span> + <span class=\"keyword\">this</span>.getPhone() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"Address: \"</span> + <span class=\"keyword\">this</span>.getAddress());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">printEasternName</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"\\nName: \"</span> + <span class=\"keyword\">this</span>.getSurName() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.getGivenName() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"Age: \"</span> + <span class=\"keyword\">this</span>.getAge() + <span class=\"string\">\"  \"</span> + <span class=\"string\">\"Gender: \"</span> + <span class=\"keyword\">this</span>.getGender() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"EMail: \"</span> + <span class=\"keyword\">this</span>.getEmail() + <span class=\"string\">\"\\n\"</span> + </span><br><span class=\"line\">           <span class=\"string\">\"Phone: \"</span> + <span class=\"keyword\">this</span>.getPhone() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">           <span class=\"string\">\"Address: \"</span> + <span class=\"keyword\">this</span>.getAddress());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你需要两个方法，分别打印西方命名、东方命名</p>\n<h2 id=\"Function接口\"><a href=\"#Function接口\" class=\"headerlink\" title=\"Function接口\"></a><code>Function</code>接口</h2><p><code>Function</code>接口适用于这个问题。它只有一个名为<code>apply</code>的方法，方法签名如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R <span class=\"title\">apply</span><span class=\"params\">(T t)</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>它接收一个泛型 T 的参数，然后返回一个 R 的对象。对于这个例子，传入<code>Person</code>类型，返回<code>String</code>类型。一个更加灵活的打印方法如下所示：</p>\n<p><code>Person.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">printCuston</span><span class=\"params\">(Function &lt;Person, String&gt; f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f.apply(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这可真简单。方法接收一个<code>Function</code>参数，返回一个字符串。<code>apply</code>方法通过一个 Lambda 表达式返回<code>Person</code>对象的信息。</p>\n<p><code>Function</code>是如何定义的？如下是测试的样例代码。</p>\n<p><code>NameTestNew.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NameTestNew</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n==== NameTestNew02 ===\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Person&gt; list1 = Person.createShortList();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Print Custom First Name and e-mail</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"===Custom List===\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person person:list1)&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">            person.printCustom(p -&gt; <span class=\"string\">\"Name: \"</span> + p.getGivenName() + <span class=\"string\">\" EMail: \"</span> + p.getEmail())</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Define Western and Eastern Lambdas</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;Person, String&gt; westernStyle = p -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"\\nName: \"</span> + p.getGivenName() + <span class=\"string\">\" \"</span> + p.getSurName() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">             <span class=\"string\">\"Age: \"</span> + p.getAge() + <span class=\"string\">\"  \"</span> + <span class=\"string\">\"Gender: \"</span> + p.getGender() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">             <span class=\"string\">\"EMail: \"</span> + p.getEmail() + <span class=\"string\">\"\\n\"</span> + </span><br><span class=\"line\">             <span class=\"string\">\"Phone: \"</span> + p.getPhone() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">             <span class=\"string\">\"Address: \"</span> + p.getAddress();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Function&lt;Person, String&gt; easternStyle =  p -&gt; <span class=\"string\">\"\\nName: \"</span> + p.getSurName() + <span class=\"string\">\" \"</span> </span><br><span class=\"line\">            + p.getGivenName() + <span class=\"string\">\"\\n\"</span> + <span class=\"string\">\"Age: \"</span> + p.getAge() + <span class=\"string\">\"  \"</span> + </span><br><span class=\"line\">            <span class=\"string\">\"Gender: \"</span> + p.getGender() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"EMail: \"</span> + p.getEmail() + <span class=\"string\">\"\\n\"</span> + </span><br><span class=\"line\">            <span class=\"string\">\"Phone: \"</span> + p.getPhone() + <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"Address: \"</span> + p.getAddress();   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Print Western List</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n===Western List===\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person person:list1)&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">            person.printCustom(westernStyle)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Print Eastern List</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n===Eastern List===\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person person:list1)&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">            person.printCustom(easternStyle)</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个循环只是打印出名字和电子邮件地址。不过可以把任何的表达式传给<code>printCuston</code>方法。东方命名法和西方命名法使用 Lambda 表达式定义，并且保存在变量中。这些变量接下来被传入最后的两个循环。可以很容易地将 Lambda<br>表达式合并成为<code>Map</code>，用起来更加方便。Lambda 表达式提供了显著的灵活性。</p>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><p>下面是程序的样例输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">==== NameTestNew02 ===</span><br><span class=\"line\">===Custom List===</span><br><span class=\"line\">Name: Bob EMail: bob.baker@example.com</span><br><span class=\"line\">Name: Jane EMail: jane.doe@example.com</span><br><span class=\"line\">Name: John EMail: john.doe@example.com</span><br><span class=\"line\">Name: James EMail: james.johnson@example.com</span><br><span class=\"line\">Name: Joe EMail: joebob.bailey@example.com</span><br><span class=\"line\">Name: Phil EMail: phil.smith@examp;e.com</span><br><span class=\"line\">Name: Betty EMail: betty.jones@example.com</span><br><span class=\"line\"></span><br><span class=\"line\">===Western List===</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Bob Baker</span><br><span class=\"line\">Age: 21  Gender: MALE</span><br><span class=\"line\">EMail: bob.baker@example.com</span><br><span class=\"line\">Phone: 201-121-4678</span><br><span class=\"line\">Address: 44 4th St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Jane Doe</span><br><span class=\"line\">Age: 25  Gender: FEMALE</span><br><span class=\"line\">EMail: jane.doe@example.com</span><br><span class=\"line\">Phone: 202-123-4678</span><br><span class=\"line\">Address: 33 3rd St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: John Doe</span><br><span class=\"line\">Age: 25  Gender: MALE</span><br><span class=\"line\">EMail: john.doe@example.com</span><br><span class=\"line\">Phone: 202-123-4678</span><br><span class=\"line\">Address: 33 3rd St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: James Johnson</span><br><span class=\"line\">Age: 45  Gender: MALE</span><br><span class=\"line\">EMail: james.johnson@example.com</span><br><span class=\"line\">Phone: 333-456-1233</span><br><span class=\"line\">Address: 201 2nd St, New York, NY 12111</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Joe Bailey</span><br><span class=\"line\">Age: 67  Gender: MALE</span><br><span class=\"line\">EMail: joebob.bailey@example.com</span><br><span class=\"line\">Phone: 112-111-1111</span><br><span class=\"line\">Address: 111 1st St, Town, CA 11111</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Phil Smith</span><br><span class=\"line\">Age: 55  Gender: MALE</span><br><span class=\"line\">EMail: phil.smith@examp;e.com</span><br><span class=\"line\">Phone: 222-33-1234</span><br><span class=\"line\">Address: 22 2nd St, New Park, CO 222333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Betty Jones</span><br><span class=\"line\">Age: 85  Gender: FEMALE</span><br><span class=\"line\">EMail: betty.jones@example.com</span><br><span class=\"line\">Phone: 211-33-1234</span><br><span class=\"line\">Address: 22 4th St, New Park, CO 222333</span><br><span class=\"line\"></span><br><span class=\"line\">===Eastern List===</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Baker Bob</span><br><span class=\"line\">Age: 21  Gender: MALE</span><br><span class=\"line\">EMail: bob.baker@example.com</span><br><span class=\"line\">Phone: 201-121-4678</span><br><span class=\"line\">Address: 44 4th St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Doe Jane</span><br><span class=\"line\">Age: 25  Gender: FEMALE</span><br><span class=\"line\">EMail: jane.doe@example.com</span><br><span class=\"line\">Phone: 202-123-4678</span><br><span class=\"line\">Address: 33 3rd St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Doe John</span><br><span class=\"line\">Age: 25  Gender: MALE</span><br><span class=\"line\">EMail: john.doe@example.com</span><br><span class=\"line\">Phone: 202-123-4678</span><br><span class=\"line\">Address: 33 3rd St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Johnson James</span><br><span class=\"line\">Age: 45  Gender: MALE</span><br><span class=\"line\">EMail: james.johnson@example.com</span><br><span class=\"line\">Phone: 333-456-1233</span><br><span class=\"line\">Address: 201 2nd St, New York, NY 12111</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Bailey Joe</span><br><span class=\"line\">Age: 67  Gender: MALE</span><br><span class=\"line\">EMail: joebob.bailey@example.com</span><br><span class=\"line\">Phone: 112-111-1111</span><br><span class=\"line\">Address: 111 1st St, Town, CA 11111</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Smith Phil</span><br><span class=\"line\">Age: 55  Gender: MALE</span><br><span class=\"line\">EMail: phil.smith@examp;e.com</span><br><span class=\"line\">Phone: 222-33-1234</span><br><span class=\"line\">Address: 22 2nd St, New Park, CO 222333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Jones Betty</span><br><span class=\"line\">Age: 85  Gender: FEMALE</span><br><span class=\"line\">EMail: betty.jones@example.com</span><br><span class=\"line\">Phone: 211-33-1234</span><br><span class=\"line\">Address: 22 4th St, New Park, CO 222333</span><br></pre></td></tr></table></figure>\n<h2 id=\"资源下载-2\"><a href=\"#资源下载-2\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h2><p>本小节中的 NetBeans 工程样例代码可以在下面下载到</p>\n<p><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/examples/LambdaFunctionExamples.zip\" target=\"_blank\" rel=\"noopener\">LambdaFunctionExamples.zip</a></p>\n<h1 id=\"Lambda-表达式和集合\"><a href=\"#Lambda-表达式和集合\" class=\"headerlink\" title=\"Lambda 表达式和集合\"></a>Lambda 表达式和集合</h1><p>上节介绍了<code>Function</code>接口和示例语法。本节我们将看到 Lambda 表达式如何提升<code>Collections</code>类。</p>\n<h2 id=\"Lambda-表达式和集合-1\"><a href=\"#Lambda-表达式和集合-1\" class=\"headerlink\" title=\"Lambda 表达式和集合\"></a>Lambda 表达式和集合</h2><p>到目前为止的例子中，集合类出现的很少。然而，相当一部分 Lambda 表达式的特征改变了我们使用集合类的方式。本节介绍其中的一部分。</p>\n<h2 id=\"类增强\"><a href=\"#类增强\" class=\"headerlink\" title=\"类增强\"></a>类增强</h2><p>司机、飞行员、入伍人员的过滤条件被包装进了<code>SearchCriteria</code>类。</p>\n<p><code>SearchCriteria.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.lambda;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.function.Predicate;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> MikeW</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SearchCriteria</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Predicate&lt;Person&gt;&gt; searchMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SearchCriteria</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    initSearchMap();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initSearchMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Predicate&lt;Person&gt; allDrivers = p -&gt; p.getAge() &gt;= <span class=\"number\">16</span>;</span><br><span class=\"line\">    Predicate&lt;Person&gt; allDraftees = p -&gt; p.getAge() &gt;= <span class=\"number\">18</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">25</span> &amp;&amp; p.getGender() == Gender.MALE;</span><br><span class=\"line\">    Predicate&lt;Person&gt; allPilots = p -&gt; p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    searchMap.put(<span class=\"string\">\"allDrivers\"</span>, allDrivers);</span><br><span class=\"line\">    searchMap.put(<span class=\"string\">\"allDraftees\"</span>, allDraftees);</span><br><span class=\"line\">    searchMap.put(<span class=\"string\">\"allPilots\"</span>, allPilots);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Predicate&lt;Person&gt; <span class=\"title\">getCriteria</span><span class=\"params\">(String PredicateName)</span> </span>&#123;</span><br><span class=\"line\">    Predicate&lt;Person&gt; target;</span><br><span class=\"line\"></span><br><span class=\"line\">    target = searchMap.get(PredicateName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Search Criteria not found... \"</span>);</span><br><span class=\"line\">      System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SearchCriteria <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchCriteria();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>本例的编码不是很规范，作为参数的<code>PredicateName</code>应该写为<code>predicateName</code>更严谨。</p>\n</blockquote>\n<p>这个类保存了基于<code>Predicate</code>的搜索过滤条件，你可以在测试用例中使用它们。</p>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><p>首先登场的是任何集合类都可以使用的<code>forEach</code>方法。这里是一些打印出<code>Person</code>列表的例子。</p>\n<p><code>Test01ForEach.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test01ForEach</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Western Phone List ===\"</span>);</span><br><span class=\"line\">    pl.forEach( p -&gt; p.printWesternName() );</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Eastern Phone List ===\"</span>);</span><br><span class=\"line\">    pl.forEach(Person::printEasternName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Custom Phone List ===\"</span>);</span><br><span class=\"line\">    pl.forEach(p -&gt; &#123; System.out.println(p.printCustom(r -&gt; <span class=\"string\">\"Name: \"</span> + r.getGivenName() + <span class=\"string\">\" EMail: \"</span> + r.getEmail())); &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例 1 展示了一个 Lambda 表达式，它调用<code>printWesternName</code>方法打印出列表里每个人的名字。例 2 展示了一个 <strong>方法调用</strong>。当已经存在对类对象操作的方法时，这种写法可以代替通用 Lambda 表达式的写法。最后，例 3 展示了<code>printCustom</code>方法也可以在这种场景下使用。注意 Lambda 表达式嵌套时，变量名的细小差别。</p>\n<p>你可以用这种方式遍历任何集合。基础结构与增强型<code>for</code>训话类似。然而，一些增强型机制能带来很多好处。</p>\n<h2 id=\"链式调用与过滤器\"><a href=\"#链式调用与过滤器\" class=\"headerlink\" title=\"链式调用与过滤器\"></a>链式调用与过滤器</h2><p>除了遍历集合内元素，你还可以将方法组装成链式。第一个要讲解的方法是<code>filter</code>，它接收一个<code>Predicate</code>类型的参数。</p>\n<p>下面例子在过滤元素后，遍历列表。</p>\n<p><code>Test02Filter.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test02Filter</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    </span><br><span class=\"line\">    SearchCriteria search = SearchCriteria.getInstance();</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Western Pilot Phone List ===\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    pl.stream().filter(search.getCriteria(<span class=\"string\">\"allPilots\"</span>))</span><br><span class=\"line\">      .forEach(Person::printWesternName);</span><br><span class=\"line\">    </span><br><span class=\"line\">   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Eastern Draftee Phone List ===\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    pl.stream().filter(search.getCriteria(<span class=\"string\">\"allDraftees\"</span>))</span><br><span class=\"line\">      .forEach(Person::printEasternName);</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个和最后一个循环展示了<code>List</code>如何基于过滤条件被过滤。控制台输出如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== Eastern Draftee Phone List ===</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Baker Bob</span><br><span class=\"line\">Age: 21  Gender: MALE</span><br><span class=\"line\">EMail: bob.baker@example.com</span><br><span class=\"line\">Phone: 201-121-4678</span><br><span class=\"line\">Address: 44 4th St, Smallville, KS 12333</span><br><span class=\"line\"></span><br><span class=\"line\">Name: Doe John</span><br><span class=\"line\">Age: 25  Gender: MALE</span><br><span class=\"line\">EMail: john.doe@example.com</span><br><span class=\"line\">Phone: 202-123-4678</span><br><span class=\"line\">Address: 33 3rd St, Smallville, KS 12333</span><br></pre></td></tr></table></figure>\n<h3 id=\"偷点儿懒\"><a href=\"#偷点儿懒\" class=\"headerlink\" title=\"偷点儿懒\"></a>偷点儿懒</h3><p>这些特征虽然有价值，但是在已经有了一个完美的<code>for</code>循环语法的情况下，把它们引入集合类的意义何在？通过将集合操作归纳成库，Java 开发者可以在代码上进行更多的优化。首先看一对名词解释。</p>\n<ul>\n<li><strong>懒惰</strong>：在编程领域，懒惰意味着只处理你需要处理的对象。在先前的例子中，最后一个循环是“懒惰”的，因为它只遍历了<code>List</code>被过滤出来的两个<code>Person</code>对象。这样的代码效率更高，因为最后只处理了两个对象，（而非整个列表）。</li>\n<li><strong>主动性</strong>：处理列表中每个元素的代码被称为“主动性强”的。例如，一个增强型<code>for</code>循环遍历整个列表，只为处理 2 个元素，这种方式被认为“主动性”很强。</li>\n</ul>\n<h3 id=\"stream方法\"><a href=\"#stream方法\" class=\"headerlink\" title=\"stream方法\"></a><code>stream</code>方法</h3><p>在先前的代码样例中，你会发现在对列表进行过滤和遍历之前，我们调用了<code>stream</code>方法。这个方法接收<code>Collection</code>类型的参数，返回<code>java.util.stream.Stream</code>类型的结果。一个<code>Stream</code>对象意味着一个元素序列，你可以在上面进行链式操作。默认地，一旦元素被消费了，他们就不再处于 Stream 中。此外，随着调用方法不同，<code>Stream</code>可以用在串行（默认）或者并行的场景中。本节末尾将介绍一个并行的场景。</p>\n<h2 id=\"变更与运算结果\"><a href=\"#变更与运算结果\" class=\"headerlink\" title=\"变更与运算结果\"></a>变更与运算结果</h2><p>如刚才所提到的，<code>Stream</code>在使用完成后就会被丢弃。因此，我们无法通过<code>Stream</code>来对列表中的元素进行修改。然而，如果你想要保存链式处理后的元素呢？你可以将它们存入一个新的集合。如下代码所示：</p>\n<p><code>Test03toList.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test03toList</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    </span><br><span class=\"line\">    SearchCriteria search = SearchCriteria.getInstance();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Make a new list after filtering.</span></span><br><span class=\"line\">    List&lt;Person&gt; pilotList = pl</span><br><span class=\"line\">            .stream()</span><br><span class=\"line\">            .filter(search.getCriteria(<span class=\"string\">\"allPilots\"</span>))</span><br><span class=\"line\">            .collect(Collectors.toList());</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n=== Western Pilot Phone List ===\"</span>);</span><br><span class=\"line\">    pilotList.forEach(Person::printWesternName);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>collect</code>方法只有一个参数，是<code>Collector</code>类。<code>Collector</code>类用于从处理流的结果中生成一个<code>List</code>或者<code>Set</code>。上例介绍了如何将列表过滤后的结果存成<code>List</code>。</p>\n<h2 id=\"使用map进行计算\"><a href=\"#使用map进行计算\" class=\"headerlink\" title=\"使用map进行计算\"></a>使用<code>map</code>进行计算</h2><p><code>map</code>方法通常和<code>filter</code>搭配使用。这个方法去除类里面的某个属性，然后对它进行操作。如下代码基于年龄字段进行了一系列计算。</p>\n<p><code>Test04Map.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test04Map</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    List&lt;Person&gt; pl = Person.createShortList();</span><br><span class=\"line\">    </span><br><span class=\"line\">    SearchCriteria search = SearchCriteria.getInstance();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Calc average age of pilots old style</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"== Calc Old Style ==\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Person p:pl)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.getAge() &gt;= <span class=\"number\">23</span> &amp;&amp; p.getAge() &lt;= <span class=\"number\">65</span> )&#123;</span><br><span class=\"line\">        sum = sum + p.getAge();</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">long</span> average = sum / count;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Total Ages: \"</span> + sum);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Average Age: \"</span> + average);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Get sum of ages</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"\\n== Calc New Style ==\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> totalAge = pl</span><br><span class=\"line\">            .stream()</span><br><span class=\"line\">            .filter(search.getCriteria(<span class=\"string\">\"allPilots\"</span>))</span><br><span class=\"line\">            .mapToInt(p -&gt; p.getAge())</span><br><span class=\"line\">            .sum();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get average of ages</span></span><br><span class=\"line\">    OptionalDouble averageAge = pl</span><br><span class=\"line\">            .parallelStream()</span><br><span class=\"line\">            .filter(search.getCriteria(<span class=\"string\">\"allPilots\"</span>))</span><br><span class=\"line\">            .mapToDouble(p -&gt; p.getAge())</span><br><span class=\"line\">            .average();</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Total Ages: \"</span> + totalAge);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Average Age: \"</span> + averageAge.getAsDouble());    </span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">== Calc Old Style ==</span><br><span class=\"line\">Total Ages: 150</span><br><span class=\"line\">Average Age: 37</span><br><span class=\"line\"></span><br><span class=\"line\">== Calc New Style ==</span><br><span class=\"line\">Total Ages: 150</span><br><span class=\"line\">Average Age: 37.5</span><br></pre></td></tr></table></figure>\n<p>这段代码计算列表中所有飞行员的平均年龄。第一个循环展示了老式用<code>for</code>循环的写法。第二个循环使用了<code>map</code>方法获取串流中的每个人的年龄。注意<code>totalAge</code>是一个<code>long</code>类型对象。<code>map</code>方法返回一个<code>IntStream</code>对象，可以对其调用<code>sum</code>方法，这会返回一个<code>long</code>值。</p>\n<p><strong>注意：</strong> 第二次计算平均年龄时，再对所有值求和是多余的。然而，上例中这样写是为了展示<code>sum</code>函数的调用方法。</p>\n<p>最后一个循环基于串流计算平均年龄。注意<code>parallelStream</code>方法，它是 Java 8 中流式计算的并行版本，返回结果也不是简单的<code>double</code>，而是<code>OptionalDouble</code>。</p>\n<blockquote>\n<p><code>parallelStream</code>提供了一种并发处理集合元素的方法，以上文的列表求平均值为例，如果一共有 100 个元素，<code>parallelStream</code>会将任务分为 n 份（n 是线程池的大小，默认为 CPU 核数），每份任务交由单独一个线程处理，最终再汇总这些任务的结果，得出平均值</p>\n</blockquote>\n<h2 id=\"资源下载-3\"><a href=\"#资源下载-3\" class=\"headerlink\" title=\"资源下载\"></a>资源下载</h2><p>本小节中的NetBeans工程样例代码可以在下面下载到</p>\n<p><a href=\"https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/examples/LambdaCollectionExamples.zip\" target=\"_blank\" rel=\"noopener\">LambdaCollectionExamples.zip</a></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在本篇指南中，你学会了使用以下技能：</p>\n<ul>\n<li>Java 匿名内部类</li>\n<li>使用 Java SE 8 的 Lambda 表达式代替匿名内部类</li>\n<li>Lambda 表达式的语法</li>\n<li>通过<code>Predicate</code>接口在列表中查找</li>\n<li>通过<code>Function</code>接口处理对象，并得到一个新类型的对象</li>\n<li>Java SE 8 中新增的支持 Lambda 表达式的集合特性</li>\n</ul>\n<h2 id=\"更多资源\"><a href=\"#更多资源\" class=\"headerlink\" title=\"更多资源\"></a>更多资源</h2><p>如果你想要了解更多关于 Lambda 表达式和 Java SE 8 的信息，参考以下链接：</p>\n<ul>\n<li><a href=\"http://openjdk.java.net/projects/jdk8/\" target=\"_blank\" rel=\"noopener\">Java 8</a></li>\n<li><a href=\"http://openjdk.java.net/projects/lambda/\" target=\"_blank\" rel=\"noopener\">Project Lambda</a></li>\n<li><a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html\" target=\"_blank\" rel=\"noopener\">State of the Lambda</a></li>\n<li><a href=\"http://cr.openjdk.java.net/~briangoetz/lambda/sotc3.html\" target=\"_blank\" rel=\"noopener\">State of the Lambda Collections</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=bzO5GSujdqI\" target=\"_blank\" rel=\"noopener\">Jump-Starting Lambda JavaOne 2012(You Tube)</a></li>\n<li>若想要学习更多关于 Java 的内容，请点击<a href=\"http://www.oracle.com/goto/oll\" target=\"_blank\" rel=\"noopener\">Oracle Learning Library</a></li>\n</ul>\n<h2 id=\"著者\"><a href=\"#著者\" class=\"headerlink\" title=\"著者\"></a>著者</h2><ul>\n<li>课程组长：Michael Williams</li>\n<li>QA：Juan Quesada Nunez</li>\n<li>翻译：李磊</li>\n</ul>\n","categories":[],"tags":["Java"]},{"title":"香帅的北大金融学课（二）金融机构","url":"https://lilei.pro/2018/09/23/finance-Xiangshuai-week02/","content":"<h1 id=\"货币与信用\"><a href=\"#货币与信用\" class=\"headerlink\" title=\"货币与信用\"></a>货币与信用</h1><p>银行体系在整个社会经济中，处于枢纽地位。国家通过银行体系进行信用创造，调控经济，这是现代经济运行的一个最重要特征。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180923_finance/银行货币信用扩张机制.png\" alt=\"银行货币信用扩张机制\" title=\"\">\n                </div>\n                <div class=\"image-caption\">银行货币信用扩张机制</div>\n            </figure>\n<h2 id=\"货币的背后是国家信用\"><a href=\"#货币的背后是国家信用\" class=\"headerlink\" title=\"货币的背后是国家信用\"></a>货币的背后是国家信用</h2><p>货币的真名叫做“法定货币”，也就是国家赋予某个银行（比如中央银行）的一种特许权力而发行的，它背后的关键是国家信用。布雷顿森林会议上确立了美元在国际货币体系中“锚”的地位，美元成为了国际计价结算的储备货币，变成了国际货币体系的中心。现代的货币是信用货币，货币价值的浮动完全取决于一个国家的实力和其他国家对于这个国家的信心。</p>\n<p>所以说没有国家信用加持的货币，即使可以完成计价、储藏、交换的功能，它也不能够成为通用的货币——比特币最根本的缺陷来源于此，像比特币这样去中心化的货币，要取代各国央行发行的法定货币，还是路漫漫其修远兮。</p>\n<h2 id=\"存款准备金率和“降准”\"><a href=\"#存款准备金率和“降准”\" class=\"headerlink\" title=\"存款准备金率和“降准”\"></a>存款准备金率和“降准”</h2><p>前面讲到银行与国家强强联合，共同铸造了当代信用社会。国家通过银行体系，调控整个社会的信用规模和经济冷热。我们经常在电视新闻里听到“降息”、“降准”这样的词汇，“息”指的是基础利率，“准”指的是存款准备金率。</p>\n<h3 id=\"什么是存款准备金率\"><a href=\"#什么是存款准备金率\" class=\"headerlink\" title=\"什么是存款准备金率\"></a>什么是存款准备金率</h3><p>储户要把钱存到银行里，银行再放贷出去，然后形成企业、个人的各种贷款，支持消费生产。但是，<strong>每天都有不同的储户有提现的要求，所以银行必须留存一小部分钱出来应付储户提现的需求，这部分钱就叫做存款准备金，这个留存的比例就叫存款准备金率。</strong></p>\n<h3 id=\"存款准备金率如何生效的呢？\"><a href=\"#存款准备金率如何生效的呢？\" class=\"headerlink\" title=\"存款准备金率如何生效的呢？\"></a>存款准备金率如何生效的呢？</h3><p>假如小明有 100 块钱，他可以把这 100 块钱存到银行里，当时的存款准备金率是 10%，意味着银行必须预留出 100 块钱的 10%，也就是 10 块钱的现金，来预备应付小明的提现需求。去掉这 10% 后，银行可以把剩下的 90 块钱通过贷款的方式发放给小红。那么市面上一共有多少货币流通的，是 100（小明）+ 90（小红）= 190 元。小红同样可以选择把这 90 块钱存进银行，银行则在保留了 90 * 10% = 9 元的存款准备金后，将剩余 81 元发放出去……最终计算下来，小明持有的 100 元钱，经过层层转化，流动到社会中的钱可以达到 1000 元，整整扩张了 10 倍。这就是存款准备金的威力。</p>\n<p>平时新闻里总是听到，基础货币（M0），广义货币（M2）这种词。在这个例子里，100 元就是基础货币，1000 元就是广义货币，央行发行的这个货币就叫基础货币，在 10% 的存款准备金率下，通过商业银行体系的循环之后，社会上的货币供应量扩张了整整 10 倍。<strong>这个倍数其实你算一下，就是存款准备金率的倒数 10，所以也叫货币乘数。</strong></p>\n<p>存款准备金制度是国家宏观上把控货币扩张的手段，<strong>银行放贷的意愿，我们个人、企业的现金持有量</strong>，都会影响到货币扩张的机制。</p>\n<h2 id=\"基准利率和“加息”\"><a href=\"#基准利率和“加息”\" class=\"headerlink\" title=\"基准利率和“加息”\"></a>基准利率和“加息”</h2><p>现代经济运行最重要的逻辑，就是国家通过银行体系，来调控整个社会的信用规模和经济冷热。其中，<strong>存款准备金制度</strong> 和 <strong>基准利率</strong> 是两个最重要的调控手段。它们为什么重要呢？<strong>存款准备金制度主要是控制了资金的量，而基准利率调整的是资金的价格</strong>。</p>\n<h2 id=\"什么是基准利率\"><a href=\"#什么是基准利率\" class=\"headerlink\" title=\"什么是基准利率\"></a>什么是基准利率</h2><p>基准利率就是一个市场上利率水平的风向标。各个金融机构，都根据这个标准来确定自己的贷款和存款利率。政府如果担心经济过热的话，就会加息，也就是提高利率进行收缩。如果想要刺激经济，就会采取降息的措施。</p>\n<p>加息和降息的尺度其实非常难把握，过猛的加息可能会导致经济的突然崩盘，而过度的降息可能会导致经济泡沫。</p>\n<h2 id=\"学金融为什么要先了解宏观背景\"><a href=\"#学金融为什么要先了解宏观背景\" class=\"headerlink\" title=\"学金融为什么要先了解宏观背景\"></a>学金融为什么要先了解宏观背景</h2><ul>\n<li>世界上从来就不存在独立的微观金融现象，它的背后一定有某种宏观层面的逻辑或者推动力。</li>\n<li>我们中国市场是一个强政府指导下的逐步开放的金融市场，所以政府在这个市场的影响力是很深的。</li>\n<li>从宏观视角来理解微观金融现象，最后才能做出适合自己的金融决策。</li>\n</ul>\n<h2 id=\"学习金融的三个阶段\"><a href=\"#学习金融的三个阶段\" class=\"headerlink\" title=\"学习金融的三个阶段\"></a>学习金融的三个阶段</h2><ol>\n<li>概念、术语通关，也就是说在这个阶段，你会接触到大量的金融术语，然后理解这些词语——降准、降息、影子银行、IPO、PE、VC，你得把握这些词的概念，然后建立一个自己对金融市场的体感，这是第一个阶段。</li>\n<li>框架通关。这就是说，要求你建立一个金融思考的框架。我们现在面临的是一个信息爆炸的时代，市场上其实错误的信息是很多的，比如说你经常会听到什么“货币超发”、“货币战争”这些词语，这里面有很多的逻辑硬伤。在概念通关的基础上，你要学着建立一个自己的金融思维的框架，辨别这些信息。</li>\n<li>实操通关，这就是要求你运用金融框架来解决问题，在这个阶段，我会给你一些模拟的宏观环境，让你置身在一个具体的场景里面，这个时候你要开始运用自己在前面学到的很多知识进行判断，进行操作、投资、商业决策、金融运作等等。</li>\n</ol>\n<hr>\n<h1 id=\"银行与理财\"><a href=\"#银行与理财\" class=\"headerlink\" title=\"银行与理财\"></a>银行与理财</h1><h2 id=\"银行躺着赚钱的秘密\"><a href=\"#银行躺着赚钱的秘密\" class=\"headerlink\" title=\"银行躺着赚钱的秘密\"></a>银行躺着赚钱的秘密</h2><blockquote>\n<p>2017年全球最赚钱的5家公司，中国占了其中4家，分别是工农中建四大行。去年招行平均薪水46万，上海银行45万。</p>\n</blockquote>\n<p>从2003年到2012年这十年，被称为“中国银行业的黄金十年”。</p>\n<h3 id=\"银行利润来源\"><a href=\"#银行利润来源\" class=\"headerlink\" title=\"银行利润来源\"></a>银行利润来源</h3><ul>\n<li>3/4，存贷差</li>\n<li>1/4，银行投资，通道费用</li>\n</ul>\n<p>银行解决了资金匹配上的规模、期限和风险问题，所以它会产生大量收益。</p>\n<h3 id=\"为什么在中国会发生“黄金十年”？\"><a href=\"#为什么在中国会发生“黄金十年”？\" class=\"headerlink\" title=\"为什么在中国会发生“黄金十年”？\"></a>为什么在中国会发生“黄金十年”？</h3><ol>\n<li>金融准入门槛高，牌照控制严格，而且国家在2000年以后对存款利率实行严格管制，在2012年利率市场化之前，利率一直维持在3%左右</li>\n<li>国家经济高速增长的十年，投资机会多、利润高，产生大量的贷款需求</li>\n</ol>\n<h3 id=\"银行业贫富分化的新业态\"><a href=\"#银行业贫富分化的新业态\" class=\"headerlink\" title=\"银行业贫富分化的新业态\"></a>银行业贫富分化的新业态</h3><p>由于准入门槛降低（银行个数从2000年的40家发展到4000家）、利率市场化，在马太效应下，银行业两极分化，四大行依旧是巨头，股份制银行各辟蹊径，城商行状态欠佳。所有银行都赚钱的好日子过去了。</p>\n<h2 id=\"货币基金和银行\"><a href=\"#货币基金和银行\" class=\"headerlink\" title=\"货币基金和银行\"></a>货币基金和银行</h2><h3 id=\"银行间货币市场\"><a href=\"#银行间货币市场\" class=\"headerlink\" title=\"银行间货币市场\"></a>银行间货币市场</h3><p><strong>银行间货币市场</strong>：银行会有资金短缺和盈余的时候，所以会互相借钱，称为银行间的货币拆借，形成银行间市场。它是一个大额的、短期的资金拆借市场。</p>\n<p><strong>货币基金</strong> 就是美国70年代利率管制下的金融创新、投资银行通过募集资金、投入银行间货币市场来获取利润。货币基金的出现是美国金融自由化的一个标志性事件。</p>\n<p>对老百姓来说，货币基金提供了一个加入高收益的银行间货币市场的途径，让一小部分利润从银行流回老百姓手中。对银行来说，货币基金为其敲响了警钟，促使银行推出更多的货币基金产品。</p>\n<h3 id=\"货币基金收益率\"><a href=\"#货币基金收益率\" class=\"headerlink\" title=\"货币基金收益率\"></a>货币基金收益率</h3><p>货币基金利率的上下浮动，主要是跟随银行间市场波动。市面上的钱越紧张（钱荒），货币市场越火热，货币基金收益率越高。反之，市面上钱越多，货币基金利率越低。</p>\n<h2 id=\"银行非保本理财产品\"><a href=\"#银行非保本理财产品\" class=\"headerlink\" title=\"银行非保本理财产品\"></a>银行非保本理财产品</h2><h3 id=\"影子银行\"><a href=\"#影子银行\" class=\"headerlink\" title=\"影子银行\"></a>影子银行</h3><p>银行收到严格的监管，它有绕开监管的冲动。在中国的银行金融体系中，银行占据着绝对主导地位，因为只有银行能吸收存款，募资也比其他机构容易得多。中国240万亿的金融总资产里面，银行占了90%以上。</p>\n<ul>\n<li>银行受到监管多，募资能力强。</li>\n<li>其他金融机构钱少，受到监管宽松。</li>\n</ul>\n<p>信托、基金这些机构通过银行募集资金，把这些钱投到当时利润最高的行业和市场中去，绕开监管，大家一起赚钱，这些业务就是影子银行。最典型的就是银行和信托联手的“银信合作”业务，2010年的房地产市场，2014年的股票证券市场，都有银行和信托、券商合作的因素。</p>\n<p>中国的影子银行就是一个金融机构和金融监管之间猫捉老鼠的游戏。</p>\n<p>在这些业务中，银行充当通道作用，但是如果项目失败，银行不负有保本责任。</p>\n<h3 id=\"判别非保本理财产品是否靠谱的四个基本原则\"><a href=\"#判别非保本理财产品是否靠谱的四个基本原则\" class=\"headerlink\" title=\"判别非保本理财产品是否靠谱的四个基本原则\"></a>判别非保本理财产品是否靠谱的四个基本原则</h3><ol>\n<li>在产品说明书上要特别注意产品的投向，如果它偷网的是现金贷、小额贷、消费贷这类的产品，在当前的大背景下要非常谨慎</li>\n<li>如果是银行代销，意味着银行充当的只是中间人角色，你不会知道产品最后投到哪里，信息不对称太大，难以把握，不建议投资</li>\n<li>注意募资方信息，不要被名头唬到，要对产品本身做一些研究和了解</li>\n<li>如果利率过高就要小心，但是怎样判断利率过高？可以根据基准利率做判断，比如当前半年期基准贷款利率是4.35%，五年期以上的是4.9%，在这以上上浮10%、20%都是正常的范畴。5%的银行理财产品收益并不算太高</li>\n</ol>\n<h3 id=\"什么样的货币基金值得买\"><a href=\"#什么样的货币基金值得买\" class=\"headerlink\" title=\"什么样的货币基金值得买\"></a>什么样的货币基金值得买</h3><p>中国市场上有5万多亿的资金都在货币基金上，一共300多种产品，怎样挑选安全、收益率更高的？</p>\n<h4 id=\"挑选货币基金的两大原则\"><a href=\"#挑选货币基金的两大原则\" class=\"headerlink\" title=\"挑选货币基金的两大原则\"></a>挑选货币基金的两大原则</h4><p><strong>安全性与流动性原则——挑选散户比例高的货币基金</strong></p>\n<p>机构型的货基，申购赎回都非常频繁，散户经常反应过慢，会受到资金量大的机构影响。这种基金由于机构频繁购买赎回产生的流动性风险，成为“基金挤兑”（Fund Run），这会导致基金波动很大，不够稳健。</p>\n<p>如果一个货基的散户利率达到70%以上，就可以认为是散户型基金，流动性风险就非常低了。出于收益率考虑，这个标准可以放宽到60%。</p>\n<p><strong>收益率原则——挑选规模适中的货币基金</strong></p>\n<p>货基的收益率和它的货基规模，呈现一个倒U型的关系，基金规模太小（&lt;50亿）或者太大（&gt;1000亿）都会导致收益率过低。挑选货基时应当挑选100亿到400亿这样中等规模的基金。</p>\n<p>以下是香帅团队在2018年初根据以上原则挑选出的几支基金。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180923_finance/一些值得购买的基金.jpeg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"货币基金申购赎回的三个小窍门\"><a href=\"#货币基金申购赎回的三个小窍门\" class=\"headerlink\" title=\"货币基金申购赎回的三个小窍门\"></a>货币基金申购赎回的三个小窍门</h4><ol>\n<li>避开T+2、T+3的基金，因为这会对基金流动性造成一定损失</li>\n<li>基金交易按照工作日来计算，周五不买入，周四不赎回。如果在周五买入，T+1型基金应当在周六赎回，而周六非工作日，就只能在下周一赎回，变成了T+3型基金。“周四不赎回”是因为你如果在周四赎回了，就会变成“周五买入”</li>\n<li>货币基金的投资方向应该是一个短期的货币工具，市场上资金的紧张与否是货基收益率的关键，资金越紧张，收益率越高。一般来说月末、季末、年中、年底时，市场上货币最紧张，在这些时候购买货基也是收益率相对比较高的。</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180923_finance/货基选择2原则3窍门.jpeg\" alt=\"\" title=\"\">\n                </div>\n                <div class=\"image-caption\"></div>\n            </figure>\n<h4 id=\"一些在线购买货币基金的渠道\"><a href=\"#一些在线购买货币基金的渠道\" class=\"headerlink\" title=\"一些在线购买货币基金的渠道\"></a>一些在线购买货币基金的渠道</h4><ul>\n<li>天天基金</li>\n<li>好买基金</li>\n<li>数米基金</li>\n</ul>\n","categories":[],"tags":["金融学"]},{"title":"香帅的北大金融学课（一）金融世界观","url":"https://lilei.pro/2018/09/09/finance-Xiangshuai-week01/","content":"<blockquote>\n<p>学习“得到App”中《香帅的北大金融学课》笔记</p>\n</blockquote>\n<h1 id=\"第一周：金融的本质\"><a href=\"#第一周：金融的本质\" class=\"headerlink\" title=\"第一周：金融的本质\"></a>第一周：金融的本质</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180909_finance/金融的本质.jpg\" alt=\"金融的本质\" title=\"\">\n                </div>\n                <div class=\"image-caption\">金融的本质</div>\n            </figure>\n<p>金融并不是高高在上、只存在于银行家和证券分析师口中的神秘事物，它与每一个普通人息息相关，不论是菜贩、打工者、服务员，只要你活在时间的河流中，就一定会与金融发生这样那样的关系。</p>\n<h2 id=\"金融的第一定理——时间的价值\"><a href=\"#金融的第一定理——时间的价值\" class=\"headerlink\" title=\"金融的第一定理——时间的价值\"></a>金融的第一定理——时间的价值</h2><blockquote>\n<p>时间就是金钱</p>\n</blockquote>\n<p>时间是可以被换算成金钱的，我们每个人拥有的时间数量是相同的，上帝给每个人的时间一个基础定价（质量），我们再利用各自选择的金融工具，放大/缩小各自拥有的时间价值。这在金融学里被称作“货币的时间价值”（time value of money）。</p>\n<p>金融为时间定价，我们这些购买金融产品、做出金融决策的人，就是购买了不同的未来价值。</p>\n<h2 id=\"金融的第二定理——资金的集聚\"><a href=\"#金融的第二定理——资金的集聚\" class=\"headerlink\" title=\"金融的第二定理——资金的集聚\"></a>金融的第二定理——资金的集聚</h2><p>人类面临两个约束：时间和资金，经济学上将资金的约束称为“稀缺”。越是伟大的事物，越需要资金的<strong>快速集聚</strong>和<strong>有效配置</strong>，这种功能只有金融可以实现。金融帮助我们突破时间和地域的限制，进行快速有效的资金集聚。</p>\n<h2 id=\"金融的第三定理——分散风险\"><a href=\"#金融的第三定理——分散风险\" class=\"headerlink\" title=\"金融的第三定理——分散风险\"></a>金融的第三定理——分散风险</h2><p>金融使人类对风险的承受能力突破地域和时间限制，拓展人类经济活动范围</p>\n<ul>\n<li>保险将个体承受的风险分散到社会群体之间</li>\n<li>股票起到的作用是利益共享、风险共担。</li>\n<li>风投、创投让社会分担创业创新的风险</li>\n</ul>\n<h2 id=\"辩证看待金融世界观\"><a href=\"#辩证看待金融世界观\" class=\"headerlink\" title=\"辩证看待金融世界观\"></a>辩证看待金融世界观</h2><p>金融赋能人类，帮助我们扩大时间价值、进行资金的集聚，分散风险。金融同样也有负面的作用，比如<strong>马太效应</strong>和<strong>道德风险</strong>。</p>\n<p>金融的基础知识可以分为以下六个板块</p>\n<ul>\n<li>金融机构：银行、投行、基金的起源、功能、运作模式，以及背后的金融学逻辑</li>\n<li>金融工具：股票、债券、金融衍生品的本质和特征，金融机构如何开拓市场，金融交易制度</li>\n<li>投资者决策：资产配置、证券选择、非理性决策</li>\n<li>公司决策：筹资的时机和方法，上市时机，分红策略，股权激励</li>\n<li>金融的监管、创新和危机：“监管、创新、危机”的金融周期</li>\n<li>科技金融：金融行业未来的发展，互联网，区块链，比特币</li>\n</ul>\n<p>金融学带来金融思维，它让我们学会权衡风险和收益，不仅投资金钱，更是投资人生。</p>\n<hr>\n<h1 id=\"第二周-金融市场的历史演化过程\"><a href=\"#第二周-金融市场的历史演化过程\" class=\"headerlink\" title=\"第二周 金融市场的历史演化过程\"></a>第二周 金融市场的历史演化过程</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180909_finance/金融市场的历史演化.jpeg\" alt=\"金融市场的历史演化\" title=\"\">\n                </div>\n                <div class=\"image-caption\">金融市场的历史演化</div>\n            </figure>\n<h2 id=\"中国金融市场的制度根源——中央货币财政体系\"><a href=\"#中国金融市场的制度根源——中央货币财政体系\" class=\"headerlink\" title=\"中国金融市场的制度根源——中央货币财政体系\"></a>中国金融市场的制度根源——中央货币财政体系</h2><p><strong>所有的金融市场都不是凭空出现的，它的形成背后都有一个强大的历史制度根源。</strong></p>\n<p>中国的金融市场是从一个中央集权的帝国内部演化来的，早期的金融发达也来源于这样的封建专制制度，国家垄断了金融行业，经济生活国有化，可以集中力量办大事。</p>\n<p>这种经济制度的缺点是民间信用极其脆弱，民众的融资需求得不到满足，造成中国金融市场很多乱象。</p>\n<h2 id=\"欧美金融市场的演化——以银行为中心，分权制衡下的信用体系\"><a href=\"#欧美金融市场的演化——以银行为中心，分权制衡下的信用体系\" class=\"headerlink\" title=\"欧美金融市场的演化——以银行为中心，分权制衡下的信用体系\"></a>欧美金融市场的演化——以银行为中心，分权制衡下的信用体系</h2><p>欧美的金融市场也不是一开始就像现在这样成熟，而是从11世纪以后慢慢发展起来的</p>\n<p>圣殿骑士团奠定欧洲银行业基础 -&gt; 意大利银行业、荷兰股票证券、英法银行业逐渐形成分权制衡信用体系 -&gt; 美国的金融立国，称为世界上最发达的金融市场。我们现在所看到的欧美信用社会，是由于欧洲分权制衡的形态所决定的。</p>\n<p>历史不能依靠简单的拿来主义，它是一个路径相依的过程。</p>\n<h2 id=\"金融机构用于消除金融市场上的信息不对称\"><a href=\"#金融机构用于消除金融市场上的信息不对称\" class=\"headerlink\" title=\"金融机构用于消除金融市场上的信息不对称\"></a>金融机构用于消除金融市场上的信息不对称</h2><p>金融市场上交易的是“信用”、“未来”，是看不见摸不到的抽象物品，存在巨大的<strong>信息不对称</strong>，金融中介的存在就是为了消除信息不对称。各种审计机构、会计师事务所、券商银行都属于金融中介。</p>\n<p>没有金融中介机构，金融市场是无法运行的，金融市场的高度中介化是必然的结果。</p>\n<hr>\n<h1 id=\"延展话题：个人资产配置的生命周期\"><a href=\"#延展话题：个人资产配置的生命周期\" class=\"headerlink\" title=\"延展话题：个人资产配置的生命周期\"></a>延展话题：个人资产配置的生命周期</h1><ul>\n<li>青年时期：最大的优势是时间，加大实物资产配置，以时间换空间，增大年轻时期资本积累</li>\n<li>壮年时期：现金收入高，风险承受能力强。应该加大风险资产配置；身份角色的转换，需要资产的多元化配置</li>\n<li>老年时期：未来时间变少，风险承受能力减弱，加大安全资产配置，同时加大流动性资产配置，保障现金流</li>\n</ul>\n","categories":[],"tags":["金融学"]},{"title":"深入理解 Java 虚拟机（三）垃圾收集器与内存分配策略","url":"https://lilei.pro/2018/08/15/JVM-Note-03/","content":"<blockquote>\n<p>本章介绍垃圾收集器的设计思路、算法以及常见实现，同时介绍为对象分配空间时采取的策略。</p>\n</blockquote>\n<h1 id=\"垃圾收集（Garbage-Collection）\"><a href=\"#垃圾收集（Garbage-Collection）\" class=\"headerlink\" title=\"垃圾收集（Garbage Collection）\"></a>垃圾收集（Garbage Collection）</h1><p>GC 的历史比 Java 久远，1960 年诞生于 MIT 的 Lisp 是第一门真正使用内存动态分配和垃圾回收技术的语言。不论是什么语言，在设计 GC 时都必须要解决以下三个问题：</p>\n<ul>\n<li>哪些内存需要回收（Who）</li>\n<li>什么时候回收（When）</li>\n<li>如何回收（How）</li>\n</ul>\n<p>也许你要问，虚拟机已经为我们完成了内存回收的工作，目前内存的动态分配与回收技术已经相当成熟，一切都进入了“自动化”时代，我们为什么还要去了解 GC 和内存分配呢？答案很简单，当我们需要排查各种内存溢出、泄漏问题时，当垃圾收集称为系统达到更高并发量的瓶颈时，就必须要对这些“自动化”的技术进行必要的监控和调节。</p>\n<p>在上一章的学习中，我们了解到 JVM 的内存可以划分为线程私有部分（虚拟机栈、本地方法栈、程序计数器）和公有部分（堆、方法区），其中线程私有部分所申请的内存，随着线程运行结束而销毁，在这个区域的内存分配和回收具备确定性。公有部分的方法区，其分配多少内存在编译期间也可以确认，因此，需要考虑内存回收的区域主要是 Java 堆，堆中的对象是运行时创建的，它们的创建和回收都是动态的，这是垃圾收集器关注的区域。</p>\n<h1 id=\"对象已死吗？\"><a href=\"#对象已死吗？\" class=\"headerlink\" title=\"对象已死吗？\"></a>对象已死吗？</h1><h2 id=\"引用计数器法\"><a href=\"#引用计数器法\" class=\"headerlink\" title=\"引用计数器法\"></a>引用计数器法</h2><p>引用计数器法（Reference Counting）是一种实现起来很简单的判断对象是否存活的方法。原理是当出现一个对对象的引用时，计数器 +1；当引用失效时，计数器 -1，计数器值为 0 则表示对象已死。它的优点是实现简单，判定效率高，在大部分情况下都是不错的算法，也有很多著名的应用案例：</p>\n<ul>\n<li>M$ 的 COM（Component Object Model）技术</li>\n<li>试用 AS3 的 FlashPlayer</li>\n<li>Python</li>\n<li>Squirrel</li>\n</ul>\n<p>引用计数器发存在循环引用的问题，因此主流 Java 虚拟机没有选用这种方法来管理内存。</p>\n<h2 id=\"可达性分析法\"><a href=\"#可达性分析法\" class=\"headerlink\" title=\"可达性分析法\"></a>可达性分析法</h2><p>主流商用程序语言（Java、C#、Lisp）使用可达性分析（Reachability Analysis）方法来判定对象是否存活：</p>\n<ol>\n<li>从一系列 GC Roots 节点开始向下搜索，搜索走过的路径称为引用链（Reference Chain）</li>\n<li>当一个对象到 GC Roots 没有任何引用链相连（不可达）时，证明此对象是不可用的</li>\n</ol>\n<p>在 Java 中的 GC Roots 有以下几种</p>\n<ul>\n<li>虚拟机栈（栈帧中的本地变量表）引用的对象</li>\n<li>本地方法栈中 JNI 引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中常量引用的对象</li>\n</ul>\n<p>可见 GC Roots 节点主要有全局性引用和执行上下文这两个来源。</p>\n<h2 id=\"JDK-1-2-后的几种引用\"><a href=\"#JDK-1-2-后的几种引用\" class=\"headerlink\" title=\"JDK 1.2 后的几种引用\"></a>JDK 1.2 后的几种引用</h2><p>在 Java 1.2 之前，对“引用”的定义很传统：如果 reference 类型的数据中存储的数值代表的是另一块内存的起始地址，就称为这块内存代表着一个引用。这种定义很纯粹但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态。我们希望描述这样一类对象：当内存空间还足够时，则能保存在内存之中；如果内存空间在进行 GC 后还是非常紧张，则可以抛弃这些对象。在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为“强软弱虚”四种：</p>\n<ul>\n<li>强引用（Strong Reference）：指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器 <strong>永远不会</strong> 回收掉被引用的对象</li>\n<li>软引用（Soft Reference）：用来描述一些 <strong>还有用但非必需</strong> 的对象，对于软引用关联的对象，在系统将要发生内存溢出异常之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收还没有足够的内存，则会抛出 <strong>内存溢出异常</strong></li>\n<li>弱引用（Weak Reference）：用来描述 <strong>非必需</strong> 对象，被弱引用关联的对象只能生存到下一次垃圾回收发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象</li>\n<li>虚引用（Phantom Reference）：也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用获取对象实例。为一个对象设置虚引用关联的唯一目的就是能在它被收集器回收时收到一个系统通知</li>\n</ul>\n<h2 id=\"两次标记宣告对象死亡\"><a href=\"#两次标记宣告对象死亡\" class=\"headerlink\" title=\"两次标记宣告对象死亡\"></a>两次标记宣告对象死亡</h2><p>对于在可达性分析中被判断为“不可达”的对象，有一次进行自救的机会，要真正宣告一个对象死亡，需要经历两次标记过程：</p>\n<ol>\n<li>第一次标记：对象在可达性分析中被标记为“不可达”</li>\n<li>第二次筛选：判断此对象是否有必要执行 finalize() 方法，以下两个条件满足其一时，可认为是“有必要”，a. 对象覆盖了 finalize() 方法；b. 对象的 finalize() 方法未被调用过</li>\n</ol>\n<p>对象被判断为“有必要执行 finalize()”时，是其最后一次自救机会，它会被放置在一个名为<code>F-Queue</code>的队列之中，并在稍后由一个虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize() 方法，对象进行自救的唯一手段是在 finalize() 方法中建立与 GC Roots 的连接，譬如把自己（this 关键字）赋值给某个类变量或者对象的成员变量，这样会使得对象被移除出“即将回收”集合；换言之，如果这时候对象仍然未能自救，则会迎来死亡的命运。</p>\n<p>需要注意的是，<strong>任何一个对象的 finalize() 方法只会被系统自动调用一次</strong>。在编码中我们应当尽量避免使用<code>finalize()</code>方法，因为它的运行代价高昂，不确定性大，并且无法保证各个对象的调用顺序。</p>\n<h2 id=\"回收方法区\"><a href=\"#回收方法区\" class=\"headerlink\" title=\"回收方法区\"></a>回收方法区</h2><p>方法区（在 HotSpot 虚拟机中被称为“永久代”）也可以进行垃圾收集（虽然 Java 虚拟机规范中明确表示可以不要求在方法区实现垃圾收集）。不过在方法区中进行收集的“性价比”通常很低，在堆中常规应用进行一次垃圾收集一般可以回收 70%～95% 的空间，而永久代的垃圾收集效率远低于此。</p>\n<p>永久代的垃圾收集主要回收两部分内容：废弃常量和无用的类。</p>\n<p><strong>废弃常量</strong> 的回收与 Java 堆中对象回收十分类似，以字面量回收为例，假如一个字符串“abc”已经进入了常量池中，但是当前系统没有任何一个 String 对象是叫做“abc”的，也没有在其他任何地方引用了这个字面量，如果这时发生内存回收，在必要的情况下，“abc”常量会被清除出常量池。</p>\n<p><strong>无用的类</strong> 的判断则要稍微复杂一些，需要同时满足以下三个条件，才“可以”被回收，注意不是“一定”而是“可以”</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类的任何实例</li>\n<li>加载该类的 ClassLoader 已经被回收</li>\n<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li>\n</ul>\n<p>HotSpot 虚拟机提供了<code>-Xnoclassgc</code>参数进行控制无用的类回收。</p>\n<h1 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h1><h2 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h2><p>最基本的收集算法是标记-清除（Mark-Sweep）算法，分为两个阶段：</p>\n<ol>\n<li>标记出所有需要回收的对象</li>\n<li>统一回收所有被标记的对象</li>\n</ol>\n<p>标记-清除算法的示意图如下</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180815_jvm_03/标记清除.jpeg\" alt=\"标记清除\" title=\"\">\n                </div>\n                <div class=\"image-caption\">标记清除</div>\n            </figure>\n<p>标记-清除算法主要不足有两个</p>\n<ol>\n<li>效率问题，标记和清除的效率都不高</li>\n<li>空间问题，清楚之后会产生大量不连续的内存碎片</li>\n</ol>\n<h2 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h2><p>复制（Copying）算法主要目的是解决效率问题，它将可用内存平均分为两个半区，每次只使用其中一个半区，在进行垃圾回收时，将仍存活的对象复制到另半区上，然后清空刚刚使用的半区。复制算法的实现简单运行高效，不足是空间利用率太低，只使用了一半的内存。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180815_jvm_03/复制.jpg\" alt=\"复制\" title=\"\">\n                </div>\n                <div class=\"image-caption\">复制</div>\n            </figure>\n<p>现在的商业虚拟机都采用复制算法来回收<strong>新生代</strong>，IBM 研究表明新生代中的对象多达 98% 是朝生夕死的，所以不需要按照 1:1 的比例来划分内存。而是将内存分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor 空间（称为 From Survivor），在回收时将存活对象复制到另一块 Survivor 空间（称为 To Survivor），并清理掉 Eden 以及 From Survivor 空间。HotSpot 虚拟机默认对 Eden 和 Survivor 空间分配比例为 8:1。</p>\n<p>当 GC 过程中发现 To Survivor 空间不够用时，需要依赖其他内存（老年代）进行分配担保（Handle Promotion）。</p>\n<h2 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h2><p>复制算法对于对象存活率高的场景并不适用，因为需要频繁进行复制操作；并且它还需要额外空间进行分配担保。因此，在老年代中通常不使用复制算法进行内存回收，而是使用的标记-整理（Mark-Compact）算法：</p>\n<ol>\n<li>标记过程与“标记-清除”算法相同，先是标记出仍然存活的对象</li>\n<li>把所有存活对象向一端移动</li>\n<li>清理掉端边界以外的内存</li>\n</ol>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180815_jvm_03/标记整理.png\" alt=\"标记整理\" title=\"\">\n                </div>\n                <div class=\"image-caption\">标记整理</div>\n            </figure>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>当代商业虚拟机采用的都是分代收集算法（Generational Collection），将 Java 堆分为新生代和老年代，根据各个年代的特点采用最合适的收集算法。</p>\n<ul>\n<li>新生代：对象存活周期短，每次垃圾收集时有大量对象死去，只有少量存活，使用<strong>复制</strong>算法</li>\n<li>老年代：对象存活周期长，存活率高，没有额外空间对它进行分配担保，采用<strong>标记-清除</strong>或者<strong>标记-整理</strong>算法</li>\n</ul>\n<h1 id=\"HotSpot-的算法实现\"><a href=\"#HotSpot-的算法实现\" class=\"headerlink\" title=\"HotSpot 的算法实现\"></a>HotSpot 的算法实现</h1><p>在虚拟机上实现之前所述的算法时，必需对算法的执行效率有严格考量，才能保证虚拟机高效运行。</p>\n<h2 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h2><p>之前讲到作为 GC Roots 的区域主要是全局性引用（常量、类静态属性）和执行上下文（栈帧中的本地变量），很多应用仅仅方法区就有数百兆，如果逐个检查引用，必然会消耗很多时间。</p>\n<p>此外，可达性分析对执行时间的敏感还体现在 <strong>GC 停顿</strong> 上，因为可达性分析必须在一个能确保一致性的快照中进行（分析过程中对象引用关系不可以发生变化），GC 时必须停顿所有的 Java 执行线程（称为 Stop The World）。</p>\n<p>目前所有主流虚拟机采用的都是准确式 GC，当执行系统停顿下来时，虚拟机有办法知道，哪些地方存放着对象引用。在 HotSpot 实现中，使用一组称为 <strong>OopMap</strong> 的数据结构达成这个目的。在类加载完成时，HotSpot 把对象内什么偏移量上是什么类型的数据计算出来，在 JIT 编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。</p>\n<h2 id=\"安全点\"><a href=\"#安全点\" class=\"headerlink\" title=\"安全点\"></a>安全点</h2><p>在 OopMap 协助下，HotSpot 可以快速且准确地完成 GC Roots 的枚举，然而存在一个很现实的问题：可能导致引用关系变化，或者说 OopMap 内容变化的指令非常多，如果为每一条指令都生成对应的 OopMap，将需要大量的额外空间，导致 GC 的空间成本非常高。</p>\n<p>HotSpot 处理的方法是，并没有为每一条指令都生成 OopMap，只是在“特定的位置”记录这些信息，这些位置称为安全点（Safepoint），即程序执行时并非在所有地方都能停顿下来开始 GC，只有在到达安全点时才暂停。安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的——因为每条指令执行的时间都非常短暂，程序不太可能因为指令流长度太长这个原因而过长时间运行。（<span style=\"color:red\">这部分不理解</span>）</p>\n<p>对于 Safepoint 另一个需要考虑的点是如何在 GC 时让所有线程都运行到安全点上停顿下来，这里有两种方案：</p>\n<ul>\n<li>抢先式中断（Preemptive Suspension）：GC 发生时中断所有线程，如果有线程中断地方不处于安全点，则让该线程运行至安全点。现在几乎没有虚拟机采用抢先式中断来暂停线程从而响应 GC 事件。</li>\n<li>主动式中断（Voluntary Suspension）：当 GC 需要中断时，设置一个标志位。各个线程执行时主动轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</li>\n</ul>\n<h2 id=\"安全区域\"><a href=\"#安全区域\" class=\"headerlink\" title=\"安全区域\"></a>安全区域</h2><p>Safepoint 机制保证程序执行时进入 GC 的可行性，但是，当程序不执行的时候（即没有分配 CPU 事件，例如线程处于 Sleep 状态或者 Blocked 状态），线程无法响应 JVM 的中断请求，无法轮询自然无法运行至安全点再中断挂起，<strong>安全区域</strong> （Safe Region）就是用来解决这种问题的。</p>\n<blockquote>\n<p>安全区域是指在一段代码片段之中，引用关系不会发生变化。在这个区域中的任意地方开始 GC 都是安全的。可以把 Safe Region 看作是扩展了的 Safepoint。</p>\n</blockquote>\n<ul>\n<li>当线程执行到 Safe Region 中的代码时，首先标识自己已经进入了 Safe Region</li>\n<li>当这段时间里 JVM 需要发起 GC 时，对于标识自己为 Safe Region 状态的线程认为它是安全状态</li>\n<li>当线程需要离开 Safe Region 时，检查系统是否已经完成了根节点枚举，如果完成则线程继续执行，否则等待直至收到可以安全离开 Safe Region 的信号为止</li>\n</ul>\n<h1 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h1><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。下图展示了 7 种作用于不同分代的垃圾收集器，存在连线的垃圾收集器可以搭配使用。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180815_jvm_03/hotspot垃圾收集器.jpg\" alt=\"HotSpot垃圾收集器\" title=\"\">\n                </div>\n                <div class=\"image-caption\">HotSpot垃圾收集器</div>\n            </figure>\n<h2 id=\"Serial-收集器\"><a href=\"#Serial-收集器\" class=\"headerlink\" title=\"Serial 收集器\"></a>Serial 收集器</h2><ul>\n<li>最基本、发展历史最悠久的收集器</li>\n<li>单线程，进行垃圾收集时必须暂停其他所有工作线程（Stop The World）</li>\n<li>是虚拟机运行在 Client 模式下默认的 <strong>新生代收集器</strong>，在用户的桌面场景应用中，分配给虚拟机的内存一半不会很大，收集几十兆乃至一两百兆的新生代，停顿时间可以控制在 100 毫秒之内，可以接受</li>\n<li>对于单个 CPU 的情况，没有线程交互的开销，可以获得最高的单线程收集效率</li>\n</ul>\n<h2 id=\"ParNew-收集器\"><a href=\"#ParNew-收集器\" class=\"headerlink\" title=\"ParNew 收集器\"></a>ParNew 收集器</h2><ul>\n<li>Serial 收集器的多线程版本</li>\n<li>许多运行在 Server 模式下的虚拟机首选的新生代收集器</li>\n<li>只有它可以与 CMS（Concurrent Mark Sweep）收集器配合工作</li>\n<li>在单 CPU 环境中，效率不如 Serial 收集器；默认开启的收集线程数与 CPU 数量相同</li>\n</ul>\n<h2 id=\"Parallel-Scavenge-收集器\"><a href=\"#Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"Parallel Scavenge 收集器\"></a>Parallel Scavenge 收集器</h2><ul>\n<li>新生代收集器，采用复制算法</li>\n<li>关注点在于 <strong>达到可控制的吞吐量（Throughput）</strong>，<code>吞吐量 = 运行用户代码时间/(运行用户代码时间 + 垃圾收集时间)</code>，是一个百分数</li>\n<li>停顿时间短的收集器（例如 CMS）适合与用户交互的程序；吞吐量高的收集器（例如 Parallel）适合后台运算而不需要太多交互的程序</li>\n<li><strong>自适应调节策略</strong>：虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最合适的停顿时间或者最大的吞吐量</li>\n</ul>\n<h2 id=\"Serail-Old-收集器\"><a href=\"#Serail-Old-收集器\" class=\"headerlink\" title=\"Serail Old 收集器\"></a>Serail Old 收集器</h2><ul>\n<li>Serial 收集器的老年代版本，单线程，“标记-整理”算法</li>\n<li>主要意义在于给 Client 模式下的虚拟机使用</li>\n</ul>\n<h2 id=\"Parallel-Old-收集器\"><a href=\"#Parallel-Old-收集器\" class=\"headerlink\" title=\"Parallel Old 收集器\"></a>Parallel Old 收集器</h2><ul>\n<li>Parallel Scanvenge 收集器的老年代版本，多线程，“标记-整理”算法</li>\n<li>吞吐量优先：Parallel Scanvenge + Parallel Old</li>\n</ul>\n<h2 id=\"CMS（Concurrent-Mark-Sweep）收集器\"><a href=\"#CMS（Concurrent-Mark-Sweep）收集器\" class=\"headerlink\" title=\"CMS（Concurrent Mark Sweep）收集器\"></a>CMS（Concurrent Mark Sweep）收集器</h2><ul>\n<li>以获取最短回收停顿时间为目标，应用于网站以及 B/S 系统的服务端，注重服务响应速度，希望停顿时间最短</li>\n<li>基于“标记-清除”算法，收集过程分为四步</li>\n</ul>\n<ol>\n<li>初始标记（CMS initial mark），标记 GC Roots 能直接关联到的对象</li>\n<li>并发标记（CMS concurrent mark），进行 GC Roots Tracing</li>\n<li>重新标记（CMS remark），修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录</li>\n<li>并发清除（CMS concurrent sweep）</li>\n</ol>\n<ul>\n<li>初始标记、重新标记这两个过程需要 Stop The World</li>\n<li>有三个明显缺点</li>\n</ul>\n<ol>\n<li>对 CPU 资源非常敏感，并发阶段会占用一部分线程（或者说 CPU 资源）导致用户程序变慢，吞吐量降低。CMS 默认启动的回收线程数是（CPU数量 + 3）/4，当 CPU 不足 4 个时，对用户程序影响可能变得很大</li>\n<li>无法处理浮动垃圾（Floating Garbage），可能出现“Concurrent Mode Failute”而导致另一次 Full GC 发生。“浮动垃圾”是指并发清理阶段所产生的垃圾，必须为这部分垃圾提前预留空间，以供并发收集时程序运作使用</li>\n<li>因为采用的是“标记-清理”算法，当空间碎片过多时，无法分配大对象，CMS 收集器提供<code>-XX:+UseCMSCompactAtFullCollection</code>参数，用来在 FullGC 时开启压缩</li>\n</ol>\n<h2 id=\"G1（Garbage-First）-收集器\"><a href=\"#G1（Garbage-First）-收集器\" class=\"headerlink\" title=\"G1（Garbage-First） 收集器\"></a>G1（Garbage-First） 收集器</h2><ul>\n<li>JDK 1.7 正式推出（7u4），面向服务端应用</li>\n<li><strong>特点</strong>：并行与并发，分代收集，空间整合，可预测的停顿</li>\n<li><strong>过程</strong>：将 Java 堆划分为多个大小相等的独立区域（Region），避免在整个 Java 堆中进行全区域的垃圾收集，而是追踪哥哥 Region 里面的垃圾堆积的价值大小（回收所获得的空间大小及回收所需时间的经验值），在后台维护一个悠闲列表，每次根据允许的收集时间，优先回收价值最大的 Region（也是 Garbage-First 名字由来）</li>\n<li>分为 4 个步骤</li>\n</ul>\n<ol>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>最终标记</li>\n<li>筛选回收</li>\n</ol>\n","categories":[],"tags":["读书笔记","JVM"]},{"title":"深入理解 Java 虚拟机（二）JVM 内存区域与内存溢出异常","url":"https://lilei.pro/2018/08/09/JVM-Note-02/","content":"<blockquote>\n<p>本章从概念上介绍 Java 虚拟机内存的各个区域，从作用、服务对象、可能产生的问题几个方面进行讲解。</p>\n</blockquote>\n<h1 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h1><p>根据《Java 虚拟机运行规范》的规定，Java 虚拟机所管理的内存将会包括以下几个运行时区域：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180809_jvm_02/虚拟机数据分区.png\" alt=\"虚拟机数据分区\" title=\"\">\n                </div>\n                <div class=\"image-caption\">虚拟机数据分区</div>\n            </figure> \n<ul>\n<li>线程私有：程序计数器，虚拟机栈，本地方法栈</li>\n<li>线程共享：堆，方法区</li>\n</ul>\n<h2 id=\"程序计数器（Program-Counter-Register）\"><a href=\"#程序计数器（Program-Counter-Register）\" class=\"headerlink\" title=\"程序计数器（Program Counter Register）\"></a>程序计数器（Program Counter Register）</h2><p>程序计数器是一块较小的内存空间，可以看作是当前线程执行的字节码行号指示器，JVM 通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能。</p>\n<p>程序计数器空间是私有的，原因在于 Java 虚拟机是通过线程轮流切换并分配处理器时间来实现的多线程，为了线程切换后能恢复到正确的执行位置，每个线程都需要一个独立的程序计数器。</p>\n<ul>\n<li>如果线程正在执行 Java 方法，则程序计数器记录的是虚拟机字节码指令地址</li>\n<li>如果线程正在执行 Native 方法，则程序计数器值为空（Undefined）</li>\n</ul>\n<p>程序计数器是唯一一个在 Java 虚拟机规范中不会发生 OutOfMemoryError 的区域。</p>\n<h2 id=\"Java-虚拟机栈（Java-Virtual-Machine-Stacks）\"><a href=\"#Java-虚拟机栈（Java-Virtual-Machine-Stacks）\" class=\"headerlink\" title=\"Java 虚拟机栈（Java Virtual Machine Stacks）\"></a>Java 虚拟机栈（Java Virtual Machine Stacks）</h2><p>描述 Java 方法执行的内存模型：每个方法在执行时都会创建一个栈帧（Stack Frame），用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法运行从开始到结束，对应的是栈帧在虚拟机栈中入栈及出栈的过程。以下着重介绍<strong>局部变量表</strong>。</p>\n<p>局部变量表存放以下类型的变量，其中 64 位长度的 long 和 double 类型数据会占用 2 个局部变量空间（Slot），其余数据类型只占据 1 个。</p>\n<ul>\n<li>编译期已知的各种基本数据类型：boolean、byte、char、short、int、float、long、double</li>\n<li>对象引用：reference 类型，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置</li>\n<li>returnAddress 类型：指向字节码指令地址</li>\n</ul>\n<p>局部变量表所需的内促农建在编译期间完成分配，在方法运行期间不会更改局部变量表的大小。</p>\n<p>在 Java 虚拟机规范中，对这个区域规定了两种异常情况：</p>\n<ol>\n<li>StackOverflowError: 线程请求的栈深度大于虚拟机所允许的深度</li>\n<li>OutOfMemoryError: 虚拟机栈进行动态扩展时无法申请到足够的内存</li>\n</ol>\n<h2 id=\"本地方法栈（Native-Method-Stack）\"><a href=\"#本地方法栈（Native-Method-Stack）\" class=\"headerlink\" title=\"本地方法栈（Native Method Stack）\"></a>本地方法栈（Native Method Stack）</h2><p>类似于虚拟机栈，只不过本地方法栈是为本地方法服务。同样会抛出 StackOverflowError 和 OutOfMemoryError。</p>\n<h2 id=\"Java-堆（Heap）\"><a href=\"#Java-堆（Heap）\" class=\"headerlink\" title=\"Java 堆（Heap）\"></a>Java 堆（Heap）</h2><p>是 Java 虚拟机所管理的内存中最大的一块区域，被所有线程共享。堆存在的唯一意义是存放对象实例，在 Java 虚拟机规范中的表述是“所有的对象和数组都要在堆上分配”。但是随着 JIT 编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致这一规则不再那么绝对。GC 就是对堆上的对象进行回收。堆区域空间不足会导致 OOM。</p>\n<h2 id=\"方法区（Method-Area）\"><a href=\"#方法区（Method-Area）\" class=\"headerlink\" title=\"方法区（Method Area）\"></a>方法区（Method Area）</h2><p>也是线程共享的区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。别名 Non-Heap。HotSpot 虚拟机设计团队选择把 GC 分代收集扩展至方法区，导致也有人称呼方法区为“永久代”（Permanent Generation），但这并不是一个好的实践，会导致内存溢出问题，而且极少数的方法会因为这个原因而在不同虚拟机上产生不同表现。</p>\n<p>垃圾收集行为在方法区是较少出现的，而且回收率不高，回收目标主要是针对常量池的回收和对类型的卸载。</p>\n<p><strong>运行时常量池（Runtime Constant Pool）</strong> 是方法区的一部分，Class 文件除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期间生成的各种字面量和符号引用。可能会抛出 OOM 异常。</p>\n<h2 id=\"直接内存（Direct-Memory）\"><a href=\"#直接内存（Direct-Memory）\" class=\"headerlink\" title=\"直接内存（Direct Memory）\"></a>直接内存（Direct Memory）</h2><p>直接内存不是 JVM 运行时数据区的一部分，JDK 1.4 中新加入了 NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的 I/O 方式，可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆的 DirectByteBuffer 对象作为这块内存的引用进行操作。从而避免在 Java 堆和 Native 堆中来回复制护具，在一些场景中显著提高性能。使用不当会有 OOM 异常。</p>\n<h1 id=\"HotSpot-虚拟机对象探秘\"><a href=\"#HotSpot-虚拟机对象探秘\" class=\"headerlink\" title=\"HotSpot 虚拟机对象探秘\"></a>HotSpot 虚拟机对象探秘</h1><p>基于实用优先原则，以 HotSpot 虚拟机为例，学习在它在 Java 堆中对象分配、布局和访问的全过程。</p>\n<h2 id=\"对象创建\"><a href=\"#对象创建\" class=\"headerlink\" title=\"对象创建\"></a>对象创建</h2><p>在语言层面上，对象创建只需要<code>new</code>关键字即可完成。但是在虚拟机中，这一过程背后实际上并不那么简单。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180809_jvm_02/并不简单.jpg\" alt=\"并不简单\" title=\"\">\n                </div>\n                <div class=\"image-caption\">并不简单</div>\n            </figure> \n<h3 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h3><p>虚拟机收到一条<code>new</code>指令时，首先去检查指令参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化过。如果没有，则会进行相应的类加载过程。</p>\n<h3 id=\"分配内存\"><a href=\"#分配内存\" class=\"headerlink\" title=\"分配内存\"></a>分配内存</h3><p>对象所需内存大小在类加载完成后即可完全确定，为对象分配内存的操作相当于从堆中划分出一块可使用的区域。有两种分配方式：</p>\n<ul>\n<li>指针碰撞 (Bump the Pointer）：当 Java 堆中的内存是绝对规整的，用过的内存和空闲的内存分两边存放，并且有指针指向明确的界限，此时分配内存只需要将指针移动与对象大小相同距离即可。Serial、ParNew 等带 Compact 过程的收集器采用这种方法。</li>\n<li>空闲列表（Free List）：当内存不规整、用过的内存和空闲的内存交叉排列时，需要由虚拟机维护一个列表记录哪些内存块是可用的，分配时为对象寻找一块足够大的区域并更新列表。CMS 这种基于 Mark-Sweep 算法的收集器采用这种方法。</li>\n</ul>\n<p>除了划分可用空间外，还需要考虑移动指针带来的并发问题。解决并发问题有两个方案：</p>\n<ul>\n<li>对分配内存空间的动作进行同步处理，虚拟机采用 CAS 配上失败重试的方法保证更新操作的原子性</li>\n<li>把内存分配的动作按照线程划分在不同空间进行，每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）。线程在各自的 TLAB 上为对象分配内存，只有当 TLAB 用尽并分配新的 TLAB 时，才需要同步锁定。</li>\n</ul>\n<p>内存分配完成后，虚拟机会讲所分配到的内存空间都初始化为零值。</p>\n<h3 id=\"对象设置\"><a href=\"#对象设置\" class=\"headerlink\" title=\"对象设置\"></a>对象设置</h3><p>虚拟机会设置对象信息（对象是哪个类的实例、如何找到类的元数据信息、哈希码、GC 分代年龄），这些信息保存在对象头（Object Header）中。</p>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>在以上步骤都完成后，开始对象创建，即执行<code>&lt;init&gt;</code>方法，将对象按照构造函数进行初始化，这样一个真正可用的对象才算完全产生出来。</p>\n<h2 id=\"对象内存布局\"><a href=\"#对象内存布局\" class=\"headerlink\" title=\"对象内存布局\"></a>对象内存布局</h2><p>在 HotSpot 虚拟机中，对象在内存中存储的布局分为三块：对象头（Header）、实例数据（Instance Data）、对齐填充（Padding）。</p>\n<p><strong>对象头</strong> 包括两部分信息</p>\n<ul>\n<li>对象自身运行时数据，如哈希码（HashCode）、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等。这部分数据长度在 32 位和 64 位虚拟机中分别是 32bit 和 64bit，官方称它为“Mark Word”。是一个非固定的数据结构。</li>\n<li>类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是 Java 数组，还需要一块用于记录数组长度的数据。</li>\n</ul>\n<p><strong>实例数据</strong> 是对象真正存储的有效信息，也就是各种类型字段内容。存储顺序受虚拟机分配策略参数（FieldsAllocationStyle）和字段在 Java 代码中定义顺序影响。</p>\n<ol>\n<li>HotSpot 虚拟机默认分配策略是 longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers），相同宽度的字段总被分配到一起</li>\n<li>在满足上一条件的前提下，在父类中定义的变量会出现在子类之前。如果 CompactFields 参数值为 true，则子类中较窄的变量也可能会插入到父类变量空隙之中。</li>\n</ol>\n<p><strong>对齐填充</strong> 不是必须存在的，因为 HotSpot 虚拟机内存管理系统要求对象起始地址必须是 8 字节的整数倍，因此当 <strong>实例数据</strong> 部分没有对齐时，就要通过对齐填充来补齐。</p>\n<h2 id=\"对象访问定位\"><a href=\"#对象访问定位\" class=\"headerlink\" title=\"对象访问定位\"></a>对象访问定位</h2><p>JVM 栈中保存的是 reference 数据，指向存放在堆中的对象，对象的访问（定位）方式取决于虚拟机具体实现，主流的有句柄和直接指针两种，它们各有优劣。</p>\n<h3 id=\"句柄\"><a href=\"#句柄\" class=\"headerlink\" title=\"句柄\"></a>句柄</h3><p>Java 堆中划分出一块内存来作为句柄池，reference 中保存的是句柄地址，句柄中包含对象实例数据与类型数据各自的具体地址信息。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180809_jvm_02/句柄.jpeg\" alt=\"句柄\" title=\"\">\n                </div>\n                <div class=\"image-caption\">句柄</div>\n            </figure> \n<p><strong>优点</strong> reference 中保存的是稳定的句柄地址，在对象被移动（比如 GC）时只会改变句柄中实例数据指针的地址， reference 本身不变。在对象频繁异动的场景里性能更好。</p>\n<h3 id=\"直接指针\"><a href=\"#直接指针\" class=\"headerlink\" title=\"直接指针\"></a>直接指针</h3><p>Java 堆对象头重保存类型数据信息，reference 直接指向对象地址。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180809_jvm_02/直接指针.jpeg\" alt=\"直接指针\" title=\"\">\n                </div>\n                <div class=\"image-caption\">直接指针</div>\n            </figure> \n<p><strong>优点</strong> 速度更快，节省了一次指针定位开销，在对象频繁访问的场景里性能更好。HotSpot VM 使用的是直接指针方式。</p>\n","categories":[],"tags":["读书笔记","JVM"]},{"title":"深入理解 Java 虚拟机（一）走近 Java","url":"https://lilei.pro/2018/08/09/JVM-Note-01/","content":"<blockquote>\n<p>最近阅读周志明的《深入理解 Java 虚拟机 JVM 高级特性与最佳实践》，以读书笔记的形式记录下所学所得，先给自己定个小目标，完成10篇笔记。</p>\n</blockquote>\n<blockquote>\n<p>世界上并没有完美的程序，但我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。</p>\n</blockquote>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Java 不仅仅是一门编程语言，更是一个由一系列计算机软件和规范形成的技术体系，这个技术体系提供了完整的用于软件开发和跨平台部署的支持环境。它有一系列优点：</p>\n<ul>\n<li>拥有一门结构严谨、面向对象的编程语言</li>\n<li>摆脱硬件平台束缚，实现“一次编写，处处运行”</li>\n<li>提供相对安全的内存管理和访问机制，避免了绝大部分内存泄露和指针越界</li>\n<li>实现热点代码检测和运行时编译及优化，使得 Java 应用能随着运行时间的增加而获取更高的性能</li>\n<li>有一套完善的应用程序接口，还有无数第三方类库实现各种功能</li>\n</ul>\n<h1 id=\"Java-技术体系\"><a href=\"#Java-技术体系\" class=\"headerlink\" title=\"Java 技术体系\"></a>Java 技术体系</h1><p><strong>按照组成部分来分</strong>，Sun 官方定义的 Java 技术体系包括以下几个方面内容</p>\n<ul>\n<li>Java 程序设计语言</li>\n<li>各种硬件平台上的 Java 虚拟机</li>\n<li>Class 文件格式</li>\n<li>Java API 类库</li>\n<li>来自商业机构和开源社区的第三方 Java 类库</li>\n</ul>\n<p><strong>JDK（Java Development Kit）</strong>：Java 程序设计语言 + Java 虚拟机 + Java API 类库，是支持 Java 程序开发的最小环境</p>\n<p><strong>JRE（Java Runtime Environment）</strong>：Java 虚拟机 + Java SE API，支持Java 程序运行的最小环境</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180809_jvm_01/Java技术体系.png\" alt=\"Java技术体系所包含的内容\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Java技术体系所包含的内容</div>\n            </figure>\n<p><strong>按照所服务的领域来分</strong>，Java 技术体系可以分为4个平台</p>\n<ul>\n<li>Java Card：支持一些 Java 小程序（Applets）运行在小内存设备上的平台</li>\n<li>Java ME（Micro Edition）：支持 Java 程序运行在移动终端（手机、PDA）平台，对 Java API 有所精简，并加入了针对移动终端的支持，旧称 J2ME</li>\n<li>Java SE（Standard Edition）：支持面向桌面级应用（如 Windows 下的应用程序）的 Java 平台，提供完整的 Java 核心 API，旧称 J2SE</li>\n<li>Java EE（Enterprise Edition）：支持面向多层架构的企业应用（如 ERP、CRM）的 Java 平台，除了提供 Java SE API 外，还对其做了大量补充以及部署支持，旧称 J2EE</li>\n</ul>\n<h1 id=\"Java-发展史\"><a href=\"#Java-发展史\" class=\"headerlink\" title=\"Java 发展史\"></a>Java 发展史</h1><ol>\n<li>1991 年 4 月，Oak（橡树）出现，目的在于开发一种能够在各种消费型电子产品（机顶盒、冰箱、收音机）上运行的程序架构，是为 Java 前身</li>\n<li>1995 年，Oak 正式更名为 Java，并且在 SunWorld 大会上正式发布 1.0 版本，同时提出“Write Once，Run Everywhere”口号</li>\n<li>1998 年，发布里程碑式的 1.2 版本，Sun 在这个版本中将 Java 按照服务领域拆分为三个方向：J2SE, J2ME, J2EE，并且第一次内置了 JIT 编译器，以及内置 Classic、HotSpot、Exact 三种 VM</li>\n<li>2002 年，发布第一个真正成熟的版本 1.4，同年出现 .NET</li>\n<li>2009 年，发布 1.7，代号 Dolphin 海豚</li>\n</ol>\n<h1 id=\"实践：编译-JDK\"><a href=\"#实践：编译-JDK\" class=\"headerlink\" title=\"实践：编译 JDK\"></a>实践：编译 JDK</h1><p>时间原因没有进行进行编译，只是把源码下载下来，日后有需要会补上</p>\n","categories":[],"tags":["读书笔记","JVM"]},{"title":"本周总结 20180723 ~ 20180729","url":"https://lilei.pro/2018/07/30/weekly-20180723-20180729/","content":"<blockquote>\n<p>你的痛苦是因为，包裹你心智的外壳，正在破裂毁伤。<br>你必须经历痛苦，正如果壳必须破裂，果仁才见阳光。</p>\n</blockquote>\n<p>刚刚度过七月的最后一周，这一周自己往返跑了两次杭州，一共面了5家公司，其中两家现场，三家电面。七月的杭州气温达到三十七度，比上海平均高出四五度，顶着烈日奔波在城东城西，这样的经历，还真是难得啊。</p>\n","categories":[],"tags":["周报"]},{"title":"面试知识整理 2018.07.29","url":"https://lilei.pro/2018/07/29/interview-180729/","content":"<h1 id=\"有什么手段可以减少APK体积\"><a href=\"#有什么手段可以减少APK体积\" class=\"headerlink\" title=\"有什么手段可以减少APK体积\"></a>有什么手段可以减少APK体积</h1><p>要回答这个问题，首先需要了解APK体积增大的原因，我们从这张经典的APK构建流程图开始分析。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190608_interview/apk_build.jpg\" alt=\"apk_build\" title=\"\">\n                </div>\n                <div class=\"image-caption\">apk_build</div>\n            </figure>\n<p>可以看到最终生成的 APK 里面，主要包含三部分内容：Java 源码编译出来的<code>.dex</code>文件，编译后的资源文件 &amp; 未经编译的<code>assets</code>目录，以及一些经 NDK 编译后生成的<code>.so</code>文件。下面针对这三方面给出优化的建议。</p>\n<h2 id=\"dex-文件\"><a href=\"#dex-文件\" class=\"headerlink\" title=\"dex 文件\"></a>dex 文件</h2><p>dex 文件包含了所有 Java 类编译出来类文件。从“数量”与“质量”两方面入手，我们可以削减类的数目，还可以减少类文件的大小。</p>\n<h3 id=\"开启-Proguard\"><a href=\"#开启-Proguard\" class=\"headerlink\" title=\"开启 Proguard\"></a>开启 Proguard</h3><p>这样可以在打包时去除没有使用到的类，以及缩短类和字段、方法的命名，从而减少 class 文件大小。需要注意的是，把要保留命名（比如反射）的类 keep 住。对于混淆后打包出来的 APK 应当进行充分的回归测试。</p>\n<h3 id=\"选择较小的适用于移动平台的第三方类库\"><a href=\"#选择较小的适用于移动平台的第三方类库\" class=\"headerlink\" title=\"选择较小的适用于移动平台的第三方类库\"></a>选择较小的适用于移动平台的第三方类库</h3><p>既可以减少了包体 size，也能减少方法数，从而避免 65535 问题。比如在接入 JSON 解析库时，比较常见的几种类库有：Gson（2.8.5，235Kb）、Jackson（2.9.5，三个 Jar，共 1.7Mb）、Fastjson（1.2.47，533Kb），在满足需求的前提下选择包体最小的 Gson。</p>\n<h3 id=\"定制第三方库\"><a href=\"#定制第三方库\" class=\"headerlink\" title=\"定制第三方库\"></a>定制第三方库</h3><p>对于开源的第三方库，如果项目里只用到其中 10% 甚至更少的功能，不妨仅将用到的源码拷贝至自己项目里，而不是通过 gradle 完整引入。</p>\n<h2 id=\"资源文件\"><a href=\"#资源文件\" class=\"headerlink\" title=\"资源文件\"></a>资源文件</h2><p>主要是图片、音视频等，处理不当的话一张图片可能就会增加 1Mb 的体积，因此必须谨慎对待资源文件，不要不加考虑地全盘接受设计师给出的切图。</p>\n<h3 id=\"压缩大小\"><a href=\"#压缩大小\" class=\"headerlink\" title=\"压缩大小\"></a>压缩大小</h3><p>大部分 png 图片是可以压缩的，你可以使用<a href=\"https://compresspng.com/\" target=\"_blank\" rel=\"noopener\">https://compresspng.com/</a>在线进行压缩。对于音视频，也要在保证效果的前提下，尽量缩减体积。</p>\n<h3 id=\"使用更易扩展的图片格式\"><a href=\"#使用更易扩展的图片格式\" class=\"headerlink\" title=\"使用更易扩展的图片格式\"></a>使用更易扩展的图片格式</h3><p>使用矢量图、.9 图代替高清切图，尤其是规则形状的背景、边框图片等。</p>\n<h3 id=\"使用-WebP-格式\"><a href=\"#使用-WebP-格式\" class=\"headerlink\" title=\"使用 WebP 格式\"></a>使用 WebP 格式</h3><p>WebP格式是有损压缩（像JPEG）且有透明通道（像PNG），且压缩率高于JPEG或PNG。在Android Studio中，能将BMP，JPG，PNG或者静态GIF图片转换成WebP格式。</p>\n<p>使用WebP文件格式也有一些缺点。第一，低于Android 3.2的版本不支持WebP，第二，WebP的解码时间比PNG长。</p>\n<h3 id=\"用代码代替图片\"><a href=\"#用代码代替图片\" class=\"headerlink\" title=\"用代码代替图片\"></a>用代码代替图片</h3><p>使用属性动画，而非帧动画。帧动画通常需要多张图片组合才能进行播放，此时通过代码实现缩放、旋转等动画是更好的选择；用 RotateDrawable 代替仅仅是方向不同的“内容相同”的图片；用 layer-list 来制作多层图片从而达到复用。</p>\n<h3 id=\"删除不再使用的资源文件\"><a href=\"#删除不再使用的资源文件\" class=\"headerlink\" title=\"删除不再使用的资源文件\"></a>删除不再使用的资源文件</h3><p>随着版本迭代，一些旧日需求引入的资源文件将不再使用，此时应当将它们删除。Android Studio 自带的 Lint 工具可以帮我们完成这件事。在 AS 的菜单中选择 Analyze -&gt; Inspect Code。分析需要一定时间，待分析完成后会在窗口展示结果。其中 Unused resources 即是未使用到的资源文件。</p>\n<p>不要忘了清理 assets 文件夹下不再使用的文件。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190608_interview/unused_res.png\" alt=\"unused_res\" title=\"\">\n                </div>\n                <div class=\"image-caption\">unused_res</div>\n            </figure>\n<p>删除资源是根治的方法，如果你想偷点懒，可以通过 shrinkResources 属性让编译器打包时自动剔除不再使用的资源，该属性需要与 proguard 同时开启。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">     release &#123;</span><br><span class=\"line\">          minifyEnabled <span class=\"keyword\">true</span></span><br><span class=\"line\">          shrinkResources <span class=\"keyword\">true</span></span><br><span class=\"line\">          proguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>), <span class=\"string\">'proguard-rules.pro'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想看看在激活自动缩减资源后 APK 缩减了多少，可以运行 shrinkReleaseResources 任务，这个任务会打印出包的大小缩减了多少。</p>\n<p>自动缩减资源有一个问题：它可能移除了过多的资源，特别是那些动态使用的资源肯定会被删除。为了防止这种情况，可以在 res/raw/ 下的 keep.xml 文件中定义这些例外。</p>\n<h3 id=\"放弃一些图片资源\"><a href=\"#放弃一些图片资源\" class=\"headerlink\" title=\"放弃一些图片资源\"></a>放弃一些图片资源</h3><p>Android 有 ldpi、mdhi、hdpi、xhdpi、xxhdpi、xxxhdpi 等多种分辨率格式，谨慎的人也许会针对分辨率提供一份切图，但我在这里像你建议，千万别这么做。</p>\n<ul>\n<li>一方面，Android 系统提供了兼容的处理方案，比如会把 hdpi 的图片缩放到 ldpi 使用。</li>\n<li>另一方面，在添加资源文件时应当考虑它所对应机型的占有率。比如绝大部分情况下不需要准备 ldpi 和 xxxhdpi 的图片，前者的手机早已过时，后者则是给 2K 屏幕使用的，目前市面上并不常见，也可以选择忽略。</li>\n</ul>\n<p>对于第三方 aar 引入的资源文件，也可以指定引入特定分辨率的，通过 gradle 配置实现这一点。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultConfig &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    resConfigs <span class=\"string\">\"en\"</span>, <span class=\"string\">\"de\"</span>, <span class=\"string\">\"fr\"</span>, <span class=\"string\">\"it\"</span> <span class=\"comment\">// 指定语言</span></span><br><span class=\"line\">    resConfigs <span class=\"string\">\"hdpi\"</span>, <span class=\"string\">\"xhdpi\"</span>, <span class=\"string\">\"xxhdpi\"</span> <span class=\"comment\">// 指定显示密度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"so-文件\"><a href=\"#so-文件\" class=\"headerlink\" title=\"so 文件\"></a>so 文件</h2><p>当我们项目里需要使用 NDK 时，会将编译生成的 .so 文件置于项目里面，当你解压一个 APK 时会发现它们的身影。有以下方法可以缩减它们所占的体积。</p>\n<h3 id=\"使用兼容指令集\"><a href=\"#使用兼容指令集\" class=\"headerlink\" title=\"使用兼容指令集\"></a>使用兼容指令集</h3><p>处理器的指令集通常是向下兼容的，比如[TODO]的指令集就可以兼容[TODO]，意味着你可以只提供一份[TODO]的 so（但我不建议这么做，因为更高版本的指令集可以提供更高的运行效率）。</p>\n<h3 id=\"去除完全用不到的指令集文件\"><a href=\"#去除完全用不到的指令集文件\" class=\"headerlink\" title=\"去除完全用不到的指令集文件\"></a>去除完全用不到的指令集文件</h3><p>比如 x86、x86_64，现在极少手机是使用 x86 的 CPU 架构了，你自然可以去除它们。需要注意的是，如果你想让 APP 在模拟器上运行，仍需要保留它们。</p>\n<p>在 gradle 文件的 defaultConfig 域下配置需要的 so：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaultConfig &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ... ...</span></span><br><span class=\"line\">        ndk &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置支持的SO库架构</span></span><br><span class=\"line\">            abiFilters <span class=\"string\">'arm64-v8a'</span>, <span class=\"string\">'armeabi'</span> <span class=\"comment\">//, 'x86', ,'x86_64', 'armeabi-v7a</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其它手段\"><a href=\"#其它手段\" class=\"headerlink\" title=\"其它手段\"></a>其它手段</h2><h3 id=\"插件化\"><a href=\"#插件化\" class=\"headerlink\" title=\"插件化\"></a>插件化</h3><p>插件化技术自 2015 年井喷后，一直是 Android 面试中长盛不衰的面试题。发布 APP 时只发布包含必要功能的宿主，子模块功能以插件的形式下发。也是一个有效降低 APK 体积的方法。但提高了项目的开发难度和维护成本，同时还需要一个成熟的发布后台。</p>\n<h3 id=\"APK-分割\"><a href=\"#APK-分割\" class=\"headerlink\" title=\"APK 分割\"></a>APK 分割</h3><p>可以通过在 gradle 配置中定义一个 splits 代码块来配置分割，目前支持 density 分割和 ABI 分割。比如你可以通过配置，在一次打包中生成以下 APK，进而将它们分别发布给不同机型。</p>\n<p>density 分割</p>\n<ul>\n<li>app-hdpi-release.apk</li>\n<li>app-universal-release.apk</li>\n<li>app-xhdpi-release.apk</li>\n<li>app-xxhdpi-release.apk</li>\n<li>app-xxxhdpi-release.apk</li>\n</ul>\n<p>ABI 分割</p>\n<ul>\n<li>app-armeabi-v7a-debug.apk</li>\n<li>app-mips-debug.apk</li>\n<li>app-x86-debug.apk</li>\n</ul>\n<h1 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h1><p>这个 Title 太大，我会单独撰文加以讲解。</p>\n<h1 id=\"插件化-1\"><a href=\"#插件化-1\" class=\"headerlink\" title=\"插件化\"></a>插件化</h1><p>这个 Title 太大，我同样会单独撰文加以讲解。上个月刚读完包建强所著的《Android 插件话开发指南》一书，所获颇丰。后面我会将书中的重点内容总结成文字笔记分享在博客里面。</p>\n<h1 id=\"GET-和-POST-区别\"><a href=\"#GET-和-POST-区别\" class=\"headerlink\" title=\"GET 和 POST 区别\"></a>GET 和 POST 区别</h1><h2 id=\"本质上无区别\"><a href=\"#本质上无区别\" class=\"headerlink\" title=\"本质上无区别\"></a>本质上无区别</h2><p>首先，GET 和 POST 都是HTTP 协议中发送请求的方法，这两者底层的协议也都是 TCP/IP，这两者并没有本质上的区别。</p>\n<p>从底层原理上，<strong>GET 产生了一个 TCP 数据包，POST 产生了两个 TCP 数据包。</strong></p>\n<p>对于 GET 请求，浏览器把 HTTP Header 和 Data 一同发送出去，服务器相应 200。</p>\n<p>对于 POST 请求，浏览器 先发送 HTTP Header，服务器响应 100（continue），浏览器再发送 Data，服务器响应 200（返回数据）。</p>\n<h2 id=\"是否可以互换\"><a href=\"#是否可以互换\" class=\"headerlink\" title=\"是否可以互换\"></a>是否可以互换</h2><p>那么是否可以把所有的 POST 请求都改成 GET，以提高网站相应效率呢？答案是不行。</p>\n<ol>\n<li>两者具有不同的语义。</li>\n<li>在网络环境好的情况下，两次请求与一次请求在响应时间上相差微乎其微；在网络情况差的情况下，两次请求更有助于进行数据完整性校验。</li>\n<li>并非所有浏览器在 POST 时都发送两个包，Firefox 就只发送一次。</li>\n</ol>\n<h2 id=\"其它一些补充\"><a href=\"#其它一些补充\" class=\"headerlink\" title=\"其它一些补充\"></a>其它一些补充</h2><ul>\n<li>浏览器回退：GET在浏览器回退时是无害的（幂等性），而POST会再次提交请求。</li>\n<li>Bookmark：GET产生的URL地址可以被Bookmark，而POST不可以。</li>\n<li>Cache：GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>编码：GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>参数保存：GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>参数长度：GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>参数类型：对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>参数安全：GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>参数传递：GET参数通过URL传递，POST放在Request body中。</li>\n</ul>\n<h1 id=\"LeakCanary-检查内存泄漏的原理\"><a href=\"#LeakCanary-检查内存泄漏的原理\" class=\"headerlink\" title=\"LeakCanary 检查内存泄漏的原理\"></a>LeakCanary 检查内存泄漏的原理</h1><h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><p>JVM 运行时内存分区，内存模型，垃圾回收算法，GC Roots，强软弱虚引用。</p>\n<blockquote>\n<p>A small leak will sink a great ship.<br>– Benjamin Franklin</p>\n</blockquote>\n<p><a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"noopener\">LeakCanary</a> 是由Square公司开源的内存泄漏检测工具。Logo 是一只小黄鸡。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f424.png\" alt=\"LeakCanaryLogo\" title=\"\">\n                </div>\n                <div class=\"image-caption\">LeakCanaryLogo</div>\n            </figure>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><ol>\n<li>在 Activity.onDestroy 方法里手动触发 GC。</li>\n<li>利用 ReferenceQueue + WeakReference 判断是否有未释放的引用。</li>\n<li>结合  dump memory 得到的 hprof 文件，利用 <a href=\"https://github.com/square/haha\" target=\"_blank\" rel=\"noopener\">HaHa(Headless Android Heap Analyzer)</a> 分析出泄漏位置。</li>\n</ol>\n<h2 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h2><h3 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190608_interview/leakcanary整体流程.jpg\" alt=\"leakcanary整体流程\" title=\"\">\n                </div>\n                <div class=\"image-caption\">leakcanary整体流程</div>\n            </figure>\n<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>需要在 Application 类中启用 LeakCanary。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 安装</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!LeakCanary.isInAnalyzerProcess(WeiboApplication.<span class=\"keyword\">this</span>)) &#123;</span><br><span class=\"line\">  LeakCanary.install(WeiboApplication.<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RefWatcher <span class=\"title\">install</span><span class=\"params\">(Application application)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((AndroidRefWatcherBuilder) refWatcher(application)</span><br><span class=\"line\"> .listenerServiceClass(DisplayLeakService.class).excludedRefs(AndroidExcludedRefs.createAppDefaults().build())) <span class=\"comment\">//配置监听器及分析数据格式</span></span><br><span class=\"line\">  .buildAndInstall();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LeakCanary 会运行在两个进程：App进程中运行监听任务，工作进程中运行分析任务。</p>\n<h3 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h3><p>在<code>install</code>方法里，创建了一个<code>RefWatcher</code>对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> RefWatcher <span class=\"title\">buildAndInstall</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    RefWatcher refWatcher = <span class=\"keyword\">this</span>.build();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(refWatcher != RefWatcher.DISABLED) &#123;</span><br><span class=\"line\">        LeakCanary.enableDisplayLeakActivity(<span class=\"keyword\">this</span>.context);</span><br><span class=\"line\">        ActivityRefWatcher.install((Application)<span class=\"keyword\">this</span>.context, refWatcher);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> refWatcher;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">install</span><span class=\"params\">(Application application, RefWatcher refWatcher)</span> </span>&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">new</span> ActivityRefWatcher(application, refWatcher)).watchActivities();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivityLifecycleCallbacks lifecycleCallbacks = <span class=\"keyword\">new</span> ActivityLifecycleCallbacks() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStarted</span><span class=\"params\">(Activity activity)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResumed</span><span class=\"params\">(Activity activity)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityPaused</span><span class=\"params\">(Activity activity)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityStopped</span><span class=\"params\">(Activity activity)</span> </span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivitySaveInstanceState</span><span class=\"params\">(Activity activity, Bundle outState)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        ActivityRefWatcher.<span class=\"keyword\">this</span>.onActivityDestroyed(activity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onActivityDestroyed</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refWatcher.watch(activity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LeakCanary 通过<code>Application.registerActivityLifecycleCallbacks</code>方法，注册了 Activity 生命周期的监听，在监测到<code>onDestroyed</code>调用时，触发<code>RefWatcher.watch</code>方法。下面是该方法的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">watch</span><span class=\"params\">(Object watchedReference, String referenceName)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != DISABLED) &#123;</span><br><span class=\"line\">      Preconditions.checkNotNull(watchedReference, <span class=\"string\">\"watchedReference\"</span>);</span><br><span class=\"line\">      Preconditions.checkNotNull(referenceName, <span class=\"string\">\"referenceName\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">long</span> watchStartNanoTime = System.nanoTime();</span><br><span class=\"line\">      String key = UUID.randomUUID().toString();<span class=\"comment\">//保证key的唯一性</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.retainedKeys.add(key);</span><br><span class=\"line\">      KeyedWeakReference reference = <span class=\"keyword\">new</span> KeyedWeakReference(watchedReference, key, referenceName, <span class=\"keyword\">this</span>.queue);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.ensureGoneAsync(watchStartNanoTime, reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyedWeakReference</span> <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String key;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\">  </span><br><span class=\"line\">  KeyedWeakReference(Object referent, String key, String name, ReferenceQueue&lt;Object&gt; referenceQueue) &#123; <span class=\"comment\">//ReferenceQueue类监听回收情况</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(Preconditions.checkNotNull(referent, <span class=\"string\">\"referent\"</span>), (ReferenceQueue)Preconditions.checkNotNull(referenceQueue, <span class=\"string\">\"referenceQueue\"</span>));</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = (String)Preconditions.checkNotNull(key, <span class=\"string\">\"key\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = (String)Preconditions.checkNotNull(name, <span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureGoneAsync</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> watchStartNanoTime, <span class=\"keyword\">final</span> KeyedWeakReference reference)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.watchExecutor.execute(<span class=\"keyword\">new</span> Retryable() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> RefWatcher.<span class=\"keyword\">this</span>.ensureGone(reference, watchStartNanoTime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类<code>KeyedWeakReference</code>是<code>WeakReference</code>，这里利用了<code>ReferenceQueue</code>来监听 GC 后的回收情况。<code>ReferenceQueue</code>的原理是，当 GC 检测到对象生命周期结束时，会将其添加到 ReferenceQueue 中。当 GC 过后对象一直不被加入 ReferenceQueue，说明它可能存在内存泄漏。</p>\n<p>正是利用 ReferenceQueue 这一特性，LeakCanary 实现了对对象是否被释放的监控。</p>\n<h4 id=\"监测-Fragment-泄漏\"><a href=\"#监测-Fragment-泄漏\" class=\"headerlink\" title=\"监测 Fragment 泄漏\"></a>监测 Fragment 泄漏</h4><p>上文中看到只在 Activity.onDestroy 中进行检测，如果需要检测 Fragment 时，应当手动在 Fragment.onDestroy 中创建一个 RefWatcher 对象，并调用 watch 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    RefWatcher refWatcher = ExampleApplication.getRefWatcher(getActivity());</span><br><span class=\"line\">    refWatcher.watch(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ensureGone\"><a href=\"#ensureGone\" class=\"headerlink\" title=\"ensureGone\"></a>ensureGone</h3><p>是检测回收的核心代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Result <span class=\"title\">ensureGone</span><span class=\"params\">(KeyedWeakReference reference, <span class=\"keyword\">long</span> watchStartNanoTime)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> gcStartNanoTime = System.nanoTime();</span><br><span class=\"line\">  <span class=\"keyword\">long</span> watchDurationMs = TimeUnit.NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeWeaklyReachableReferences(); <span class=\"comment\">//先将引用尝试从队列中poll出来</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.debuggerControl.isDebuggerAttached()) &#123; <span class=\"comment\">//规避调试模式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.RETRY;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.gone(reference)) &#123; <span class=\"comment\">//检测是否已经回收</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result.DONE;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果没有被回收，则手动GC</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.gcTrigger.runGc();<span class=\"comment\">//手动GC方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.removeWeaklyReachableReferences();<span class=\"comment\">//再次尝试poll，检测是否被回收</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"keyword\">this</span>.gone(reference)) &#123; <span class=\"comment\">// 还没有被回收，则dump堆信息，调起分析进程进行分析</span></span><br><span class=\"line\">      <span class=\"keyword\">long</span> startDumpHeap = System.nanoTime();</span><br><span class=\"line\">      <span class=\"keyword\">long</span> gcDurationMs = TimeUnit.NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);</span><br><span class=\"line\">      File heapDumpFile = <span class=\"keyword\">this</span>.heapDumper.dumpHeap();</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(heapDumpFile == HeapDumper.RETRY_LATER) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.RETRY;<span class=\"comment\">//需要重试</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">long</span> heapDumpDurationMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.heapdumpListener.analyze(<span class=\"keyword\">new</span> HeapDump(heapDumpFile, reference.key, reference.name, <span class=\"keyword\">this</span>.excludedRefs, watchDurationMs, gcDurationMs, heapDumpDurationMs));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Result.DONE;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">gone</span><span class=\"params\">(KeyedWeakReference reference)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !<span class=\"keyword\">this</span>.retainedKeys.contains(reference.key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">removeWeaklyReachableReferences</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  KeyedWeakReference ref;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>((ref = (KeyedWeakReference)<span class=\"keyword\">this</span>.queue.poll()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.retainedKeys.remove(ref.key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ensureGone</code>方法通过检测<code>referenceQueue</code>队列的引用情况，来判断回收情况，通过手动 GC 来进一步确认回收情况。这是一个耗时过程，运行在<code>WatchExecutor</code>中。</p>\n<p>LeakCanary 在主线程空闲时候执行检测任务，代码位于<code>AndroidWatchExecutor</code>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidWatchExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">WatchExecutor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LEAK_CANARY_THREAD_NAME = <span class=\"string\">\"LeakCanary-Heap-Dump\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler mainHandler = <span class=\"keyword\">new</span> Handler(Looper.getMainLooper());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Handler backgroundHandler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> initialDelayMillis;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxBackoffFactor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AndroidWatchExecutor</span><span class=\"params\">(<span class=\"keyword\">long</span> initialDelayMillis)</span> </span>&#123;</span><br><span class=\"line\">        HandlerThread handlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"LeakCanary-Heap-Dump\"</span>);</span><br><span class=\"line\">        handlerThread.start();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.backgroundHandler = <span class=\"keyword\">new</span> Handler(handlerThread.getLooper());</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.initialDelayMillis = initialDelayMillis;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxBackoffFactor = <span class=\"number\">9223372036854775807L</span> / initialDelayMillis;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Retryable retryable)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Looper.getMainLooper().getThread() == Thread.currentThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.waitForIdle(retryable, <span class=\"number\">0</span>);<span class=\"comment\">//需要在主线程中检测</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.postWaitForIdle(retryable, <span class=\"number\">0</span>);<span class=\"comment\">//post到主线程</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postWaitForIdle</span><span class=\"params\">(<span class=\"keyword\">final</span> Retryable retryable, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> failedAttempts)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mainHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                AndroidWatchExecutor.<span class=\"keyword\">this</span>.waitForIdle(retryable, failedAttempts);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">waitForIdle</span><span class=\"params\">(<span class=\"keyword\">final</span> Retryable retryable, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> failedAttempts)</span> </span>&#123;</span><br><span class=\"line\">        Looper.myQueue().addIdleHandler(<span class=\"keyword\">new</span> IdleHandler() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">queueIdle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                AndroidWatchExecutor.<span class=\"keyword\">this</span>.postToBackgroundWithDelay(retryable, failedAttempts);<span class=\"comment\">//切换到子线程</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postToBackgroundWithDelay</span><span class=\"params\">(<span class=\"keyword\">final</span> Retryable retryable, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> failedAttempts)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> exponentialBackoffFactor = (<span class=\"keyword\">long</span>)Math.min(Math.pow(<span class=\"number\">2.0</span>D, (<span class=\"keyword\">double</span>)failedAttempts), (<span class=\"keyword\">double</span>)<span class=\"keyword\">this</span>.maxBackoffFactor); <span class=\"comment\">// 二进制退让算法</span></span><br><span class=\"line\">        <span class=\"keyword\">long</span> delayMillis = <span class=\"keyword\">this</span>.initialDelayMillis * exponentialBackoffFactor;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.backgroundHandler.postDelayed(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                Result result = retryable.run();<span class=\"comment\">//RefWatcher.this.ensureGone(reference, watchStartNanoTime)执行</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result == Result.RETRY) &#123;</span><br><span class=\"line\">                    AndroidWatchExecutor.<span class=\"keyword\">this</span>.postWaitForIdle(retryable, failedAttempts + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, delayMillis);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了<code>MessageQueue.addIdleHandler</code>方法，Looper 中的 MessageQueue 有个<code>mIdleHandlers</code>队列，在获取下个要执行的 Message 时，如果没有发现可执行的 Message，就会回调<code>queueIdle()</code>方法，如果<code>queueIdle()</code>返回<code>false</code>，则移除该 IdleHandler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pendingIdleHandlerCount = -<span class=\"number\">1</span>; <span class=\"comment\">// -1 only during first iteration</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">       \t\t···</span><br><span class=\"line\">       \t\t···<span class=\"comment\">//省略部分消息查找代码</span></span><br><span class=\"line\">       \t\t</span><br><span class=\"line\">       \t\t<span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class=\"line\">                    nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ···</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No more messages.</span></span><br><span class=\"line\">                nextPollTimeoutMillis = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       \t\t</span><br><span class=\"line\">            <span class=\"comment\">// If first time idle, then get the number of idlers to run.</span></span><br><span class=\"line\">            <span class=\"comment\">// Idle handles only run if the queue is empty or if the first message</span></span><br><span class=\"line\">            <span class=\"comment\">// in the queue (possibly a barrier) is due to be handled in the future.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                    &amp;&amp; (mMessages == <span class=\"keyword\">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class=\"line\">                pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pendingIdleHandlerCount &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class=\"line\">                mBlocked = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mPendingIdleHandlers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mPendingIdleHandlers = <span class=\"keyword\">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class=\"number\">4</span>)];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Run the idle handlers.</span></span><br><span class=\"line\">        <span class=\"comment\">// We only ever reach this code block during the first iteration.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class=\"line\">            mPendingIdleHandlers[i] = <span class=\"keyword\">null</span>; <span class=\"comment\">// release the reference to the handler</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> keep = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                keep = idler.queueIdle();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                Log.wtf(TAG, <span class=\"string\">\"IdleHandler threw exception\"</span>, t);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!keep) &#123;<span class=\"comment\">//返回false，则从队列移除，下次空闲不会调用。</span></span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">                    mIdleHandlers.remove(idler);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Reset the idle handler count to 0 so we do not run them again.</span></span><br><span class=\"line\">        pendingIdleHandlerCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// While calling an idle handler, a new message could have been delivered</span></span><br><span class=\"line\">        <span class=\"comment\">// so go back and look again for a pending message without waiting.</span></span><br><span class=\"line\">        nextPollTimeoutMillis = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>利用 VMDebug+HaHa 完成分析任务。</p>\n<ol>\n<li>在后台线程检查引用是否被清除，如果没有，调用 GC。</li>\n<li>如果引用还是未被清除，把 heap 内存 dump 到 APP 对应的文件系统中的一个 <code>.hprof</code> 文件中。</li>\n<li>在另外一个进程中的 <code>HeapAnalyzerService</code> 有一个 <code>HeapAnalyzer</code> 使用<a href=\"https://github.com/square/haha\" target=\"_blank\" rel=\"noopener\">HAHA</a> 解析这个文件。</li>\n<li>得益于唯一的 reference key, <code>HeapAnalyzer</code> 找到 <code>KeyedWeakReference</code>，定位内存泄漏。</li>\n<li><code>HeapAnalyzer</code> 计算 <em>到 GC roots 的最短强引用路径</em>，并确定是否是泄漏。如果是的话，建立导致泄漏的引用链。</li>\n<li>引用链传递到 APP 进程中的 <code>DisplayLeakService</code>， 并以通知的形式展示出来。</li>\n</ol>\n<h4 id=\"HeapAnalyzerService\"><a href=\"#HeapAnalyzerService\" class=\"headerlink\" title=\"HeapAnalyzerService\"></a>HeapAnalyzerService</h4><p>是一个 IntentService，调用 HAHA 中的<code>HeapAnalyzer</code>对 hprof 文件进行分析，找出泄露点。由于运行在不同进程，通过 Intent 传递数据。最终将结果发回给监听器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (intent == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">// intent 为空直接返回</span></span><br><span class=\"line\">    CanaryLog.d(<span class=\"string\">\"HeapAnalyzerService received a null intent, ignoring.\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  String listenerClassName = intent.getStringExtra(LISTENER_CLASS_EXTRA);<span class=\"comment\">//获取回调类的类名</span></span><br><span class=\"line\">  HeapDump heapDump = (HeapDump) intent.getSerializableExtra(HEAPDUMP_EXTRA);<span class=\"comment\">//获取 HeapDump </span></span><br><span class=\"line\">  HeapAnalyzer heapAnalyzer = <span class=\"keyword\">new</span> HeapAnalyzer(heapDump.excludedRefs);<span class=\"comment\">//创建 HeapAnalyzer</span></span><br><span class=\"line\">  AnalysisResult result = heapAnalyzer.checkForLeak(heapDump.heapDumpFile, heapDump.referenceKey);<span class=\"comment\">//检查泄漏（通过 HAHA 来完成），并获取结果</span></span><br><span class=\"line\">  AbstractAnalysisResultService.sendResultToListener(<span class=\"keyword\">this</span>, listenerClassName, heapDump, result);<span class=\"comment\">//将分析结果发送给监听器</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/5ab8d3d46fb9a028ca52f813\" target=\"_blank\" rel=\"noopener\">掘金：Java 内存问题及 LeakCanary 原理分析</a><br><a href=\"https://ivanljt.github.io/blog/2017/12/15/%E6%8B%86%E8%BD%AE%E5%AD%90%E7%B3%BB%E5%88%97%E2%80%94%E2%80%94LeakCanary%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/\" target=\"_blank\" rel=\"noopener\">拆轮子系列——LeakCanary工作原理</a></p>\n<h1 id=\"创建一个对象时内部流程\"><a href=\"#创建一个对象时内部流程\" class=\"headerlink\" title=\"创建一个对象时内部流程\"></a>创建一个对象时内部流程</h1><p>Java 在 new 一个对象的时候，会先检查对象所属的类是否已经加载到内存。如果没有加载，则会先执行<strong>类的加载过程</strong>；如果已经加载，则直接执行<strong>对象的创建过程</strong>。</p>\n<h2 id=\"类的加载过程\"><a href=\"#类的加载过程\" class=\"headerlink\" title=\"类的加载过程\"></a>类的加载过程</h2><p>Java 使用<strong>双亲委派模型</strong>来进行类的加载。</p>\n<p>如果一个类加载器（ClassLoader）收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此。因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需要加载的类）时，子加载器才会尝试自己去加载。</p>\n<p>这样做的好处是能够确保一个类的全局唯一性。因为类的唯一性由加载器+类名共同决定。使用<strong>双亲委派模型</strong>保证了同一个类始终由同一加载器进行加载。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/190608_interview/类加载过程.jpg\" alt=\"类加载过程\" title=\"\">\n                </div>\n                <div class=\"image-caption\">类加载过程</div>\n            </figure>\n<h3 id=\"1-加载\"><a href=\"#1-加载\" class=\"headerlink\" title=\"1. 加载\"></a>1. 加载</h3><p>由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到 JVM 内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的 java.lang.Class 对象实例。</p>\n<h3 id=\"2-验证\"><a href=\"#2-验证\" class=\"headerlink\" title=\"2. 验证\"></a>2. 验证</h3><ul>\n<li>格式验证：验证是否符合class文件规范。</li>\n<li>语义验证：检查一个被标记为final的类型是否包含子类；检查一个类中的final方法是否被子类进行重写；确保父类和子类之间没有不兼容的一些方法声明（比如方法签名相同，但方法的返回值不同）。</li>\n<li>操作验证：在操作数栈中的数据必须进行正确的操作，对常量池中的各种符号引用执行验证（通常在解析阶段执行，检查是否可以通过符号引用中描述的全限定名定位到指定类型上，以及类成员信息的访问修饰符是否允许访问等）。</li>\n</ul>\n<h3 id=\"3-准备\"><a href=\"#3-准备\" class=\"headerlink\" title=\"3. 准备\"></a>3. 准备</h3><p>为类中的所有静态变量分配内存空间，并为其设置一个初始值；被final修饰的static变量（常量），会直接赋值。</p>\n<h3 id=\"4-解析\"><a href=\"#4-解析\" class=\"headerlink\" title=\"4. 解析\"></a>4. 解析</h3><p>将常量池中的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法），这个可以在初始化之后再执行。</p>\n<p>解析需要静态绑定的内容。（所有不会被重写的方法和域都会被静态绑定）</p>\n<p>以上 2、3、4 三个阶段又合称为<strong>链接阶段</strong>，链接阶段要做的是将加载到 JVM 中的二进制字节流的类数据信息合并到 JVM 的运行时状态中。</p>\n<h3 id=\"5-初始化（父父子子）\"><a href=\"#5-初始化（父父子子）\" class=\"headerlink\" title=\"5. 初始化（父父子子）\"></a>5. 初始化（父父子子）</h3><p>5.1 赋值静态变量。</p>\n<p>5.2 执行静态代码块。</p>\n<p>因为子类存在对父类的依赖，所以<strong>类的加载顺序是先加载父类后加载子类，初始化也一样</strong>。</p>\n<p>最终，方法区会存储当前类类信息，包括类的<strong>静态变量</strong>、<strong>类初始化代码</strong>（<strong>定义静态变量时的赋值语句 </strong>和 <strong>静态初始化代码块</strong>）、<strong>实例变量定义</strong>、<strong>实例初始化代码</strong>（<strong>定义实例变量时的赋值语句实例代码块</strong>和<strong>构造方法</strong>）和<strong>实例方法</strong>，还有<strong>父类的类信息引用</strong>。</p>\n<h2 id=\"对象创建过程\"><a href=\"#对象创建过程\" class=\"headerlink\" title=\"对象创建过程\"></a>对象创建过程</h2><h3 id=\"1-在堆区分配对象需要的内存\"><a href=\"#1-在堆区分配对象需要的内存\" class=\"headerlink\" title=\"1. 在堆区分配对象需要的内存\"></a>1. 在堆区分配对象需要的内存</h3><p>包括本类与父类所有实例变量，不包括静态变量。</p>\n<h3 id=\"2-为实例变量赋默认值\"><a href=\"#2-为实例变量赋默认值\" class=\"headerlink\" title=\"2. 为实例变量赋默认值\"></a>2. 为实例变量赋默认值</h3><p>将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值。</p>\n<h3 id=\"3-执行实例初始化代码\"><a href=\"#3-执行实例初始化代码\" class=\"headerlink\" title=\"3. 执行实例初始化代码\"></a>3. 执行实例初始化代码</h3><p>初始化顺序是先初始化父类再初始化子类，初始化时先执行<strong>实例代码块</strong>然后是<strong>构造方法</strong>。</p>\n<p>如果我们对实例变量直接赋值或者使用实例代码块赋值，那么编译器会将其中的代码放到类的构造函数中去，并且这些代码会被放在对超类构造函数的调用语句<strong>之后</strong>(Java要求构造函数的第一条语句必须是超类构造函数的调用语句)，构造函数本身的代码<strong>之前</strong>。</p>\n<p> 如果有类似于Child c = new Child()形式的c引用的话，在栈区定义Child类型引用变量c，然后将堆区对象的地址赋值给它。</p>\n<p>需要注意的是，<strong>每个子类对象持有父类对象的引用</strong>，可在内部通过 super 关键字来调用父类方法，但在外部不可访问。并且子类对象创建时只是<strong>调用父类构造函数</strong>，并非<strong>创建父类对象</strong>。</p>\n<p>Java 要求在实例化类之前，必须先实例化其超类，以保证所创建实例的完整性。如果我们既没有调用其他的构造函数，也没有显式调用超类的构造函数，那么编译器会为我们自动生成一个对超类构造函数的调用。</p>\n<h2 id=\"虚方法表\"><a href=\"#虚方法表\" class=\"headerlink\" title=\"虚方法表\"></a>虚方法表</h2><p>通过实例引用调用实例方法的时候，先从方法区中对象的实际类型信息找，找不到的话再去父类类型信息中找。</p>\n<p>如果继承的层次比较深，要调用的方法位于比较上层的父类，则调用的效率是比较低的，因为每次调用都要经过很多次查找。这时候大多系统会采用一种称为<strong>虚方法表</strong>的方法来优化调用的效率。</p>\n<p>所谓虚方法表，就是在类加载的时候，为每个类创建一个表，这个表包括该类的对象所有动态绑定的方法及其地址，包括父类的方法，但一个方法只有一条记录，子类重写了父类方法后只会保留子类的。当通过对象动态绑定方法的时候，只需要查找这个表就可以了，而不需要挨个查找每个父类。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><h3 id=\"实例初始化不一定要在类初始化结束之后才开始初始化\"><a href=\"#实例初始化不一定要在类初始化结束之后才开始初始化\" class=\"headerlink\" title=\"实例初始化不一定要在类初始化结束之后才开始初始化\"></a>实例初始化不一定要在类初始化结束之后才开始初始化</h3><ul>\n<li>类初始化<code>&lt;clinit&gt;()</code></li>\n<li>实例初始化<code>&lt;init&gt;()</code></li>\n</ul>\n<p>在Java中， 创建一个对象常常需要经历如下几个过程：</p>\n<ol>\n<li>父类的类构造器<code>&lt;clinit&gt;()</code></li>\n<li>子类的类构造器<code>&lt;clinit&gt;()</code></li>\n<li>父类的成员变量和实例代码块</li>\n<li>父类的构造函数</li>\n<li>子类的成员变量和实例代码块</li>\n<li>子类的构造函数。</li>\n</ol>\n<p>你可以使用 <a href=\"https://www.tutorialspoint.com/compile_java_online.php\" target=\"_blank\" rel=\"noopener\">https://www.tutorialspoint.com/compile_java_online.php</a> 进行在线验证。</p>\n<h3 id=\"一道测验题\"><a href=\"#一道测验题\" class=\"headerlink\" title=\"一道测验题\"></a>一道测验题</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        staticFunction();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> StaticTest st = <span class=\"keyword\">new</span> StaticTest();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;   <span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;       <span class=\"comment\">// 实例代码块</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    StaticTest() &#123;    <span class=\"comment\">// 实例构造器</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"a=\"</span> + a + <span class=\"string\">\",b=\"</span> + b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">staticFunction</span><span class=\"params\">()</span> </span>&#123;   <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"4\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">110</span>;    <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> b = <span class=\"number\">112</span>;     <span class=\"comment\">// 静态变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Output: </span></span><br><span class=\"line\"><span class=\"comment\">        2</span></span><br><span class=\"line\"><span class=\"comment\">        3</span></span><br><span class=\"line\"><span class=\"comment\">        a=110,b=0</span></span><br><span class=\"line\"><span class=\"comment\">        1</span></span><br><span class=\"line\"><span class=\"comment\">        4</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"另一道测验题\"><a href=\"#另一道测验题\" class=\"headerlink\" title=\"另一道测验题\"></a>另一道测验题</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Foo() &#123;</span><br><span class=\"line\">        System.out.println(i);             </span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = getValue();</span><br><span class=\"line\">        System.out.println(x);            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//子类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Bar() &#123;</span><br><span class=\"line\">        j = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConstructorExample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">        Bar bar = <span class=\"keyword\">new</span> Bar();</span><br><span class=\"line\">        System.out.println(bar.getValue());        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Output:</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">0</span></span><br><span class=\"line\"><span class=\"comment\">2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考-1\"><a href=\"#参考-1\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/JackPn/p/9386182.html\" target=\"_blank\" rel=\"noopener\">博客园 - java new 一个对象的过程中发生了什么</a></li>\n<li><a href=\"https://blog.csdn.net/justloveyou_/article/details/72466105\" target=\"_blank\" rel=\"noopener\">CSDN - JVM类生命周期概述：加载时机与加载过程</a></li>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-clobj-init/index.html\" target=\"_blank\" rel=\"noopener\">IBM - 解析 Java 类和对象的初始化过程</a></li>\n</ul>\n","categories":[],"tags":["Android","面试"]},{"title":"西虹市首富","url":"https://lilei.pro/2018/07/28/hello-mr-billionaire/","content":"<blockquote>\n<p>不给我生一百个孩子你都对不起我！</p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180728_hello_mr_billinaire/hello_mr_billionaire.jpg\" alt=\"JVM\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JVM</div>\n            </figure>\n<p>开心麻花很擅长抓住平凡人的心里的爽点，和网络小说的套路一样，资质平平屡遭白眼的男主角，机缘巧合之下得到一笔巨大的财富/绝世的武功，一路干翻仇家，将曾经不把他放在眼里的对头们一一踩在脚下。最后举目四顾遗世独立，感到无敌是多么寂寞，甘愿自废武功散尽家财，做回一个普通人。</p>\n<p>《夏洛特烦恼》是这样，《西虹市首富》也如此。</p>\n<p>十亿人民币，首富口中的“小目标”x10，普通人一辈子别说赚这么多钱，能见到一次恐怕都是三生有幸。所以开心麻花拍了这样一部电影，让我们这些平凡人看到，原来十亿人民币可以堆满两百平的屋子，原来有钱人可以吃饭不吃主食只吃龙虾松茸，原来有钱人可以请到王力宏为他开一场私人演唱会，原来有钱人做的决策就算狗屁不通也能让他的钱越滚越多……</p>\n<p>以后老子也是见过十亿人民币的人了，十亿人民币，现金。</p>\n<p>不论情怀还是包袱，这部电影比起《夏洛特烦恼》都落于下风，除了王力宏的出场，让影院里响起一片惊叹之声。我个人对开心麻花几部电影的排名是：</p>\n<ol>\n<li>《夏洛特烦恼》</li>\n<li>《驴得水》</li>\n<li>《西红柿首富》</li>\n<li>《羞羞的铁拳》</li>\n</ol>\n<p>2018.07.28@上影徐汇日月光店</p>\n","categories":[],"tags":["电影"]},{"title":"我不是药神","url":"https://lilei.pro/2018/07/27/dying-to-survive/","content":"<blockquote>\n<p>我希望今后会越来越好，我相信会的。</p>\n</blockquote>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180727_dying_to_survive/吕受益.webp\" alt=\"吕受益\" title=\"\">\n                </div>\n                <div class=\"image-caption\">吕受益</div>\n            </figure>\n<p>如果没有事先从朋友圈里得到铺垫，在看电影前半段，直到徐峥扮演的程勇来到吕受益家中做客时，自己几乎要以为这是一部类似“X囧”的喜剧片。不论从节奏、台词和剧情上来看，都太像了。浑不吝的保健品店老板，戴着蛤蟆镜鬼头鬼脑让人想不起他是病人的吕受益，满嘴英文一本正经的老神父，还有夜店女王这个颜值担当，以及无口黄毛小酷哥。多好的西天取经五人组。</p>\n<p>但徐峥毕竟是徐峥，拍过《心花路放》这种喜剧外壳的公路文艺片。他有野心，更有能力。</p>\n<p>于是在看到警察突袭白血病人旅馆，拘留了一屋子人，却没有一个供出程勇，老人白发苍苍，向警官哭诉着被疾病剥夺的一切时，我第一次眼眶湿润了。在突如其来的疾病面前，你引以为傲的学识、事业、金钱、地位都脆弱不堪一击。去年有一篇在朋友圈疯传的长文，《流感侵袭下的北京中产阶级》，深深地揭露了这种无力的现状。</p>\n<p>为了升职加薪，为了KPI，为了买房上车，为了下一代，为了不比同龄人落后，为了别人的期待目光，为了过上自己想要的生活。你夜以继日熬秃了发际线熬深了近视眼熬出了小肚腩所换来的一切，在一场疾病面前轰然倒塌，瓦砾遍地。</p>\n<p>以前自己总会有这种想法，现代医学虽然延长了人类的寿命，但在它的庇护下，人类自身机体的抵抗力反而下降，变得如同温室中的花朵般更加脆弱易折。</p>\n<p>我们从病床上赤条条地来，也终将在病床上赤条条地离开，带不走任何一样东西。</p>\n<p>最终徐峥被警车押运走，警官吩咐开车的同伴放慢速度，看到街边送行的白血病人纷纷摘下口罩，去世的吕受益和黄毛浩子也出现在人群中，我第二次流泪。</p>\n<p>君以国士待我，我必以国士报之。</p>\n<p>病魔无情，人间有爱。其实倘若人间无爱，病魔也就无从可怕，不自爱，则身体发肤，皆可毁伤；不爱人，则漠视生命，天性凉薄。可人活着，不就是仗着心底总有一些不可割舍的爱么？</p>\n<p>由爱故生忧，由爱故生怖，若离于爱者，无忧亦无怖。</p>\n","categories":[],"tags":["电影"]},{"title":"缝纫机乐队","url":"https://lilei.pro/2018/07/27/city-of-rock/","content":"<blockquote>\n<p>心里还有那口气儿，惦记的是每天什么时候开始；卸下那口气儿，惦记的是每天什么时候结束。 ​</p>\n</blockquote>\n<p><a href=\"https://www.xiami.com/song/1796823294\" target=\"_blank\" rel=\"noopener\">都选C - 虾米音乐</a></p>\n<p>虽然娜扎很美，但我认为乔杉才是本片的演技、笑点乃至颜值担当。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180727_city_of_rock/乔杉.jpeg\" alt=\"保健哥\" title=\"\">\n                </div>\n                <div class=\"image-caption\">保健哥</div>\n            </figure>\n<p>剧情中有一段是老吉他手拿出当年的电吉他擦拭，乔杉盛赞这是吉他界的柳岩，想要摸一摸结果被老吉他手一巴掌扇掉。大鹏在一旁嘲讽道“柳岩那是谁都能摸的么？”。看到这里会心一笑，曾经拍《屌丝男士》时，大鹏没少与柳岩演对手戏。</p>\n<p>大鹏强行为自己和娜扎安排的感情线，不仅对剧情推进毫无帮助，而且真的很尬。</p>\n<p>岳云鹏扮演的钢琴家，虽然说不出喜感在哪，但让人一看到他那张圆脸，就忍不住想笑，也许这就是祖师爷赏饭吃吧。那一句“女人啊，你的名字是贪婪”硬生生地将整部电影的文学水平拔高了一厘米。</p>\n<p>尽管它在豆瓣上的评分不到7，大抵属于“拍的不差，但也算不上多好”的水平。但我偏偏喜欢，自己大概本就是个俗人吧。</p>\n<p>看这部电影的时候，正坐在 K8402 杭州 - 上海南 的加1车厢里，求职中第三次往返于杭州上海，这天面试了第十家公司。</p>\n<p>看了，笑了，哭了，够了。揣着那口气儿，生活仍要继续。</p>\n<p>P.S. 集安市，隶属吉林省通化市，位于吉林东南部，与朝鲜一江之隔。已列入旅游名单。</p>\n","categories":[],"tags":["电影"]},{"title":"面试知识整理 2018.07.26","url":"https://lilei.pro/2018/07/26/interview-180726/","content":"<h1 id=\"谈谈-SparseArray\"><a href=\"#谈谈-SparseArray\" class=\"headerlink\" title=\"谈谈 SparseArray\"></a>谈谈 SparseArray</h1><h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><p>使用 Key-Value 保存对象的集合，类似 HashMap，但只允许使用 int 型的 Key</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>（优点）内存效率高，避免自动装箱，避免了使用 Entry 来构建数据结构，int 4 bytes，Integer 16 bytes</li>\n<li>（缺点）使用二分法查找对象，在数据体量大（more than hundreds of items）的场景下查找/插入/删除效率不如 HashMap</li>\n<li>删除过程优化：先标记 item，待 GC 时真正删除</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><ul>\n<li>随机插入：put(int, x)，会替换掉已有的对象</li>\n<li>顺序插入：append(int, x)，当 Key 比目前所有的都要大时执行效率更高，否则同 put</li>\n<li>随机删除：delete(int)，删除 Key 对应的对象</li>\n<li>顺序删除：removeAt(int)，删除第 N 项</li>\n<li>范围删除：removeAtRange(int, int)</li>\n<li>随机访问：get(int)，根据 Key 获取 Value，如果没有则返回 null</li>\n<li>顺序访问：valueAt(int)</li>\n<li>遍历：keyAt(int)，获取第 n 位的 key；valueAt(int)，获取第 n 位 key 对应的 value；indexOfKey(int)，获取 key 的 index；indexOfValue(int)，获取 value 的 index</li>\n</ul>\n<h2 id=\"源码阅读\"><a href=\"#源码阅读\" class=\"headerlink\" title=\"源码阅读\"></a>源码阅读</h2><p>成员变量部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object DELETED = <span class=\"keyword\">new</span> Object(); <span class=\"comment\">// 删除对象时，并非真正删除，而是将 Value 替换成 DELETE 对象</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mGarbage = <span class=\"keyword\">false</span>; <span class=\"comment\">// 标示是否需要进行 gc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] mKeys;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Object[] mValues;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mSize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SparseArray</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(<span class=\"number\">10</span>); <span class=\"comment\">// 默认长度是10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用 append, put, size 等方法时会触发 GC，是一个逐项复制的过程，代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">gc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = mSize;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> o = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] keys = mKeys;</span><br><span class=\"line\">    Object[] values = mValues;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        Object val = values[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val != DELETED) &#123; <span class=\"comment\">// 判断是否已经标记</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != o) &#123;</span><br><span class=\"line\">                keys[o] = keys[i];</span><br><span class=\"line\">                values[o] = val;</span><br><span class=\"line\">                values[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            o++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mGarbage = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    mSize = o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>put 过程，核心是先判断有没有同一个 key 存在，有则替换，没有的话，再判断是否目标位置刚好被 DELETED 标记，最后才进行加项操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> key, E value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key); <span class=\"comment\">// 二分查找 key 的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 如果已经有同一个 key</span></span><br><span class=\"line\">        mValues[i] = value;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        i = ~i; <span class=\"comment\">// 求异或</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; mSize &amp;&amp; mValues[i] == DELETED) &#123; <span class=\"comment\">// 目标位置项目已经标记 DELETE，可以直接替换</span></span><br><span class=\"line\">            mKeys[i] = key;</span><br><span class=\"line\">            mValues[i] = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mGarbage &amp;&amp; mSize &gt;= mKeys.length) &#123; <span class=\"comment\">// 需要寻找新的位置，此时先 gc</span></span><br><span class=\"line\">            gc();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Search again because indices may have changed.</span></span><br><span class=\"line\">            i = ~ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key); <span class=\"comment\">// 运用 System.arraycopy 进行添加（有必要则扩容）</span></span><br><span class=\"line\">        mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);</span><br><span class=\"line\">        mSize++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>delete 过程，先二分查找到目标位置，标记 DELETED，不直接删除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = ContainerHelpers.binarySearch(mKeys, mSize, key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mValues[i] != DELETED) &#123;</span><br><span class=\"line\">            mValues[i] = DELETED;</span><br><span class=\"line\">            mGarbage = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Handler-内部原理，HandlerThread-与普通-Thread-区别\"><a href=\"#Handler-内部原理，HandlerThread-与普通-Thread-区别\" class=\"headerlink\" title=\"Handler 内部原理，HandlerThread 与普通 Thread 区别\"></a>Handler 内部原理，HandlerThread 与普通 Thread 区别</h1><h2 id=\"Handler-的两个用途\"><a href=\"#Handler-的两个用途\" class=\"headerlink\" title=\"Handler 的两个用途\"></a>Handler 的两个用途</h2><ol>\n<li>管理消息/任务队列，可以控制立即执行或者延迟执行</li>\n<li>调度任务在不同线程运行f</li>\n</ol>\n<h2 id=\"主要概念\"><a href=\"#主要概念\" class=\"headerlink\" title=\"主要概念\"></a>主要概念</h2><ul>\n<li>Handler：消息分发器，一个 Handler 里面会关联一个 MessageQueue，这个 MessageQueue 来自当前线程的 Looper</li>\n<li>Looper：消息循环器，从 MQ 里面不断取出消息运行。非 UI 线程是没有默认创建 Looper 的，需要人工调用 prepare 和 loop 来启动 Looper。被声明为 ThreadLocal，每一个线程独立拥有</li>\n<li>Message：消息单元，内部用消息池管理，默认 capacity = 50</li>\n<li>MessageQueue：消息队列，单链表，每个消息入队时会带上一个运行时间 when，根据这个 when 将其放入队列中相应的位置（早执行的放在队首），整个队列是按照运行时间排序的</li>\n</ul>\n<h2 id=\"原理流程概述\"><a href=\"#原理流程概述\" class=\"headerlink\" title=\"原理流程概述\"></a>原理流程概述</h2><p>创建 Handler 时会关联当前线程 Looper 中的 MQ，当用 Handler 对象发送消息时，消息会进入 MQ，经 Looper 轮询取出后进行处理，处理时会调用所实现的 handleMessage 方法。</p>\n<h2 id=\"UI-线程创建-Looper\"><a href=\"#UI-线程创建-Looper\" class=\"headerlink\" title=\"UI 线程创建 Looper\"></a>UI 线程创建 Looper</h2><ol>\n<li>ActivityThread 在 main 方法里通过 Looper.prepareMainLooper() 创建主 Looper，并将其存入 ThreadLocal 变量中。同时将它另存一份作为主线程 Looper，供其他线程访问。</li>\n<li>在 main 方法最后通过 looper.loop() 启动轮询</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Looper.prepareMainLooper();</span><br><span class=\"line\">        ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</span><br><span class=\"line\">        thread.attach(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        Looper.loop();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Handler-发送消息的流程\"><a href=\"#Handler-发送消息的流程\" class=\"headerlink\" title=\"Handler 发送消息的流程\"></a>Handler 发送消息的流程</h2><p>构造过程中取出当前线程持有的 Looper，并保存其 MQ 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Handler</span><span class=\"params\">(Callback callback, <span class=\"keyword\">boolean</span> async)</span> </span>&#123;</span><br><span class=\"line\">        mLooper = Looper.myLooper();</span><br><span class=\"line\">        mQueue = mLooper.mQueue;</span><br><span class=\"line\">        mCallback = callback;</span><br><span class=\"line\">        mAsynchronous = async;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>handler通过sendMessage(msg) 将消息发出，消息最终走向 queue.enqueueMessage(msg, uptimeMillis) 进入队列，同时将当前 Handler 以 target 保存在消息对象中，当 Looper 轮询时，会取出 target 用于处理消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueueMessage</span><span class=\"params\">(MessageQueue queue, Message msg, <span class=\"keyword\">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class=\"line\">        msg.target = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Looper me = myLooper();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            Message msg = queue.next(); <span class=\"comment\">// 取出消息，无消息则阻塞</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;  <span class=\"keyword\">return</span>;   &#125;</span><br><span class=\"line\">        msg.target.dispatchMessage(msg);<span class=\"comment\">//发送消息 其中target就是Handler</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>dispatchMessage 最终会调到 Handler 中实现的 handleMessage</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            handleCallback(msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            handleMessage(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h2><p>构造函数里创建了自己的 Looper 并且开启轮询，普通 Thread 不含 Looper</p>\n<h1 id=\"Picasso-VS-Glide\"><a href=\"#Picasso-VS-Glide\" class=\"headerlink\" title=\"Picasso VS Glide\"></a>Picasso VS Glide</h1><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>Picasso</th>\n<th>Glide</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>图片格式</td>\n<td>ARGB8888</td>\n<td>RGB_565</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>原图尺寸</td>\n<td>显示尺寸</td>\n</tr>\n<tr>\n<td>GIF</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>video</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Library size</td>\n<td>100K</td>\n<td>500K</td>\n</tr>\n<tr>\n<td>Methods count</td>\n<td>500</td>\n<td>2500</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"View-的绘制过程\"><a href=\"#View-的绘制过程\" class=\"headerlink\" title=\"View 的绘制过程\"></a>View 的绘制过程</h1><p>一个 Activity 的窗口页面，可以分为PhoneWindow、DecorView、TitleBar &amp; ContentView 几个层级</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/window.png\" alt=\"window.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">window.png</div>\n            </figure>\n<p>整个 View 树的绘图流程在 ViewRootImpl.performTraversals() 方法中，它主要做的事情是根据之前设置的状态，判断是否需要重新计算视图大小（measure）、是否需要重新放置视图位置（layout）以及是否需要重新绘制（draw），代码如下</p>\n<ul>\n<li>measure：测量，指测量 View 的宽高</li>\n<li>layout：布局，指确定在父容器中的位置坐标</li>\n<li>draw：绘制并显示</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        <span class=\"comment\">//最外层的根视图的widthMeasureSpec和heightMeasureSpec由来</span></span><br><span class=\"line\">        <span class=\"comment\">//lp.width和lp.height在创建ViewGroup实例时等于MATCH_PARENT</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> childWidthMeasureSpec = getRootMeasureSpec(mWidth, lp.width);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childHeightMeasureSpec = getRootMeasureSpec(mHeight, lp.height);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        mView.draw(canvas);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/perform_traversals.png\" alt=\"perform_traversals\" title=\"\">\n                </div>\n                <div class=\"image-caption\">perform_traversals</div>\n            </figure>\n<h2 id=\"measure-过程分析\"><a href=\"#measure-过程分析\" class=\"headerlink\" title=\"measure 过程分析\"></a>measure 过程分析</h2><p>整个 View 树从根 View 开始，递归进行 measure</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/measure.png\" alt=\"measure.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">measure.png</div>\n            </figure>\n<p>View.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * This is called to find out how big a view should be. The parent</span></span><br><span class=\"line\"><span class=\"comment\"> * supplies constraint information in the width and height parameters.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * The actual measurement work of a view is performed in</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125;, called by this method. Therefore, only</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #onMeasure(int, int)&#125; can and must be overridden by subclasses.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> widthMeasureSpec Horizontal space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> heightMeasureSpec Vertical space requirements as imposed by the</span></span><br><span class=\"line\"><span class=\"comment\"> *        parent</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #onMeasure(int, int)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//final方法，子类不可重写</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">measure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//回调onMeasure()方法</span></span><br><span class=\"line\">    onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//View的onMeasure默认实现方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MeasureSpec 的语义是父 View 对子 View 在长宽上的约束，有三种取值</p>\n<ul>\n<li>EXACTLY：不管子 View 想多大，它只能这么大</li>\n<li>AT_MOST：最大只能这么大</li>\n<li>UNSPECIFIED：不加约束，子 View 想多大就多大</li>\n</ul>\n<p>measure 过程主要就是从顶层父 View 向子 View 递归调用 view.measure 方法（measure中 又回调 onMeasure 方法）的过程。具体 measure 核心主要有如下几点</p>\n<ul>\n<li>View的measure方法是final的，不允许重载，View子类只能重载onMeasure来完成自己的测量逻辑。</li>\n<li>最顶层DecorView测量时的MeasureSpec是由ViewRootImpl中getRootMeasureSpec方法确定的（LayoutParams宽高参数均为MATCH_PARENT，specMode是EXACTLY，specSize为物理屏幕大小）。</li>\n<li>ViewGroup类提供了measureChild，measureChild和measureChildWithMargins方法，简化了父子View的尺寸计算。</li>\n<li>只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams，否则无法使用layout_margin参数。</li>\n<li>View的布局大小由父View和子View共同决定。</li>\n<li>使用View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。</li>\n</ul>\n<h2 id=\"layout-过程分析\"><a href=\"#layout-过程分析\" class=\"headerlink\" title=\"layout 过程分析\"></a>layout 过程分析</h2><p>View.performTraversals 在 measure 之后，会执行 layout 过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    mView.layout(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mView.getMeasuredWidth(), mView.getMeasuredHeight());</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>layout() 方法有四个参数，分别是 left、top、right、bottom，表示当前 View 相对 Parent 的四个坐标。layout 过程也是一个递归的过程：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/layout.png\" alt=\"layout.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">layout.png</div>\n            </figure>\n<p>View.layout 方法实际上会调用到 onLayout 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//实质都是调用setFrame方法把参数分别赋值给mLeft、mTop、mRight和mBottom这几个变量</span></span><br><span class=\"line\">    <span class=\"comment\">//判断View的位置是否发生过变化，以确定有没有必要对当前的View进行重新layout</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = isLayoutModeOptical(mParent) ?</span><br><span class=\"line\">            setOpticalFrame(l, t, r, b) : setFrame(l, t, r, b);</span><br><span class=\"line\">    <span class=\"comment\">//需要重新layout</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; PFLAG_LAYOUT_REQUIRED) == PFLAG_LAYOUT_REQUIRED) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//回调onLayout</span></span><br><span class=\"line\">        onLayout(changed, l, t, r, b);</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>layout 也是从顶层父 View 向子 View 的递归调用 layout 方法的过程，即父 View 根据上一步 measure 子 View 所得到的布局大小和布局参数，将子 View 放在合适的位置上。具体 layout 核心主要有以下几点：</p>\n<ul>\n<li>View.layout方法可被重载，ViewGroup.layout为final的不可重载，ViewGroup.onLayout为abstract的，子类必须重载实现自己的位置逻辑</li>\n<li>measure操作完成后得到的是对每个View经测量过的measuredWidth和measuredHeight，layout操作完成之后得到的是对每个View进行位置分配后的mLeft、mTop、mRight、mBottom，这些值都是相对于父View来说的</li>\n<li>凡是layout_XXX的布局属性基本都针对的是包含子View的ViewGroup的，当对一个没有父容器的View设置相关layout_XXX属性是没有任何意义的</li>\n<li>使用View的getWidth()和getHeight()方法来获取View测量的宽高，必须保证这两个方法在onLayout流程之后被调用才能返回有效值</li>\n</ul>\n<h2 id=\"draw-过程分析\"><a href=\"#draw-过程分析\" class=\"headerlink\" title=\"draw 过程分析\"></a>draw 过程分析</h2><p>performTraverls 在 layout 后会进行 draw 的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performTraversals</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Rect dirty = mDirty;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    canvas = mSurface.lockCanvas(dirty);</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    mView.draw(canvas);</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>draw 也是一个递归的过程</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/draw.png\" alt=\"draw.png\" title=\"\">\n                </div>\n                <div class=\"image-caption\">draw.png</div>\n            </figure>\n<ul>\n<li>如果该View是一个ViewGroup，则需要递归绘制其所包含的所有子View。</li>\n<li>View默认不会绘制任何内容，真正的绘制都需要自己在子类中实现。</li>\n<li>View的绘制是借助onDraw方法传入的Canvas类来进行的。</li>\n<li>区分View动画和ViewGroup布局动画，前者指的是View自身的动画，可以通过setAnimation添加，后者是专门针对ViewGroup显示内部子视图时设置的动画，可以在xml布局文件中对ViewGroup设置layoutAnimation属性（譬如对LinearLayout设置子View在显示时出现逐行、随机、下等显示等不同动画效果）。</li>\n<li>在获取画布剪切区（每个View的draw中传入的Canvas）时会自动处理掉padding，子View获取Canvas不用关注这些逻辑，只用关心如何绘制即可。</li>\n<li>默认情况下子View的ViewGroup.drawChild绘制顺序和子View被添加的顺序一致，但是你也可以重载ViewGroup.getChildDrawingOrder()方法提供不同顺序。</li>\n</ul>\n<h3 id=\"参考：Android应用层View绘制流程与源码分析\"><a href=\"#参考：Android应用层View绘制流程与源码分析\" class=\"headerlink\" title=\"参考：Android应用层View绘制流程与源码分析\"></a>参考：<a href=\"https://blog.csdn.net/yanbober/article/details/46128379\" target=\"_blank\" rel=\"noopener\">Android应用层View绘制流程与源码分析</a></h3><h1 id=\"类加载过程-ClassLoader机制\"><a href=\"#类加载过程-ClassLoader机制\" class=\"headerlink\" title=\"类加载过程/ClassLoader机制\"></a>类加载过程/ClassLoader机制</h1><h1 id=\"Apk-打包过程\"><a href=\"#Apk-打包过程\" class=\"headerlink\" title=\"Apk 打包过程\"></a>Apk 打包过程</h1><h1 id=\"ListView-和-RecyclerView-原理\"><a href=\"#ListView-和-RecyclerView-原理\" class=\"headerlink\" title=\"ListView 和 RecyclerView 原理\"></a>ListView 和 RecyclerView 原理</h1><h1 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h1><p>考虑性能时一般从以下几个角度</p>\n<ul>\n<li>内存优化</li>\n<li>UI优化（布局、绘制）</li>\n<li>速度优化（线程、网络）</li>\n<li>电量优化</li>\n<li>启动优化</li>\n</ul>\n<h2 id=\"内存优化\"><a href=\"#内存优化\" class=\"headerlink\" title=\"内存优化\"></a>内存优化</h2><p>内存优化是为了解决内存溢出（OOM）的问题，内存溢出通常有两个原因</p>\n<ul>\n<li>使用不当造成的内存泄漏，内存无法释放</li>\n<li>虽然不属于泄漏，但一些代码逻辑不当，导致消耗大量内存，难以及时释放</li>\n</ul>\n<p>内存泄漏</p>\n<p>常见原因与处理方法</p>\n<ol>\n<li>单例模式里使用了 Activity 的 Context，导致其生命周期延长至整个应用使用周期，应该使用 ApplicationContext</li>\n<li>非静态内部类持有 Activity 对象引用，应该改成静态内部类，同时使用 ApplicationContext；以上两步说明尽量不要使用 Activity 的 Context，而是应当用 ApplicationContext</li>\n<li>Handler 持有 Activity 对象引用，同样应该改成静态，并使用弱引用，并在 Activity 的 onDestroy 方法里清空 Handler 消息，<code>mHandler.removeCallbacksAndMessages(null);</code></li>\n<li>线程进行耗时操作，导致 Activity 没释放，应当使用弱引用，并且在 Activity 的 onDestroy 方法里 cancel 掉线程</li>\n<li>占有系统资源后没有关闭，在使用完 BraodcastReceiver,ContentObserver,File,Cursor,Stream,Bitmap,Animation 等资源时，一定要在 Activity 中的 onDestry 中及时的关闭、注销或者释放内存。</li>\n</ol>\n<h3 id=\"参考：Android中五种常见内存泄漏原因\"><a href=\"#参考：Android中五种常见内存泄漏原因\" class=\"headerlink\" title=\"参考：Android中五种常见内存泄漏原因\"></a>参考：<a href=\"https://blog.csdn.net/qq_35373333/article/details/74909811\" target=\"_blank\" rel=\"noopener\">Android中五种常见内存泄漏原因</a></h3><p>常用工具</p>\n<ul>\n<li>Heap SnapShot</li>\n<li>Heap Viewer</li>\n<li>LeakCanary</li>\n<li>MAT</li>\n<li>TraceView（Device Monitor）</li>\n</ul>\n<p>消耗大量内存：通常加载 Bitmap 时会发生这种情况，解决思路是</p>\n<ul>\n<li>加载单张图片时候进行压缩，或者使用缩略图</li>\n<li>控制每次加载的数量</li>\n<li>加载多张图片时，滑动过程中不进行加载，仅在滑动完成后加载</li>\n</ul>\n<h2 id=\"UI优化（布局、绘制）\"><a href=\"#UI优化（布局、绘制）\" class=\"headerlink\" title=\"UI优化（布局、绘制）\"></a>UI优化（布局、绘制）</h2><p>Android 屏幕刷新的频率是 60fps，意味着每一帧的绘制必须要在 16ms 内完成，如果 UI 绘制超过了 16ms，在体验上就会出现卡顿。</p>\n<p>以下罗列造成 App 卡顿的一些原因</p>\n<ol>\n<li>在 UI 线程里进行轻微耗时操作</li>\n<li>布局 Layout 过于复杂，无法在 16ms 内完成渲染</li>\n<li>动画执行次数过多，导致 CPU 或 GPU 负载过高</li>\n<li>View 过度绘制，屏幕某些像素在一帧时间内绘制多次，CPU 或 GPU 负载过高</li>\n<li>View 频繁触发 measure 和 layout，累计耗时过多，频繁渲染造成负载过高</li>\n<li>内存频繁 GC，导致阻塞渲染操作</li>\n<li>冗余资源和逻辑导致运行缓慢</li>\n<li>ANR</li>\n</ol>\n<p>UI优化，通常是指布局优化和 View 绘制优化</p>\n<h3 id=\"布局优化\"><a href=\"#布局优化\" class=\"headerlink\" title=\"布局优化\"></a>布局优化</h3><p>在“开发者选项”里可以打开“过度绘制开关”，从而查看当前页面 View 是否存在过绘，红色表示层级最多（4+），浅紫色表示层级最低（1），如下所示。找到那些过绘的部分，在布局文件里减少它们的背景，比如把底层 View 的背景设置成透明。同时，尽量减少 ViewGroup 嵌套的情况，通常 LinearLayout 会比 RelativeLayout 的层级要少。还有一点就是要使用设备对应分辨率的资源文件，并不是图片越清晰就越好。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/overdraw.png\" alt=\"Overdraw\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Overdraw</div>\n            </figure>\n<p>在“开发者模式”里面还有另一项相关的设置，叫做“GPU呈现模式分析”，可以将渲染时间以条形图📊的方式显示在屏幕底部，同时 16ms 的基准线也会以绿色绘制在屏幕中央。条形图中同一个条形的不同颜色表示绘制不同阶段</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180726_interview/呈现模式分析.png\" alt=\"呈现模式分析\" title=\"\">\n                </div>\n                <div class=\"image-caption\">呈现模式分析</div>\n            </figure>\n<h3 id=\"绘制优化\"><a href=\"#绘制优化\" class=\"headerlink\" title=\"绘制优化\"></a>绘制优化</h3><p>主要是针对自定义 View 里面的代码编写，在 onDraw 这一步要尽量减少开销，因为 onDraw 方法是实时执行的，在一帧内会执行多次。因此，在 onDraw 中要避免出现以下两种情况</p>\n<ul>\n<li>创建局部对象，这会导致占用大量内存，频繁 GC</li>\n<li>执行耗时操作，出现循环，这会占用 CPU 时间</li>\n</ul>\n<p>过度绘制优化，使用对应分辨率的资源文件</p>\n<h2 id=\"速度优化（线程、网络）\"><a href=\"#速度优化（线程、网络）\" class=\"headerlink\" title=\"速度优化（线程、网络）\"></a>速度优化（线程、网络）</h2><h3 id=\"线程优化\"><a href=\"#线程优化\" class=\"headerlink\" title=\"线程优化\"></a>线程优化</h3><p>需要在子线程进行耗时操作，避免阻塞主线程</p>\n<ul>\n<li>HandlerThread：拥有自己 Looper 的线程类，可以在这个线程里进行耗时操作，然后通知主线程</li>\n<li>AsyncTask：见下面一节“AsyncTask 知识点”</li>\n<li>IntentService：运行在独立线程的 Service，原理是创建一个 HandlerThread，然后在 onStart 时把消息丢给 Handler 处理</li>\n<li>ThreadPool：用 Executor、ThreadPoolExecutor 来管理线程</li>\n</ul>\n<h3 id=\"网络优化\"><a href=\"#网络优化\" class=\"headerlink\" title=\"网络优化\"></a>网络优化</h3><p>网络优化主要是从时间、速度、成功率几个角度来进行，对于提高速度，比较典型的是请求图片的场景</p>\n<ul>\n<li>使用WebP格式，能比 JPG 节约25%～35%的流量，比 PNG 节约80%流量</li>\n<li>使用缩略图</li>\n</ul>\n<p>另外一些网络优化的知识点</p>\n<ul>\n<li>对网络请求进行缓存，若请求数据仍在有效期内则直接使用缓存，不走网络</li>\n<li>减少 GPS 定位使用，条件允许则多用网络定位</li>\n<li>下载过程中使用断点续传</li>\n<li>刷新数据时采用局部刷新，少用全局刷新</li>\n</ul>\n<h2 id=\"电量优化\"><a href=\"#电量优化\" class=\"headerlink\" title=\"电量优化\"></a>电量优化</h2><ul>\n<li>需要进行网络请求时，先判断网络当前状态</li>\n<li>批量处理网络请求</li>\n<li>在同时有wifi和移动数据的情况下，我们应该直接屏蔽移动数据的网络请求</li>\n<li>减少后台任务</li>\n</ul>\n<h2 id=\"启动优化\"><a href=\"#启动优化\" class=\"headerlink\" title=\"启动优化\"></a>启动优化</h2><p>根据应用启动时候的状态，可以分为冷启动、热启动、暖启动三种，其中冷启动的耗时最长，对用户体验影响最大，因此谈启动优化主要是从冷启动的角度给出优化建议。</p>\n<p>冷启动初始时，系统完成三个任务</p>\n<ol>\n<li>启动和加载应用</li>\n<li>创建应用进程</li>\n<li>显示启动视图（白屏）</li>\n</ol>\n<p>当应用进程创建完毕后，开始创建应用</p>\n<ol>\n<li>创建应用对象</li>\n<li>启动主线程 (MainThread)</li>\n<li>创建 Main Activity</li>\n<li>加载视图 (Inflating views)</li>\n<li>渲染布局 (Laying out)</li>\n<li>执行初始绘制</li>\n</ol>\n<p>冷启动优化</p>\n<ul>\n<li>减少首页使用的资源，懒加载</li>\n<li>优化首页布局，减少层级，不绘制不可见的 UI，而是使用 ViewStub 对象在适当的时间布局绘制</li>\n<li>在闪屏页（Fragment）预先加载</li>\n</ul>\n<h1 id=\"AsyncTask-知识点\"><a href=\"#AsyncTask-知识点\" class=\"headerlink\" title=\"AsyncTask 知识点\"></a>AsyncTask 知识点</h1><h2 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h2><p>是为了解决 UI 线程无法进行耗时操作的问题而应用的一种 API，通常处理短时耗时任务（长时任务建议使用 Executor、ThreadPoolExecutor、FutureTask），有四个方法需要覆盖</p>\n<ul>\n<li>onPreExecute()，在 UI 线程调用，进行任务运行前的准备工作</li>\n<li>doInBackground(Params…)，在后台线程运行，读取 execute 传来的参数，运行过程中可以通过 publishProgress(Progress…) 来发布进度信息，进度信息会以 onProgressUpdate(Progress…) 回调的方式通知 UI 线程</li>\n<li>onProgressUpdate(Progress…)，在 UI 线程调用，接收进度信息</li>\n<li>onPostExecute(Result)，在 UI 线程调用，接受任务运行结果</li>\n</ul>\n<h2 id=\"变更历史\"><a href=\"#变更历史\" class=\"headerlink\" title=\"变更历史\"></a>变更历史</h2><ul>\n<li>最初问世，采用单线程模型，所有任务串行执行</li>\n<li>DONUT（1.6），采用线程池模型，并发运行</li>\n<li>HONEYCOMB（3.0），又改回单线程模型，为了简化使用，避免并发带来的同步问题</li>\n</ul>\n<h2 id=\"内部原理（API-26）\"><a href=\"#内部原理（API-26）\" class=\"headerlink\" title=\"内部原理（API 26）\"></a>内部原理（API 26）</h2><ol>\n<li>AsyncTask 无参构造函数里会创建一个任务对象 mWorker（在其中执行 doInBackground），一个任务完成回调对象 mFuture，同时获取到 UI 线程的 Looper，用来在任务完成后通知 UI 线程</li>\n<li>维护单例 SERIAL_EXECUTOR，用来串行执行任务</li>\n<li>调用 AsyncTask.execute 时，会进入 executeOnExecutor 方法，在其内部先调用 onPreExecute，然后通过 executor 运行 mWorker，由 SERIAL_EXECUTOR 保证了串行运行，真正运行任务的是 THREAD_POOL_EXECUTOR</li>\n<li>在任务完成后，通过 UI 线程的 Looper 通知 UI 线程</li>\n</ol>\n<h1 id=\"一个关于类的静态变量归属的问题\"><a href=\"#一个关于类的静态变量归属的问题\" class=\"headerlink\" title=\"一个关于类的静态变量归属的问题\"></a>一个关于类的静态变量归属的问题</h1><p>父类有一个 protected 的静态变量 foo，基于父类 A 创建两个子类 B1 和 B2</p>\n<ul>\n<li>如果 B1 和 B2 不声明变量 foo，那么它们使用的 foo 是同一个，来自父类 A</li>\n<li>如果 B1 和 B2 都声明变量 foo，那么它们使用各自的变量</li>\n</ul>\n<p>简单概括就是说静态变量与类绑定，demo 如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// case 1</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B1</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B2</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tA b1 = <span class=\"keyword\">new</span> B1();</span><br><span class=\"line\">\tA b2 = <span class=\"keyword\">new</span> B2();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"b1.foo = \"</span> + b1.foo + <span class=\"string\">\"&amp; b2.foo = \"</span> + b2.foo); <span class=\"comment\">// b1.foo = 0 &amp; b2.foo = 0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// case 2</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> foo = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B1</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> foo = <span class=\"number\">100</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B2</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> foo = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\tA b1 = <span class=\"keyword\">new</span> B1();</span><br><span class=\"line\">\tA b2 = <span class=\"keyword\">new</span> B2();</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"b1.foo = \"</span> + b1.foo + <span class=\"string\">\"&amp; b2.foo = \"</span> + b2.foo); <span class=\"comment\">// b1.foo = 100 &amp; b2.foo = 200</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["Android","面试"]},{"title":"美团技术沙龙第39期：新思路打造移动端高效研发体系 小记","url":"https://lilei.pro/2018/07/21/dianping-meituan-mobile-share-0721/","content":"<blockquote>\n<p>偶然在美团技术团队公众号里看到有这个分享，主讲人是周辉、虞惠文、蒋国宝等人，内容基本上是移动研发专场，遂过来凑个热闹。时间是7月21日13:30~17:30，地点田林路200号华鑫天地</p>\n</blockquote>\n<h1 id=\"时间表\"><a href=\"#时间表\" class=\"headerlink\" title=\"时间表\"></a>时间表</h1><table>\n<thead>\n<tr>\n<th>内容</th>\n<th>主讲人</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Picasso在大众点评首页的应用</td>\n<td>虞惠文@美团Android开发工程师</td>\n</tr>\n<tr>\n<td>移动前后端开发解耦</td>\n<td>林晨@美团后端技术专家</td>\n</tr>\n<tr>\n<td>打造稳定、灵活、高效的运营配置平台</td>\n<td>蒋国宝@美团后端技术架构师</td>\n</tr>\n<tr>\n<td>移动持续集成实践</td>\n<td>何智聪@美团iOS技术专家</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>13:44，还未开始，全是年轻的脸庞，未见故人。大概故人们不屑于这种程度的技术分享吧，他们就算来，也应该是站在讲台上，而非听众席。</p>\n<h1 id=\"周校长开场词\"><a href=\"#周校长开场词\" class=\"headerlink\" title=\"周校长开场词\"></a>周校长开场词</h1><p>介绍了一下目前大众点评移动团队的规模和业务内容，base 在上海，100 人。曾经自己也是这个团队的一员，想想竟有些唏嘘。</p>\n<h1 id=\"Picasso-在大众点评首页的应用\"><a href=\"#Picasso-在大众点评首页的应用\" class=\"headerlink\" title=\"Picasso 在大众点评首页的应用\"></a>Picasso 在大众点评首页的应用</h1><h2 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><p>首页改版多是视觉变更，需要快速上线验证，然而传统的开发发布流程太迟滞，难以实时看到效果。例如，首页十个金刚位入口，需要调整其中某一个，更换图标、文字、角标，并且快速验证，倘若走传统的“开发-测试-发布”流程，显然不能满足产品经理“越快看到效果越好”的需求。这是就需要有一个动态化框架，支持实时对这些进行修改。</p>\n<h2 id=\"技术需求\"><a href=\"#技术需求\" class=\"headerlink\" title=\"技术需求\"></a>技术需求</h2><ul>\n<li>需要一个动态化框架，在运行时决定需要展示的内容。</li>\n<li>性能达到 Native 水准</li>\n</ul>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><p>进行设计的时候，没有选择 RN，原因如下</p>\n<ol>\n<li>稳定性差</li>\n<li>技术栈切换成本高</li>\n<li>双端不对齐，某些特性只支持单端</li>\n</ol>\n<p>所采取的设计思路是“服务端下发数据（data）和视图规则（layout）”，data 和 layout 会被计算成 PModel，其中包含了该视图被渲染至屏幕上的全部信息。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_Picasso.png\" alt=\"Picasso构思\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Picasso构思</div>\n            </figure>\n<p>同时采用预计算&amp;缓存，降低绘制时的开销，提高绘制速度。</p>\n<p>预计算是指 PModel 包含了该视图所有尺寸信息，在随后渲染过程中的 measure 和 layout 这两步直接取用这些信息，而不需要再次计算。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_Picasso_PreCalc.png\" alt=\"预计算\" title=\"\">\n                </div>\n                <div class=\"image-caption\">预计算</div>\n            </figure>\n<p>缓存是指缓存了 PModel，而非 Data（需要再次计算 PModel）</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_Picasso_Cache.png\" alt=\"缓存\" title=\"\">\n                </div>\n                <div class=\"image-caption\">缓存</div>\n            </figure>\n<h1 id=\"移动开发前后端解耦实践\"><a href=\"#移动开发前后端解耦实践\" class=\"headerlink\" title=\"移动开发前后端解耦实践\"></a>移动开发前后端解耦实践</h1><blockquote>\n<p>主要介绍了点评内部在前后端开发联调测试过程中使用的几个工具，主要是 AppMock（前身是 wendong.dp）、移动之家。的确有了这些工具，对于移动端开发的同学来说是极大的福音，离开点评之后深感如此。</p>\n</blockquote>\n<h2 id=\"痛点-1\"><a href=\"#痛点-1\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><ul>\n<li>接口管理困难 ———— 那么多的接口和数据格式，用什么管理呢？Excel文档？Wiki？聊天工具？不一致怎么办，出了锅谁来背？</li>\n<li>移动端接口数据黑盒 ———— 想要查看接口数据，只能借助 Charles 这样的代理工具，使用复杂不说，还几乎无法进行定制。</li>\n<li>前后端接口数据依赖 ———— 约好联调时间，难免遇到各种情况发生 delay，测得越晚，风险越大。</li>\n<li>测试工作量 ———— 生成测试数据不仅累的一批，还毫无成就感。</li>\n</ul>\n<h2 id=\"接口管理困难\"><a href=\"#接口管理困难\" class=\"headerlink\" title=\"接口管理困难\"></a>接口管理困难</h2><ul>\n<li>接口数据模型化</li>\n<li>接口更新可通知</li>\n<li>接口多维度管理</li>\n</ul>\n<p>通过“移动之家（mobile.dp）”进行接口注册，注册过程中需要明确标明接口数据结构和类型，注册完成之后，会有代码自动生成工具生成对应平台（Web、App、Server）的代码。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_自动生成接口代码.png\" alt=\"自动生成接口代码\" title=\"\">\n                </div>\n                <div class=\"image-caption\">自动生成接口代码</div>\n            </figure>\n<h2 id=\"前后端交互黑盒\"><a href=\"#前后端交互黑盒\" class=\"headerlink\" title=\"前后端交互黑盒\"></a>前后端交互黑盒</h2><p>由于网络环境复杂（3G、4G、WIFI），加上数据通常有加密序列化，想要实时查看接口数据信息通常要大费周章。这里介绍了 AppMock 的主要功能和原理，是在 APP 的网络层对请求进行重定向。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_APPMOCK.png\" alt=\"AppMock\" title=\"\">\n                </div>\n                <div class=\"image-caption\">AppMock</div>\n            </figure>\n<h2 id=\"前后端接口和数据依赖\"><a href=\"#前后端接口和数据依赖\" class=\"headerlink\" title=\"前后端接口和数据依赖\"></a>前后端接口和数据依赖</h2><p>后端同学测试接口：提供 APIReader 工具，可以在网页中组合参数，模拟客户端发送请求，测试后端接口<br>前端同学测试应用：AppMock 自动 mock response</p>\n<h1 id=\"测试工作量\"><a href=\"#测试工作量\" class=\"headerlink\" title=\"测试工作量\"></a>测试工作量</h1><p>自动化测试(Appium) + 自动化Mock，Mock 工具可以存储用例，这部分不细讲。</p>\n<p>最后是 AppMock 和业内类似工具的对比</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180721_dp_mobile/DP_AppMock对比.png\" alt=\"对比\" title=\"\">\n                </div>\n                <div class=\"image-caption\">对比</div>\n            </figure>\n<h1 id=\"打造稳定、灵活、高效的运营配置平台\"><a href=\"#打造稳定、灵活、高效的运营配置平台\" class=\"headerlink\" title=\"打造稳定、灵活、高效的运营配置平台\"></a>打造稳定、灵活、高效的运营配置平台</h1><p>简单的说就是设计一个“可以设计显示规则”的平台，同时讨论了如何满足测试场景（建立测试用户名单）、如何降低中央节点负载（SDK方案）。</p>\n<h1 id=\"移动持续集成实践\"><a href=\"#移动持续集成实践\" class=\"headerlink\" title=\"移动持续集成实践\"></a>移动持续集成实践</h1><p>这部分没听，直接跑路去找卫鹏和小凡吃小龙虾去了。</p>\n<h1 id=\"感受\"><a href=\"#感受\" class=\"headerlink\" title=\"感受\"></a>感受</h1><p>有高兴也有惋惜，高兴的是，自己从2012年加入大众点评，当年那么生涩的自己得到了不少老同事的包容和宽宥，有些人虽然再未见到过，但他们所开发出来的优秀工具却造福了很多同事，能与这些人共事，是我一生的荣幸；同时，分享现场这么多年轻朝气的面孔，表明点评团队依然充满了吸引力和号召力。惋惜的是自己没有在点评的5年里，全力汲取他人的养分，白白辜负了这么好的土壤。</p>\n<p>点评只是我毕业后的第一所大学，而社会是第二所。</p>\n<p>望各自安好，一别两宽。</p>\n","categories":[],"tags":["Android","点评"]},{"title":"面试知识整理 2018.07.09","url":"https://lilei.pro/2018/07/09/interview-180709/","content":"<h2 id=\"HashMap-和-HashTable-区别\"><a href=\"#HashMap-和-HashTable-区别\" class=\"headerlink\" title=\"HashMap 和 HashTable 区别\"></a>HashMap 和 HashTable 区别</h2><p>相同点</p>\n<ul>\n<li>都是以 Key - Value 的形式存放键值对</li>\n</ul>\n<p>不同点</p>\n<ul>\n<li>null 支持：HashMap 允许 null key 和 null value，HashTable 不允许</li>\n<li>并发特性：HashMap 线程不安全，效率高，HashTable 线程安全，效率低</li>\n<li>默认长度和扩容方式：HashMap 默认长度 16，扩容 2n，HashTable 默认长度 11，扩容 2n+1</li>\n<li>父类：HashMap 父类 AbstractMap，其子类还有 ConcurrentHashMap、LinkedHashMap 等，HashTable 父类 Dictionary，子类有 Properties</li>\n</ul>\n<p>结论</p>\n<ul>\n<li>不需要考虑线程安全，用 HashMap</li>\n<li>需要考虑线程安全，用 ConcurrentHashMap</li>\n</ul>\n<h2 id=\"JVM-垃圾回收机制-GC\"><a href=\"#JVM-垃圾回收机制-GC\" class=\"headerlink\" title=\"JVM 垃圾回收机制/GC\"></a>JVM 垃圾回收机制/GC</h2><p>含义：由 JVM 自动回收那些不再使用的对象，清理内存</p>\n<p>意义：程序员不需要人工管理内存，减少开发成本，提高开发效率</p>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><p>对象实例存在于 Java 堆中</p>\n<p>Java 中对对象的引用分成“强软弱虚”</p>\n<ul>\n<li>强引用，最普遍的引用，只要有强引用存在，对象就不会被回收</li>\n<li>软引用，SoftReference，当 GC 时，如果内存不足，会被回收</li>\n<li>弱引用，WeakReference，当 GC 时，不论内存是否足够，都被回收</li>\n<li>虚引用，PhantomReference，不影响对象的生命周期，在任何时刻都可能被回收</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] arge)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//强引用</span></span><br><span class=\"line\">        Object object = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Object[] objects = <span class=\"keyword\">new</span> Object[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//软引用</span></span><br><span class=\"line\">        SoftReference&lt;String&gt; stringSoftReference = <span class=\"keyword\">new</span> SoftReference&lt;&gt;(<span class=\"keyword\">new</span> String(<span class=\"string\">\"SoftReference\"</span>));</span><br><span class=\"line\">        System.out.println(stringSoftReference.get());</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        System.out.println(stringSoftReference.get()); <span class=\"comment\">//手动GC,这时内存充足,对象没有被回收</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//弱引用</span></span><br><span class=\"line\">        WeakReference&lt;String&gt; stringWeakReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(<span class=\"keyword\">new</span> String(<span class=\"string\">\"WeakReference\"</span>));</span><br><span class=\"line\">        System.out.println(stringWeakReference.get());</span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\">        System.out.println(stringWeakReference.get()); <span class=\"comment\">//手动gc,这时,返回null,对象已经被回收</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//虚引用</span></span><br><span class=\"line\">        <span class=\"comment\">//虚引用主要用来跟踪对象被垃圾回收器回收的活动。</span></span><br><span class=\"line\">        <span class=\"comment\">//虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。</span></span><br><span class=\"line\">        <span class=\"comment\">//当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中</span></span><br><span class=\"line\">        ReferenceQueue&lt;String&gt; stringReferenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        PhantomReference&lt;String&gt; stringPhantomReference = <span class=\"keyword\">new</span> PhantomReference&lt;&gt;(<span class=\"keyword\">new</span> String(<span class=\"string\">\"PhantomReference\"</span>), stringReferenceQueue);</span><br><span class=\"line\">        System.out.println(stringPhantomReference.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用计数器\"><a href=\"#引用计数器\" class=\"headerlink\" title=\"引用计数器\"></a>引用计数器</h3><p>每个对象拥有一个计数器，当它被引用时，计数器 +1，引用释放时，计数器 -1，当计数器为 0 时，表示可以回收。</p>\n<p>存在的问题是循环引用。为了解决这个问题，又引入了“可达性”（GC Roots Tracing）的概念，目前主流的 JVM 都采用了这种计数。简单说，就是从根部开始向下搜索，如果对象无法被触及，则认为是可以回收的，这种对象称为“不可达对象”。</p>\n<p>看一下 JVM 运行时的内存结构：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/jvm.png\" alt=\"JVM\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JVM</div>\n            </figure>\n<p>GC Roots 包括</p>\n<ul>\n<li>虚拟机栈的栈帧中的引用对象（来自局部变量表）</li>\n<li>方法区静态属性实体引用的对象</li>\n<li>方法区的常量引用对象</li>\n<li>本地方法栈中 JNI 引用的对象</li>\n<li>存活 Thread 引用的对象</li>\n</ul>\n<p>在根搜索算法中，要真正宣告一个对象死亡，至少要经历两次标记过程：</p>\n<ul>\n<li>如果对象在进行根搜索后发现没有与 GC Roots 相连接的引用链，那它会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行 finalize() 方法</li>\n<li>当对象没有覆盖 finalize() 方法，或 finalize() 方法已经被虚拟机调用过，虚拟机将这两种情况都视为没有必要执行</li>\n<li>如果该对象被判定为有必要执行 finalize() 方法，那么这个对象将会被放置在一个名为 F-Queue 队列中，并在稍后由一条由虚拟机自动建立的、低优先级的 Finalizer 线程去执行 finalize() 方法</li>\n<li>finalize() 方法是对象逃脱死亡命运的最后一次机会（因为一个对象的finalize() 方法最多只会被系统自动调用一次）, 稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果要在finalize（）方法中成功拯救自己，只要在finalize() 方法中让该对象重引用链上的任何一个对象建立关联即可。而如果对象这时还没有关联到任何链上的引用，那它就会被回收掉</li>\n</ul>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"标记-清除-算法\"><a href=\"#标记-清除-算法\" class=\"headerlink\" title=\"标记-清除 算法\"></a>标记-清除 算法</h4><p>分为“标记”和“清除”两部，首先标记出需要回收的对象，然后在第二步清除它们。是最基础的回收算法，后续算法都是基于它的基础上进行改进。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/标记清除.png\" alt=\"标记-清除\" title=\"\">\n                </div>\n                <div class=\"image-caption\">标记-清除</div>\n            </figure>\n<ul>\n<li>效率问题：需要两次扫描</li>\n<li>空间问题：产生大量内存碎片</li>\n</ul>\n<h4 id=\"复制-算法\"><a href=\"#复制-算法\" class=\"headerlink\" title=\"复制 算法\"></a>复制 算法</h4><p>将可用内存平均分为2块，每次只使用其中的一块。当一块内存使用完成后，将存活对象复制到另一块内存中，然后清空。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/复制.png\" alt=\"复制\" title=\"\">\n                </div>\n                <div class=\"image-caption\">复制</div>\n            </figure>\n<p>优点</p>\n<ul>\n<li>每次只操作一块内存，分配时无需要考虑内存碎片情况，只移动指针即可，实现简单，运行高效</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>利用率问题：可用内存少了一半</li>\n<li>效率问题：老生代对象由于存活率高，频繁复制</li>\n</ul>\n<h4 id=\"标记-压缩-算法\"><a href=\"#标记-压缩-算法\" class=\"headerlink\" title=\"标记-压缩 算法\"></a>标记-压缩 算法</h4><p>标记后，将所有存活对象向一端移动</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/标记压缩.png\" alt=\"标记-压缩\" title=\"\">\n                </div>\n                <div class=\"image-caption\">标记-压缩</div>\n            </figure>\n<p>优点</p>\n<ul>\n<li>对于老年代，会逐渐移动到头部</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>新生代对象多的话，会频繁移动</li>\n</ul>\n<h4 id=\"分代收集-算法\"><a href=\"#分代收集-算法\" class=\"headerlink\" title=\"分代收集 算法\"></a>分代收集 算法</h4><p>对新生代采用复制算法（Minor GC），老年代采用标记压缩算法（Major GC），全部回收称为 Full GC。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/分代收集.png\" alt=\"分代收集\" title=\"\">\n                </div>\n                <div class=\"image-caption\">分代收集</div>\n            </figure>\n<ul>\n<li>年轻代: 是所有新对象产生的地方.年轻代被分为3个部分(Enden区和两个Survivor区,也叫From和To),当Eden区被对象填满时,就会执行Minor GC,并把所有存活下来的对象转移到其中一个survivor区(Form),Minor GC同样会检查存活下来的对象,并把它们转移到另一个survivor区(To),这样在一段时间内,总会有一个空的survivor区,经过多次GC周期后，仍然存活下来的对象会被转移到年老代内存空间,常这是在年轻代有资格提升到年老代前通过设定年龄阈值来完成的,需要注意，Survivor的两个区是对称的,没先后关系,from和to是相对的.</li>\n<li>老年代: 在年轻代中经历了N次回收后仍然没有被清除的对象,就会被放到年老代中,都是生命周期较长的对象.对于年老代,则会执行Major GC,来清理.在某些情况下,则会触发Full GC,来清理整个堆内存</li>\n<li>元空间: 堆外的一部分内存,通常直接使用的是系统内存,用于存放运行时常量池,等内容,垃圾回收对应元空间来说没有明显的影响</li>\n</ul>\n<h4 id=\"参考：jvm-垃圾回收\"><a href=\"#参考：jvm-垃圾回收\" class=\"headerlink\" title=\"参考：jvm - 垃圾回收\"></a>参考：<a href=\"https://my.oschina.net/wangkang80/blog/1559071\" target=\"_blank\" rel=\"noopener\">jvm - 垃圾回收</a></h4><h2 id=\"使用OkHttp同时发送3个请求，token过期如何处理\"><a href=\"#使用OkHttp同时发送3个请求，token过期如何处理\" class=\"headerlink\" title=\"使用OkHttp同时发送3个请求，token过期如何处理\"></a>使用OkHttp同时发送3个请求，token过期如何处理</h2><blockquote>\n<p>这是面试威佩时的一道面试题</p>\n</blockquote>\n<p>这与发几个请求无关，解决问题的点在于发现 token 过期后如何自动获取 token 并重发请求，也就是，<strong>静默自动登录，然后继续请求</strong>。解决思路是在拦截器链中增加一个 TokenInterceptor，判断返回状态是否为验证失效。</p>\n<ol>\n<li>发送请求给服务端</li>\n<li>根据返回状态码判断是否 token 过期</li>\n<li>如果过期，则调取同步接口获取新 token</li>\n<li>使用新 token 发送请求</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TokenInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"TokenInterceptor\"</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    Request request = chain.request();</span><br><span class=\"line\">    Response response = chain.proceed(request);</span><br><span class=\"line\">    Log.d(TAG, <span class=\"string\">\"response.code=\"</span> + response.code());</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">//根据和服务端的约定判断token过期</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTokenExpired(response)) &#123;</span><br><span class=\"line\">      Log.d(TAG, <span class=\"string\">\"自动刷新Token,然后重新请求数据\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">//同步请求方式，获取最新的Token</span></span><br><span class=\"line\">      String newToken = getNewToken();</span><br><span class=\"line\">      <span class=\"comment\">//使用新的Token，创建新的请求</span></span><br><span class=\"line\">      Request newRequest = chain.request()</span><br><span class=\"line\">          .newBuilder()</span><br><span class=\"line\">          .header(<span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Basic \"</span> + newToken)</span><br><span class=\"line\">          .build();</span><br><span class=\"line\">      <span class=\"comment\">//重新请求</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> chain.proceed(newRequest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 根据Response，判断Token是否失效</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTokenExpired</span><span class=\"params\">(Response response)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.code() == <span class=\"number\">301</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 同步请求方式，获取最新的Token</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getNewToken</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过获取token的接口，同步请求接口</span></span><br><span class=\"line\">    String newToken = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newToken;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是面试官问的“三个请求同时发送”，那么可以在 token 上增加一个时间戳，通过这个时间戳可以判断该 token 是否为更新过后的。那么，在 A、B、C 三个请求同时发出时，当 A 发现 token 过期并更新 token 后，B 和 C 可以读取新的 token 发送请求，而不必再向服务端获取新的 token。</p>\n<h3 id=\"一点点反思\"><a href=\"#一点点反思\" class=\"headerlink\" title=\"一点点反思\"></a>一点点反思</h3><p>面有赞的那一天自己刚刚撸过 OkHttp 的源码，还写了文字总结，但是被问到这道题时仍然一脸懵逼。问题在于对 OkHttp 以 Interceptor 为核心的根本思想没有把握，其实这道题是稍微有一点小花招。低配版的问法是“如何解决 token 过期”，这就很容易联想到 Interceptor（其实也不容易），高配版才是问“同时三个请求”，需要结合同步来解决。</p>\n<h3 id=\"参考-Android-OkHttp实现全局过期token自动刷新示例\"><a href=\"#参考-Android-OkHttp实现全局过期token自动刷新示例\" class=\"headerlink\" title=\"参考 Android OkHttp实现全局过期token自动刷新示例\"></a>参考 <a href=\"https://www.jb51.net/article/137444.htm\" target=\"_blank\" rel=\"noopener\">Android OkHttp实现全局过期token自动刷新示例</a></h3><h2 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h2><p>同样是威佩的面试题</p>\n<blockquote>\n<p>The RecyclerView widget is a more advanced and flexible version of ListView.</p>\n</blockquote>\n<p>RecyclerView 支持多种 Layout，如 LinearLayout、GridLayout。使用 RecyclerView 时需要继承 RecyclerView.ViewHolder 类，如果数据发生变化，调用 RecyclerView.Adapter.notify…() 方法。示例代码如下：</p>\n<p>gradle</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation &apos;com.android.support:recyclerview-v7:27.1.1&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>布局文件，没啥特别的，除了需要声明一个 Scrollbar 的方向</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"comment\">&lt;!-- A RecyclerView with some commonly used attributes --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/my_recycler_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:scrollbars</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Activity，跟 ListView 不同点在：</p>\n<ul>\n<li>如果 RecyclerView 的尺寸不会发生变化，要调用<code>setHasFixedSize(true)</code>来提高性能</li>\n<li>要根据布局设置 LayoutManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerView mRecyclerView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerView.Adapter mAdapter;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerView.LayoutManager mLayoutManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.my_activity);</span><br><span class=\"line\">        mRecyclerView = (RecyclerView) findViewById(R.id.my_recycler_view);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use this setting to improve performance if you know that changes</span></span><br><span class=\"line\">        <span class=\"comment\">// in content do not change the layout size of the RecyclerView</span></span><br><span class=\"line\">        mRecyclerView.setHasFixedSize(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use a linear layout manager</span></span><br><span class=\"line\">        mLayoutManager = <span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// specify an adapter (see also next example)</span></span><br><span class=\"line\">        mAdapter = <span class=\"keyword\">new</span> MyAdapter(myDataset);</span><br><span class=\"line\">        mRecyclerView.setAdapter(mAdapter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Adapter，与 ListView 的写法差异较大。</p>\n<ul>\n<li>需要继承自 RecyclerView.Adapter&lt;MyAdapter.ViewHolder&gt;</li>\n<li>必须声明一个静态内部类 ViewHolder</li>\n<li>重载 onCreateViewHolder 方法，需要生成布局，初始化 ViewHolder 并返回</li>\n<li>重载 onBindViewHolder 方法，这一步是将 ViewHolder 中的 View 都赋予正确的数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">MyAdapter</span>.<span class=\"title\">ViewHolder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String[] mDataset;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Provide a reference to the views for each data item</span></span><br><span class=\"line\">    <span class=\"comment\">// Complex data items may need more than one view per item, and</span></span><br><span class=\"line\">    <span class=\"comment\">// you provide access to all the views for a data item in a view holder</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// each data item is just a string in this case</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> TextView mTextView;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(TextView v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(v);</span><br><span class=\"line\">            mTextView = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Provide a suitable constructor (depends on the kind of dataset)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyAdapter</span><span class=\"params\">(String[] myDataset)</span> </span>&#123;</span><br><span class=\"line\">        mDataset = myDataset;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create new views (invoked by the layout manager)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MyAdapter.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                                   <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// create a new view</span></span><br><span class=\"line\">        TextView v = (TextView) LayoutInflater.from(parent.getContext())</span><br><span class=\"line\">                .inflate(R.layout.my_text_view, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ViewHolder vh = <span class=\"keyword\">new</span> ViewHolder(v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vh;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Replace the contents of a view (invoked by the layout manager)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// - get element from your dataset at this position</span></span><br><span class=\"line\">        <span class=\"comment\">// - replace the contents of the view with that element</span></span><br><span class=\"line\">        holder.mTextView.setText(mDataset[position]);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return the size of your dataset (invoked by the layout manager)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mDataset.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LayoutManager\"><a href=\"#LayoutManager\" class=\"headerlink\" title=\"LayoutManager\"></a>LayoutManager</h3><p>Android Support Library 自带的有三种，你也可以通过继承 RecyclerView.LayoutManager 来实现自己的布局。</p>\n<ul>\n<li>LinearLayoutManager，一维线性列表，同 ListView</li>\n<li>GridLayoutManager，网格列表，同 GridView</li>\n<li>StaggeredGridLayotManager，瀑布流列表，列之间有错位</li>\n</ul>\n<h3 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h3><p>Item 变化的时候，RecyclerView 使用 animator 来改变外观，animator 继承自 RecyclerView.ItemAnimator。</p>\n<h3 id=\"List-Item-Selection\"><a href=\"#List-Item-Selection\" class=\"headerlink\" title=\"List-Item Selection\"></a>List-Item Selection</h3><p>这部分略，日后写 Demo 补充</p>\n<h3 id=\"RecyclerView-几大重要成员\"><a href=\"#RecyclerView-几大重要成员\" class=\"headerlink\" title=\"RecyclerView 几大重要成员\"></a>RecyclerView 几大重要成员</h3><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/recyclerview_components.jpeg\" alt=\"RecyclerView Components\" title=\"\">\n                </div>\n                <div class=\"image-caption\">RecyclerView Components</div>\n            </figure>\n<h3 id=\"RecyclerView-缓存\"><a href=\"#RecyclerView-缓存\" class=\"headerlink\" title=\"RecyclerView 缓存\"></a>RecyclerView 缓存</h3><ul>\n<li>内部两级缓存</li>\n<li>划出界面的 ViewHolder 会被放入 Cache（一级缓存），容量为2。Cache 中的对象都是同种 ViewType。</li>\n<li>从 Cache 中被清除的对象，会被放入 RecycledViewPool，容量为5。RecycledViewPool 中的对象按照 ViewType 分类。</li>\n</ul>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/recyclerview_cache.webp\" alt=\"RecyclerView Cache\" title=\"\">\n                </div>\n                <div class=\"image-caption\">RecyclerView Cache</div>\n            </figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://developer.android.com/guide/topics/ui/layout/recyclerview\" target=\"_blank\" rel=\"noopener\">RecycyerView - Developers</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?src=3&amp;timestamp=1531269425&amp;ver=1&amp;signature=FWpjJw5RhmTc*7UKCIha2t9LR*Hpr*knccH5aD2iiD7suxuKZgREroUCYpvcJxeOaz3lJbk4Ht4MmjXZAHcp-x1Ui7EAekMj8i1-hWpBwyd1YhGg7wx15pshQwnTTm7Dvan5LJDoOJvNoPatOjSrFePotNTHk1ON6c*6K1OZm40=\" target=\"_blank\" rel=\"noopener\">深入浅出 RecyclerView</a></li>\n</ul>\n<h2 id=\"微信的“分享”页面使用的是哪种启动模式\"><a href=\"#微信的“分享”页面使用的是哪种启动模式\" class=\"headerlink\" title=\"微信的“分享”页面使用的是哪种启动模式\"></a>微信的“分享”页面使用的是哪种启动模式</h2><p>这是面试有赞时，面试官提问的第一道题目。直觉告诉我 Standard 和 SingleTop 都不适用，但是并不能从 SingleInstance 和 SingleTask 中选出一个合适的来，这一块是知识盲区，以前根本没有从实用的角度来考虑这问题，都是死记硬背启动模式。</p>\n<p>本质上还是考察启动模式的应用场景。</p>\n<h3 id=\"SingleInstance\"><a href=\"#SingleInstance\" class=\"headerlink\" title=\"SingleInstance\"></a>SingleInstance</h3><p>与外部应用共享的页面，一般设置成这种启动模式，也就是作为外部App调用自己客户端程序的入口。这是为了方便其它应用的 Activity 调起本应用。同时，由于 SingleInstance 会单独起一个 Task，当用户操作完成该页面后，点击返回按钮，会自动退回到外部应用。在使用时应该注意声明<code>taskAffinity</code>，以便在任务管理中看到新 Task。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".SingleInstanceActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:label</span>=<span class=\"string\">\"singleInstance launchMode\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleInstance\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"SingleTask\"><a href=\"#SingleTask\" class=\"headerlink\" title=\"SingleTask\"></a>SingleTask</h3><p>一个 Task 内只允许有一个 SingleTask 的 Activity，启东时如果 Task 内已经有了同 Activity，则会将其上所有的 Activity 按照生命流程进行销毁，同时调用该 Activity 的<code>onNewIntent</code>方法。适合的应用场景是应用内部统一入口，比如浏览器首页、商户详情页等。同样，需要声明<code>taskAffinity</code>以保证它会新起一个 Task。</p>\n<h3 id=\"SingleTop\"><a href=\"#SingleTop\" class=\"headerlink\" title=\"SingleTop\"></a>SingleTop</h3><p>同样，如果 Task 顶已经有了同一个 Activity，会调用<code>onNewIntent</code>传入参数。</p>\n<p>应用场景：</p>\n<ul>\n<li>点击“通知”后打开的详情页面</li>\n<li>浏览器搜索结果页，带有关键词输入框</li>\n</ul>\n<h3 id=\"Standard\"><a href=\"#Standard\" class=\"headerlink\" title=\"Standard\"></a>Standard</h3><p>应用于可以打开多个实例的页面，比如与不同人的聊天页面，撰写邮件页面等。</p>\n<h3 id=\"场景：应用进程被杀后再次启动\"><a href=\"#场景：应用进程被杀后再次启动\" class=\"headerlink\" title=\"场景：应用进程被杀后再次启动\"></a>场景：应用进程被杀后再次启动</h3><p>设想一个这样的应用场景：用户在使用你的应用时，突然接收到一个微信消息，他跳转到微信后，你的应用被切换至后台运行。该用户在微信中翻阅了朋友圈、查看一些视频，以及进行了其它很多吃内存的操作，导致系统内存紧张，这时你的应用进程被杀死。但是由于Android系统仍然会保持 Task 栈的内容，所以用户在“最近应用”里仍然是可以看到你的应用的。此时如果用户通过“最近应用”切换回你的应用（进程已经被杀死），极易发生异常导致闪退。</p>\n<p>异常原因在于当进程被杀死后，所有的静态常量值会被清空，如果在此时使用并且未经检查，很容易出现 NPE 等异常。常规解决方法是在 onSaveInstance 里面对变量进行保存，然后在 onRestoreInstance 里恢复变量值。缺点是工作量大，代码冗长。</p>\n<p>此时的一个解决思路是对于进程被杀死的情况，如果再次启动，则跳转回应用首页（这点需要获取产品经理同意），随后的一切等同于首次启动。</p>\n<p>相应的技术思路是，将首页启动模式声明为 SingleTask，同时写一个 BaseActivity，它里面有一个 getAppStatus 方法用来判断应用是否处于回收后重新启动的状态，判断方法是读取一个静态 int 类型变量 appStatus，它默认值是 KILLED，在每一个子 Activity 的 onCreate 方法里将其设置成 NORMAL 值。这样一旦被回收，它就会变成 KILLED，就可以在 BaseActivity.onCreate 里通过对这个变量的判断，决定是不是要重新回到首页。</p>\n<h3 id=\"参考：如何让你的app在后台被干掉后优雅的启动\"><a href=\"#参考：如何让你的app在后台被干掉后优雅的启动\" class=\"headerlink\" title=\"参考：如何让你的app在后台被干掉后优雅的启动\"></a>参考：<a href=\"http://www.apkbus.com/blog-964080-78423.html\" target=\"_blank\" rel=\"noopener\">如何让你的app在后台被干掉后优雅的启动</a></h3><h2 id=\"IntentService-实现原理\"><a href=\"#IntentService-实现原理\" class=\"headerlink\" title=\"IntentService 实现原理\"></a>IntentService 实现原理</h2><p>通过<code>startService(Intent)</code>来启动一个 IntentService，它内部有一个工作队列（Worker Thread），在工作线程内运行，不会影响 UI 线程。IntentService 是一个抽象类，继承它时必须实现<code>onHandleIntent</code>方法。</p>\n<ul>\n<li>普通 Service 由于运行在 UI 线程，无法进行耗时操作，IntentService 解决了这个问题</li>\n<li>运行完成后，IntentService 会自动停止</li>\n</ul>\n<p>从原理上讲，IntentService 是创建了一个 HandlerThread，然后用 thread.getLooper() 赋给 Handler，这个 Handler 接收 onStart 时传来的 Intent，并以此 Intent 调用你所覆盖的 onHandleIntent 方法。任务完成后，可以用广播或者 EventBus 等手段通知调用者。</p>\n<h3 id=\"参考：IntentService的原理和实例分析\"><a href=\"#参考：IntentService的原理和实例分析\" class=\"headerlink\" title=\"参考：IntentService的原理和实例分析\"></a>参考：<a href=\"https://www.jianshu.com/p/4dd46616564d\" target=\"_blank\" rel=\"noopener\">IntentService的原理和实例分析</a></h3><h2 id=\"HTTP-请求和响应头的格式\"><a href=\"#HTTP-请求和响应头的格式\" class=\"headerlink\" title=\"HTTP 请求和响应头的格式\"></a>HTTP 请求和响应头的格式</h2><p>有赞和威佩都问到了这一题。</p>\n<p>HTTP的头域包括通用头，请求头，响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。域名是大小写无关的，域值前可以添加任何数量的空格符，头域可以被扩展为多行，在每行开始处，使用至少一个空格或制表符。</p>\n<h3 id=\"通用头\"><a href=\"#通用头\" class=\"headerlink\" title=\"通用头\"></a>通用头</h3><p>通用头域包含请求和响应消息都支持的头域，通用头域包含Cache-Control、Connection、Date、Pragma、Transfer-Encoding、Upgrade、Via。</p>\n<h3 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h3><p>请求消息的第一行为下面的格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Method　SP　Request-URI　SP　HTTP-Version　CRLF</span><br></pre></td></tr></table></figure>\n<p>请求头域允许客户端向服务器传递关于请求或者关于客户机的附加信息。请求头域可能包含下列字段Accept、Accept-Charset、Accept- Encoding、Accept-Language、Authorization、From、Host、If-Modified-Since、If- Match、If-None-Match、If-Range、If-Range、If-Unmodified-Since、Max-Forwards、 Proxy-Authorization、Range、Referer、User-Agent。</p>\n<h3 id=\"响应头\"><a href=\"#响应头\" class=\"headerlink\" title=\"响应头\"></a>响应头</h3><p>响应消息的第一行为下面的格式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP-Version　SP　Status-Code　SP　Reason-Phrase　CRLF</span><br></pre></td></tr></table></figure>\n<p>常见错误码</p>\n<ul>\n<li>1xx:信息响应类，表示接收到请求并且继续处理</li>\n<li>2xx:处理成功响应类，表示动作被成功接收、理解和接受</li>\n<li>3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理</li>\n<li>4xx:客户端错误，客户请求包含语法错误或者是不能正确执行</li>\n<li>5xx:服务端错误，服务器不能正确执行一个正确的请求</li>\n</ul>\n<h3 id=\"实体信息\"><a href=\"#实体信息\" class=\"headerlink\" title=\"实体信息\"></a>实体信息</h3><p>请求消息和响应消息都可以包含实体信息，实体信息一般由实体头域和实体组成。实体头域包含关于实体的原信息，实体头包括Allow、Content-Base、Content-Encoding、Content-Language、 Content-Length、Content-Location、Content-MD5、Content-Range、Content-Type、 Etag、Expires、Last-Modified、extension-header。</p>\n<h2 id=\"MVP-中对-Presenter-如何进行测试\"><a href=\"#MVP-中对-Presenter-如何进行测试\" class=\"headerlink\" title=\"MVP 中对 Presenter 如何进行测试\"></a>MVP 中对 Presenter 如何进行测试</h2><h3 id=\"各层单元测试选型\"><a href=\"#各层单元测试选型\" class=\"headerlink\" title=\"各层单元测试选型\"></a>各层单元测试选型</h3><p>各层由于特性不同，所采用的测试工具也不一样</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/mvp_ut.png\" alt=\"JVM\" title=\"\">\n                </div>\n                <div class=\"image-caption\">JVM</div>\n            </figure>\n<ul>\n<li>Model层：涉及数据库操作，依赖 Android 环境，使用 AndroidJUnitRunner 测试</li>\n<li>View层：涉及 UI，使用 Espresso 进行测试</li>\n<li>Presenter层：不需要 Android 环境，纯 JAVA 代码，使用 JUnit 测试</li>\n</ul>\n<p>MVP 的一大优点就是将数据、视图、逻辑解耦，从而可以对其中某一角色进行单独测试。然而，想要对 Presenter 进行测试，就必须回答以下几个问题：</p>\n<ol>\n<li>测试过程要避免通过网络或者本地存储产生脏数据，因此必须对数据层接口进行 Mock</li>\n<li>为了提高执行效率，并且 Presenter 本身是视图无关的，因此测试用例应该可以脱离真机/模拟器独立运行，也就是说，要有对 View 的Mock</li>\n<li>如何检验 Presenter 的各个方法运行成功了</li>\n</ol>\n<p>我们以 Demo 中对 AddEditTaskPresenter 的测试为例，看参考答案是怎样的，对应的类是<code>AddEditTaskPresenterTest.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mock</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> TasksRepository mTasksRepository;</span><br></pre></td></tr></table></figure>\n<p>这里直接使用 Mockito 的<code>@Mock</code>注解来声明，需要注意的是要在测试用例运行之前通过<code>MockitoAnnotations.initMocks(this)</code>进行注入。如此这般解决了数据层 Mock 的问题。</p>\n<p>对 View 的注入也一样</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mock</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> AddEditTaskContract.View mAddEditTaskView;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Before</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setupMocksAndView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Mockito has a very convenient way to inject mocks by using the @Mock annotation. To</span></span><br><span class=\"line\">    <span class=\"comment\">// inject the mocks in the test the initMocks method needs to be called.</span></span><br><span class=\"line\">    MockitoAnnotations.initMocks(<span class=\"keyword\">this</span>); <span class=\"comment\">// 注入 Mock 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The presenter wont't update the view unless it's active.</span></span><br><span class=\"line\">    when(mAddEditTaskView.isActive()).thenReturn(<span class=\"keyword\">true</span>); <span class=\"comment\">// 这段代码的含义是“当 isActive 被调用时，直接返回 true”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们看如何检验 Presenter 里面各个方法调用成功，选一个比较复杂的涉及到回调的场景，也就是获取单个 Task，这是一个异步回调接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">populateTask_callsRepoAndUpdatesView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Task testTask = <span class=\"keyword\">new</span> Task(<span class=\"string\">\"TITLE\"</span>, <span class=\"string\">\"DESCRIPTION\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Get a reference to the class under test</span></span><br><span class=\"line\">    mAddEditTaskPresenter = <span class=\"keyword\">new</span> AddEditTaskPresenter(testTask.getId(),</span><br><span class=\"line\">            mTasksRepository, mAddEditTaskView, <span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// When the presenter is asked to populate an existing task</span></span><br><span class=\"line\">    mAddEditTaskPresenter.populateTask(); <span class=\"comment\">// 这里会调用 Repository 里面的 getTask 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Then the task repository is queried and the view updated</span></span><br><span class=\"line\">    <span class=\"comment\">// 验证调用到了 getTask 方法，并且将回调赋给 mGetTaskCallbackCaptor，后面可以对 captor 自由触发回调</span></span><br><span class=\"line\">    verify(mTasksRepository).getTask(eq(testTask.getId()), mGetTaskCallbackCaptor.capture());</span><br><span class=\"line\">    assertThat(mAddEditTaskPresenter.isDataMissing(), is(<span class=\"keyword\">true</span>)); <span class=\"comment\">// 这时候还没有加载成功 task</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Simulate callback</span></span><br><span class=\"line\">    mGetTaskCallbackCaptor.getValue().onTaskLoaded(testTask);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 验证 View 里面相应方法得到调用</span></span><br><span class=\"line\">    verify(mAddEditTaskView).setTitle(testTask.getTitle());</span><br><span class=\"line\">    verify(mAddEditTaskView).setDescription(testTask.getDescription());</span><br><span class=\"line\">    assertThat(mAddEditTaskPresenter.isDataMissing(), is(<span class=\"keyword\">false</span>)); <span class=\"comment\">// 此时加载成功</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>综上，可以理解对 Presenter 进行单元测试的验证流程就是“调用 Presenter 里面的某个方法 -&gt; 将回调暂存 -&gt; 验证 View 里面相应的方法被执行 -&gt; 给回调赋值，验证回调”</p>\n<h2 id=\"屏幕物理尺寸，像素，dp，px，sp\"><a href=\"#屏幕物理尺寸，像素，dp，px，sp\" class=\"headerlink\" title=\"屏幕物理尺寸，像素，dp，px，sp\"></a>屏幕物理尺寸，像素，dp，px，sp</h2><p>物理尺寸：这个很好理解，就是屏幕长多少mm，宽多少mm。但通常不会直接说长宽，而是用“xx英寸”表示，比如我的小米5x就是5.5英寸，这里的5.5英寸指的是对角线长度，1英寸 ≈ 2.54cm，5.5英寸 ≈ 13.97cm ≈ 14cm，市面上如今 90% 以上的手机都是 16:9 的，所以可以列出方程 (16x)^2 + (9x)^2 = 14^2，解方程得到 x = 0.76cm，得出小米5x屏幕物理尺寸为长 12.16cm，宽 6.84cm。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/5x_screen_size.jpg\" alt=\"5x屏幕尺寸\" title=\"\">\n                </div>\n                <div class=\"image-caption\">5x屏幕尺寸</div>\n            </figure>\n<p>分辨率/像素：从上图里看到，5x宽高为 1080px * 1920px，对于这样的手机通常称其分辨率为 1080p。像素的概念比较容易理解，一个像素就是液晶屏的一个最小发光单元，8-bit 游戏常被称为像素游戏，因为像素颗粒通常比较大，图像有方块感。</p>\n<p>物理尺寸与分辨率没有必然的关系。</p>\n<p>像素密度：Pixels Per Inch，PPI，也称为 Dots Per Inch（DPI）。每英寸上排列的像素个数，这个“每英寸”是长还是宽呢？都不是，是指对角线。通过勾股定理计算，1080*1920 分辨率的屏幕，其对角线像素数为 2203p，那么小米5x的 PPI 就是 2203/5.5 = 400。像素密度越高，锯齿感越低，显示越精细。</p>\n<p>倍率和逻辑像素：iPhone 3gs 和 4s，物理尺寸都是 3.5 英寸，3gs 的分辨率是 320x480，4s 的分辨率则是 640x960，4s 的像素密度是 3gs 的两倍，单个像素尺寸是 3gs 的一半。但是在显示中，这两个设备的显示效果却是一样的，原因在于 4s 用 2x2 个像素合并成 1 个像素，如下图。这使得同样的图片在 4s 上显示更加清晰。然而这对图片源文件有要求，必须使用带有“@2x”后缀的图片，系统会自动将其用于 4s 设备上。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/ip_3gs_4s.png\" alt=\"3gs 4s\" title=\"\">\n                </div>\n                <div class=\"image-caption\">3gs 4s</div>\n            </figure>\n<p>上面讲的是苹果的处理方法，对于 Android 这并不太适用，因为 Android 设备的分辨率实在太多了。因此划分为多种尺寸，如下。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/Android_dpi.png\" alt=\"Android DPI\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Android DPI</div>\n            </figure>\n<p>以 160DPI（mdpi） 为基准，倍率为一倍，其它密度以此计算。在 160DPI的情况下，1px = 1dp。</p>\n<ul>\n<li>ldpi [0.75倍]</li>\n<li>mdpi [1倍]</li>\n<li>hdpi [1.5倍]</li>\n<li>xhdpi [2倍]</li>\n<li>xxhdpi [3倍]</li>\n<li>xxxhdpi [4倍]</li>\n</ul>\n<p>所以为了保证准确高效的沟通，无论是在标注图还是在日常沟通中，设计人员与开发人员都需要尽量以逻辑像素尺寸来描述和理解界面，真正决定显示效果的，是逻辑像素尺寸。然而并不是所有 Android 设备的逻辑像素尺寸都一致，比如两种常见的屏幕480×800和1080×1920，它们分别属于hdpi和xxhdpi。除以各自倍率1.5倍和3倍，得到逻辑像素为320×533和360×640。很显然，后者更宽更高，能显示更多内容。</p>\n<p>px：pixels,像素，屏幕上实际的像素点单位</p>\n<p>dp：device independent pixels, 设备独立像素，安卓专用长度单位，以160ppi屏幕为标准，则 1dp=1px。dp*ppi/160=px</p>\n<p>sp：scaled pixels,放大像素，安卓专用字体单位，以160ppi屏幕为标准，字体大小为100%时，则1dp=1px</p>\n<p>Android 一般以 360x640 的逻辑尺寸来设计 UI</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180709_interview/Android_Screen_Size.png\" alt=\"Android常见屏幕尺寸与DPI\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Android常见屏幕尺寸与DPI</div>\n            </figure>\n","categories":[],"tags":["Android","面试"]},{"title":"OkHttp 源码学习","url":"https://lilei.pro/2018/07/06/okhttp/","content":"<blockquote>\n<p>OkHttp 是由 Square 发布的 HTTP Client，用于处理 HTTP 请求。<br>用官网的描述就是，An HTTP &amp; HTTP/2 client for Android and Java applications.</p>\n</blockquote>\n<h1 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h1><ul>\n<li>支持 HTTP/2，多个连接可以共用一个 Socket</li>\n<li>连接池可以减少延迟（非 HTTP/2）</li>\n<li>GZIP 压缩减少流量</li>\n<li>Response 缓存</li>\n<li>重定向和重试</li>\n</ul>\n<h1 id=\"OkHttp-的用法\"><a href=\"#OkHttp-的用法\" class=\"headerlink\" title=\"OkHttp 的用法\"></a>OkHttp 的用法</h1><h2 id=\"同步请求\"><a href=\"#同步请求\" class=\"headerlink\" title=\"同步请求\"></a>同步请求</h2><p>需要在 AsyncTask 或者起线程来进行，调用<code>execute()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">doRequest</span><span class=\"params\">(String param)</span> </span>&#123;</span><br><span class=\"line\">\tRequest.Builder builder = <span class=\"keyword\">new</span> Request.Builder();</span><br><span class=\"line\">\tbuilder.url(param);</span><br><span class=\"line\">\tRequest request = builder.build();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t    Response response = client.newCall(request).execute();</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> response.body().string();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">\t    e.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异步请求\"><a href=\"#异步请求\" class=\"headerlink\" title=\"异步请求\"></a>异步请求</h2><p>调用<code>enqueue()</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">Request request = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">        .url(url)</span><br><span class=\"line\">        .build();</span><br><span class=\"line\"></span><br><span class=\"line\">client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">        call.cancel();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String myResponse = response.body().string();</span><br><span class=\"line\"></span><br><span class=\"line\">        MainActivity.<span class=\"keyword\">this</span>.runOnUiThread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                txtString.setText(myResponse);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置-Header-和参数\"><a href=\"#设置-Header-和参数\" class=\"headerlink\" title=\"设置 Header 和参数\"></a>设置 Header 和参数</h2><p>在 URL 构建过程中通过<code>addQueryParameter</code>设置参数，在 Request 构建过程中设置 Header</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpUrl.Builder urlBuilder = HttpUrl.parse(<span class=\"string\">\"https://httpbin.org/get).newBuilder();</span></span><br><span class=\"line\"><span class=\"string\">urlBuilder.addQueryParameter(\"</span>website<span class=\"string\">\", \"</span>www.journaldev.com<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">urlBuilder.addQueryParameter(\"</span>tutorials<span class=\"string\">\", \"</span>android<span class=\"string\">\");</span></span><br><span class=\"line\"><span class=\"string\">String url = urlBuilder.build().toString();</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Request request = new Request.Builder()</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t.header(\"</span>Authorization<span class=\"string\">\", \"</span>replace <span class=\"keyword\">this</span> text with your token<span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t.url(url)</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t.build();</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"post-请求\"><a href=\"#post-请求\" class=\"headerlink\" title=\"post 请求\"></a>post 请求</h2><p>需要声明<code>MediaType</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String postUrl= <span class=\"string\">\"https://reqres.in/api/users/\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> String postBody=<span class=\"string\">\"&#123;\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"    \\\"name\\\": \\\"morpheus\\\",\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"    \\\"job\\\": \\\"leader\\\"\\n\"</span> +</span><br><span class=\"line\">        <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> MediaType JSON = MediaType.parse(<span class=\"string\">\"application/json; charset=utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">postRequest</span><span class=\"params\">(String postUrl,String postBody)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    OkHttpClient client = <span class=\"keyword\">new</span> OkHttpClient();</span><br><span class=\"line\"></span><br><span class=\"line\">    RequestBody body = RequestBody.create(JSON, postBody);</span><br><span class=\"line\"></span><br><span class=\"line\">    Request request = <span class=\"keyword\">new</span> Request.Builder()</span><br><span class=\"line\">            .url(postUrl)</span><br><span class=\"line\">            .post(body)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\"></span><br><span class=\"line\">    client.newCall(request).enqueue(<span class=\"keyword\">new</span> Callback() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call call, IOException e)</span> </span>&#123;</span><br><span class=\"line\">            call.cancel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call call, Response response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">            Log.d(<span class=\"string\">\"TAG\"</span>,response.body().string());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h1><p>我认为 OkHttp 的核心是以分层的思想链式处理网络请求。所有处理的代码都位于<code>XXXInterceptor</code>中，一共有6个这样的 Interceptor，接口如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Interceptor</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Response <span class=\"title\">intercept</span><span class=\"params\">(Chain chain)</span> <span class=\"keyword\">throws</span> IOException</span>; <span class=\"comment\">// 处理当前层的请求</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下图来源于 Piasy 的博客，很好地描述了 OkHttp 发送网络请求到处理完成的过程。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180706_okhttp/okhttp_flow.png\" alt=\"flow\" title=\"\">\n                </div>\n                <div class=\"image-caption\">flow</div>\n            </figure>\n<h1 id=\"关键类讲解\"><a href=\"#关键类讲解\" class=\"headerlink\" title=\"关键类讲解\"></a>关键类讲解</h1><ul>\n<li><p>RetryAndFollowUpInterceptor，处理请求失败重试以及重定向（30X）</p>\n</li>\n<li><p>BridgeInterceptor，对 Request 和 Response 进行封装，主要是写 Header，Gzip 解压缩等操作</p>\n</li>\n<li><p>CacheInterceptor，缓存，很棒的磁盘缓存设计，维护一个日志文件来进行缓存的恢复重建</p>\n</li>\n<li><p>ConnectInterceptor，管理与目标的连接，采用策略模式，有 HTTP(HTTP/1.1) 和 HTTP/2 两种策略，关键类<code>StreamAllocation</code></p>\n</li>\n<li><p>CallServerInterceptor，数据交换，将数据传送给服务器，从服务器拉取数据。写请求头 -&gt; 写请求体 -&gt; 获取响应头 -&gt; 获取响应体</p>\n</li>\n</ul>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"构建器模式\"><a href=\"#构建器模式\" class=\"headerlink\" title=\"构建器模式\"></a>构建器模式</h2><p>构建器模式可以减少冗长的构造函数，并且可以在设置参数时进行检查。OKHttpClient.java、Request.java 这些类里面都用到了 Builder 模式，简单写一个模版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Foo</span><span class=\"params\">(Builder builder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.a = builder.a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">a</span><span class=\"params\">(A a)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Foo <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Foo(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h2><p>策略模式体现面向接口编程的概念，将具体实现与接口剥离，减少耦合性。ContentInterceptor 里面的 HttpCodec 接口就是这样的，有 HTTP/1 和 HTTP/2 两种实现。</p>\n<h2 id=\"责任链模式（chain-of-responbility）\"><a href=\"#责任链模式（chain-of-responbility）\" class=\"headerlink\" title=\"责任链模式（chain of responbility）\"></a>责任链模式（chain of responbility）</h2><p>责任链模式包含了一系列对象，以及一系列处理指令。这些对象共同构成了一个链表，链表中的每一环都有一系列指令，链表中的对象经过逐级递归处理后，生成最终结果。可以向处理链的末尾添加新的处理指令。Interceptor.Chain 所采用的模式，每一层都处理各自的职责，按照链式递归调用。</p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>OkHttp 的代码复杂程度让人头大，我不敢说自己已经摸清了这个框架，有很多地方值得深入挖掘，比如基于日志 Cache 的实现细节，责任链模式的设计。下一课题：Retrofit。学习过程中参考了简书上“被代码淹没的小伙子”<a href=\"https://www.jianshu.com/p/37e26f4ea57b\" target=\"_blank\" rel=\"noopener\">okhttp源码分析</a>系列文章，感谢原作者。</p>\n","categories":[],"tags":["Android","源码学习"]},{"title":"Picasso 源码学习","url":"https://lilei.pro/2018/07/03/picasso/","content":"<blockquote>\n<p>Picasso 是由 Square 发布的图片加载框架，优雅地实现了 Android 系统中图片加载的功能。其中请求分类、任务调度、多级缓存等思想很有借鉴意义，本文将从源码角度阐述 Picasso 的工作原理。</p>\n</blockquote>\n<h1 id=\"Ask-Yourself：实现一个图片加载框架\"><a href=\"#Ask-Yourself：实现一个图片加载框架\" class=\"headerlink\" title=\"Ask Yourself：实现一个图片加载框架\"></a>Ask Yourself：实现一个图片加载框架</h1><p>图片的加载流程是<code>获取</code> - <code>变换</code> - <code>显示</code>，来源可能是网络、资源文件、本地文件，其中还要加上缓存，综上，可以整理出这样的流程图。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180703_picasso/picasso_flowchart.png\" alt=\"流程图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">流程图</div>\n            </figure>\n<p>结合上图，整理出主要职责类：</p>\n<ul>\n<li>请求包装类，包含请求地址、缓存策略</li>\n<li>缓存类，内存+磁盘，两级缓存管理</li>\n<li>请求处理类，实现相同的接口，有网络、本地、资源三种实现</li>\n<li>下载器类，兼有暂停、恢复、取消功能</li>\n<li>图片变换类，获取完图片后进行裁剪、缩放、旋转、圆角等变换</li>\n<li>调度器类，管理线程</li>\n</ul>\n<p>有了自己的理解之后，再结合 Picasso 的代码进行学习。</p>\n<h1 id=\"请求信息类-Request-RequestCreator\"><a href=\"#请求信息类-Request-RequestCreator\" class=\"headerlink\" title=\"请求信息类 Request/RequestCreator\"></a>请求信息类 Request/RequestCreator</h1><p>首先是 Request.java，这个类包含了待显示图片的地址、尺寸、缩放、旋转、裁剪信息，采用 Builder 模式，属性如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Uri uri;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> resourceId;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String stableKey;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> targetWidth;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> targetHeight;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> centerCrop;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> centerInside;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> onlyScaleDown;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">float</span> rotationDegrees;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">float</span> rotationPivotX;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">float</span> rotationPivotY;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasRotationPivot;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;Transformation&gt; transformations;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Bitmap.Config config;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Priority priority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后才是请求包装类 RequestCreator.java，在 Request.java 基础上，这个类增加了显示效果的属性，比如淡入、加载中的占位图片、错误图片、tag 以及缓存策略 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestCreator</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> AtomicInteger nextId = <span class=\"keyword\">new</span> AtomicInteger();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Picasso picasso;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Request.Builder data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> noFade;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> deferred;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> setPlaceholder = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> placeholderResId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> errorResId;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> memoryPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> networkPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Drawable placeholderDrawable;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Drawable errorDrawable;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Object tag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>另外，<code>Picasso.with(context).load(&quot;fake_url&quot;).into(someImageView)</code> 中的<code>into</code>方法也是由 RequestCreator.java 类实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">into</span><span class=\"params\">(ImageView target, Callback callback)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> started = System.nanoTime();</span><br><span class=\"line\">\tcheckMain(); <span class=\"comment\">// 因为要显示在 ImageView 上，所以必须在主线程调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Target must not be null.\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data.hasImage()) &#123; <span class=\"comment\">// 取图失败</span></span><br><span class=\"line\">\t  picasso.cancelRequest(target);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (setPlaceholder) &#123;</span><br><span class=\"line\">\t    setPlaceholder(target, getPlaceholderDrawable());</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (deferred) &#123; <span class=\"comment\">// 采用 fit 调整图片大小以适应 ImageView，延时操作</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (data.hasSize()) &#123; <span class=\"comment\">// fit 后自然不能人工设置长宽</span></span><br><span class=\"line\">\t    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Fit cannot be used with resize.\"</span>);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> width = target.getWidth();</span><br><span class=\"line\">\t  <span class=\"keyword\">int</span> height = target.getHeight();</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (width == <span class=\"number\">0</span> || height == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (setPlaceholder) &#123;</span><br><span class=\"line\">\t      setPlaceholder(target, getPlaceholderDrawable());</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    picasso.defer(target, <span class=\"keyword\">new</span> DeferredRequestCreator(<span class=\"keyword\">this</span>, target, callback));</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  data.resize(width, height);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequest request = createRequest(started);</span><br><span class=\"line\">\tString requestKey = createKey(request); <span class=\"comment\">// cache 的 key</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (shouldReadFromMemoryCache(memoryPolicy)) &#123; <span class=\"comment\">// 检验内存缓存</span></span><br><span class=\"line\">\t  Bitmap bitmap = picasso.quickMemoryCacheCheck(requestKey);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t    picasso.cancelRequest(target);</span><br><span class=\"line\">\t    setBitmap(target, picasso.context, bitmap, MEMORY, noFade, picasso.indicatorsEnabled);</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">\t      log(OWNER_MAIN, VERB_COMPLETED, request.plainId(), <span class=\"string\">\"from \"</span> + MEMORY);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t      callback.onSuccess();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 内存缓存未命中，先显示占位符，然后去网络获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (setPlaceholder) &#123;</span><br><span class=\"line\">\t  setPlaceholder(target, getPlaceholderDrawable());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tAction action =</span><br><span class=\"line\">\t    <span class=\"keyword\">new</span> ImageViewAction(picasso, target, request, memoryPolicy, networkPolicy, errorResId,</span><br><span class=\"line\">\t        errorDrawable, requestKey, tag, callback, noFade);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpicasso.enqueueAndSubmit(action);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码中有一个<code>deferred</code>的判断，如果为<code>true</code>则会创建一个<code>DeferredRequestCreator</code>，看一下这个类的实现代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeferredRequestCreator</span> <span class=\"keyword\">implements</span> <span class=\"title\">ViewTreeObserver</span>.<span class=\"title\">OnPreDrawListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> RequestCreator creator;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> WeakReference&lt;ImageView&gt; target;</span><br><span class=\"line\">  Callback callback;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@TestOnly</span> DeferredRequestCreator(RequestCreator creator, ImageView target) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(creator, target, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  DeferredRequestCreator(RequestCreator creator, ImageView target, Callback callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.creator = creator;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.target = <span class=\"keyword\">new</span> WeakReference&lt;ImageView&gt;(target);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.callback = callback;</span><br><span class=\"line\">    target.getViewTreeObserver().addOnPreDrawListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onPreDraw</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 覆盖这个方法，以便当ViewTree计算完成准备绘制时，拿到ImageView的长宽</span></span><br><span class=\"line\">    ImageView target = <span class=\"keyword\">this</span>.target.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ViewTreeObserver vto = target.getViewTreeObserver();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vto.isAlive()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> width = target.getWidth();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height = target.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (width &lt;= <span class=\"number\">0</span> || height &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vto.removeOnPreDrawListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.creator.unfit().resize(width, height).into(target, callback); <span class=\"comment\">// 将ImageView长宽传给RequestCreator以便对图片进行resize</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cancel</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    callback = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ImageView target = <span class=\"keyword\">this</span>.target.get();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ViewTreeObserver vto = target.getViewTreeObserver();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!vto.isAlive()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vto.removeOnPreDrawListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有当在显示图片的地方调用<code>fit()</code>时才会创建<code>DeferredRequestCreator</code>对象。</p>\n<p><code>RequestCreator</code>里面有两个字断分别对应着内存设置与网络设置，是缓存策略，对应的枚举类如下，可以看到两者都有<code>NO_CACHE</code> <code>NO_STORE</code>，网络策略枚举里多了一个<code>OFFLINE</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MemoryPolicy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Skips memory cache lookup when processing a request. */</span></span><br><span class=\"line\">  NO_CACHE(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span>),</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Skips storing the final result into memory cache. Useful for one-off requests</span></span><br><span class=\"line\"><span class=\"comment\">   * to avoid evicting other bitmaps from the cache.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  NO_STORE(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldReadFromMemoryCache</span><span class=\"params\">(<span class=\"keyword\">int</span> memoryPolicy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (memoryPolicy &amp; MemoryPolicy.NO_CACHE.index) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldWriteToMemoryCache</span><span class=\"params\">(<span class=\"keyword\">int</span> memoryPolicy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (memoryPolicy &amp; MemoryPolicy.NO_STORE.index) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MemoryPolicy</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> NetworkPolicy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Skips checking the disk cache and forces loading through the network. */</span></span><br><span class=\"line\">  NO_CACHE(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Skips storing the result into the disk cache.</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;em&gt;Note&lt;/em&gt;: At this time this is only supported if you are using OkHttp.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  NO_STORE(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Forces the request through the disk cache only, skipping network. */</span></span><br><span class=\"line\">  OFFLINE(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldReadFromDiskCache</span><span class=\"params\">(<span class=\"keyword\">int</span> networkPolicy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (networkPolicy &amp; NetworkPolicy.NO_CACHE.index) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldWriteToDiskCache</span><span class=\"params\">(<span class=\"keyword\">int</span> networkPolicy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (networkPolicy &amp; NetworkPolicy.NO_STORE.index) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOfflineOnly</span><span class=\"params\">(<span class=\"keyword\">int</span> networkPolicy)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (networkPolicy &amp; NetworkPolicy.OFFLINE.index) != <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">NetworkPolicy</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.index = index;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"缓存管理-LruCache\"><a href=\"#缓存管理-LruCache\" class=\"headerlink\" title=\"缓存管理 LruCache\"></a>缓存管理 LruCache</h1><p><code>Picasso.java</code>里维护了一个成员变量<code>cache</code>，对应接口是<code>Cache.java</code>，（只贴出主要代码）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A memory cache for storing the most recently used images.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;em&gt;Note:&lt;/em&gt; The &#123;<span class=\"doctag\">@link</span> Cache&#125; is accessed by multiple threads. You must ensure</span></span><br><span class=\"line\"><span class=\"comment\"> * your &#123;<span class=\"doctag\">@link</span> Cache&#125; implementation is thread safe when &#123;<span class=\"doctag\">@link</span> Cache#get(String)&#125; or &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\"> * Cache#set(String, android.graphics.Bitmap)&#125; is called.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/** Retrieve an image for the specified &#123;<span class=\"doctag\">@code</span> key&#125; or &#123;<span class=\"doctag\">@code</span> null&#125;. */</span></span><br><span class=\"line\">  <span class=\"function\">Bitmap <span class=\"title\">get</span><span class=\"params\">(String key)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Store an image in the cache for the specified &#123;<span class=\"doctag\">@code</span> key&#125;. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, Bitmap bitmap)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the current size of the cache in bytes. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the maximum size in bytes that the cache can hold. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSize</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Clears the cache. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单的几个接口，需要注意的是在实现过程中要保证get/set的线程安全。对应的实现类是<code>LruCache.java</code>，这是<code>LruCache</code>一个很漂亮的实现，该有的功能都有，丝毫不拖泥带水，我忍不住把整个类都贴出来。单词<code>eviction</code>的翻译是<code>驱逐</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** A memory cache which uses a least-recently used eviction policy. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LruCache</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cache</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> LinkedHashMap&lt;String, Bitmap&gt; map; <span class=\"comment\">// 有序 map</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> maxSize;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> putCount;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> evictionCount;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> hitCount; <span class=\"comment\">// 命中计数</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> missCount; <span class=\"comment\">// 未命中计数</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Create a cache using an appropriate portion of the available RAM as the maximum size. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LruCache</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(Utils.calculateMemoryCacheSize(context)); <span class=\"comment\">// Utils.java 里用于计算内存的工具方法，返回的数值是1/7（约15%）应用可用内存。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Create a cache with a given maximum size in bytes. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LruCache</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maxSize &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Max size must be positive.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.map = <span class=\"keyword\">new</span> LinkedHashMap&lt;String, Bitmap&gt;(<span class=\"number\">0</span>, <span class=\"number\">0.75f</span>, <span class=\"keyword\">true</span>); <span class=\"comment\">// 第三个参数 true 表示 LinkedHashMap 的排序是按照最近 access，false则为最近 insertion</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">get</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"key == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Bitmap mapValue;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123; <span class=\"comment\">// 前面说了，get/set必须要做同步控制</span></span><br><span class=\"line\">      mapValue = map.get(key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mapValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        hitCount++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapValue;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      missCount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String key, Bitmap bitmap)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span> || bitmap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"key == null || bitmap == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Bitmap previous;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123; <span class=\"comment\">// 一样的同步</span></span><br><span class=\"line\">      putCount++;</span><br><span class=\"line\">      size += Utils.getBitmapBytes(bitmap);</span><br><span class=\"line\">      previous = map.put(key, bitmap);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (previous != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        size -= Utils.getBitmapBytes(previous);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    trimToSize(maxSize); <span class=\"comment\">// 若尺寸超过 maxSize 则需要清理</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">trimToSize</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      String key;</span><br><span class=\"line\">      Bitmap value;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123; <span class=\"comment\">// 凡是所有操作 map 的地方都加锁</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt; <span class=\"number\">0</span> || (map.isEmpty() &amp;&amp; size != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(</span><br><span class=\"line\">              getClass().getName() + <span class=\"string\">\".sizeOf() is reporting inconsistent results!\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt;= maxSize || map.isEmpty()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Map.Entry&lt;String, Bitmap&gt; toEvict = map.entrySet().iterator().next();</span><br><span class=\"line\">        key = toEvict.getKey();</span><br><span class=\"line\">        value = toEvict.getValue();</span><br><span class=\"line\">        map.remove(key); <span class=\"comment\">// 清理出 map，由 GC 自动回收</span></span><br><span class=\"line\">        size -= Utils.getBitmapBytes(value);</span><br><span class=\"line\">        evictionCount++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Clear the cache. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">evictAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    trimToSize(-<span class=\"number\">1</span>); <span class=\"comment\">// -1 will evict 0-sized elements</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSize</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSize;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    evictAll();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">clearKeyUri</span><span class=\"params\">(String uri)</span> </span>&#123; <span class=\"comment\">// 清除某个 URI 对应的全部图片，同样内容的图片因为尺寸缩放旋转不同，会在 cache 里存在多个实例</span></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> sizeChanged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> uriLength = uri.length();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Iterator&lt;Map.Entry&lt;String, Bitmap&gt;&gt; i = map.entrySet().iterator(); i.hasNext();) &#123;</span><br><span class=\"line\">      Map.Entry&lt;String, Bitmap&gt; entry = i.next();</span><br><span class=\"line\">      String key = entry.getKey();</span><br><span class=\"line\">      Bitmap value = entry.getValue();</span><br><span class=\"line\">      <span class=\"keyword\">int</span> newlineIndex = key.indexOf(KEY_SEPARATOR);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newlineIndex == uriLength &amp;&amp; key.substring(<span class=\"number\">0</span>, newlineIndex).equals(uri)) &#123;</span><br><span class=\"line\">        i.remove();</span><br><span class=\"line\">        size -= Utils.getBitmapBytes(value);</span><br><span class=\"line\">        sizeChanged = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sizeChanged) &#123;</span><br><span class=\"line\">      trimToSize(maxSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the number of times &#123;<span class=\"doctag\">@link</span> #get&#125; returned a value. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">hitCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hitCount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the number of times &#123;<span class=\"doctag\">@link</span> #get&#125; returned &#123;<span class=\"doctag\">@code</span> null&#125;. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">missCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> missCount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the number of times &#123;<span class=\"doctag\">@link</span> #set(String, Bitmap)&#125; was called. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">putCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> putCount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/** Returns the number of values that have been evicted. */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">evictionCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> evictionCount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>知道了 cache 的用法，就可以很好地在<code>Picasso.java</code>里面检查 cache 了，用起来十分简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Bitmap <span class=\"title\">quickMemoryCacheCheck</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">\tBitmap cached = cache.get(key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cached != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t  stats.dispatchCacheHit();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t  stats.dispatchCacheMiss();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cached;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"请求处理器-RequestHandler\"><a href=\"#请求处理器-RequestHandler\" class=\"headerlink\" title=\"请求处理器 RequestHandler\"></a>请求处理器 RequestHandler</h1><p>在 Picasso.java 的构造函数里，有这样一段初始化代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Picasso(Context context, Dispatcher dispatcher, Cache cache, Listener listener,</span><br><span class=\"line\">  RequestTransformer requestTransformer, List&lt;RequestHandler&gt; extraRequestHandlers, Stats stats,</span><br><span class=\"line\">      Bitmap.Config defaultBitmapConfig, <span class=\"keyword\">boolean</span> indicatorsEnabled, <span class=\"keyword\">boolean</span> loggingEnabled) &#123;</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> ResourceRequestHandler(context));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (extraRequestHandlers != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      allRequestHandlers.addAll(extraRequestHandlers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> ContactsPhotoRequestHandler(context));</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> MediaStoreRequestHandler(context));</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> ContentStreamRequestHandler(context));</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> AssetRequestHandler(context));</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> FileRequestHandler(context));</span><br><span class=\"line\">    allRequestHandlers.add(<span class=\"keyword\">new</span> NetworkRequestHandler(dispatcher.downloader, stats));</span><br><span class=\"line\">    requestHandlers = Collections.unmodifiableList(allRequestHandlers);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出这是实现了多种请求处理类，所有的<code>XXXRequetHandler</code>类都继承自抽象类<code>RequestHandler.java</code>，其中最重要的是<code>canHandleRequest</code>和<code>load</code>这两个方法。源码注释里给出了简洁的说明，不再赘述。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Whether or not this &#123;<span class=\"doctag\">@link</span> RequestHandler&#125; can handle a request with the given &#123;<span class=\"doctag\">@link</span> Request&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canHandleRequest</span><span class=\"params\">(Request data)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Loads an image for the given &#123;<span class=\"doctag\">@link</span> Request&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> request the data from which the image should be resolved.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> networkPolicy the &#123;<span class=\"doctag\">@link</span> NetworkPolicy&#125; for this request.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Result <span class=\"title\">load</span><span class=\"params\">(Request request, <span class=\"keyword\">int</span> networkPolicy)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们看一下<code>NetworkRequestHandler</code>类的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkRequestHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestHandler</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RETRY_COUNT = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SCHEME_HTTP = <span class=\"string\">\"http\"</span>; <span class=\"comment\">// 这两个常量用于判断 url</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SCHEME_HTTPS = <span class=\"string\">\"https\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Downloader downloader; <span class=\"comment\">// 下载器，有 OkHttp 和 URLConnectionDownloader 两种实现，稍后讲解</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Stats stats;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NetworkRequestHandler</span><span class=\"params\">(Downloader downloader, Stats stats)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.downloader = downloader;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stats = stats;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canHandleRequest</span><span class=\"params\">(Request data)</span> </span>&#123;</span><br><span class=\"line\">    String scheme = data.uri.getScheme(); <span class=\"comment\">// 从 scheme 判断是否为网络图片请求</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (SCHEME_HTTP.equals(scheme) || SCHEME_HTTPS.equals(scheme));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">load</span><span class=\"params\">(Request request, <span class=\"keyword\">int</span> networkPolicy)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    Response response = downloader.load(request.uri, request.networkPolicy); <span class=\"comment\">// 同步下载</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Picasso.LoadedFrom loadedFrom = response.cached ? DISK : NETWORK;</span><br><span class=\"line\"></span><br><span class=\"line\">    Bitmap bitmap = response.getBitmap();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 直接拿到 Bitmap，则返回</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result(bitmap, loadedFrom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    InputStream is = response.getInputStream(); <span class=\"comment\">// 拿到输入流，需要解析成 Bitmap </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Sometimes response content length is zero when requests are being replayed. Haven't found</span></span><br><span class=\"line\">    <span class=\"comment\">// root cause to this but retrying the request seems safe to do so.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadedFrom == DISK &amp;&amp; response.getContentLength() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      Utils.closeQuietly(is);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ContentLengthException(<span class=\"string\">\"Received response with 0 content-length header.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadedFrom == NETWORK &amp;&amp; response.getContentLength() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stats.dispatchDownloadFinished(response.getContentLength());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Result(is, loadedFrom);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到它是将下载任务委托给了<code>Downloader</code>进行，<code>Downloader</code>的注释里描述的很清楚，它是“A mechanism to load images from external resources such as a disk cache and/or the internet.”，用于加载外部图片（相比于内存缓存而言）。最主要的是<code>load</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Response <span class=\"title\">load</span><span class=\"params\">(Uri uri, <span class=\"keyword\">int</span> networkPolicy)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n<p>其中<code>Response</code>的结构是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Response</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> InputStream stream;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Bitmap bitmap;</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> cached; <span class=\"comment\">// 图片是否来源自磁盘缓存（local disk cache）</span></span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> contentLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Downloader</code>有两个实现</p>\n<ul>\n<li>OKHttpDownloader，对应 Android 版本 &gt;= 4.4</li>\n<li>URLConnectionDownloader，对应 Android 版本 &lt; 4.4</li>\n</ul>\n<p>判断代码位于<code>Utils.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Downloader <span class=\"title\">createDefaultDownloader</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t  Class.forName(<span class=\"string\">\"com.squareup.okhttp.OkHttpClient\"</span>);</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> OkHttpLoaderCreator.create(context);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ignored) &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> UrlConnectionDownloader(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>OKHttpDownloader</code>里面的<code>load</code>方法，采用 square 自家的<code>OKHttp</code>进行下载，在构建其 Builder 时决定是否使用磁盘缓存。换言之，虽然<code>Picasso</code>声称有内存+磁盘两级缓存，其磁盘缓存其实是借助<code>OKHttp</code>实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> Response <span class=\"title\">load</span><span class=\"params\">(Uri uri, <span class=\"keyword\">int</span> networkPolicy)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\tCacheControl cacheControl = <span class=\"keyword\">null</span>; <span class=\"comment\">// 这个 CacheControl 是 OKHttp 里面的类</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (networkPolicy != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (NetworkPolicy.isOfflineOnly(networkPolicy)) &#123;</span><br><span class=\"line\">\t    cacheControl = CacheControl.FORCE_CACHE;</span><br><span class=\"line\">\t  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t    CacheControl.Builder builder = <span class=\"keyword\">new</span> CacheControl.Builder();</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!NetworkPolicy.shouldReadFromDiskCache(networkPolicy)) &#123;</span><br><span class=\"line\">\t      builder.noCache();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> (!NetworkPolicy.shouldWriteToDiskCache(networkPolicy)) &#123;</span><br><span class=\"line\">\t      builder.noStore();</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    cacheControl = builder.build();</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequest.Builder builder = <span class=\"keyword\">new</span> Request.Builder().url(uri.toString());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cacheControl != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t  builder.cacheControl(cacheControl);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcom.squareup.okhttp.Response response = client.newCall(builder.build()).execute(); <span class=\"comment\">// 同步接口</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> responseCode = response.code();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (responseCode &gt;= <span class=\"number\">300</span>) &#123;</span><br><span class=\"line\">\t  response.body().close();</span><br><span class=\"line\">\t  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ResponseException(responseCode + <span class=\"string\">\" \"</span> + response.message(), networkPolicy,</span><br><span class=\"line\">\t      responseCode);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> fromCache = response.cacheResponse() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tResponseBody responseBody = response.body();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(responseBody.byteStream(), fromCache, responseBody.contentLength());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此<code>RequestHandler</code>的分析已经完成，虽然它名为 Handler，但实际上并没有包含工作线程一类的东西，这部分相关代码实际上位于<code>Dispatcher.java</code>中。</p>\n<h1 id=\"任务调度器-Dispatcher\"><a href=\"#任务调度器-Dispatcher\" class=\"headerlink\" title=\"任务调度器 Dispatcher\"></a>任务调度器 Dispatcher</h1><p>理解<code>Dispatcher</code>之前，我们需要先了解一下任务类<code>Action.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Action</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestWeakReference</span>&lt;<span class=\"title\">M</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">M</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Action action;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestWeakReference</span><span class=\"params\">(Action action, M referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> M&gt; q)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.action = action;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Picasso picasso;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Request request;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> WeakReference&lt;T&gt; target;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> noFade;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> memoryPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> networkPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> errorResId;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Drawable errorDrawable;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> String key;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Object tag;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> willReplay;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> cancelled;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">complete</span><span class=\"params\">(Bitmap result, Picasso.LoadedFrom from)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">error</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p><code>Action</code>可以理解成一项图片加载任务，它组合了之前介绍的<code>Request</code>和<code>RequestCreator</code>的内容，且包含加载成功/失败的回调。</p>\n<p>所有的<code>Action</code>任务都会被丢给<code>Dispatcher</code>执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dispatcher</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RETRY_DELAY = <span class=\"number\">500</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AIRPLANE_MODE_ON = <span class=\"number\">1</span>; <span class=\"comment\">// 飞行模式，会影响并发线程数</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AIRPLANE_MODE_OFF = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_SUBMIT = <span class=\"number\">1</span>; <span class=\"comment\">// 消息类型，供 handler 使用</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_CANCEL = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_GCED = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HUNTER_COMPLETE = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HUNTER_RETRY = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HUNTER_DECODE_FAILED = <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HUNTER_DELAY_NEXT_BATCH = <span class=\"number\">7</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> HUNTER_BATCH_COMPLETE = <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> NETWORK_STATE_CHANGE = <span class=\"number\">9</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> AIRPLANE_MODE_CHANGE = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TAG_PAUSE = <span class=\"number\">11</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TAG_RESUME = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> REQUEST_BATCH_RESUME = <span class=\"number\">13</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DISPATCHER_THREAD_NAME = <span class=\"string\">\"Dispatcher\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BATCH_DELAY = <span class=\"number\">200</span>; <span class=\"comment\">// ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> DispatcherThread dispatcherThread; <span class=\"comment\">// 调度器线程</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Context context;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> ExecutorService service; <span class=\"comment\">// 线程池</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Downloader downloader; <span class=\"comment\">// 下载器</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Map&lt;String, BitmapHunter&gt; hunterMap; <span class=\"comment\">// 线程 map</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Map&lt;Object, Action&gt; failedActions;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Map&lt;Object, Action&gt; pausedActions;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Set&lt;Object&gt; pausedTags;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Handler handler; <span class=\"comment\">// DispatchHandler</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Handler mainThreadHandler; <span class=\"comment\">// UI 变更</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Cache cache;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Stats stats; <span class=\"comment\">// 统计数据，包含命中缓存、未命中缓存、解码、下载计数</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> List&lt;BitmapHunter&gt; batch;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> NetworkBroadcastReceiver receiver; <span class=\"comment\">// 监听网络变化，调整并发线程数</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> scansNetworkChanges;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> airplaneMode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>既然名为<code>Dispatcher</code>，肯定少不了<code>dispatchXXX</code>的方法，它们的处理方法完全一样，都是把消息丢给<code>DispatchHandler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchSubmit</span><span class=\"params\">(Action action)</span> </span>&#123;</span><br><span class=\"line\">  handler.sendMessage(handler.obtainMessage(REQUEST_SUBMIT, action));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchCancel</span><span class=\"params\">(Action action)</span> </span>&#123;</span><br><span class=\"line\">  handler.sendMessage(handler.obtainMessage(REQUEST_CANCEL, action));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dispatchPauseTag</span><span class=\"params\">(Object tag)</span> </span>&#123;</span><br><span class=\"line\">  handler.sendMessage(handler.obtainMessage(TAG_PAUSE, tag));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下还有 dispatchResumeTag、dispatchComplete、dispatchRetry，略</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>DispatchHandler</code>是用于接收处理这些消息的类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DispatcherHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Dispatcher dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DispatcherHandler</span><span class=\"params\">(Looper looper, Dispatcher dispatcher)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">super</span>(looper);</span><br><span class=\"line\">\t  <span class=\"keyword\">this</span>.dispatcher = dispatcher;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(<span class=\"keyword\">final</span> Message msg)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> REQUEST_SUBMIT: &#123;</span><br><span class=\"line\">\t      Action action = (Action) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performSubmit(action);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> REQUEST_CANCEL: &#123;</span><br><span class=\"line\">\t      Action action = (Action) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performCancel(action);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> TAG_PAUSE: &#123;</span><br><span class=\"line\">\t      Object tag = msg.obj;</span><br><span class=\"line\">\t      dispatcher.performPauseTag(tag);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> TAG_RESUME: &#123;</span><br><span class=\"line\">\t      Object tag = msg.obj;</span><br><span class=\"line\">\t      dispatcher.performResumeTag(tag);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> HUNTER_COMPLETE: &#123;</span><br><span class=\"line\">\t      BitmapHunter hunter = (BitmapHunter) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performComplete(hunter);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> HUNTER_RETRY: &#123;</span><br><span class=\"line\">\t      BitmapHunter hunter = (BitmapHunter) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performRetry(hunter);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> HUNTER_DECODE_FAILED: &#123;</span><br><span class=\"line\">\t      BitmapHunter hunter = (BitmapHunter) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performError(hunter, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> HUNTER_DELAY_NEXT_BATCH: &#123;</span><br><span class=\"line\">\t      dispatcher.performBatchComplete();</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> NETWORK_STATE_CHANGE: &#123;</span><br><span class=\"line\">\t      NetworkInfo info = (NetworkInfo) msg.obj;</span><br><span class=\"line\">\t      dispatcher.performNetworkStateChange(info);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">case</span> AIRPLANE_MODE_CHANGE: &#123;</span><br><span class=\"line\">\t      dispatcher.performAirplaneModeChange(msg.arg1 == AIRPLANE_MODE_ON);</span><br><span class=\"line\">\t      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t      Picasso.HANDLER.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">\t        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> AssertionError(<span class=\"string\">\"Unknown handler message received: \"</span> + msg.what);</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t      &#125;);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，处理手段是取出消息里的<code>Action</code>，然后调用<code>Dispatcher</code>中<code>performXXX</code>直接进行处理。这种<code>Dispatcher</code>组合<code>Handler</code>的模式值得学习借鉴。接下来我们具体看一下<code>performSubmit</code>也就是提交一个图片加载请求具体是怎么实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">performSubmit</span><span class=\"params\">(Action action, <span class=\"keyword\">boolean</span> dismissFailed)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pausedTags.contains(action.getTag())) &#123; <span class=\"comment\">// 如果请求已经被 pause，则不继续向下处理</span></span><br><span class=\"line\">\t  pausedActions.put(action.getTarget(), action);</span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (action.getPicasso().loggingEnabled) &#123;</span><br><span class=\"line\">\t    log(OWNER_DISPATCHER, VERB_PAUSED, action.request.logId(),</span><br><span class=\"line\">\t        <span class=\"string\">\"because tag '\"</span> + action.getTag() + <span class=\"string\">\"' is paused\"</span>);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBitmapHunter hunter = hunterMap.get(action.getKey());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hunter != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// BitmapHunter 是工作线程类（实现 Runnable 接口），若一张图片已经有工作线程在处理，则将当前 Action 附到工作线程的队列中</span></span><br><span class=\"line\">\t  hunter.attach(action);</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (service.isShutdown()) &#123; <span class=\"comment\">// 线程池已停止</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> (action.getPicasso().loggingEnabled) &#123;</span><br><span class=\"line\">\t    log(OWNER_DISPATCHER, VERB_IGNORED, action.request.logId(), <span class=\"string\">\"because shut down\"</span>);</span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 生成一个 BitmapHunter</span></span><br><span class=\"line\">\thunter = forRequest(action.getPicasso(), <span class=\"keyword\">this</span>, cache, stats, action);</span><br><span class=\"line\">\thunter.future = service.submit(hunter); <span class=\"comment\">// 这里很重要，提交一个 Runnable 给线程池</span></span><br><span class=\"line\">\thunterMap.put(action.getKey(), hunter); <span class=\"comment\">// 存进工作线程 Map</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dismissFailed) &#123;</span><br><span class=\"line\">\t  failedActions.remove(action.getTarget());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (action.getPicasso().loggingEnabled) &#123;</span><br><span class=\"line\">\t  log(OWNER_DISPATCHER, VERB_ENQUEUED, action.request.logId());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"职责重大的-BitmapHunter\"><a href=\"#职责重大的-BitmapHunter\" class=\"headerlink\" title=\"职责重大的 BitmapHunter\"></a>职责重大的 BitmapHunter</h1><p><code>BitmapHunter</code>实现了<code>Runnable</code>接口，<code>run</code>方法可以看作对一次图片请求的完整处理过程，也就是文初提到的“获取 - 变换 - 显示”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BitmapHunter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> sequence; <span class=\"comment\">// 序列号，基于 AtomicInteger 实现</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Picasso picasso; <span class=\"comment\">// 单例</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Dispatcher dispatcher; <span class=\"comment\">// 任务调度器</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Cache cache;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Stats stats;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> String key;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Request data;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> memoryPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> networkPolicy;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> RequestHandler requestHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">  Action action;</span><br><span class=\"line\">  List&lt;Action&gt; actions; <span class=\"comment\">// 一个 BitmapHunter 可以处理多个 Action</span></span><br><span class=\"line\">  Bitmap result;</span><br><span class=\"line\">  Future&lt;?&gt; future;</span><br><span class=\"line\">  Picasso.LoadedFrom loadedFrom;</span><br><span class=\"line\">  Exception exception;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> exifRotation; <span class=\"comment\">// Determined during decoding of original resource.</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> retryCount;</span><br><span class=\"line\">  Priority priority;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>EXIF（Exchangeable Image File）是“可交换图像文件”的缩写，当中包含了专门为数码相机的照片而定制的元数据，可以记录数码照片的拍摄参数、缩略图及其他属性信息。很多图像编辑器会自动读取Exif数据来对图像进行优化，最常见的便是从 Exif中读取出<strong>相机姿态</strong>信息，从而自动识别出竖拍甚至是颠倒拍摄的照片并对其进行<strong>旋转</strong>校正。</p>\n</blockquote>\n<p><code>run()</code>方法是对图片的处理流程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    updateThreadName(data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">      log(OWNER_HUNTER, VERB_EXECUTING, getLogIdsForHunter(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    result = hunt(); <span class=\"comment\">// 同步获取结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 通知 Dispatcher 任务完成</span></span><br><span class=\"line\">      dispatcher.dispatchFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      dispatcher.dispatchComplete(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Downloader.ResponseException e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!e.localCacheOnly || e.responseCode != <span class=\"number\">504</span>) &#123;</span><br><span class=\"line\">      exception = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dispatcher.dispatchFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (NetworkRequestHandler.ContentLengthException e) &#123; <span class=\"comment\">// 非常细节的错误处理</span></span><br><span class=\"line\">    exception = e;</span><br><span class=\"line\">    dispatcher.dispatchRetry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    exception = e;</span><br><span class=\"line\">    dispatcher.dispatchRetry(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError e) &#123;</span><br><span class=\"line\">    StringWriter writer = <span class=\"keyword\">new</span> StringWriter();</span><br><span class=\"line\">    stats.createSnapshot().dump(<span class=\"keyword\">new</span> PrintWriter(writer));</span><br><span class=\"line\">    exception = <span class=\"keyword\">new</span> RuntimeException(writer.toString(), e);</span><br><span class=\"line\">    dispatcher.dispatchFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    exception = e;</span><br><span class=\"line\">    dispatcher.dispatchFailed(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    Thread.currentThread().setName(Utils.THREAD_IDLE_NAME);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见对图片的获取和处理在<code>hunt</code>中，对得起<code>BitmapHunter</code>这个名字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Bitmap <span class=\"title\">hunt</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">  Bitmap bitmap = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (shouldReadFromMemoryCache(memoryPolicy)) &#123; <span class=\"comment\">// 检查内存缓存</span></span><br><span class=\"line\">    bitmap = cache.get(key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      stats.dispatchCacheHit();</span><br><span class=\"line\">      loadedFrom = MEMORY;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">        log(OWNER_HUNTER, VERB_DECODED, data.logId(), <span class=\"string\">\"from cache\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  data.networkPolicy = retryCount == <span class=\"number\">0</span> ? NetworkPolicy.OFFLINE.index : networkPolicy;</span><br><span class=\"line\">  RequestHandler.Result result = requestHandler.load(data, networkPolicy); <span class=\"comment\">// 调用 handler 同步获取结果</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    loadedFrom = result.getLoadedFrom();</span><br><span class=\"line\">    exifRotation = result.getExifOrientation(); <span class=\"comment\">// 从 exif 里获取旋转角度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bitmap = result.getBitmap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If there was no Bitmap then we need to decode it from the stream.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bitmap == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      InputStream is = result.getStream(); <span class=\"comment\">// 解码图片</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        bitmap = decodeStream(is, data);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        Utils.closeQuietly(is); <span class=\"comment\">// quietly 的含义是无视所有异常</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// 取到解码后的图片，进行转换和显示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">      log(OWNER_HUNTER, VERB_DECODED, data.logId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    stats.dispatchBitmapDecoded(bitmap); <span class=\"comment\">// 这里只是计数，并未操作转换</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data.needsTransformation() || exifRotation != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">synchronized</span> (DECODE_LOCK) &#123; <span class=\"comment\">// 必须加锁，同一时间只能处理一张图片，防止 OOM</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.needsMatrixTransform() || exifRotation != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          bitmap = transformResult(data, bitmap, exifRotation); <span class=\"comment\">// 运用 matrix 的 scale 与 rotate 处理图片</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">            log(OWNER_HUNTER, VERB_TRANSFORMED, data.logId());</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (data.hasCustomTransformations()) &#123; <span class=\"comment\">// 自定义转换，比如圆角</span></span><br><span class=\"line\">          bitmap = applyCustomTransformations(data.transformations, bitmap);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (picasso.loggingEnabled) &#123;</span><br><span class=\"line\">            log(OWNER_HUNTER, VERB_TRANSFORMED, data.logId(), <span class=\"string\">\"from custom transformations\"</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bitmap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        stats.dispatchBitmapTransformed(bitmap);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此为止，整个图片的加载流程基本分析完成，下面是一个完整的类图，出处见文末。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180703_picasso/picasso_classes_relation.png\" alt=\"类图\" title=\"\">\n                </div>\n                <div class=\"image-caption\">类图</div>\n            </figure>\n<h1 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h1><p>在我看来，做一个开源项目的源码解读，一般有两个切入点。</p>\n<ol>\n<li>先反问自己一个问题，“如果让你实现一个 XX 框架，你会怎么设计？”，画出流程图，列出承担主要职责的类；然后再对照着自己的设计，去阅读并理解项目代码。我把它叫做<code>自顶向下</code>。</li>\n<li>从项目代码的入口开始（一般是函数调用处），逐级追踪，弄清楚每一步涉及到哪些类，它们的职责是什么，这样最后会有一个链式的调用在你脑海中。我把它叫做<code>自底向上</code>。</li>\n</ol>\n<p>方法 1 能让你在开始时纵览全局，对每一个模块有大致的轮廓，随着逐步深入学习代码，对其认识会进一步加深，最后化为己用；但缺点也很明显，你不可能一上来就把流程图、类图绘制地明明白白，需要你对项目代码有一些理解，也许还需要一定的设计模式知识。方法 2 容易上手，如果项目简单还好，若是复杂项目很容易让人迷失其中。本文采用的是方法 1 的思路，以下两篇文章分别对应方法 1 和 2，它们在我写本文的过程中提供了大量帮助，非常感谢原作者。</p>\n<ol>\n<li><a href=\"https://juejin.im/entry/5aba4fc46fb9a028da7c8ef4\" target=\"_blank\" rel=\"noopener\">Android 面试助力：一次读懂热门图片框架 Picasso 源码及流程</a></li>\n<li><a href=\"https://skykai521.github.io/2016/02/25/Picasso%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">Picasso源代码分析</a></li>\n</ol>\n","categories":[],"tags":["Android","源码学习"]},{"title":"作息时间表","url":"https://lilei.pro/2018/05/15/schedule2018/","content":"<blockquote>\n<p>A man is not old as long as he is seeking something. A man is not old until regrets take the place of dreams.</p>\n</blockquote>\n<p>开始日期 2018.5.15</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>事项</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6:00~7:00</td>\n<td>起床，洗漱，早饭，清理房间</td>\n<td>解冻牛排</td>\n</tr>\n<tr>\n<td>7:00~11:00</td>\n<td>上午自习</td>\n<td>前端开发</td>\n</tr>\n<tr>\n<td>11:00~13:30</td>\n<td>训练</td>\n<td>胸，背，腿，肩，上臂，小腿小臂</td>\n</tr>\n<tr>\n<td>13:30~14:30</td>\n<td>午饭</td>\n<td>/</td>\n</tr>\n<tr>\n<td>14:30~18:00</td>\n<td>下午自习</td>\n<td>计算机通用技能</td>\n</tr>\n<tr>\n<td>18:00~19:00</td>\n<td>晚饭</td>\n<td>全家购买蔬菜色拉</td>\n</tr>\n<tr>\n<td>19:00~22:00</td>\n<td>晚自习</td>\n<td>博客，日记</td>\n</tr>\n<tr>\n<td>22:00~23:00</td>\n<td>洗漱，洗衣服</td>\n<td>/</td>\n</tr>\n<tr>\n<td>23:00</td>\n<td>睡觉</td>\n<td>/</td>\n</tr>\n</tbody>\n</table>\n","categories":["生活"],"tags":["生活"]},{"title":"我，堂吉诃德","url":"https://lilei.pro/2018/05/06/Man-of-Lamancha/","content":"<blockquote>\n<p>To dream the impossible dream<br>to fight the unbeatable foe<br>to bear with unbearable sorrow<br>to run where the brave dare not go<br>to right the unrightable wrong<br>to love pure and chaste from afar<br>to try when your arms are too weary<br>to reach the unreachable star</p>\n</blockquote>\n<p>点击播放英文版<a href=\"http://music.163.com/#/song?id=5052055\" target=\"_blank\" rel=\"noopener\">The Impossible Dream</a></p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180506_man_of_lamancha/堂吉诃德.png\" alt=\"我，堂吉诃德\" title=\"\">\n                </div>\n                <div class=\"image-caption\">我，堂吉诃德</div>\n            </figure>\n<p>这是李磊在2018年记录的第一部音乐剧/话剧，2018年5月5日，于上海大舞台。</p>\n<p>周六，下着小雨，从人广地铁站14号口走出不远，就到了此剧的演出地点上海大舞台，离开场还有45分钟，于是在附近走了一走。街对面有一所造型优美的教堂，两颗路口外，是人头攒动的南京路步行街，即使天公不作美，也并未打消游人们的兴致。上一次自己来这里还是什么时候？怕是有一两年吧。</p>\n<p>辞职之后，自己变得太懒，这不是个好现象。14:15回到剧场，检票，进场入座。</p>\n<p>初识不知剧中意，再见已是剧中人。</p>\n<p>这部剧好么？</p>\n<p>好，每一个在社会的汪洋大海中找不到方向的人，都应该去看一看。她配得上那一句宣传语——“一生中值得看三遍的音乐剧”。现实生活中，他是拉曼查的老迈乡绅阿隆索，在他的世界里，却是身披甲胄挑战恶龙赢得公主芳心的游侠骑士堂吉诃德。</p>\n<p>印象最深的是，当堂吉诃德的骑士幻梦被镜子骑士揭穿后，那躺在病床上的老人仿佛一瞬间被抽去了灵魂，尽管自己坐在影院二楼，似乎却可以看到他的眼中失去了往昔的光彩。</p>\n<p>在“正常人”眼中，退休的乡绅应该拾掇花圃安度晚年，妓女一定是狂蜂浪蝶人尽可夫，而阿隆索收税收到了教堂头上，简直是不识抬举。</p>\n<p>在他们看来，风车就是风车，理发匠的脸盆跟金头盔八杆子打不着，姑且叫你一声哭丧脸的骑士，与疯子不需计较。</p>\n<blockquote>\n<p>我们的文化一直以来强调的是人的社会属性：父亲、儿子、员工、老板、外乡人、消费者……当我们向陌生人自我介绍时，最先说的是“他是一个教师”、“他是一名医生”，我们自然会在听到这句话后，为眼前这个人贴上好多个属性标签。但是，我们太少谈及作为一个人的自然属性：人格、尊严、自由、快乐、幸福、追求、还有理想。</p>\n</blockquote>\n<p>这种理想，不是YY自己身披金甲圣衣、脚踩七彩祥云，于万众瞩目中以一己之力逆转乾坤，理想应当是坚定的、值得持之以恒的、可以实现的。理想不应当是动物性，贪婪、懒惰、暴食、淫欲、愤怒、嫉妒、傲慢。理想应当是无害于人并且有利于己。</p>\n<p>即使一个人活的像条狗，也不矛盾。</p>\n<p>去问自己的内心，想成为什么样的人，而不是让这个社会告诉你，要过什么样的生活。</p>\n<p>片中的小马小驴表演的颇有灵气，在舞台一角戏份很足，可惜坐在二楼视线不好，被遮挡了一些。</p>\n<p>去摘，遥不可及的星！</p>\n<p>分享一篇文章 <a href=\"https://www.zhihu.com/question/38850898/answer/135944882\" target=\"_blank\" rel=\"noopener\">如何评价音乐剧《我，堂吉诃德》中文版？ - NYLE的回答 - 知乎</a></p>\n","categories":["话剧"],"tags":["音乐剧"]},{"title":"渐行渐远渐无书","url":"https://lilei.pro/2018/05/05/渐行渐远渐无书/","content":"<blockquote>\n<p>欧阳修《玉楼春 别后不知君远近》</p>\n</blockquote>\n<p>别后不知君远近，触目凄凉多少闷，渐行渐远渐无书，水阔鱼沉何处问。<br>夜深风竹敲秋韵，万叶千声皆是恨，故欹单枕梦中寻，梦又不成灯又烬。</p>\n","categories":["随笔"],"tags":["诗词"]},{"title":"后来的我们","url":"https://lilei.pro/2018/04/30/后来的我们/","content":"<blockquote>\n<p>缘分这件事，不负对方就好了，想不负此生是很难的。</p>\n</blockquote>\n<p>点击播放五月天<a href=\"http://music.163.com/#/song?id=553310243\" target=\"_blank\" rel=\"noopener\">《后来的我们》</a></p>\n<p>这是李磊在2018年记录的第2部电影。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180430_us_and_them/后来的我们.jpg\" alt=\"后来的我们\" title=\"\">\n                </div>\n                <div class=\"image-caption\">后来的我们</div>\n            </figure>\n<p>想去影院看这部电影，来源于它的主题——小人物在大城市里的打拼，以及他们之间的爱恨悲欢。身为其中一员，也想看看那个曾经唱出《很爱很爱你》和《后来》的刘若英，拍出来的故事会是怎样的。最后一点是五月天的音乐加成，好可惜在正片里并没有采用这首歌。</p>\n<p>故事比较简单，不再复述剧情，想到哪里就说到哪里。</p>\n<p>“时隔许久回到故乡，发现这里好像并没有变过”，这是林见清在剧中的一段独白。听到这一句时，我的心里仿佛有一根弦被“zong”地一声拨动了。见惯了大城市里的变化，新的行业、潮流、生活方式一夜之间可以占据各大头版。再回到人生前十几年成长的故乡时，看到的山水车马，仍旧是小时候的样子，仿佛时间从不曾流逝。</p>\n<p>也许家乡唯一可见的变化，就是亲人日渐老去的样貌。他们的腰杆不再像年轻时那么笔直，常常会想不起刚刚做过的事和对你唠叨过的话语，看报纸文章乃至遥控器上的字母，都要借助放大镜。</p>\n<p>让人更悲伤的是，他们的记忆里再怎么衰退，总还会记得，顽劣如你小时候做过的那些事，你最爱吃的家乡菜，以及你的生日。</p>\n<p>如同田壮壮饰演的林父，在火车站接林见清和他女朋友时，脱口而出的那句“小晓！”，看着银幕上老人浑浊的双眼，让自己在观看这部电影的过程中第一次想哭。</p>\n<p>其中有一段，林见清刚刚丢了工作，除夕夜与方小晓窝在狭小的出租屋。林在打游戏时（分明是《求生之路》），林父打来电话，两人你瞒我瞒，一个说在北京很好，吃着烤鸭过着年，一个说家里来了好多亲戚热闹得很，你在北京要照顾好自己别惦记我。事实呢？是不是每一句“我很好，你不要惦记”背后，都有一个善意的谎言？</p>\n<p>刘若英在讲这个故事时，有一点我觉得处理得并不是很好，那就是两个人为什么分开。无疑他们还是彼此相爱着的，方小晓应该是始终未婚，林见清的婚姻也不见得多幸福，是为了悲剧而悲剧吗？虽然末尾借助林父的信件说出了引文中“缘分这件事，不负对方就好了，想不负此生是很难的”的话，但仍然让人觉得如鲠在喉。</p>\n<p>把这部电影里的“北京”换成“上海”、“广州”，没有丝毫不妥。同样的故事在不同的情侣之间，每一天都在上演着。然而，个人的悲欢在这些拥有几千万人口的大都市里，被无限稀释了。每天地铁早晚高峰涌出多少人流，就有多少个林见清方小晓。在别人的故事里，我们是看客，在自己的故事里，我们是主角。</p>\n<p>这部戏还有一些很用心的小细节，比如一开始07年两人乘坐绿皮车去北京（当年我从哈市到上海坐的33小时硬座大概也是绿皮的），背景电视里响起的北京申奥成功新闻报道，以及除夕夜见清为家里买了新电视时，电视里播放的西单女孩在春晚的表演。还有“粘豆包”，尽管自己并不喜欢吃，但好久之后听人说起这个词语，还是蓦然心里一热。</p>\n<p>让人出戏的地方也有，像剧中三名主角的东北话，分明不是黑龙江内疙瘩的（末尾林见清租车开去上海，是一辆黑A牌照的凯迪拉克SUV，可见他们是在哈尔滨租的车），有点出戏，但瑕不掩瑜。田壮壮——北京人，周冬雨——石家庄人，井柏然倒是地道的沈阳人，不过辽宁的东北话与黑龙江、吉林差异还是蛮大的。</p>\n<p>影片后半段，剧院里陆陆续续响起抽泣的声音，我喜欢这部电影，尽管外界对它的评价很低，而且刘若英并不擅长讲故事，但只要有可以触动我的地方就够了。别人都看好的，不一定合你的口味，电影如此，爱情也一样。</p>\n<p>2018年4月30日，于长宁影剧院。</p>\n","categories":["电影"],"tags":["周冬雨","井柏然"]},{"title":"I'm a motherfuckin beast - 杰克吉伦哈尔《铁拳》","url":"https://lilei.pro/2018/04/29/motherfuckin-beast-杰克吉伦哈尔《铁拳》/","content":"<blockquote>\n<p>坚持到第12回合，坚持到你敌人倒下的那一刻。</p>\n</blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27885866&auto=0&height=66\"></iframe>\n\n<p>这是李磊在2018年记录的第1部电影。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"/img/180429_southpaw/southpaw.jpg\" alt=\"Southpaw\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Southpaw</div>\n            </figure>\n<p>说实话，自己是被杰克吉伦哈尔一身腱子肉吸引，才观看这部电影的。在《夜行者/nightcrawler》一片中吉伦哈尔扮演了一名文质彬彬、为达目的不择手段的新闻贩子，很难想象他那样弱不禁风的样子，竟然可以在本片里饰演拳击手一角，一身精壮而有线条分明的肌肉，体脂率目测7～8左右。为了这个电影，他一定付出了很多努力。</p>\n<p>关于影片本身，能够讲述的东西并不多，情节谈不上曲折，是运动题材电影一贯的套路，所向无敌-骄傲放肆-跌下神坛-洗心革面（这时候通常需要一个促使主角觉醒要素，在本片中是女儿&amp;教练）-遭遇宿敌-开局逆风-绝地反击。值得称赞的是杰克吉伦哈尔的演技始终在线，将一个生活、事业接连受挫、处于逆境中的拳击手/父亲形象演绎得极棒，尤其是他的眼神。后面的打斗部分倒不如《监狱斗士》来得精彩刺激。</p>\n<p>尽管如此，这部电影能在我workout时候，激励我多做一个反复，如此这般就足够了。</p>\n","categories":["电影"],"tags":["杰克吉伦哈尔"]},{"title":"我们为什么需要《基督山伯爵》","url":"https://lilei.pro/2018/04/28/再读《基督山伯爵》/","content":"<blockquote>\n<p>人类的一切智慧，都包含在这两个词语里面。</p>\n</blockquote>\n<p><strong>这是李磊在2018年读完的第1本书。</strong></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28885472&auto=0&height=66\"></iframe>\n\n<hr>\n<p>《基督山伯爵》这本书，应该是在中学时代读的第一遍吧，从百草园书店租借的书籍。这周中，由于写信时需要引用书中的一段话，遂在网上找来原文，谁知再次被吸引，一发不可收拾，花3天时间又从头读完了这本不薄的著作。</p>\n<p>故事内容颇有现在网文的套路，男主角（埃德蒙唐泰斯）出身平平，禀性纯良，有一青梅竹马红颜知己，本来可以升职船长娶妻生子安稳过完这一生，谁知被嫉妒他的小人暗中加害，不仅老父亲贫困而死，连蒙在鼓里的未婚妻都成为仇人的妻子，自己也在暗无天日的海上监牢里度过了十四年时光。所幸在遭难时，遇到了不世出的高人（法利亚神父），传授给他一身文武本领，又赠予一大笔富可敌国的财宝。当他成功越狱后，摇身一变基督山伯爵，将仇人玩弄于股掌之间。最后看破世事，携美人归隐。</p>\n<p>从这个角度看，《基督山伯爵》这本由大仲马（1802—1870）出版于1846年的小说，引领了后世潮流足有近两百年。然而，它并非仅仅像龙傲天那么简单粗暴。</p>\n<p>善恶分明、机智果敢、算无遗策、沉默高贵、慷慨无私……我们可以将太多赞美的词汇加诸于埃德蒙，然而对于他所承受过的痛苦，我们始终无法感同身受。不论是从与爱人的婚礼上被警察带走含冤入狱，还是在黑暗阴森的伊夫堡监狱度日如年，以及目睹亦师亦友亦父的法利亚神父死亡，还有得知所爱之人已经嫁给了谋害自己的凶徒，这些痛苦中的任何一个都足以压垮一个心智健全的人，何况是全部。</p>\n<p>其实我最想知道的是，当埃德蒙移花接木代替法利亚神父，从悬崖被投入黑暗大海时，是什么支撑着他朝着渺茫希望游去，而不是就此放手，自戕于大海。</p>\n<p>人生如此艰难，活下去比死亡更需要勇气。</p>\n<p>我来自暗无天日的地狱，只想见一见阳光。我还有健壮的身体、渊博的知识、等待发掘的无尽财富，以及，饮不完的杯中酒，杀不尽的仇人头。怎么会就这样放弃？</p>\n<p>善良的莫雷尔先生，他在我蒙冤入狱后四处奔波，导致遭人嫉恨排挤家道中落；我从伊夫堡逃狱出来后，遇到的单纯水手雅各布，丝毫没有怀疑我的身份，把我当做同伴一样赤诚对待；那落草为寇恩怨分明的罗吉万帕，比道貌岸人的衣冠禽兽好上何止千万倍；还有一心一意依赖我关心我的海黛，苦命的公主。</p>\n<p>这世界并没有那么荒凉，那么无药可救。</p>\n<p>这周初收到了<a href=\"http://www.one-school.org/\" target=\"_blank\" rel=\"noopener\">壹个村小</a>的家访反馈，小朋友生活和学习上遇到一些困难，遂写信鼓励，望其可以度过难关。</p>\n<p>我不祝福你万事顺利前路平坦，而是祝你有直面一切困难的勇气。</p>\n<p>值得一提的是，在大仲马去世132年后，于2002年11月30日，他的灵柩在时任法国总统希拉克的亲自护送下，被移入先贤祠，他是第70位进入先贤祠的伟人，也是其中的第六名作家。他将长眠于左拉和他生前挚友雨果之间。</p>\n<blockquote>\n<p>莫雷尔拆开信念道：——<br>　　“我亲爱的马西米兰，——岛边为你们停着一只小帆船。贾可布会带你们到里窝去，那里诺瓦蒂埃先生正在等着他的孙女儿，他希望在他领他的孙女到圣坛前去以前，能先为你们祝福，我的朋友，这个洞里的一切，我在香榭丽舍大道的房子，以及我在黎港的别墅，都是爱德蒙·唐太斯送给莫雷尔船主的儿子的结婚礼物。也请维尔福小姐接受其中的一半，因为，她的父亲现在已成了一个疯子，她的弟弟已在九月间和他的母亲一同去世，我想请她把她从她父亲和她弟弟那儿继承来的那笔财产捐赠给穷人。莫雷尔，告诉那位你将终生眷顾的天使，请她时时为一个人祈祷，那个人，象撒旦一样，一度曾自以为可与上帝匹敌；但现在，他已带着基督徒的自卑承认只有上帝拥有至高无上的权力和无穷的智慧。或许那些祈祷可以减轻他心里所感到的内疚。至于你，莫雷尔，我对你说一句知心话。世界上既无所谓快乐或也无所谓痛苦；只有一种状况与另一种状况的比较，如此而已。只有体验过不幸的人才能体会最大的快乐。莫雷尔，我们必须体验过死的痛苦，才能体会到生的快乐。<br>　　所以，我心爱的孩子们，享受生命的快乐吧！永远不要忘记，直至上帝揭露人的未来图景的那一天以前，人类的一切智慧就包含在这两个词里面：‘<strong>等待</strong>’和‘<strong>希望</strong>’。<br>　　你的朋友基督山伯爵爱德蒙·唐太斯。”</p>\n</blockquote>\n","categories":["读书笔记"],"tags":["小说"]},{"title":"Android-Performance-Patterns-s4ep11-Culling","url":"https://lilei.pro/2017/02/27/Android-Performance-Patterns-s4ep11-Culling/","content":"<blockquote>\n<p>去芜存菁，avoid donig unnecessary work.<br><a href=\"https://www.youtube.com/watch?v=KFklLqiEG6w&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=21\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KFklLqiEG6w\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"过度绘制\"><a href=\"#过度绘制\" class=\"headerlink\" title=\"过度绘制\"></a>过度绘制</h1><p><a href=\"https://developer.android.com/studio/profile/dev-options-overdraw.html?utm_campaign=android_series_perf_theory:_culling_&amp;utm_source=anddev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\">过度绘制（Overdraw）</a>是指对不可见的部分也进行绘制的情况，如下图左侧，在开发者设置里可以打开查看开关。一般解决过度绘制的方法是减少布局深度，去除无用背景。</p>\n<p><img src=\"/img/170227_app_s4ep11/overdraw.png\" alt=\"Overdraw\"></p>\n<hr>\n<h1 id=\"Draw-with-care\"><a href=\"#Draw-with-care\" class=\"headerlink\" title=\"Draw with care\"></a>Draw with care</h1><p>在编写自定义控件时，可以使用<code>canvas.cliprect(..)</code>方法来使不显示的View不进行绘制。</p>\n<p>链接：<a href=\"https://www.youtube.com/watch?annotation_id=annotation_104709861&amp;feature=iv&amp;index=38&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;src_vid=KFklLqiEG6w&amp;v=vkTn3Ule4Ps\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?annotation_id=annotation_104709861&amp;feature=iv&amp;index=38&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;src_vid=KFklLqiEG6w&amp;v=vkTn3Ule4Ps</a></p>\n<hr>\n<h1 id=\"多重条件搜索\"><a href=\"#多重条件搜索\" class=\"headerlink\" title=\"多重条件搜索\"></a>多重条件搜索</h1><p>比如要搜索同时满足 A &amp; B &amp; C 三个条件下的结果，有两种方法</p>\n<ol>\n<li>把ABC三个条件同时传入，一步搜索出结果</li>\n<li>先搜A，得到结果集后，在结果集中搜索B，最后在B的结果集中搜索C</li>\n</ol>\n<p>不要想当然地以为一定是1更高效，实际操作时要根据搜索服务的特征来选择两者中的一种进行。2也是一种<code>Culling</code>的思想，逐层深入，抽丝剥茧。</p>\n<p>（视频里是用的Mc Collins大叔的照片来举例的，很搞笑）</p>\n<hr>\n<h1 id=\"提升用户体验\"><a href=\"#提升用户体验\" class=\"headerlink\" title=\"提升用户体验\"></a>提升用户体验</h1><p>在使用地理定位等实时服务时，消减那些用户不需关心的信息，比如用户居住在A地，那就无需把B地的实时状况推送给用户，使用地图软件中的实时路况查看就是这样，只需要请求并展示当前屏幕范围内的区域路况，而不是全市乃至全省、全国。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep10 Approximation","url":"https://lilei.pro/2017/02/22/Android-Performance-Patterns-s4ep10-Approximation/","content":"<blockquote>\n<p>在用户无感知的情况下，合理地进行近似计算，以加快响应，增强性能。<br><a href=\"https://www.youtube.com/watch?v=aVwwwK3YIaM&amp;index=20&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Good-enough-Let’s-ship-it\"><a href=\"#Good-enough-Let’s-ship-it\" class=\"headerlink\" title=\"Good enough. Let’s ship it.\"></a>Good enough. Let’s ship it.</h1><p>在一些情况下，用户只需要70%的精确程度，这时在程序里提供100%的精确程度是不合适的，这会额外增加30%的成本。</p>\n<p><img src=\"/img/170222_app_s4ep10/good_enough.png\" alt=\"Good enough\"></p>\n<hr>\n<h1 id=\"Position-is-not-always-helpful\"><a href=\"#Position-is-not-always-helpful\" class=\"headerlink\" title=\"Position is not always helpful\"></a>Position is not always helpful</h1><p>以一个路线规划App为例，如果缩放级别仅仅到省，那么对用户定位的标示只需要精确到城市即可，完全不必精确到街道门牌号，因为就算通过GPS精确到了街道门牌号，在省级视图上观察，也并不会有任何区别。只有当用户放大地图到街道程度时，才需要更精确的定位。</p>\n<p><img src=\"/img/170222_app_s4ep10/route_planning.png\" alt=\"route planning\"></p>\n<hr>\n<h1 id=\"Do-less-when-you-can\"><a href=\"#Do-less-when-you-can\" class=\"headerlink\" title=\"Do less, when you can.\"></a>Do less, when you can.</h1><p>Use less time, to calculate a less precision result, that still meets the user’s current need.</p>\n<p>同样以上方的路线规划App为例，当用户以固定速度在高速巡航时，可以基于用户车速计算，得到用户在公路上的大概位置，也无需时时通过GPS定位。当用户接近POI（Point of Interest）时，才唤起GPS。</p>\n<hr>\n<h1 id=\"图像上的近似计算\"><a href=\"#图像上的近似计算\" class=\"headerlink\" title=\"图像上的近似计算\"></a>图像上的近似计算</h1><p>在需要展示图片的场景，如果无需展示大图，则只加载低分辨率下的图片，这样可以节约内存并且加快加载速度。一个例子就是微信里面察看对话以及朋友圈的图片。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep9 Caching","url":"https://lilei.pro/2017/02/20/Android-Performance-Patterns-s4ep9-Caching/","content":"<blockquote>\n<p>本节内容纯理论，概括成一句话：Cache很重要！<br><a href=\"https://www.youtube.com/watch?v=JkwrNmCwFfA&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=19\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JkwrNmCwFfA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"Caches-are-FAST\"><a href=\"#Caches-are-FAST\" class=\"headerlink\" title=\"Caches are FAST\"></a>Caches are FAST</h1><p>计算机可以对Cache进行快速的读取，原因在于，读取Cache时是CPU直接操作RAM；如果不借助Cache，CPU需要间接与硬盘通信，而硬盘的读写速度是比不上RAM的。</p>\n<p>在有Cache的时候，通常情况下第一次读取是从硬盘加载，后续的读取就全都走Cache了。</p>\n<p><img src=\"/img/170220_app_s4ep9/ram.png\" alt=\"RAM\"></p>\n<hr>\n<h1 id=\"When-to-cache\"><a href=\"#When-to-cache\" class=\"headerlink\" title=\"When to cache?\"></a>When to cache?</h1><p>在循环中重复执行并且结果不变的计算，可以将其抽出来保存在Cache中。不要在循环中进行重复计算，这是编程中必须遵守的一项基本原则。</p>\n<hr>\n<h1 id=\"Caches-help-manage-resources\"><a href=\"#Caches-help-manage-resources\" class=\"headerlink\" title=\"Caches help manage resources\"></a>Caches help manage resources</h1><p>这部分强调的是Cache更新算法，LRU是个很好的选择。</p>\n<hr>\n<h1 id=\"Caching-by-pre-computing\"><a href=\"#Caching-by-pre-computing\" class=\"headerlink\" title=\"Caching by pre-computing\"></a>Caching by pre-computing</h1><p>提前执行解析程序，预处理体量大的查找表或者XML文件，这样在运行时可以很快地获取想要的结果，而不是同步等待。</p>\n<p><img src=\"/img/170220_app_s4ep9/ram.png\" alt=\"pre-computing\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"关于陆金所App在小米手机上无法展示项目详情页的问题原因与解决办法","url":"https://lilei.pro/2017/02/17/Lu-App-Not-Work-On-Mi-Devices/","content":"<blockquote>\n<p>在使用陆金所Android版本的App时，进入任何理财产品详情页，都显示为空白，无法进行查阅与购买。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/img/170217_lu_not_work_on_mi/on_site.png\" alt=\"问题截图\"></p>\n<hr>\n<h1 id=\"情景再现\"><a href=\"#情景再现\" class=\"headerlink\" title=\"情景再现\"></a>情景再现</h1><p><img src=\"/img/170217_lu_not_work_on_mi/system.jpeg\" alt=\"系统版本\"></p>\n<p>小米系统是升级后的最新版<br>Webkit内核版本：54.0.2840.85</p>\n<p>发现截图中无法显示产品详情的问题后，我联系了陆金所的人工在线客服，在描述问题并提供截图后，客服告知需要1到2个工作日给出反馈。实际上并没有那么久，我是早上反馈的问题，下午临近下班时就收到了客服的回复电话。</p>\n<p>客服应该是从开发那里得到了反馈邮件，在这里表扬一下陆金所响应问题的速度。无法显示的原因在于小米系统里使用的WebView内核版本是53或者54，这两个版本存在bug，解决办法也很“简单”，只要把它升级成55就可以了。这里的“简单”为什么打上了引号呢？因为升级WebView需要手机上装有GooglePlay，而由于众所周知的原因，国内的Android手机系统里，安装GooglePlay的少之又少。不过什么也难不住广大的网民朋友对墙外世界的向往，内事不决问百度，自然可以找到安装的途径。</p>\n<hr>\n<h1 id=\"解决途径\"><a href=\"#解决途径\" class=\"headerlink\" title=\"解决途径\"></a>解决途径</h1><p>先安装Google框架，再安装GooglePlay后，在GooglePlay中搜索WebView进行升级安装，再打开陆金所——duang！问题迎刃而解了。</p>\n<hr>\n<h1 id=\"问题起因探究\"><a href=\"#问题起因探究\" class=\"headerlink\" title=\"问题起因探究\"></a>问题起因探究</h1><p><strong>在百度上搜不出任何国内开发者对这个问题的描述！</strong>按说但凡是使用了小米手机，只要升级到了最新版本，在打开WebView时都有很大可能遭遇这个问题，为什么内网上搜不到，我也很费解。</p>\n<p>而在Google上，很容易就找到下面这篇由Chromium官方发布的文档：<a href=\"https://www.chromium.org/developers/androidwebview/webview-ct-bug\" target=\"_blank\" rel=\"noopener\">WebView FAQ for Symantec Certificate Transparency Issue</a></p>\n<p>我在这里依个人理解简单描述一下，建议各位直接阅读原文，会认识得更加全面。</p>\n<h3 id=\"根本原因\"><a href=\"#根本原因\" class=\"headerlink\" title=\"根本原因\"></a>根本原因</h3><p>从WebView的53版本开始，它要求所有被Symantec（赛门铁克）签署的证书，必须执行Chrome证书政策。但是，Chrome自己在进行验证时，竟然出错了！！！在加载具有Symantec证书的页面时，会导致<code>onReceivedSslError()</code>的回调，页面显示一片空白。</p>\n<p>这算不算弄巧成拙？</p>\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>自Android L版本开始，WebView版本53和54会受到影响，55开始恢复正常。需要注意的是，问题并非是立刻显现的，而会在WebView的build date十周之后，才暴露出来。Build版本与过期时间如下表所示，这也就解释了为什么在我刚升级Android系统时并没有发生这个问题，而是在上周使用陆金所App时才显露出来。</p>\n<table>\n<thead>\n<tr>\n<th>Build ID</th>\n<th>Expiration Date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>54.0.2840.68</td>\n<td>12/27/2016</td>\n</tr>\n<tr>\n<td>54.0.2840.85</td>\n<td>1/7/2017</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"现身说法\"><a href=\"#现身说法\" class=\"headerlink\" title=\"现身说法\"></a>现身说法</h3><p>为了验证上文的情况，我在代码中使用<code>getPackageManager().getPackageInfo(&quot;com.google.android.webview&quot;, 0).versionCode</code>察看小米手机的WebView版本号，果然是<code>54.0.2840.85</code>，不幸中招。</p>\n<p>在通过GooglePlay安装最新的<code>55.0.2883.91</code>版本后，再打开陆金所App，一切正常了。</p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h3><h4 id=\"Q：Android-N系统也会遇到这个问题吗？怎么解决？\"><a href=\"#Q：Android-N系统也会遇到这个问题吗？怎么解决？\" class=\"headerlink\" title=\"Q：Android N系统也会遇到这个问题吗？怎么解决？\"></a>Q：Android N系统也会遇到这个问题吗？怎么解决？</h4><p>A：自L开始的系统都会遇到，而N系统由于不是使用单独的WebView，而是使用由Chrome提供的WebView，因此只要升级Chrome就可以。（在Chrome的属性里可以看到Webview版本）</p>\n<h4 id=\"Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\"><a href=\"#Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\" class=\"headerlink\" title=\"Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\"></a>Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？</h4><p>A：笔者亲测可以，但是不建议这么做，有可能导致更多潜在的问题。</p>\n<h4 id=\"Q：可否通过UserAgent嗅探来解决这个问题？\"><a href=\"#Q：可否通过UserAgent嗅探来解决这个问题？\" class=\"headerlink\" title=\"Q：可否通过UserAgent嗅探来解决这个问题？\"></a>Q：可否通过UserAgent嗅探来解决这个问题？</h4><p>A：验证失败发生在连接TLS层时，这时还没有发送UserAgent信息，意味着页面挂掉时候是还不知道UA的。如果一定要在TLS层获取UA也不是没有办法，但这么做过于复杂，并且不安全。</p>\n<h4 id=\"Q：开发者怎样修复这个问题呢？\"><a href=\"#Q：开发者怎样修复这个问题呢？\" class=\"headerlink\" title=\"Q：开发者怎样修复这个问题呢？\"></a>Q：开发者怎样修复这个问题呢？</h4><p>A：唯一的修复办法是提示用户更新WebView，当发生问题时，WebView会发出一个<code>onReceivedSslError()</code>回调，但是回调里并没有足以说明问题的提示信息。并且通过这个回调来回避问题（比如停止使用证书）会导致更多安全隐患，强烈不建议这么做。</p>\n<hr>\n<h1 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h1><p>整个问题的描述与解释看下来，还真不是陆金所团队的锅——好久没见寸志了，如果当面问他这个事，他一定摆着手说：这个锅我不背！要怪就怪Android碎片化太严重，尤其是国内市场，各大厂商把原生系统做做美化，改头换面，再预装一大堆垃圾软件，就摇身一变成了自己的东西。而关键特性又更新不及时，就导致了上文发生的问题。</p>\n<p>Android系统的开放特性是一把双刃剑，就看我们怎么使用它。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android"]},{"title":"解决Android Studio导入项目时速度过慢的问题","url":"https://lilei.pro/2017/02/17/Fix-Slow-Inilizating-Project-In-AS/","content":"<blockquote>\n<p>当我们通过Android Studio导入新项目时，往往需要同步下载新项目所需的gradle版本，这是导致加载过慢的原因。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"卡住的原因\"><a href=\"#卡住的原因\" class=\"headerlink\" title=\"卡住的原因\"></a>卡住的原因</h1><p>项目需要特定版本的gradle进行构建，而本地没有对应版本的gradle，需要从网络下载（ <a href=\"http://services.gradle.org/distributions\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions</a> ），由于大家心知肚明的原因，下载速度非常慢；而且，配置的shadowsocks对此似乎不起作用。这就导致了导入项目时一直停留在“Building gradle project info”。</p>\n<p><img src=\"/img/170217_slowing_initializing_project_in_as/building.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>本以为国内有对应的镜像站点，可以配置，但却没有找到。这里先通过浏览器下载下来gradle-xx.zip，然后替换本地文件来进行。</p>\n<h3 id=\"第一步：在-http-services-gradle-org-distributions-下载需要的版本\"><a href=\"#第一步：在-http-services-gradle-org-distributions-下载需要的版本\" class=\"headerlink\" title=\"第一步：在 http://services.gradle.org/distributions 下载需要的版本\"></a>第一步：在 <a href=\"http://services.gradle.org/distributions\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions</a> 下载需要的版本</h3><p>通过已配置代理的浏览器下载，或者迅雷（要避免再次上演XcodeGhost事件）。下载完成后把zip包丢进本地gradle仓库里。以<code>gradle-2.14.1-all</code>为例，在我的电脑上路径是<code>~/.gradle/wrapper/dists/gradle-2.14.1-all/8bnwg5hd3w55iofp58khbp6yv/</code>。</p>\n<h3 id=\"第二步（可选）：修改项目gradle版本\"><a href=\"#第二步（可选）：修改项目gradle版本\" class=\"headerlink\" title=\"第二步（可选）：修改项目gradle版本\"></a>第二步（可选）：修改项目gradle版本</h3><p>如果下载的gradle版本和项目文件里声明的版本不同，需要修改项目里依赖的gradle版本。有两个文件需要修改，分别是<code>gradle/wrapper/gradle-wrapper.properties</code>和<code>build.gradle</code></p>\n<h4 id=\"gradle-wrapper-gradle-wrapper-properties\"><a href=\"#gradle-wrapper-gradle-wrapper-properties\" class=\"headerlink\" title=\"gradle/wrapper/gradle-wrapper.properties\"></a>gradle/wrapper/gradle-wrapper.properties</h4><p>修改<code>distributionUrl</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distributionBase=GRADLE_USER_HOME</span><br><span class=\"line\">distributionPath=wrapper/dists</span><br><span class=\"line\">zipStoreBase=GRADLE_USER_HOME</span><br><span class=\"line\">zipStorePath=wrapper/dists</span><br><span class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</span><br></pre></td></tr></table></figure>\n<h4 id=\"build-gradle\"><a href=\"#build-gradle\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h4><p>修改<code>classpath</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &quot;http://depot.sankuai.com/nexus/content/groups/public/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        // in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤后重启AS，就可以顺利地打开项目了。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["Android Studio"]},{"title":"Android基础知识之View绘制再思考","url":"https://lilei.pro/2017/02/15/View-Drawing-In-Android/","content":"<blockquote>\n<p>近日自己在写一个结合了下拉刷新&amp;ViewPager功能于一体的自定义控件，顺便重温了View绘制的流程。</p>\n</blockquote>\n<blockquote>\n<p>本文【待完成】可能是你所看过最简单易懂的View绘制流程解读。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"几个重要方法\"><a href=\"#几个重要方法\" class=\"headerlink\" title=\"几个重要方法\"></a>几个重要方法</h1><h1 id=\"学以致用：实现一个简单的PullToRefresh容器\"><a href=\"#学以致用：实现一个简单的PullToRefresh容器\" class=\"headerlink\" title=\"学以致用：实现一个简单的PullToRefresh容器\"></a>学以致用：实现一个简单的PullToRefresh容器</h1>","categories":[],"tags":["Android"]},{"title":"Android基础知识之事件传递","url":"https://lilei.pro/2017/02/15/Android-Touch-Event-Delivery/","content":"<blockquote>\n<p>在Android系统中，事件的传递和处理是让人很容易困惑的一个知识点，在处理复杂界面事件时，如果对这方面掌握不扎实，会遇到很多千奇百怪的问题。</p>\n</blockquote>\n<blockquote>\n<p>本文可能是你读过的对事件传递系统最简单易懂的解读。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"Android事件系统概述\"><a href=\"#Android事件系统概述\" class=\"headerlink\" title=\"Android事件系统概述\"></a>Android事件系统概述</h1><p>任何UI界面系统的设计，都一定离不来事件传递，Android系统当然不例外。</p>\n<p>要理解Android中的事件机制，需要牢记下面两个基本原则：</p>\n<ul>\n<li>事件传递，从外向内。</li>\n<li>事件消费，从内向外。</li>\n</ul>\n<p><img src=\"/img/170215_event_handling/outer_inner.png\" alt=\"例子\"></p>\n<h2 id=\"事件传递\"><a href=\"#事件传递\" class=\"headerlink\" title=\"事件传递\"></a>事件传递</h2><p>先触发外层ViewGroup的<code>dispatchTouchEvent</code>方法，该方法会在事件的整个处理流程结束后异步返回；接着触发外层ViewGroup的<code>onInterceptTouchEvent</code>方法，如果要拦截这个事件，不让它继续向下传递，就在这个方法里就要返回<code>true</code>；当事件继续向下传递时，内层View先触发<code>dispatchTouchEvent</code>，接着进行到事件消费环节。</p>\n<h2 id=\"事件消费\"><a href=\"#事件消费\" class=\"headerlink\" title=\"事件消费\"></a>事件消费</h2><p>如果外层ViewGroup在<code>onInterceptTouchEvent</code>方法里返回<code>true</code>，那么事件仅由外层进行消费，即进入<code>onTouchEvent</code>方法里，消费完成后，进行<code>dispatchTouchEvent</code>结果回调，事件消费掉了则返回<code>true</code>，反之返回<code>false</code>。</p>\n<p>如果外层ViewGroup在<code>onInterceptTouchEvent</code>方法里返回<code>false</code>，事件继续向下传递，内层View在它的<code>onTouchEvent</code>里返回处理结果，再把结果交给内层View的<code>dispatchTouchEvent</code>方法返回。如果内层消费了事件（返回true），则外层不会触发<code>onTouchEvent</code>方法；如果内层没有消费事件（返回false），那么事件交由外层消费，会触发外层ViewGroup的<code>onTouchEvent</code>方法。</p>\n<h2 id=\"上例的补充说明\"><a href=\"#上例的补充说明\" class=\"headerlink\" title=\"上例的补充说明\"></a>上例的补充说明</h2><p>上例的<code>case B</code>，还有一种写法，是外层ViewGroup不对事件进行拦截，而是在内层View的<code>onTouchEvent</code>中返回<code>false</code>，这样事件依旧会交由外层ViewGroup的<code>onTouchEvent</code>进行消费。</p>\n<p>同理，<code>case D</code>也有另外的写法，聪明的读者，你一定已经猜出来了。</p>\n<hr>\n<h1 id=\"几个关键方法\"><a href=\"#几个关键方法\" class=\"headerlink\" title=\"几个关键方法\"></a>几个关键方法</h1><p>上文中已经看出，Android系统中对事件进行处理，主要是<code>dispatchTouchEvent</code>、<code>onInterceptTouchEvent</code>、<code>onTouchEvent</code>这三个方法，下面逐一进行分析。</p>\n<h2 id=\"dispatchTouchEvent\"><a href=\"#dispatchTouchEvent\" class=\"headerlink\" title=\"dispatchTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html#dispatchTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">dispatchTouchEvent</a></h2><p>View处理事件时，最先进入的方法，直到事件处理完成后，才会返回<code>true</code>（在当前View或者内部View进行了消费）或者<code>false</code>（未进行消费）。</p>\n<p>对于View，这个方法的返回值与<code>onTouchEvent</code>返回值相同。</p>\n<p>对于ViewGroup，只要内部有任意一个View消费了事件，在ViewGroup的这个方法就会返回<code>true</code>。</p>\n<h2 id=\"onInterceptTouchEvent\"><a href=\"#onInterceptTouchEvent\" class=\"headerlink\" title=\"onInterceptTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">onInterceptTouchEvent</a></h2><p>这个方法只存在于ViewGroup中，控制是否将当前时间拦截下来不向下传递，只给自己消费。</p>\n<p>需要注意一旦<code>ACTION_DOWN</code>被拦截，后续的<code>ACTION_MOVE</code>和<code>ACTION_UP</code>根本不会走到这个方法里。</p>\n<h2 id=\"onTouchEvent\"><a href=\"#onTouchEvent\" class=\"headerlink\" title=\"onTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">onTouchEvent</a></h2><p>处理touch事件的地方，如果要处理的是click事件，不要写在<code>onTouchEvent</code>方法里，而是应该写在<code>performClick</code>中。</p>\n<p>消费了事件则返回true，消费后的事件立即废弃，不会再交由其它View消费。</p>\n<h2 id=\"requestDisallowInterceptTouchEvent\"><a href=\"#requestDisallowInterceptTouchEvent\" class=\"headerlink\" title=\"requestDisallowInterceptTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent(boolean)\" target=\"_blank\" rel=\"noopener\">requestDisallowInterceptTouchEvent</a></h2><p>上文讲到，外层的ViewParent可以通过<code>onInterceptTouchEvent</code>来拦截事件，不继续向下传递。上有政策下有对策，内层View同样可以拒绝外层ViewGroup的这种行为，这就是<code>requestDisallowInterceptTouchEvent(boolean)</code>方法所做的事。</p>\n<p>这个方法位于ViewParent.java中，可以通过<code>View.getParent()</code>来获取某个View的Parent。该方法会应用到当前View的所有祖先ViewGroup，而不仅仅是父亲。所有接收到这个请求的Parent必须停止它们的Intercept行为，直到当前touch事件结束（收到up信号或者cancel信号）。</p>\n<hr>\n<h1 id=\"学以致用：解决在ScrollView中嵌套ListView的问题\"><a href=\"#学以致用：解决在ScrollView中嵌套ListView的问题\" class=\"headerlink\" title=\"学以致用：解决在ScrollView中嵌套ListView的问题\"></a>学以致用：解决在ScrollView中嵌套ListView的问题</h1><p>有了这些的知识储备，我们来实操一下，解决一个很容易出现的case：在ScrollView中嵌套ListView时，ListView无法进行上下滑动，导致项目展示不完整。</p>\n<p>首先，在ScrollView中嵌套ListView并不是好的设计，如果能够避免最好，若不能避免，就必须解决ListView不能滑动的问题。我们希望当手指落在ListView上进行滑动时，会控制ListView的条目，当滑至顶端或底端时，ListView无法再滑，则进行外层ScrollView的滑动。当手指落在ListView外部的ScrollView时，直接控制ScrollView进行滑动。</p>\n<h2 id=\"出现问题的原因\"><a href=\"#出现问题的原因\" class=\"headerlink\" title=\"出现问题的原因\"></a>出现问题的原因</h2><p>原因在于ScrollView在它的<code>onInterceptTouchEvent</code>里对<code>ACTION_MOVE</code>进行了拦截，Code donesn’t lie.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * This method JUST determines whether we want to intercept the motion.</span></span><br><span class=\"line\"><span class=\"comment\">     * If we return true, onMotionEvent will be called and we do the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * scrolling there.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Shortcut the most recurring case: the user is in the dragging</span></span><br><span class=\"line\"><span class=\"comment\">    * state and he is moving his finger.  We want to intercept this</span></span><br><span class=\"line\"><span class=\"comment\">    * motion.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((action == MotionEvent.ACTION_MOVE) &amp;&amp; (mIsBeingDragged)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Don't try to intercept touch if we can't scroll anyway.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getScrollY() == <span class=\"number\">0</span> &amp;&amp; !canScrollVertically(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action &amp; MotionEvent.ACTION_MASK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * mIsBeingDragged == false, otherwise the shortcut would have caught it. Check</span></span><br><span class=\"line\"><span class=\"comment\">             * whether the user has moved far enough from his original down touch.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * Locally do absolute value. mLastMotionY is set to the y value</span></span><br><span class=\"line\"><span class=\"comment\">            * of the down event.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> activePointerId = mActivePointerId;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activePointerId == INVALID_POINTER) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we don't have a valid id, the touch down wasn't on content.</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> pointerIndex = ev.findPointerIndex(activePointerId);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pointerIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                Log.e(TAG, <span class=\"string\">\"Invalid pointerId=\"</span> + activePointerId</span><br><span class=\"line\">                        + <span class=\"string\">\" in onInterceptTouchEvent\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) ev.getY(pointerIndex);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> yDiff = Math.abs(y - mLastMotionY);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (yDiff &gt; mTouchSlop &amp;&amp; (getNestedScrollAxes() &amp; SCROLL_AXIS_VERTICAL) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                mIsBeingDragged = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                mLastMotionY = y;</span><br><span class=\"line\">                initVelocityTrackerIfNotExists();</span><br><span class=\"line\">                mVelocityTracker.addMovement(ev);</span><br><span class=\"line\">                mNestedYOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mScrollStrictSpan == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    mScrollStrictSpan = StrictMode.enterCriticalSpan(<span class=\"string\">\"ScrollView-scroll\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> ViewParent parent = getParent();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) ev.getY();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!inChild((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) y)) &#123;</span><br><span class=\"line\">                mIsBeingDragged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                recycleVelocityTracker();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Remember location of down touch.</span></span><br><span class=\"line\"><span class=\"comment\">             * ACTION_DOWN always refers to pointer index 0.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            mLastMotionY = y;</span><br><span class=\"line\">            mActivePointerId = ev.getPointerId(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            initOrResetVelocityTracker();</span><br><span class=\"line\">            mVelocityTracker.addMovement(ev);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * If being flinged and user touches the screen, initiate drag;</span></span><br><span class=\"line\"><span class=\"comment\">            * otherwise don't.  mScroller.isFinished should be false when</span></span><br><span class=\"line\"><span class=\"comment\">            * being flinged.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            mIsBeingDragged = !mScroller.isFinished();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mIsBeingDragged &amp;&amp; mScrollStrictSpan == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mScrollStrictSpan = StrictMode.enterCriticalSpan(<span class=\"string\">\"ScrollView-scroll\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            startNestedScroll(SCROLL_AXIS_VERTICAL);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">            <span class=\"comment\">/* Release the drag */</span></span><br><span class=\"line\">            mIsBeingDragged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            mActivePointerId = INVALID_POINTER;</span><br><span class=\"line\">            recycleVelocityTracker();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mScroller.springBack(mScrollX, mScrollY, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, getScrollRange())) &#123;</span><br><span class=\"line\">                postInvalidateOnAnimation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class=\"line\">            onSecondaryPointerUp(ev);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * The only time we want to intercept motion events is if we are in the</span></span><br><span class=\"line\"><span class=\"comment\">    * drag mode.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mIsBeingDragged;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到当<code>(action == MotionEvent.ACTION_MOVE) &amp;&amp; (mIsBeingDragged)</code>条件为真时，这个方法直接返回<code>true</code>，拦截掉了<code>ACTION_MOVE</code>事件。解决办法也很简单，在内层View接收到<code>ACTION_DOWN</code>时，禁止掉外层的拦截；在内层View收到手指抬起来的<code>ACTION_UP</code>时，放掉禁制。我们在<code>dispatchTouchEvent</code>中写入这段逻辑，也可以把它写进内层View的<code>onTouchListener</code>中。</p>\n<h2 id=\"恢复ListView滑动\"><a href=\"#恢复ListView滑动\" class=\"headerlink\" title=\"恢复ListView滑动\"></a>恢复ListView滑动</h2><p><strong><code>dispatchTouchEvent</code>中的写法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">            getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ......</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>onTouchListener</code>中的写法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listView.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchLister &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(event.getAction() == MotionEvent.ACTION_UP)&#123;</span><br><span class=\"line\">            scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候ListView已经可以上下滑动了，但是当滑动到上／下尽头时，我们希望外层的ScrollView继续接管滑动。</p>\n<h2 id=\"外层ScrollView接管滑动\"><a href=\"#外层ScrollView接管滑动\" class=\"headerlink\" title=\"外层ScrollView接管滑动\"></a>外层ScrollView接管滑动</h2><p>首先需要写两个方法判断ListView已经到了穷途末路。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">scrollToBottom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = getFirstVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = getLastVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> visibleCoutn = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = getCount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((first + visibleCoutn) == count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">scrollToTop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = getFirstVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = getLastVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> visibleCoutn = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = getCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>dispatchTouchEvent</code>方法里判断，到了尽头后，把<code>ACTION_MOVE</code>事件交给外层ScrollView处理。这里包含了前文中“禁止外层ViewGroup拦截”的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> downY, y, mTouchSlop;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">            downY = ev.getRawY();</span><br><span class=\"line\">            y = downY;</span><br><span class=\"line\">            getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">            y = ev.getRawY();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollToTop()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (y - downY &gt; mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * Point 1 : 如果滑动到顶部，并且手指还想向下滑动，则事件交还给父控件，要求父控件可以拦截事件</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollToBottom()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (y - downY &lt; -mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * Point 3 : 如果滑动到底部，并且手指还想向上滑动，则事件交还给父控件，要求父控件可以拦截事件</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述写法基本实现了拉到ListView尽头时，将滑动时间交给外部ScrollView处理的功能。还存在的问题是在边界判断时不够精确，会发生第一个／最后一个item只展示一个边界，就触发解除禁止的效果，待完善。</p>\n<p>希望这篇文章让你不再为Android中的事件传递机制而困惑。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://blog.csdn.net/Wisimer/article/details/49426653\" target=\"_blank\" rel=\"noopener\">ScrollView嵌套ListView处理事件冲突</a></li>\n</ul>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android"]},{"title":"Android Performance Patterns - s4ep8 Removing Unused Resources","url":"https://lilei.pro/2017/02/14/Android-Performance-Patterns-s4ep8-Removing-Unused-Resources/","content":"<blockquote>\n<p>Although YOU may be diligent in removing resources your app won’t use, it’s not safe to assume that the LIBRARIES you’re including will do the same.<br>Thankfully some helpful Gradle tools can put your APK on a diet.<br><a href=\"https://www.youtube.com/watch?v=HxeW6DHEDQU&amp;index=18&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HxeW6DHEDQU?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"问题起因\"><a href=\"#问题起因\" class=\"headerlink\" title=\"问题起因\"></a>问题起因</h1><p>无用的<code>Resources</code>存在于两部分，第一部分是项目文件中，开发者可以检查并直接移除这些文件；第二部分存在于依赖的<code>library</code>中。在一些情况下，我们只需要使用库里面的某一些功能，而并非全部功能。如果不加以特殊处理，其它未经使用资源文件也会被打入最终的APK中。</p>\n<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1><p><code>Gradle</code>可以分析资源文件的使用情况，从而删除那些不需引入的资源文件。</p>\n<p><img src=\"/img/170214_app_s4ep8/gradle.png\" alt=\"\"></p>\n<p>如果要开启这项功能，需要在<code>gradle</code>配置文件中将<code>minifyEnabled</code>和<code>shrinkResources</code>声明为<code>true</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\tbuildTypes &#123;</span><br><span class=\"line\">\t\trelease &#123;</span><br><span class=\"line\">\t\t\tminifyEnabled trure</span><br><span class=\"line\">\t\t\tshrinkResources true</span><br><span class=\"line\">\t\t\tproguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以强制保留／删除某些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources xmlns:tools:=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">\ttools:keep=&quot;@layout/l_used*_c, @layout/l_used_b*&quot;</span><br><span class=\"line\">\ttools:discard=&quot;@layout/unused2&quot;</span><br><span class=\"line\">\t/&gt;</span><br></pre></td></tr></table></figure>\n<p>Gradle并非是万能的，它不会处理多分辨率／多语言下的资源文件（笔者对这部分存疑，这些资源文件原本就不需要精简，除非APP指定了仅供某些特定用户人群使用）</p>\n<p><img src=\"/img/170214_app_s4ep8/limitations.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s6ep6 - VectorDrawable For Smaller APKs","url":"https://lilei.pro/2017/02/13/Android-Performance-Patterns-s6ep6-VectorDrawable/","content":"<blockquote>\n<p>由于Android系统存在多种分辨率，我们在使用图片时，往往需要准备ldpi、mdpi、hdpi、xhdpi等多种分辨率的图片，占用大量APK体积。<br>针对这种情况，本文介绍了如何VectorDrawable技术的优点，以及使用场景。<br><a href=\"https://www.youtube.com/watch?v=Ls3KzLRmrXg\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ls3KzLRmrXg\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"不合适的做法\"><a href=\"#不合适的做法\" class=\"headerlink\" title=\"不合适的做法\"></a>不合适的做法</h1><p><code>JPEG</code>和<code>PNG</code>是光栅化的图片格式，如果我们不希望在不同分辨率下出现图片模糊的情况，就必须准备多张图片，这会浪费APK体积。</p>\n<p><img src=\"/img/170213_app_s6ep6/many_pic.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"VectorDrawable\"><a href=\"#VectorDrawable\" class=\"headerlink\" title=\"VectorDrawable\"></a>VectorDrawable</h1><p><code>VectorDrawable</code>则可以只用一个文件满足多种屏幕分辨率。它将图片分解为多个基本图形的组合，如下所示。</p>\n<p><img src=\"/img/170213_app_s6ep6/vector_drawable.png\" alt=\"\"></p>\n<p>对于文章开头的三个圆形的场景，可以将占用空间从56K降低到2K，降低了96%。</p>\n<p><img src=\"/img/170213_app_s6ep6/saved_size.png\" alt=\"\"></p>\n<p>使用<code>VectorDrawable</code>还可以避免因使用帧动画，导致图片文件过多的情况</p>\n<p><img src=\"/img/170213_app_s6ep6/animation.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h1><h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><p>加载时，<code>JPEG</code>、<code>PNG</code>文件可以依靠硬件进行纹理渲染，而<code>VectorDrawable</code>在处理时，需要先翻译成GPU指令，VD中的每一个基本图形，都会被作为一个图层处理。</p>\n<p><img src=\"/img/170213_app_s6ep6/loading.png\" alt=\"\"></p>\n<h2 id=\"复杂图像\"><a href=\"#复杂图像\" class=\"headerlink\" title=\"复杂图像\"></a>复杂图像</h2><p><code>VectorDrawable</code>不适用于处理复杂图像，对于下图的肖像，使用<code>PNG</code>是更好的选择。</p>\n<p><img src=\"/img/170213_app_s6ep6/complex_pic.png\" alt=\"\"></p>\n<p>简化<code>VectorDrawable</code>的路径，以便更加高效地绘制。</p>\n<p><img src=\"/img/170213_app_s6ep6/simple.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s6ep5 Smaller APKs A checklist","url":"https://lilei.pro/2017/02/10/Android-Performance-Patterns-s6ep5-Smaller-APKs/","content":"<blockquote>\n<p>如何减少APK体积<br><a href=\"https://www.youtube.com/watch?v=u5xP4tFQlkA&amp;index=78&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/u5xP4tFQlkA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"头脑风暴：怎样减少APK体积呢？\"><a href=\"#头脑风暴：怎样减少APK体积呢？\" class=\"headerlink\" title=\"头脑风暴：怎样减少APK体积呢？\"></a>头脑风暴：怎样减少APK体积呢？</h1><ul>\n<li>避免使用分辨率过大的图片</li>\n<li>使用矢量图</li>\n<li>代码、布局文件复用</li>\n<li>精简多媒体文件</li>\n<li>懒加载，某些业务功能，直到真正应用时方从网络进行下载</li>\n<li>ProGuard</li>\n</ul>\n<hr>\n<h1 id=\"Two-key-areas\"><a href=\"#Two-key-areas\" class=\"headerlink\" title=\"Two key areas\"></a>Two key areas</h1><ul>\n<li>Smaller resources (easiest to fix)</li>\n<li>Smaller code</li>\n</ul>\n<hr>\n<h1 id=\"Smaller-resources\"><a href=\"#Smaller-resources\" class=\"headerlink\" title=\"Smaller resources\"></a>Smaller resources</h1><h2 id=\"移除无用资源文件\"><a href=\"#移除无用资源文件\" class=\"headerlink\" title=\"移除无用资源文件\"></a>移除无用资源文件</h2><p>在<code>gradle</code>文件里配置<code>minifyEnabled true</code>和<code>shrinkResources true</code>，在打包时会忽略实际上没有应用到的资源文件。建议在release时才打开，以减少debug环境编译时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            shirnkResources true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自动分辨率适配功能\"><a href=\"#使用自动分辨率适配功能\" class=\"headerlink\" title=\"使用自动分辨率适配功能\"></a>使用自动分辨率适配功能</h2><p>我们知道Android中有<code>ldpi</code> <code>mdpi</code> <code>hdpi</code> <code>xhdpi</code> <code>xxhdpi</code> 乃至 <code>xxxhdpi</code> 和 <code>tvdpi</code> 等分辨率，如果把每个资源文件，针对这些分辨率都分别制作一个副本，这将占用大量的空间。</p>\n<p><img src=\"/img/170210_app_s6ep5/resolutions.png\" alt=\"\"></p>\n<p>针对这个问题，有多个解决途径。</p>\n<h3 id=\"删除一部分分辨率下的文件\"><a href=\"#删除一部分分辨率下的文件\" class=\"headerlink\" title=\"删除一部分分辨率下的文件\"></a>删除一部分分辨率下的文件</h3><p>框架会根据高分辨率的资源文件自动生成低分辨率下的资源文件。这里删除了ldpi（可以从mdpi生成）、hdpi和xhdpi（可以从xxhdpi生成），另外tvdpi只应用于TVapp，这里一并删除。</p>\n<p>![][rescale.png]</p>\n<h3 id=\"使用矢量图代替像素图\"><a href=\"#使用矢量图代替像素图\" class=\"headerlink\" title=\"使用矢量图代替像素图\"></a>使用矢量图代替像素图</h3><p>矢量图会根据设备分辨率不同，自动调整自身大小，一个矢量图可以应用在多种分辨率下</p>\n<h3 id=\"复用已有的图片资源文件\"><a href=\"#复用已有的图片资源文件\" class=\"headerlink\" title=\"复用已有的图片资源文件\"></a>复用已有的图片资源文件</h3><p>对于下图这种只是变更了方向的场景，应当只使用一张图片，通过代码来控制箭头朝向。</p>\n<p><img src=\"/img/170210_app_s6ep5/reuse_pic.png\" alt=\"reuse_pic\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rotate</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_arrow_expand\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromDegrees</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toDegrees</span>=<span class=\"string\">\"270\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Smaller-Code\"><a href=\"#Smaller-Code\" class=\"headerlink\" title=\"Smaller Code\"></a>Smaller Code</h1><h2 id=\"使用ProGuard\"><a href=\"#使用ProGuard\" class=\"headerlink\" title=\"使用ProGuard\"></a>使用ProGuard</h2><p>设置<code>minifyEnabled true</code>，代码见前文。</p>\n<h2 id=\"优化代码生成器的生成代码\"><a href=\"#优化代码生成器的生成代码\" class=\"headerlink\" title=\"优化代码生成器的生成代码\"></a>优化代码生成器的生成代码</h2><p><strong>代码生成器</strong>是将原始代码转化为目标代码的一种工具，在转化的过程中，有可能生成冗余的目标代码，这部分代码需要精简。</p>\n<h2 id=\"注意依赖！\"><a href=\"#注意依赖！\" class=\"headerlink\" title=\"注意依赖！\"></a>注意依赖！</h2><p>当我们的代码需要引入外部库的时候，庞大的外部依赖会导致APK体积剧增。<code>ProGuard</code>能够为我们处理一部分这种情况，更多时候，我们需要有目的地挑选适合移动端使用的工具库。在引入外部依赖的时候，一定要关注它对APK体积产生的影响。</p>\n<h2 id=\"Segment-your-APK\"><a href=\"#Segment-your-APK\" class=\"headerlink\" title=\"Segment your APK\"></a>Segment your APK</h2><p>视频作者对这部分的内容讲述不甚清晰，我理解下来，所做的事情是，可以根据API级别、分辨率高低等条件，生成不同的APK包，在应用市场里发布时进行配置。而应用市场会根据用户手机型号，为用户推送不同的APK进行个性化安装。</p>\n<hr>\n<h1 id=\"Android-Studio-2-2\"><a href=\"#Android-Studio-2-2\" class=\"headerlink\" title=\"Android Studio 2.2\"></a>Android Studio 2.2</h1><p>新版本的AS中，增加了APK分析工具，可以很方便地察看classes、methods的数目，资源文件大小 等信息。</p>\n<p><img src=\"/img/170210_app_s6ep5/as22.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"禁止Android File Transfer自启动","url":"https://lilei.pro/2017/01/24/Stop-Android-File-Transfer-From-Auto-Starting/","content":"<blockquote>\n<p><a href=\"https://www.android.com/filetransfer/\" target=\"_blank\" rel=\"noopener\">Android File Transfer</a>是macOS系统下用于在手机-电脑间传输文件的工具，然而，这个工具默认是每一次将手机连接至电脑，都会自动启动，非常恼人。本文介绍了如何将自启动关闭的方法。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Android File Transfer Auto Launches</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><ol>\n<li>Close Android File Transfer</li>\n<li>Open Activity Monitor and kill “Android File Transfer Agent”</li>\n<li>Go to where you installed “Android File Transfer.app” (I have it under /Applications)</li>\n<li>Right click and –&gt; “Show package contents”</li>\n<li>Go to Contents/Resources</li>\n<li>Rename “Android File Transfer Agent” to e.g. “Android File Transfer Agent_DISABLED”</li>\n<li>Then go to “/Users/username/Library/Application Support/Google/Android File Transfer” and again rename the Agent app.. “Android File Transfer Agent_DISABLED”.</li>\n</ol>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://mtmurdockblog.com/2012/12/17/disable-auto-start-for-android-file-transfer-on-osx/\" target=\"_blank\" rel=\"noopener\">https://mtmurdockblog.com/2012/12/17/disable-auto-start-for-android-file-transfer-on-osx/</a></p>\n<hr>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h3><hr>\n","categories":[],"tags":["工具"]},{"title":"Android Performance Patterns s6ep4 Themed launch screens","url":"https://lilei.pro/2017/01/23/Android-Performance-Patterns-s6ep4-Themed-launch-screens/","content":"<blockquote>\n<p>This video identifies some pitfalls with bad ways to implement launch screens, and provides a solution that everyone can use.<br><a href=\"https://www.youtube.com/watch?v=E5Xu2iNHRkk&amp;feature=youtu.be\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/E5Xu2iNHRkk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"Bad-Ways\"><a href=\"#Bad-Ways\" class=\"headerlink\" title=\"Bad Ways\"></a>Bad Ways</h1><h2 id=\"Theme-the-launch-screen\"><a href=\"#Theme-the-launch-screen\" class=\"headerlink\" title=\"Theme the launch screen\"></a>Theme the launch screen</h2><p>声明首页的Theme与App其它页面的Theme相同，视频作者对于这部分内容讲述不清，目前存疑。</p>\n<h2 id=\"Turn-off-the-official-startup-window\"><a href=\"#Turn-off-the-official-startup-window\" class=\"headerlink\" title=\"Turn off the official startup window\"></a>Turn off the official startup window</h2><p>使用Window Disable Preview来禁止显示Preview界面，这会导致启动App后依然停留在桌面，在此过程中无法响应用户操作。方法如下：</p>\n<p>在<code>styles.xml</code>中声明Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.NoPreviewWindow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.NoPreviewWindow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowDisablePreview\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在<code>AndroidManifest.xml</code>中使用已经定义的Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activities.SplashActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.NoPreviewWindow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"The-better-way\"><a href=\"#The-better-way\" class=\"headerlink\" title=\"The better way\"></a>The better way</h1><h2 id=\"通过切换Theme的手段来完成\"><a href=\"#通过切换Theme的手段来完成\" class=\"headerlink\" title=\"通过切换Theme的手段来完成\"></a>通过切换Theme的手段来完成</h2><p>首先声明一个以图片为背景的Theme，并且在首页Activity中应用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">android:opacity</span>=<span class=\"string\">\"opaque\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@android:color/white\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bitmap</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/product_log_144dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">...android:theme</span>=<span class=\"string\">\"@style/AppTheme.Launcher\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当首页Activity正式启动时，切换到正式的theme</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundel savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\tsetTheme(R.style.Theme_MyApp);</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.tothenew.com/blog/disabling-the-preview-or-start-window-in-android\" target=\"_blank\" rel=\"noopener\">Disabling the Preview(Start) Window in Android</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/splash-screens-the-right-way/\" target=\"_blank\" rel=\"noopener\">Splash Screens the Right Way</a><h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4></li>\n</ul>\n<hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"如何在控制台输出文件系统结构","url":"https://lilei.pro/2017/01/22/Print-File-System-Tree-In-Terminal/","content":"<blockquote>\n<p>安装并使用tree工具</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/java/com/example/android/architecture/blueprints/todoapp</span><br><span class=\"line\">├── BasePresenter.java</span><br><span class=\"line\">├── BaseView.java</span><br><span class=\"line\">├── addedittask</span><br><span class=\"line\">│   ├── AddEditTaskActivity.java</span><br><span class=\"line\">│   ├── AddEditTaskContract.java</span><br><span class=\"line\">│   ├── AddEditTaskFragment.java</span><br><span class=\"line\">│   └── AddEditTaskPresenter.java</span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   ├── Task.java</span><br><span class=\"line\">│   └── source</span><br><span class=\"line\">│       ├── TasksDataSource.java</span><br><span class=\"line\">│       ├── TasksRepository.java</span><br><span class=\"line\">│       ├── local</span><br><span class=\"line\">│       │   ├── TasksDbHelper.java</span><br><span class=\"line\">│       │   ├── TasksLocalDataSource.java</span><br><span class=\"line\">│       │   └── TasksPersistenceContract.java</span><br><span class=\"line\">│       └── remote</span><br><span class=\"line\">│           └── TasksRemoteDataSource.java</span><br><span class=\"line\">├── statistics</span><br><span class=\"line\">│   ├── StatisticsActivity.java</span><br><span class=\"line\">│   ├── StatisticsContract.java</span><br><span class=\"line\">│   ├── StatisticsFragment.java</span><br><span class=\"line\">│   └── StatisticsPresenter.java</span><br><span class=\"line\">├── taskdetail</span><br><span class=\"line\">│   ├── TaskDetailActivity.java</span><br><span class=\"line\">│   ├── TaskDetailContract.java</span><br><span class=\"line\">│   ├── TaskDetailFragment.java</span><br><span class=\"line\">│   └── TaskDetailPresenter.java</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│   ├── ScrollChildSwipeRefreshLayout.java</span><br><span class=\"line\">│   ├── TasksActivity.java</span><br><span class=\"line\">│   ├── TasksContract.java</span><br><span class=\"line\">│   ├── TasksFilterType.java</span><br><span class=\"line\">│   ├── TasksFragment.java</span><br><span class=\"line\">│   └── TasksPresenter.java</span><br><span class=\"line\">└── util</span><br><span class=\"line\">    ├── ActivityUtils.java</span><br><span class=\"line\">    ├── EspressoIdlingResource.java</span><br><span class=\"line\">    └── SimpleCountingIdlingResource.java</span><br></pre></td></tr></table></figure>\n<p>很多时候我们写文章，需要贴出项目的目录结构。我之前采用的方法比较笨，是在IDE中截图。相信很多人在看资料时，遇到过上面这样，在控制台输出的文件目录结构。直观而且赏心悦目，那么这是用什么工具生成的呢？</p>\n<p>答案是：<strong>Tree</strong></p>\n<hr>\n<h1 id=\"Tree的安装与使用\"><a href=\"#Tree的安装与使用\" class=\"headerlink\" title=\"Tree的安装与使用\"></a>Tree的安装与使用</h1><p>如果你用的是<strong>Ubuntu</strong>或其他的*nux系统，直接运行<code>sudo apt-get install tree</code>安装即可，但是在<strong>macOS</strong>中，并没有<code>apt-get</code>工具，需要先安装<a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，然后通过<code>brew</code>安装<code>tree</code>。</p>\n<p>注意在安装的过程中需要输入管理员密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br><span class=\"line\"><span class=\"variable\">$brew</span> install tree</span><br></pre></td></tr></table></figure>\n<p>待安装完成后（大概需要10～20分钟），就可以使用<code>tree ${folder_name}</code>在控制台中打印出目录结构了。</p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"===End===\"></a><em>===End===</em></h4><hr>\n","categories":[],"tags":["工具"]},{"title":"Android Performance Patterns s6ep3 App Launch time & Bloated Application objects","url":"https://lilei.pro/2017/01/22/Android-Performance-Patterns-s6ep3-App-Launch-Time/","content":"<blockquote>\n<p>This videos are really interesting but it seems to me that the last 3 episodes have been basically the same.﻿ ————摘自youtube评论<br><a href=\"https://www.youtube.com/watch?v=Y-u511RsC3o&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=76\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Y-u511RsC3o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"Slow-start-up-apps-cause-unhappy-users\"><a href=\"#Slow-start-up-apps-cause-unhappy-users\" class=\"headerlink\" title=\"Slow start-up apps cause unhappy users.\"></a>Slow start-up apps cause unhappy users.</h1><p>是的，我同意！</p>\n<p>但是你能不能多讲一些干货？</p>\n<p><img src=\"/img/170117_app_s6ep3/wasted_work.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"Android-has-tools-to-help\"><a href=\"#Android-has-tools-to-help\" class=\"headerlink\" title=\"Android has tools to help.\"></a>Android has tools to help.</h1><h2 id=\"Method-Trace\"><a href=\"#Method-Trace\" class=\"headerlink\" title=\"Method Trace\"></a>Method Trace</h2><p>前面两节已经讲过这个，图片我就不贴了。</p>\n<hr>\n<h1 id=\"Solution-lazy-loading\"><a href=\"#Solution-lazy-loading\" class=\"headerlink\" title=\"Solution: lazy loading\"></a>Solution: lazy loading</h1><p><img src=\"/img/170117_app_s6ep3/lazy_loading.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s5ep3 App Launch time & Activity creation","url":"https://lilei.pro/2017/01/17/Android-Performance-Patterns-s6ep2-App-Launch-Time-And-Activity-Creation/","content":"<blockquote>\n<p>ep1介绍了Application启动过慢的原因，本节分析Activity启动过慢的原因，启动速度标准以及工具。<br><a href=\"https://www.youtube.com/watch?v=AkafJ6NdrhY&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=75\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AkafJ6NdrhY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/170117_app_s6ep2/title.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"启动MainActivity过慢\"><a href=\"#启动MainActivity过慢\" class=\"headerlink\" title=\"启动MainActivity过慢\"></a>启动MainActivity过慢</h1><p>原因可能有多个，如下图。</p>\n<p><img src=\"/img/170117_app_s6ep2/slow_main_activity.png\" alt=\"\"></p>\n<ul>\n<li>加载布局</li>\n<li>加载 Bitmap（引起GC）</li>\n<li>网络请求</li>\n<li>读写 User Preference</li>\n</ul>\n<hr>\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><h2 id=\"Method-tracing-tool\"><a href=\"#Method-tracing-tool\" class=\"headerlink\" title=\"Method tracing tool\"></a>Method tracing tool</h2><p><a href=\"https://developer.android.com/studio/profile/am-methodtrace.html\" target=\"_blank\" rel=\"noopener\">Method Tracer</a> 工具被用来查看每个方法的执行时间。</p>\n<p>如果<code>onCreate</code>的执行超过了<strong>16ms～30ms</strong>，那么它很可能是有问题的。</p>\n<h2 id=\"Inserting-Trace-Commands\"><a href=\"#Inserting-Trace-Commands\" class=\"headerlink\" title=\"Inserting Trace Commands\"></a>Inserting Trace Commands</h2><p>使用<code>trace</code>来记录开始／截止时间，所记录的时间会显示在<a href=\"https://developer.android.com/studio/profile/systrace-commandline.html\" target=\"_blank\" rel=\"noopener\">Systrace</a>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace.beginSection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code to be valued</span></span><br><span class=\"line\"></span><br><span class=\"line\">trace.endSection();</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"造成Activity启动过慢的原因\"><a href=\"#造成Activity启动过慢的原因\" class=\"headerlink\" title=\"造成Activity启动过慢的原因\"></a>造成Activity启动过慢的原因</h1><h2 id=\"Complex-Layouts\"><a href=\"#Complex-Layouts\" class=\"headerlink\" title=\"Complex Layouts\"></a>Complex Layouts</h2><p>首当其冲的是复杂布局导致加载过慢，布局越复杂，越多的资源文件（图片、主题）需要加载。</p>\n<p><img src=\"/img/170117_app_s6ep2/complex_layout.png\" alt=\"\"></p>\n<p>解决方法有降低复杂度、使结构扁平化、对于不可见的元素暂时不加载。</p>\n<h2 id=\"懒加载-amp-异步处理\"><a href=\"#懒加载-amp-异步处理\" class=\"headerlink\" title=\"懒加载&amp;异步处理\"></a>懒加载&amp;异步处理</h2><p><img src=\"/img/170117_app_s6ep2/slow_sync.png\" alt=\"\"></p>\n<p>当初始化过程中涉及多个耗时操作，最糟糕的情况是把它们串行起来进行，这会导致每一项操作的延迟被叠加起来，让用户抓狂。</p>\n<p>这时应当判断哪些操作是一定要串行进行，哪些是可以异步加载的，从而进行优化。</p>\n<p><img src=\"/img/170117_app_s6ep2/async.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"使用Charles监控Genymotion模拟器发送的请求","url":"https://lilei.pro/2017/01/16/Using-Charles-Proxy-with-Genymotion/","content":"<blockquote>\n<p>Charles在模拟器中的配置，与在真机上的配置有所不同。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>Charles是很好用的代理工具，可以用来查看网络请求的Request和Response，Genymotion则号称速度最快的Android模拟器。然而，在把这两者结合使用时，会发现并没有用真机做代理那么方便。原因在于模拟器所接入的网络是<strong>VirtualBox</strong>所建立的模拟网络，跟笔记本电脑所看到的局域网IP不在同一个网络环境。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在模拟器的WLAN配置中，将代理host改为<code>10.0.3.2</code>，端口改为Charles配置的端口（默认的是<code>8888</code>，我使用的是<code>8642</code>）。</p>\n<p>Done！</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://rexstjohn.com/using-genymotion-charles-proxy/\" target=\"_blank\" rel=\"noopener\">Using Genymotion With Charles Proxy</a></p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h4><hr>\n","categories":[],"tags":["工具"]},{"title":"Android应用签名实践","url":"https://lilei.pro/2017/01/16/Android-Sign/","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.jianshu.com/p/e9a685c88258\" target=\"_blank\" rel=\"noopener\">Android给apk签名那点事</a></li>\n</ul>\n","categories":[],"tags":["Android"]},{"title":"Android-Performance-Patterns-s6ep1-Launch-Time-Performance","url":"https://lilei.pro/2017/01/16/Android-Performance-Patterns-s6ep1-Launch-Time-Performance/","content":"<blockquote>\n<p>Season 6 ep 1，第六季集中讨论App启动速度的话题。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=Vw1G1s73DsY&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=74\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Vw1G1s73DsY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/170116_app_s6ep1/title.png\" alt=\"\"></p>\n<h1 id=\"理解启动时间（Launching-Time）\"><a href=\"#理解启动时间（Launching-Time）\" class=\"headerlink\" title=\"理解启动时间（Launching Time）\"></a>理解启动时间（Launching Time）</h1><p>当用户启动应用时，Android系统会展示一个空白（dummy）启动页，后面会讲到，可以通过在<code>AndroidManifest.xml</code>中为这个启动页配置背景图片。</p>\n<p>空白页持续到App绘制出首屏图像为止。</p>\n<p><img src=\"/img/170116_app_s6ep1/dummy.png\" alt=\"\"></p>\n<p>下面的流程图从进程角度进行说明，系统进程<code>System Process</code>会为App启动一个<code>Application Process</code>，在这进程里先执行<code>Application.onCreate</code>（在musical.ly的face to face中提到了这个），随后，应用主线程<code>MainThread</code>处理Activity初始化事务，直至绘制出第一个界面，系统才将屏幕交给应用来展示。</p>\n<p><img src=\"/img/170116_app_s6ep1/process.png\" alt=\"\"></p>\n<p>在这个过程中，<code>inflate views</code>是耗时最多的，因此在开发自己的应用时，应当有意地精简首屏布局，减少加载时间。如果有耗时操作，则使用懒加载。</p>\n<p>若你使用懒加载，当所有资源加载完成后，可以通过<code>reportFullyDrawn()</code>方法来告诉系统这一事件。系统在统计初始加载时间的时候，会以调用这个方法的时机作为结束。</p>\n<hr>\n<h1 id=\"帮助我们优化启动时间的工具\"><a href=\"#帮助我们优化启动时间的工具\" class=\"headerlink\" title=\"帮助我们优化启动时间的工具\"></a>帮助我们优化启动时间的工具</h1><p>Android Studio为我们提供了监控启动时间的工具，借助这些工具，我们可以找出启动过程中最耗时的步骤是哪个，通过懒加载等手段，将启动时间控制在合理的范围内。</p>\n<p>首先便是App启动时候自动打出的log</p>\n<p><img src=\"/img/170116_app_s6ep1/load_time.png\" alt=\"\"></p>\n<p>精确到方法，在<strong>Monitor</strong>面板中有<strong>MethodTracing</strong>工具</p>\n<p><img src=\"/img/170116_app_s6ep1/method_tracing.png\" alt=\"\"></p>\n<p>更多关于启动时间的知识，将在后续章节中介绍。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://developer.android.com/topic/performance/launch-time.html\" target=\"_blank\" rel=\"noopener\">Launch-Time Performance</a></li>\n</ul>\n<hr>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"====END====\"></a><em>====END====</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Linux Shell ${} 用法","url":"https://lilei.pro/2017/01/13/Linux-Shell-Usage/","content":"<blockquote>\n<p>在Linux Shell中，<code>${}</code>可以被用来处理文件路径字符串。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p><code>${[input][rule]}</code>，其中<code>input</code>是需要处理的字符串，<code>rule</code>是处理规则，详细规则如下。</p>\n<p><code>#</code>去掉左边字符。</p>\n<p><code>$</code>去掉右边字符。</p>\n<p>上面两点很好记忆，键盘上<code>#</code>在左，<code>$</code>在右。</p>\n<p>单个符号最小匹配，两个符号最大匹配。</p>\n<h1 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h1><p>定义<code>file</code>=<code>/dir1/dir2/dir3/my.file.txt</code></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li><code>${file#*/}</code>：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</li>\n<li><code>${file##*/}</code>：拿掉最后一条 / 及其左边的字符串：my.file.txt</li>\n<li><code>${file#*.}</code>：拿掉第一个 . 及其左边的字符串：file.txt</li>\n<li><code>${file##*.}</code>：拿掉最后一个 . 及其左边的字符串：txt</li>\n<li><code>${file%/*}</code>：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3</li>\n<li><code>${file%%/*}</code>：拿掉第一条 / 及其右边的字符串：(空值)</li>\n<li><code>${file%.*}</code>：拿掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file</li>\n<li><code>${file%%.*}</code>：拿掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my</li>\n</ul>\n<h2 id=\"提取\"><a href=\"#提取\" class=\"headerlink\" title=\"提取\"></a>提取</h2><ul>\n<li><code>${file:0:5}</code>：提取最左边的 5 个字节：/dir1</li>\n<li><code>${file:5:5}</code>：提取第 5 个字节右边的连续 5 个字节：/dir2</li>\n</ul>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><ul>\n<li><code>${file/dir/path}</code>：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt</li>\n<li><code>${file//dir/path}</code>：将全部 dir 提换为 path：/path1/path2/path3/my</li>\n</ul>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"====END====\"></a><em>====END====</em></h4>","categories":[],"tags":["Linux","Shell"]},{"title":"Those Questions","url":"https://lilei.pro/2017/01/11/Those-Questions/","content":"<blockquote>\n<p>在计算机科学的沙滩上，我始终是一个蹦蹦跳跳捡拾贝壳的孩子，而那真理的大海就在身边，我却未能发现它。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Project-Module\"><a href=\"#Project-Module\" class=\"headerlink\" title=\"Project? Module?\"></a>Project? Module?</h1><h1 id=\"AppCompatActivity\"><a href=\"#AppCompatActivity\" class=\"headerlink\" title=\"AppCompatActivity?\"></a>AppCompatActivity?</h1><h1 id=\"AndroidManifest-xml中的tools-context\"><a href=\"#AndroidManifest-xml中的tools-context\" class=\"headerlink\" title=\"AndroidManifest.xml中的tools:context\"></a>AndroidManifest.xml中的tools:context</h1>","categories":[],"tags":["Android"]},{"title":"尝鲜开发微信小程序有感","url":"https://lilei.pro/2017/01/09/WeChat-App-Dev/","content":"<blockquote>\n<p>首次开发小程序，完成了一个简单的功能（半成品），有所思，有所感</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h1><p>2017年1月9日，微信小程序上线，朋友圈里铺天盖地的各种截图，足见其火爆。诸多移动应用大厂纷纷上线各自的小程序版本，笔者所在的D公司也悄悄发布了小程序，看来是在保密情况下开发的，在之前一段时间里自己竟从未听闻。</p>\n<p>纸上得来终觉浅，绝知此事要躬行。今天笔者就尝试开发了一个小程序，功能非常简单，见下文。</p>\n<h1 id=\"程序页面与功能\"><a href=\"#程序页面与功能\" class=\"headerlink\" title=\"程序页面与功能\"></a>程序页面与功能</h1><p>整个小程序包含两个页面，登陆页与功能页。登陆页显示一张欢迎图片和一个输入框，当用户输入正确的文字后，跳转至功能页。功能页提供一个简单的ASCII字符转换功能。</p>\n<h1 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h1><p>依照官方Demo，新建两个页面目录，布局写入<code>wxml</code>，逻辑写入<code>js</code>。</p>\n<p>代码过于简单，而且涉及个人隐私，略去不提。着重谈思考与感想。</p>\n<h1 id=\"思考与感想\"><a href=\"#思考与感想\" class=\"headerlink\" title=\"思考与感想\"></a>思考与感想</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>整体看来，小程序的结构还是很清晰的。</p>\n<ul>\n<li>按页面组织，每个页面是一个文件夹</li>\n<li>文件夹下，wxml（布局），json（配置），wxss（样式），js（逻辑），自带数据绑定，接近设计模式中的MVVM模式</li>\n<li>官方集成登陆、定位、地图、支付、分享、网络请求等基础服务，减少二次开发成本</li>\n<li>另一方面，这也限制了开发者对于底层工具的选择，只能寄希望于微信提供的API足够强大与高效，因为你压根也没有别的办法去修改底层服务</li>\n</ul>\n<h2 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h2><p>目前看来，微信官方提供的开发者工具只是个半成品，由于缺少一些常用功能，使用起来反而会碍手碍脚，拖慢开发速度。建议开发者使用自己习惯的工具进行开发，只使用官方开发工具中的预览&amp;发布功能。</p>\n<h3 id=\"官方开发者工具的一些槽点\"><a href=\"#官方开发者工具的一些槽点\" class=\"headerlink\" title=\"官方开发者工具的一些槽点\"></a>官方开发者工具的一些槽点</h3><ul>\n<li>快捷键匮乏：打开文件，关闭文件，自动格式化……</li>\n<li>无法批量操作文件</li>\n<li>无法批量重命名变量</li>\n<li>无法全局搜索</li>\n<li>不支持Less</li>\n<li><code>Wxml</code>标签中不支持键盘展开/收起节点</li>\n<li>wxml、wxss在sublime等编辑器中无语法高亮</li>\n<li>偶尔出现调试面板中只显示<code>Console</code> <code>Sources</code> <code>Network</code>三个标签的bug，重新下载后解决</li>\n</ul>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>这是笔者最不喜欢的一点，必须以公司/企业/媒体/政府机关的身份进行认证后，才能发布到线上，完全堵死了个人开发者发布的道路。</p>\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>张小龙的野心很大，当微信占据了8亿手机入口后，这野心开始显露出来————微信不会满足于只做一个通讯软件，它正试图成为一个入口，一个触达使用者生活方方面面的入口。一旦这个生态系统被证明是行之有效的，未来人们手机上可能只会安装一个微信。</p>\n<p>对于开发者，尤其是Android/iOS开发者，这并不是一个好消息，他们可能需要改行写js/css了。</p>\n<p>支付宝地位受到威胁，阿里恐成最大输家。</p>\n<p>以上的一切，都建立在小程序真正跑得够快、够好的基础上，目前看来这是远远不够的，比起原生系统，小程序的体验要下降许多，尤其是Tap/Scroll事件，卡顿非常明显。</p>\n<h1 id=\"附1-ASCII对照表\"><a href=\"#附1-ASCII对照表\" class=\"headerlink\" title=\"附1: ASCII对照表\"></a>附1: ASCII对照表</h1><p><img src=\"/img/170109_wechat_dev/ascii.png\" alt=\"\"></p>\n<h1 id=\"附2-JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\"><a href=\"#附2-JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\" class=\"headerlink\" title=\"附2: JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\"></a>附2: JavaScript中获取字符的ASCII值，以及将ACSII转换为字符</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'c'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ascii = c.charCodeAt(); <span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"built_in\">String</span>.fromCharCode(ascii); <span class=\"comment\">// 'c'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"======Ending======\"></a><em>======Ending======</em></h4>","categories":[],"tags":["微信小程序"]},{"title":"Android SDK下载极速代理地址","url":"https://lilei.pro/2017/01/09/Android-SDK-Manager-Proxy-Server/","content":"<blockquote>\n<p>HTTP Proxy Server: android-mirror.bugly.qq.com<br>HTTP Proxy Port: 8080</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>在Android SDK Manager中如上配置即可，为鹅厂点赞👍</p>\n<p>记得勾选下面的<code>Force https://... sources to be fetched using http://...</code></p>\n<p><img src=\"/img/170109_sdk_proxy/proxy.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"======Ending======\"></a><em>======Ending======</em></h3>","categories":[],"tags":["Android","Android Studio"]},{"title":"Android WebView 从0到1（二）","url":"https://lilei.pro/2016/11/10/Android-WebView-0-to-1-part-2/","content":"<blockquote>\n<p>WebView中clearCache的执行过程源码分析。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>上一篇文章中我们对Android WebView的loadUrl方法进行了分析，这次我们来看看clearCache究竟做了什么事，进而搞清楚WebView中的缓存机制。</p>\n<h2 id=\"WebView-clearCache\"><a href=\"#WebView-clearCache\" class=\"headerlink\" title=\"WebView.clearCache\"></a>WebView.clearCache</h2><p>clearCache的源码很简单，唯一的参数<code>includeDiskFiles</code>也很容易理解。如前篇所述，WebView的大部分操作，都是代理给<code>WebViewProvider</code>来进行，clearCache也不例外。不过可以发现，这里有个<code>checkThread()</code>的操作，这是来进行什么的呢？让我们在源码中一探究竟。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clears the resource cache. Note that the cache is per-application, so</span></span><br><span class=\"line\"><span class=\"comment\"> * this will clear the cache for all WebViews used.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> includeDiskFiles if false, only the RAM cache is cleared</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    checkThread();</span><br><span class=\"line\">    mProvider.clearCache(includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ignore mWebViewThread == null because this can be called during in the super class</span></span><br><span class=\"line\">    <span class=\"comment\">// constructor, before this class's own constructor has even started.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mWebViewThread != <span class=\"keyword\">null</span> &amp;&amp; Looper.myLooper() != mWebViewThread) &#123;</span><br><span class=\"line\">        Throwable throwable = <span class=\"keyword\">new</span> Throwable(</span><br><span class=\"line\">                <span class=\"string\">\"A WebView method was called on thread '\"</span> +</span><br><span class=\"line\">                Thread.currentThread().getName() + <span class=\"string\">\"'. \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"All WebView methods must be called on the same thread. \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"(Expected Looper \"</span> + mWebViewThread + <span class=\"string\">\" called on \"</span> + Looper.myLooper() +</span><br><span class=\"line\">                <span class=\"string\">\", FYI main Looper is \"</span> + Looper.getMainLooper() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">        Log.w(LOGTAG, Log.getStackTraceString(throwable));</span><br><span class=\"line\">        StrictMode.onWebViewMethodCalledOnWrongThread(throwable);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sEnforceThreadChecking) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开头注释里就已经说明，忽略<code>mWebViewThread</code>为null的情况，因为可能会在超类的构造器里调用这个方法，此时WebView这个类的对象还没有构建出来，意味着<code>mWebViewThread</code>为null。<code>if</code>条件中的<code>Looper.myLooper() != mWebViewThread</code>这条判断，对Android系统有过一定了解的人的人，应该会对<code>Looper.myLooper()</code>这种写法非常熟悉，这是获取当前线程的典型手段。如果当前线程不是WebView线程的话，就要做好抛出异常的准备。为什么要做这种判断呢？我分析了10分钟，得出结论是：因为WebView中很多操作，都需要运用线程内部资源，如果在外部线程中调用，很容易出现并发问题，如果要避免，就只有增加同步的成本，所以索性只限制在线程内了。有一点值得注意的是，因为WebView是一个UI组件，大部分时间里都在主线程中初始化，因此，这里判断的就是当前线程是否为UI线程。</p>\n<p>接下来我们看一下<code>WebViewProvider</code>中的<code>clearCache</code>方法，依旧是<a href=\"https://android.googlesource.com/platform/frameworks/webview/+/4dcabae/chromium/java/com/android/webview/chromium/WebViewChromium.java\" target=\"_blank\" rel=\"noopener\">WebViewChromium.java</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    mAwContents.clearCache(includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，这个操作被代理给了<code>AwContents</code>，源码见<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/c5c1b6121eac447fb8d8691bd637e2b6b188fd75/android_webview/java/src/org/chromium/android_webview/AwContents.java\" target=\"_blank\" rel=\"noopener\">AwContents.java</a>。需要注意，由于app内所有的WebView缓存都是保存在一个地方，这个方法会清空app全部WebView的缓存，参数<code>includeDiskFiles</code>控制清空硬盘上的缓存文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clears the resource cache. Note that the cache is per-application, so this will clear the</span></span><br><span class=\"line\"><span class=\"comment\"> * cache for all WebViews used.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> includeDiskFiles if false, only the RAM cache is cleared</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mNativeAwContents == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    nativeClearCache(mNativeAwContents, includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的实现位于<a href=\"https://chromium.googlesource.com/experimental/chromium/src/+/master/android_webview/native/aw_contents.cc\" target=\"_blank\" rel=\"noopener\">aw_contents.cc</a>代码。先检测当前线程为UI线程，然后调用<code>render_view_host_ext_</code>的ClearCache方法，如果需要清空硬盘上的缓存的话，调用<code>RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost())</code>。逐个来分析。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AwContents::ClearCache(JNIEnv* env,</span><br><span class=\"line\">                            <span class=\"keyword\">const</span> JavaParamRef&lt;jobject&gt;&amp; obj,</span><br><span class=\"line\">                            jboolean include_disk_files) &#123;</span><br><span class=\"line\">  DCHECK_CURRENTLY_ON(BrowserThread::UI);</span><br><span class=\"line\">  render_view_host_ext_-&gt;ClearCache();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (include_disk_files)</span><br><span class=\"line\">    RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先看<code>render_view_host_ext_-&gt;ClearCache()</code>，代码在<a href=\"https://chromium.googlesource.com/chromium/src/+/master/android_webview/browser/renderer_host/aw_render_view_host_ext.cc\" target=\"_blank\" rel=\"noopener\">aw_render_view_host_ext.cc</a>。这里发出了一个信息，<code>AwViewMsg_ClearCache</code>，看出来了，是广播模式。那么消息监听者在哪儿呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AwRenderViewHostExt::ClearCache() &#123;</span><br><span class=\"line\">  DCHECK(CalledOnValidThread());</span><br><span class=\"line\">  Send(<span class=\"keyword\">new</span> AwViewMsg_ClearCache);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>监听者位于<a href=\"https://chromium.googlesource.com/chromium/src/+/refs/heads/master/android_webview/renderer/aw_render_thread_observer.cc\" target=\"_blank\" rel=\"noopener\">aw_render_thread_observer.cc</a>。通过<code>blink::WebCache::clear()</code>调用clear方法。<code>blink</code>究竟是个啥？I don’t know. 借助Google的力量，找到了<code>WebCache::clear()</code>的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AwRenderThreadObserver::OnControlMessageReceived(</span><br><span class=\"line\">    <span class=\"keyword\">const</span> IPC::Message&amp; message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> handled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  IPC_BEGIN_MESSAGE_MAP(AwRenderThreadObserver, message)</span><br><span class=\"line\">    IPC_MESSAGE_HANDLER(AwViewMsg_ClearCache, OnClearCache)</span><br><span class=\"line\">    IPC_MESSAGE_HANDLER(AwViewMsg_SetJsOnlineProperty, OnSetJsOnlineProperty)</span><br><span class=\"line\">    IPC_MESSAGE_UNHANDLED(handled = <span class=\"literal\">false</span>)</span><br><span class=\"line\">  IPC_END_MESSAGE_MAP()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> AwRenderThreadObserver::OnClearCache() &#123;</span><br><span class=\"line\">  blink::WebCache::clear();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/web/WebCache.cpp\" target=\"_blank\" rel=\"noopener\">WebCache.cpp</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> WebCache::clear()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MemoryCache* cache = memoryCache();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache)</span><br><span class=\"line\">        cache-&gt;evictResources();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取<code>memoryCache()</code>的方法位于<a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/web/WebCache.cpp\" target=\"_blank\" rel=\"noopener\">WebCache.cpp</a>，可以看出该cache是线程相关的，而且从命名上就可以看出，这是<code>MemoryCache</code>，位于RAM中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MemoryCache* <span class=\"title\">memoryCache</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ASSERT(WTF::isMainThread());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gMemoryCache)</span><br><span class=\"line\">        gMemoryCache = <span class=\"keyword\">new</span> Persistent&lt;MemoryCache&gt;(MemoryCache::create());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gMemoryCache-&gt;get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析完清理内存缓存的路径，我们接下来看如何清理磁盘缓存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (include_disk_files)</span><br><span class=\"line\">    RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>RemoveHttpDiskCache</code>位于<a href=\"https://chromium.googlesource.com/chromium/src.git/+/master/android_webview/browser/net_disk_cache_remover.cc\" target=\"_blank\" rel=\"noopener\">net_disk_cache_remover.cc</a>。所做的事情是，在<code>BrowserThread</code>中发布一个Task，清理<code>Render</code>进程拥有的磁盘空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveHttpDiskCache</span><span class=\"params\">(content::RenderProcessHost* render_process_host)</span> </span>&#123;</span><br><span class=\"line\">  BrowserThread::PostTask(</span><br><span class=\"line\">      BrowserThread::IO, FROM_HERE,</span><br><span class=\"line\">      base::Bind(&amp;ClearHttpDiskCacheOnIoThread,</span><br><span class=\"line\">                 base::Unretained(render_process_host-&gt;GetStoragePartition()-&gt;</span><br><span class=\"line\">                     GetURLRequestContext()),</span><br><span class=\"line\">                 base::Unretained(render_process_host-&gt;GetStoragePartition()-&gt;</span><br><span class=\"line\">                     GetMediaURLRequestContext())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，似乎告一段落了。</p>\n<hr>\n","categories":[],"tags":["Android","源码分析"]},{"title":"Android WebView 从0到1（一）","url":"https://lilei.pro/2016/11/09/Android-WebView-0-to-1/","content":"<blockquote>\n<p>这一系列将从源码角度，分析WebView加载页面的全过程。在摸透缓存机制的基础上，实现自己的WebView缓存控制项目Vindow。<br>从0到1很难，但是克服了之后，从1到100就容易了许多。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"WebView-java\"><a href=\"#WebView-java\" class=\"headerlink\" title=\"WebView.java\"></a>WebView.java</h2><p>这里采用<code>android-23</code>的源码示例。</p>\n<p>WebView的类说明注释非常长，建议耐心地读完每一行，随后，你就会对WebView的主要功能有一个轮廓上的认识。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A View that displays web pages. This class is the basis upon which you</span></span><br><span class=\"line\"><span class=\"comment\"> * can roll your own web browser or simply display some online content within your Activity.</span></span><br><span class=\"line\"><span class=\"comment\"> * It uses the WebKit rendering engine to display</span></span><br><span class=\"line\"><span class=\"comment\"> * web pages and includes methods to navigate forward and backward</span></span><br><span class=\"line\"><span class=\"comment\"> * through a history, zoom in and out, perform text searches and more.</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>这段是说，WebView主要用来展示网页信息，它使用WebKit内核（这里很重要，后续分析大部分源码都是来自WebKit的），包含了控制网页前进后退的导航功能、缩放功能、文本搜索功能以及其他。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * By default, a WebView provides no browser-like widgets, does not</span></span><br><span class=\"line\"><span class=\"comment\"> * enable JavaScript and web page errors are ignored. If your goal is only</span></span><br><span class=\"line\"><span class=\"comment\"> * to display some HTML as a part of your UI, this is probably fine;</span></span><br><span class=\"line\"><span class=\"comment\"> * the user won't need to interact with the web page beyond reading</span></span><br><span class=\"line\"><span class=\"comment\"> * it, and the web page won't need to interact with the user. If you</span></span><br><span class=\"line\"><span class=\"comment\"> * actually want a full-blown web browser, then you probably want to</span></span><br><span class=\"line\"><span class=\"comment\"> * invoke the Browser application with a URL Intent rather than show it</span></span><br><span class=\"line\"><span class=\"comment\"> * with a WebView.</span></span><br><span class=\"line\"><span class=\"comment\"> * Uri uri = Uri.parse(\"http://www.example.com\");</span></span><br><span class=\"line\"><span class=\"comment\"> * Intent intent = new Intent(Intent.ACTION_VIEW, uri);</span></span><br><span class=\"line\"><span class=\"comment\"> * startActivity(intent);</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>这里强调了，WebView应当仅仅提供展示，默认情况下是禁用JavaScript，并且隐藏网页错误信息的。换句话说，Google本意是不提倡在WebView中引导用户进行过多的操作，如果有这种需求，就通过intent打开浏览器页面进行操作。然而当下这条规则在很多应用场景下是被无视的，想想微信在H5页面里，可以做多少事。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;A WebView has several customization points where you can add your</span></span><br><span class=\"line\"><span class=\"comment\"> * own behavior. These are:&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Creating and setting a &#123;<span class=\"doctag\">@link</span> android.webkit.WebChromeClient&#125; subclass.</span></span><br><span class=\"line\"><span class=\"comment\"> *       This class is called when something that might impact a</span></span><br><span class=\"line\"><span class=\"comment\"> *       browser UI happens, for instance, progress updates and</span></span><br><span class=\"line\"><span class=\"comment\"> *       JavaScript alerts are sent here (see &lt;a</span></span><br><span class=\"line\"><span class=\"comment\"> * href=\"&#123;<span class=\"doctag\">@docRoot</span>&#125;guide/developing/debug-tasks.html#DebuggingWebPages\"&gt;Debugging Tasks&lt;/a&gt;).</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Creating and setting a &#123;<span class=\"doctag\">@link</span> android.webkit.WebViewClient&#125; subclass.</span></span><br><span class=\"line\"><span class=\"comment\"> *       It will be called when things happen that impact the</span></span><br><span class=\"line\"><span class=\"comment\"> *       rendering of the content, eg, errors or form submissions. You</span></span><br><span class=\"line\"><span class=\"comment\"> *       can also intercept URL loading here (via &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\"> * android.webkit.WebViewClient#shouldOverrideUrlLoading(WebView,String)</span></span><br><span class=\"line\"><span class=\"comment\"> * shouldOverrideUrlLoading()&#125;).&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Modifying the &#123;<span class=\"doctag\">@link</span> android.webkit.WebSettings&#125;, such as</span></span><br><span class=\"line\"><span class=\"comment\"> * enabling JavaScript with &#123;<span class=\"doctag\">@link</span> android.webkit.WebSettings#setJavaScriptEnabled(boolean)</span></span><br><span class=\"line\"><span class=\"comment\"> * setJavaScriptEnabled()&#125;. &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Injecting Java objects into the WebView using the</span></span><br><span class=\"line\"><span class=\"comment\"> *       &#123;<span class=\"doctag\">@link</span> android.webkit.WebView#addJavascriptInterface&#125; method. This</span></span><br><span class=\"line\"><span class=\"comment\"> *       method allows you to inject Java objects into a page's JavaScript</span></span><br><span class=\"line\"><span class=\"comment\"> *       context, so that they can be accessed by JavaScript in the page.&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>默认WebView的很多功能是关闭的，需要我们手动打开。这里列出了如何处理JS Alert与错误、如何开启JS、如何使native代码与页面JS进行交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implementation notes.</span></span><br><span class=\"line\"><span class=\"comment\">// The WebView is a thin API class that delegates its public API to a backend WebViewProvider</span></span><br><span class=\"line\"><span class=\"comment\">// class instance. WebView extends &#123;@link AbsoluteLayout&#125; for backward compatibility reasons.</span></span><br><span class=\"line\"><span class=\"comment\">// Methods are delegated to the provider implementation: all public API methods introduced in this</span></span><br><span class=\"line\"><span class=\"comment\">// file are fully delegated, whereas public and protected methods from the View base classes are</span></span><br><span class=\"line\"><span class=\"comment\">// only delegated where a specific need exists for them to do so.</span></span><br></pre></td></tr></table></figure>\n<p>上面这段说明了WebView主要的实现机理————WebView本身只是一个代理（delegate），提供了公共的API供客户端调用，而这些API的实现，都是代理到了一个叫WebViewProvider的对象上面。既然这样，我们就大致浏览下WebView有哪些公有API，把更多的精力保留下来，集中分析WebViewProvider的实现。</p>\n<h2 id=\"WebView-API\"><a href=\"#WebView-API\" class=\"headerlink\" title=\"WebView API\"></a>WebView API</h2><p>这部分不罗列了，只做一个简单的归类，API文档见 <a href=\"https://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><strong>加载页面</strong><br>这是最主要的功能，全部由代理Provider完成</p>\n<ul>\n<li>loadUrl</li>\n<li>postUrl</li>\n<li>loadData</li>\n<li>loadDataWithBaseURL</li>\n<li>getUrl，getOriginalUrl</li>\n<li>getFavicon，getTouchIconUrl</li>\n<li>保存页面：saveWebArchive</li>\n<li>控制加载：stopLoading，reload，getProgress</li>\n<li>页面尺寸：getContentHeight，getContentWidth</li>\n</ul>\n<p><strong>计时器</strong></p>\n<ul>\n<li>JS中的计时器，在onPause时可以暂停，onResume时恢复：pauseTimers，resumeTimers</li>\n</ul>\n<p><strong>导航</strong></p>\n<ul>\n<li>canGoBack，canGoForward，canGoBackOrForward</li>\n<li>goBack，goForward，goBackOrForward</li>\n<li>pageUp，pageDown</li>\n<li>copyBackForwardList</li>\n</ul>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li>evaluateJavascript</li>\n<li>addJavascriptInterface，removeJavascriptInterface</li>\n</ul>\n<p><strong>WebViewClient／WebChromeClient</strong></p>\n<ul>\n<li>setWebViewClient：WebView本身是控制页面整体框架的前进、后退、缩放、加载等功能，而具体页面内容的变化，则要交给WebViewClient来管理。</li>\n<li>setWebChromeClient：WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等。如果页面只是简单地展示HTML，并没有JS操作，那么用WebViewClient就足够了。</li>\n</ul>\n<p><strong>下载</strong></p>\n<ul>\n<li>完成下载监听器：setDownloadListener</li>\n</ul>\n<p><strong>查找</strong></p>\n<ul>\n<li>通过FindListener回调接口实现：setFindListener，findNext，findAll……</li>\n</ul>\n<p><strong>缩放</strong></p>\n<ul>\n<li>展示缩放控件：invokeZoomPicker</li>\n<li>控制缩放：zoomIn，zoomOut……</li>\n</ul>\n<p><strong>安全认证</strong></p>\n<ul>\n<li>证书操作：getCertificate，setCertificate（deprecated），</li>\n<li>用户名密码：setHttpAuthUsernamePassword，getHttpAuthUsernamePassword</li>\n<li>私密模式：isPrivateBrowsingEnabled</li>\n</ul>\n<p><strong>设置网络</strong></p>\n<ul>\n<li>网络可用性：setNetworkAvailable</li>\n</ul>\n<p><strong>保存状态</strong></p>\n<ul>\n<li>代理给Provider进行：saveState，restoreState</li>\n</ul>\n<p><strong>生命周期与回调</strong></p>\n<ul>\n<li>postVisualStateCallback</li>\n</ul>\n<p><strong>页面内容标签</strong></p>\n<ul>\n<li>HitTestResult系列：getHitTestResult</li>\n</ul>\n<p><strong>Cache与访问历史</strong><br>本系列文章重点了解的内容，代理给Provider实现</p>\n<ul>\n<li>clearCache</li>\n<li>clearFormData</li>\n<li>clearHistory</li>\n<li>clearSslPreferences</li>\n</ul>\n<p><strong>被废弃的方法</strong></p>\n<ul>\n<li>设置滚动条样式：setHorizontalScrollbarOverlay，setVerticalScrollbarOverlay，overlayHorizontalScrollbar，overlayVerticalScrollbar……</li>\n<li>获取Title高度：getVisibleTitleHeight</li>\n<li>平台通知：enablePlatformNotifications，disablePlatformNotifications</li>\n<li>图片操作：savePicture，restorePicture……</li>\n<li>内存：freeMemory</li>\n<li>Plugins：getPluginList，refreshPlugins……</li>\n</ul>\n<h2 id=\"WebViewProvider\"><a href=\"#WebViewProvider\" class=\"headerlink\" title=\"WebViewProvider\"></a>WebViewProvider</h2><p>前面说了，WebView的功能几乎全部都是代理给WebViewProvider来实现的，<code>android.webkit.WebViewProvider</code>是一个接口，其实现要追溯源码，据版本不同有所区分。</p>\n<ul>\n<li>Android4.4之前的版本，由WebViewClassic实现。</li>\n<li>Android4.4以及之后的版本，由WebViewChromium实现。</li>\n</ul>\n<p>随SDK下载的源码里不包含这部分代码，在这个页面查看：<a href=\"https://android.googlesource.com/platform/frameworks/webview/+/4dcabae/chromium/java/com/android/webview/chromium/WebViewChromium.java\" target=\"_blank\" rel=\"noopener\">WebViewChromium.java</a></p>\n<p>WebViewChromium类实现了WebView中被代理的全部方法，篇幅所限，我们不逐一进行分析，只追踪我们关注的加载页面／cache相关，也就是<code>loadUrl</code>和<code>clearCache</code>两个方法。</p>\n<h3 id=\"loadUrl\"><a href=\"#loadUrl\" class=\"headerlink\" title=\"loadUrl\"></a>loadUrl</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">    loadUrl(url, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(String url, Map&lt;String, String&gt; additionalHttpHeaders)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> We may actually want to do some sanity checks here (like filter about://chrome).</span></span><br><span class=\"line\">    LoadUrlParams params = <span class=\"keyword\">new</span> LoadUrlParams(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (additionalHttpHeaders != <span class=\"keyword\">null</span>) params.setExtraHeaders(additionalHttpHeaders);</span><br><span class=\"line\">    mAwContents.loadUrl(params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通常所用的<code>loadUrl(&quot;http://www.foo.com&quot;)</code>，会走到<code>loadUrl(String url, Map&lt;String, String&gt; additionalHttpHeaders)</code>这个方法，可以看到首先把url拼装成了一个<code>LoadUrlParams</code>，那么这个<code>LoadUrlParams</code>是用来做什么的呢？</p>\n<p><strong>LoadUrlParams.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Holds parameters for ContentViewCore.LoadUrl. Parameters should match</span></span><br><span class=\"line\"><span class=\"comment\"> * counterparts in NavigationController::LoadURLParams, including default</span></span><br><span class=\"line\"><span class=\"comment\"> * values.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@JNINamespace</span>(<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadUrlParams</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Should match NavigationController::LoadUrlType exactly. See comments</span></span><br><span class=\"line\">    <span class=\"comment\">// there for proper usage. Values are initialized in initializeConstants.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_DEFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_DATA;</span><br><span class=\"line\">    <span class=\"comment\">// Should match NavigationController::UserAgentOverrideOption exactly.</span></span><br><span class=\"line\">    <span class=\"comment\">// See comments there for proper usage. Values are initialized in</span></span><br><span class=\"line\">    <span class=\"comment\">// initializeConstants.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_INHERIT;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_FALSE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_TRUE;</span><br><span class=\"line\">    <span class=\"comment\">// Fields with counterparts in NavigationController::LoadURLParams.</span></span><br><span class=\"line\">    <span class=\"comment\">// Package private so that ContentViewCore.loadUrl can pass them down to</span></span><br><span class=\"line\">    <span class=\"comment\">// native code. Should not be accessed directly anywhere else outside of</span></span><br><span class=\"line\">    <span class=\"comment\">// this class.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String mUrl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mLoadUrlType;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mTransitionType;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mUaOverrideOption;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; mExtraHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] mPostData;</span><br><span class=\"line\">    String mBaseUrlForDataUrl;</span><br><span class=\"line\">    String mVirtualUrlForDataUrl;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> mCanLoadLocalResources;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoadUrlParams</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check initializeConstants was called.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> LOAD_TYPE_DEFAULT != LOAD_TYPE_BROWSER_INITIATED_HTTP_POST;</span><br><span class=\"line\">        mUrl = url;</span><br><span class=\"line\">        mLoadUrlType = LOAD_TYPE_DEFAULT;</span><br><span class=\"line\">        mTransitionType = PageTransitionTypes.PAGE_TRANSITION_LINK;</span><br><span class=\"line\">        mUaOverrideOption = UA_OVERRIDE_INHERIT;</span><br><span class=\"line\">        mPostData = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mBaseUrlForDataUrl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mVirtualUrlForDataUrl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 以下略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个URL竟然可以解析出这么多东西来，逐个看看这些变量的含义：（参考<a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkcr/content/public/browser/navigation_controller.h\" target=\"_blank\" rel=\"noopener\">navigation_controller.h</a>）</p>\n<ul>\n<li>mUrl：最原始的URL</li>\n<li>mLoadUrlType：加载类型，有如下三种<ol>\n<li>LOAD_TYPE_DEFAULT：默认类型，以下两种以外的任意类型。</li>\n<li>LOAD_TYPE_BROWSER_INITIATED_HTTP_POST：POST请求需要设置此类型。</li>\n<li>LOAD_TYPE_DATA：使用Base64编码的图片类型，通过Base64编码图片能够减少一次网络资源加载。(可以使用以下这两个工具，查看如何在图片与Base64编码之间进行转换：<a href=\"http://dataurl.net/#dataurlmaker\" target=\"_blank\" rel=\"noopener\">http://dataurl.net/#dataurlmaker</a> <a href=\"http://codebeautify.org/base64-to-image-converter\" target=\"_blank\" rel=\"noopener\">http://codebeautify.org/base64-to-image-converter</a>)</li>\n</ol>\n</li>\n<li>mTransitionType：页面变化的类型（实在找不出合适的词语来描述），默认为，详见<a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkcr/ui/base/page_transition_types.h\" target=\"_blank\" rel=\"noopener\">page_transition_types.h</a>，举例说明：<ol>\n<li>PAGE_TRANSITION_LINK：默认值，点击link</li>\n<li>PAGE_TRANSITION_TYPED：在地址栏输入link</li>\n<li>PAGE_TRANSITION_RELOAD：刷新页面</li>\n<li>略</li>\n</ol>\n</li>\n<li>mUaOverrideOption：控制http中的UserAgent，有三个可选值<ol>\n<li>UA_OVERRIDE_INHERIT：默认值，Use the override value from the previous NavigationEntry in the NavigationController.</li>\n<li>UA_OVERRIDE_FALSE：Use the default user agent</li>\n<li>UA_OVERRIDE_TRUE：Use the user agent override, if it’s available.</li>\n</ol>\n</li>\n<li>mPostData：POST请求的data</li>\n<li>mBaseUrlForDataUrl：仅对<code>LOAD_TYPE_DATA</code>有效，用于URL的相对路径以及JavaScript跨域检验。</li>\n<li>mVirtualUrlForDataUrl：仅对<code>LOAD_TYPE_DATA</code>有效，显示在外给用户看的地址。</li>\n</ul>\n<p>分析完了LoadUrlParams，继续追溯WebViewChromium中的loadUrl方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (additionalHttpHeaders != <span class=\"keyword\">null</span>) params.setExtraHeaders(additionalHttpHeaders);</span><br></pre></td></tr></table></figure>\n<p>这里设置的<code>ExtraHeaders</code>是一个Map，具体参见http协议的header部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mAwContents.loadUrl(params);</span><br></pre></td></tr></table></figure>\n<p>最终交给<code>AwContent</code>对象处理，完整源码见<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/c5c1b6121eac447fb8d8691bd637e2b6b188fd75/android_webview/java/src/org/chromium/android_webview/AwContents.java\" target=\"_blank\" rel=\"noopener\">AwContents.java</a>。”Aw”是”Android WebView”的缩写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Exposes the native AwContents class, and together these classes wrap the ContentViewCore</span></span><br><span class=\"line\"><span class=\"comment\"> * and Browser components that are required to implement Android WebView API. This is the</span></span><br><span class=\"line\"><span class=\"comment\"> * primary entry point for the WebViewProvider implementation; it holds a 1:1 object</span></span><br><span class=\"line\"><span class=\"comment\"> * relationship with application WebView instances.</span></span><br><span class=\"line\"><span class=\"comment\"> * (We define this class independent of the hidden WebViewProvider interfaces, to allow</span></span><br><span class=\"line\"><span class=\"comment\"> * continuous build &amp; test in the open source SDK-based tree).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>上述注释中最重要的是<code>This is the primary entry point for the WebViewProvider implementation; it holds a 1:1 object relationship with application WebView instances.</code>这一句，说明每一个WebView示例，都有一个AwContent对象和它对应。同样，我们只关注<code>loadUrl</code>方法，这里通过我们上一步分析的<code>LoadUrlParams</code>参数进行加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load url without fixing up the url string. Consumers of ContentView are responsible for</span></span><br><span class=\"line\"><span class=\"comment\">     * ensuring the URL passed in is properly formatted (i.e. the scheme has been added if left</span></span><br><span class=\"line\"><span class=\"comment\">     * off during user input).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> params Parameters for this load.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(LoadUrlParams params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">                !params.isBaseUrlDataScheme()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This allows data URLs with a non-data base URL access to file:///android_asset/ and</span></span><br><span class=\"line\">            <span class=\"comment\">// file:///android_res/ URLs. If AwSettings.getAllowFileAccess permits, it will also</span></span><br><span class=\"line\">            <span class=\"comment\">// allow access to file:// URLs (subject to OS level permission checks).</span></span><br><span class=\"line\">            params.setCanLoadLocalResources(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If we are reloading the same url, then set transition type as reload.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getUrl() != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                params.getUrl().equals(mContentViewCore.getUrl()) &amp;&amp;</span><br><span class=\"line\">                params.getTransitionType() == PageTransitionTypes.PAGE_TRANSITION_LINK) &#123;</span><br><span class=\"line\">            params.setTransitionType(PageTransitionTypes.PAGE_TRANSITION_RELOAD);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        params.setTransitionType(</span><br><span class=\"line\">                params.getTransitionType() | PageTransitionTypes.PAGE_TRANSITION_FROM_API);</span><br><span class=\"line\">        <span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\">        <span class=\"comment\">// every time the user agent in AwSettings is modified.</span></span><br><span class=\"line\">        params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// We don't pass extra headers to the content layer, as WebViewClassic</span></span><br><span class=\"line\">        <span class=\"comment\">// was adding them in a very narrow set of conditions. See http://crbug.com/306873</span></span><br><span class=\"line\">        <span class=\"comment\">// However, if the embedder is attempting to inject a Referer header for their</span></span><br><span class=\"line\">        <span class=\"comment\">// loadUrl call, then we set that separately and remove it from the extra headers map/</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String REFERER = <span class=\"string\">\"referer\"</span>;</span><br><span class=\"line\">        Map&lt;String, String&gt; extraHeaders = params.getExtraHeaders();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extraHeaders != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String header : extraHeaders.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (REFERER.equals(header.toLowerCase(Locale.US))) &#123;</span><br><span class=\"line\">                    params.setReferrer(<span class=\"keyword\">new</span> Referrer(extraHeaders.remove(header), <span class=\"number\">1</span>));</span><br><span class=\"line\">                    params.setExtraHeaders(extraHeaders);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mNativeAwContents != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nativeSetExtraHeadersForUrl(</span><br><span class=\"line\">                    mNativeAwContents, params.getUrl(), params.getExtraHttpRequestHeadersString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        params.setExtraHeaders(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\">        mContentViewCore.loadUrl(params);</span><br><span class=\"line\">        <span class=\"comment\">// The behavior of WebViewClassic uses the populateVisitedLinks callback in WebKit.</span></span><br><span class=\"line\">        <span class=\"comment\">// Chromium does not use this use code path and the best emulation of this behavior to call</span></span><br><span class=\"line\">        <span class=\"comment\">// request visited links once on the first URL load of the WebView.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mHasRequestedVisitedHistoryFromClient) &#123;</span><br><span class=\"line\">            mHasRequestedVisitedHistoryFromClient = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            requestVisitedHistoryFromClient();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">                params.getBaseUrl() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Data loads with a base url will be resolved in Blink, and not cause an onPageStarted</span></span><br><span class=\"line\">            <span class=\"comment\">// event to be sent. Sending the callback directly from here.</span></span><br><span class=\"line\">            mContentsClient.getCallbackHelper().postOnPageStarted(params.getBaseUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>设置加载本地文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">        !params.isBaseUrlDataScheme()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This allows data URLs with a non-data base URL access to file:///android_asset/ and</span></span><br><span class=\"line\">    <span class=\"comment\">// file:///android_res/ URLs. If AwSettings.getAllowFileAccess permits, it will also</span></span><br><span class=\"line\">    <span class=\"comment\">// allow access to file:// URLs (subject to OS level permission checks).</span></span><br><span class=\"line\">    params.setCanLoadLocalResources(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重设transitionType</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If we are reloading the same url, then set transition type as reload.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (params.getUrl() != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">        params.getUrl().equals(mContentViewCore.getUrl()) &amp;&amp;</span><br><span class=\"line\">        params.getTransitionType() == PageTransitionTypes.PAGE_TRANSITION_LINK) &#123;</span><br><span class=\"line\">    params.setTransitionType(PageTransitionTypes.PAGE_TRANSITION_RELOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params.setTransitionType(</span><br><span class=\"line\">        params.getTransitionType() | PageTransitionTypes.PAGE_TRANSITION_FROM_API);</span><br></pre></td></tr></table></figure>\n<p>设置UA为override</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\"><span class=\"comment\">// every time the user agent in AwSettings is modified.</span></span><br><span class=\"line\">params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br></pre></td></tr></table></figure>\n<p>把ExtraHeaders中的referer属性提取出来单独设置，并将其从ExtraHeaders中删除，referer属性用于声明当前页面是从哪个页面跳转来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We don't pass extra headers to the content layer, as WebViewClassic</span></span><br><span class=\"line\"><span class=\"comment\">// was adding them in a very narrow set of conditions. See http://crbug.com/306873</span></span><br><span class=\"line\"><span class=\"comment\">// However, if the embedder is attempting to inject a Referer header for their</span></span><br><span class=\"line\"><span class=\"comment\">// loadUrl call, then we set that separately and remove it from the extra headers map/</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> String REFERER = <span class=\"string\">\"referer\"</span>;</span><br><span class=\"line\">Map&lt;String, String&gt; extraHeaders = params.getExtraHeaders();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (extraHeaders != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String header : extraHeaders.keySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (REFERER.equals(header.toLowerCase(Locale.US))) &#123;</span><br><span class=\"line\">            params.setReferrer(<span class=\"keyword\">new</span> Referrer(extraHeaders.remove(header), <span class=\"number\">1</span>));</span><br><span class=\"line\">            params.setExtraHeaders(extraHeaders);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后对于剩下的属性，单独设置，最终清楚ExtraHeaders</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mNativeAwContents != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    nativeSetExtraHeadersForUrl(</span><br><span class=\"line\">            mNativeAwContents, params.getUrl(), params.getExtraHttpRequestHeadersString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params.setExtraHeaders(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br></pre></td></tr></table></figure>\n<p>对params进行过上述二次加工后，调用mContentViewCore的loadUrl方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mContentViewCore.loadUrl(params);</span><br></pre></td></tr></table></figure>\n<p>继续追溯至<a href=\"https://chromium.googlesource.com/chromium/src/+/4907c84d52411cdc8dd78b613eeeb5bbad5ad0ab/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java\" target=\"_blank\" rel=\"noopener\">ContentViewCore.java</a>，位于<code>org.chromium.content.browser</code>包中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Load url without fixing up the url string. Consumers of ContentView are responsible for</span></span><br><span class=\"line\"><span class=\"comment\"> * ensuring the URL passed in is properly formatted (i.e. the scheme has been added if left</span></span><br><span class=\"line\"><span class=\"comment\"> * off during user input).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pararms Parameters for this load.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(LoadUrlParams params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mNativeContentViewCore == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPersonalityView()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\">        <span class=\"comment\">// every time the user agent in ContentSettings is modified.</span></span><br><span class=\"line\">        params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nativeLoadUrl(mNativeContentViewCore,</span><br><span class=\"line\">            params.mUrl,</span><br><span class=\"line\">            params.mLoadUrlType,</span><br><span class=\"line\">            params.mTransitionType,</span><br><span class=\"line\">            params.mUaOverrideOption,</span><br><span class=\"line\">            params.getExtraHeadersString(),</span><br><span class=\"line\">            params.mPostData,</span><br><span class=\"line\">            params.mBaseUrlForDataUrl,</span><br><span class=\"line\">            params.mVirtualUrlForDataUrl,</span><br><span class=\"line\">            params.mCanLoadLocalResources);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了nativeLoadUrl方法，传入的参数我们之前都已经分析过其含义，除了第一个参数<code>mNativeContentViewCore</code>，它是一个指向<code>ContentViewCoreImpl</code>的指针地址。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native pointer to C++ ContentViewCoreImpl object which will be set by nativeInit().</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mNativeContentViewCore = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就要深入到cpp文件中了，<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/dc0e1d3/content/browser/android/content_view_core_impl.cc\" target=\"_blank\" rel=\"noopener\">content_view_core_impl.cc</a>。注意！可能是版本的原因，这里的LoadUrl方法多出了第一个参数<code>JNIEnv* env</code>，通过对比可以发现，其它的参数是完全一致的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::LoadUrl(</span><br><span class=\"line\">    JNIEnv* env, jobject obj,</span><br><span class=\"line\">    jstring url,</span><br><span class=\"line\">    jint load_url_type,</span><br><span class=\"line\">    jint transition_type,</span><br><span class=\"line\">    jint ua_override_option,</span><br><span class=\"line\">    jstring extra_headers,</span><br><span class=\"line\">    jbyteArray post_data,</span><br><span class=\"line\">    jstring base_url_for_data_url,</span><br><span class=\"line\">    jstring virtual_url_for_data_url,</span><br><span class=\"line\">    jboolean can_load_local_resources) &#123;</span><br><span class=\"line\">  DCHECK(url);</span><br><span class=\"line\">  NavigationController::<span class=\"function\">LoadURLParams <span class=\"title\">params</span><span class=\"params\">(</span></span></span><br><span class=\"line\">      GURL(ConvertJavaStringToUTF8(env, url)));</span><br><span class=\"line\">  params.load_type = <span class=\"keyword\">static_cast</span>&lt;NavigationController::LoadURLType&gt;(</span><br><span class=\"line\">      load_url_type);</span><br><span class=\"line\">  params.transition_type = PageTransitionFromInt(transition_type);</span><br><span class=\"line\">  params.override_user_agent =</span><br><span class=\"line\">      <span class=\"keyword\">static_cast</span>&lt;NavigationController::UserAgentOverrideOption&gt;(</span><br><span class=\"line\">          ua_override_option);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (extra_headers)</span><br><span class=\"line\">    params.extra_headers = ConvertJavaStringToUTF8(env, extra_headers);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (post_data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;uint8&gt; http_body_vector;</span><br><span class=\"line\">    base::android::JavaByteArrayToByteVector(env, post_data, &amp;http_body_vector);</span><br><span class=\"line\">    params.browser_initiated_post_data =</span><br><span class=\"line\">        base::RefCountedBytes::TakeVector(&amp;http_body_vector);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base_url_for_data_url) &#123;</span><br><span class=\"line\">    params.base_url_for_data_url =</span><br><span class=\"line\">        GURL(ConvertJavaStringToUTF8(env, base_url_for_data_url));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (virtual_url_for_data_url) &#123;</span><br><span class=\"line\">    params.virtual_url_for_data_url =</span><br><span class=\"line\">        GURL(ConvertJavaStringToUTF8(env, virtual_url_for_data_url));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  params.can_load_local_resources = can_load_local_resources;</span><br><span class=\"line\">  LoadUrl(params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GURL是一个宏，虽然不了解它具体做了什么，但是根据上下文可以猜测这里生成了一个<code>NavigationController::LoadURLParams</code>对象</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationController::<span class=\"function\">LoadURLParams <span class=\"title\">params</span><span class=\"params\">(</span></span></span><br><span class=\"line\">    GURL(ConvertJavaStringToUTF8(env, url)));</span><br></pre></td></tr></table></figure>\n<p>随后对几个参数进行类型转换，把它们拼入params中，最后调用<code>LoadUrl(params)</code>方法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::LoadUrl(</span><br><span class=\"line\">    NavigationController::LoadURLParams&amp; params) &#123;</span><br><span class=\"line\">  GetWebContents()-&gt;GetController().LoadURLWithParams(params);</span><br><span class=\"line\">  UpdateTabCrashedFlag();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然自己对C语言不是很熟悉，但在这里也可以发现，是把上一步拼装成的params参数集合传递给了某个Controller对象。那么到底是哪一个Controller呢？跟着代码走～</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebContents* ContentViewCoreImpl::GetWebContents() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> web_contents_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里返回成员变量<code>web_contents_</code>，而Controller就在它内部</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::InitWebContents() &#123;</span><br><span class=\"line\">  DCHECK(web_contents_);</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_RENDER_VIEW_HOST_CHANGED,</span><br><span class=\"line\">      Source&lt;NavigationController&gt;(&amp;web_contents_-&gt;GetController()));</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_RENDERER_PROCESS_CREATED,</span><br><span class=\"line\">      content::NotificationService::AllBrowserContextsAndSources());</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_WEB_CONTENTS_CONNECTED,</span><br><span class=\"line\">      Source&lt;WebContents&gt;(web_contents_));</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_WEB_CONTENTS_SWAPPED,</span><br><span class=\"line\">      Source&lt;WebContents&gt;(web_contents_));</span><br><span class=\"line\">  <span class=\"keyword\">static_cast</span>&lt;WebContentsViewAndroid*&gt;(web_contents_-&gt;GetView())-&gt;</span><br><span class=\"line\">      SetContentViewCore(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  DCHECK(!web_contents_-&gt;GetUserData(kContentViewUserDataKey));</span><br><span class=\"line\">  web_contents_-&gt;SetUserData(kContentViewUserDataKey,</span><br><span class=\"line\">                             <span class=\"keyword\">new</span> ContentViewUserData(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找到了，是NavigationController类型，源码见<a href=\"https://chromium.googlesource.com/dart/dartium/src/+/releases/1650/content/browser/web_contents/navigation_controller_impl.cc\" target=\"_blank\" rel=\"noopener\">navigation_controller_impl.cc</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::LoadURLWithParams(<span class=\"keyword\">const</span> LoadURLParams&amp; params) &#123;</span><br><span class=\"line\">  TRACE_EVENT0(<span class=\"string\">\"browser\"</span>, <span class=\"string\">\"NavigationControllerImpl::LoadURLWithParams\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HandleDebugURL(params.url, params.transition_type))</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Checks based on params.load_type.</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.load_type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DEFAULT:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!params.url.SchemeIs(kHttpScheme) &amp;&amp;</span><br><span class=\"line\">          !params.url.SchemeIs(kHttpsScheme)) &#123;</span><br><span class=\"line\">        NOTREACHED() &lt;&lt; <span class=\"string\">\"Http post load must use http(s) scheme.\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DATA:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!params.url.SchemeIs(chrome::kDataScheme)) &#123;</span><br><span class=\"line\">        NOTREACHED() &lt;&lt; <span class=\"string\">\"Data load must use data scheme.\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// The user initiated a load, we don't need to reload anymore.</span></span><br><span class=\"line\">  needs_reload_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> override = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.override_user_agent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_INHERIT:</span><br><span class=\"line\">      override = ShouldKeepOverride(GetLastCommittedEntry());</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_TRUE:</span><br><span class=\"line\">      override = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_FALSE:</span><br><span class=\"line\">      override = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  NavigationEntryImpl* entry = NavigationEntryImpl::FromNavigationEntry(</span><br><span class=\"line\">      CreateNavigationEntry(</span><br><span class=\"line\">          params.url,</span><br><span class=\"line\">          params.referrer,</span><br><span class=\"line\">          params.transition_type,</span><br><span class=\"line\">          params.is_renderer_initiated,</span><br><span class=\"line\">          params.extra_headers,</span><br><span class=\"line\">          browser_context_));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (params.should_replace_current_entry)</span><br><span class=\"line\">    entry-&gt;set_should_replace_entry(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  entry-&gt;set_should_clear_history_list(params.should_clear_history_list);</span><br><span class=\"line\">  entry-&gt;SetIsOverridingUserAgent(override);</span><br><span class=\"line\">  entry-&gt;set_transferred_global_request_id(</span><br><span class=\"line\">      params.transferred_global_request_id);</span><br><span class=\"line\">  entry-&gt;SetFrameToNavigate(params.frame_name);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.load_type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DEFAULT:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST:</span><br><span class=\"line\">      entry-&gt;SetHasPostData(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      entry-&gt;SetBrowserInitiatedPostData(</span><br><span class=\"line\">          params.browser_initiated_post_data.get());</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DATA:</span><br><span class=\"line\">      entry-&gt;SetBaseURLForDataURL(params.base_url_for_data_url);</span><br><span class=\"line\">      entry-&gt;SetVirtualURL(params.virtual_url_for_data_url);</span><br><span class=\"line\">      entry-&gt;SetCanLoadLocalResources(params.can_load_local_resources);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  LoadEntry(entry);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里做的事情与前面类似，取出参数再次拼装成<code>NavigationEntryImpl* entry</code>，然后调用LoadEntry。LoadEntry这里的注释讲解的很清楚，当我们进入新页面时，我们并不清楚是不是要终止上一个页面，因为新页面有可能只是一个下载或者邮件。由于我们的url等信息都保存在entry中，继续追溯 SetPendingEntry(entry) 方法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::LoadEntry(NavigationEntryImpl* entry) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// When navigating to a new page, we don't know for sure if we will actually</span></span><br><span class=\"line\">  <span class=\"comment\">// end up leaving the current page.  The new page load could for example</span></span><br><span class=\"line\">  <span class=\"comment\">// result in a download or a 'no content' response (e.g., a mailto: URL).</span></span><br><span class=\"line\">  SetPendingEntry(entry);</span><br><span class=\"line\">  NavigateToPendingEntry(NO_RELOAD);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::SetPendingEntry(NavigationEntryImpl* entry) &#123;</span><br><span class=\"line\">  DiscardNonCommittedEntriesInternal();</span><br><span class=\"line\">  pending_entry_ = entry;</span><br><span class=\"line\">  NotificationService::current()-&gt;Notify(</span><br><span class=\"line\">      NOTIFICATION_NAV_ENTRY_PENDING,</span><br><span class=\"line\">      Source&lt;NavigationController&gt;(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">      Details&lt;NavigationEntry&gt;(entry));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中，先是终止了尚未提交处理的Entry，然后将欲访问的entry保存在<code>pending_entry_</code>变量，最后通过<code>NotificationService::current()-&gt;Notify</code>，把Entry插入一个消息队列，可以在<a href=\"https://chromium.googlesource.com/dart/dartium/src/+/releases/1650/content/browser/notification_service_impl.cc\" target=\"_blank\" rel=\"noopener\">notification_service_impl.cc</a>的源码中看到，收到这个消息后，会通知所有的Observer</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NotificationServiceImpl::Notify(<span class=\"keyword\">int</span> type,</span><br><span class=\"line\">                                     <span class=\"keyword\">const</span> NotificationSource&amp; source,</span><br><span class=\"line\">                                     <span class=\"keyword\">const</span> NotificationDetails&amp; details) &#123;</span><br><span class=\"line\">  DCHECK_GT(type, NOTIFICATION_ALL) &lt;&lt;</span><br><span class=\"line\">      <span class=\"string\">\"Allowed for observing, but not posting.\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// There's no particular reason for the order in which the different</span></span><br><span class=\"line\">  <span class=\"comment\">// classes of observers get notified here.</span></span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of all types and all sources</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[NOTIFICATION_ALL], AllSources()) &amp;&amp;</span><br><span class=\"line\">      source != AllSources()) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[NOTIFICATION_ALL][AllSources().map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of all types and the given source</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[NOTIFICATION_ALL], source)) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[NOTIFICATION_ALL][source.map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of the given type and all sources</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[type], AllSources()) &amp;&amp;</span><br><span class=\"line\">      source != AllSources()) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[type][AllSources().map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of the given type and the given source</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[type], source)) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[type][source.map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们必须找到是哪个Observer处理了加载Entry的消息，可是到这里，线索似乎断了，怎么才能找到对应的Observer呢？</p>\n<blockquote>\n<p>内事不决问百度，外事不决问谷歌。</p>\n</blockquote>\n<p>在Google的帮助下，找到了这篇文档<a href=\"https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code\" target=\"_blank\" rel=\"noopener\">Getting Around the Chromium Source Code Directory Structure</a>。这里介绍了整个Chromium的架构，重点关注“Navigating from the URL bar”一节。</p>\n<h3 id=\"Navigating-from-the-URL-bar\"><a href=\"#Navigating-from-the-URL-bar\" class=\"headerlink\" title=\"Navigating from the URL bar\"></a>Navigating from the URL bar</h3><ol>\n<li>When the user types into or accepts an entry in the URL bar, the autocomplete edit box determines the final target URL and passes that to <code>AutocompleteEdit::OpenURL</code>. (This may not be exactly what the user typed - for example, an URL is generated in the case of a search query.)</li>\n<li>The navigation controller is instructed to navigate to the URL in <code>NavigationController::LoadURL</code>.</li>\n<li>The <code>NavigationController</code> calls <code>TabContents::Navigate</code> with the <code>NavigationEntry</code> it created to represent this particular page transition. It will create a new <code>RenderViewHost</code> if necessary, which will cause creation of a RenderView in the renderer process. A <code>RenderView</code> won’t exist if this is the first navigation, or if the renderer has crashed, so this will also recover from crashes.</li>\n<li><code>Navigate</code> forwards to <code>RenderViewHost::NavigateToEntry</code>. The <code>NavigationController</code>stores this navigation entry, but it is marked as “pending” because it doesn’t know for sure if the transition will take place (maybe the host can not be resolved).</li>\n<li><code>RenderViewHost::NavigateToEntry</code> sends a <code>ViewMsg_Navigate</code> to the new <code>RenderView</code> in the renderer process.</li>\n<li>When told to navigate, <code>RenderView</code> may navigate, it may fail, or it may navigate somewhere else instead (for example, if the user clicks a link). <code>RenderViewHost</code> waits for a <code>ViewHostMsg_FrameNavigate</code> from the <code>RenderView</code>.</li>\n<li>When the load is “committed” by WebKit (the server responded and is sending us data), the <code>RenderView</code> sends this message, which is handled in <code>RenderViewHost::OnMsgNavigate</code>.</li>\n<li>The <code>NavigationEntry</code> is updated with the information on the load. In the case of a link click, the browser has never seen this URL before. If the navigation was browser-initiated, as in the startup case, there may have been redirects that have changed the URL.</li>\n<li>The <code>NavigationController</code> updates its list of navigations to account for this new information.</li>\n</ol>\n<p>在<code>步骤3</code>中看到，NavigationController调用了TabContents::Navigate来处理Entry，随后就进入了渲染（Render）过程。而我们想要追踪的缓存文件管理的疑问，还是要深入到渲染阶段才能有个答案。</p>\n<p>更多分析，将在后续文章中一一道出。</p>\n<hr>\n","categories":[],"tags":["Android","源码分析"]},{"title":"Deploy Web Application In Tomcat","url":"https://lilei.pro/2016/09/09/Deploy-Web-Application-In-Tomcat/","content":"<blockquote>\n<p>在开发CrashReporter项目时遇到的一些坑</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"Tomcat启动时卡在”Tomcat-error-deploying-web-application-directory”\"><a href=\"#Tomcat启动时卡在”Tomcat-error-deploying-web-application-directory”\" class=\"headerlink\" title=\"Tomcat启动时卡在”Tomcat: error deploying web application directory”\"></a>Tomcat启动时卡在”Tomcat: error deploying web application directory”</h4><p>原因是Tomcat7/8需要使用org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom来产生安全随机类SecureRandom的实例作为会话ID。而我们知道，任何随机数发生器都需要一个种子，Linux中的随机数，可以从这两个特殊的文件中产生</p>\n<ul>\n<li>/dev/urandom</li>\n<li>/dev/random</li>\n</ul>\n<p>这两个文件产生随机数的原理，是利用系统的熵池，计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。</p>\n<blockquote>\n<p>熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。</p>\n</blockquote>\n<p>/dev/random在不能产生新的随机数时会阻塞程序，而/dev/urandom不会，当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用/dev/random比使用/dev/urandom产生大量随机数的速度要慢。</p>\n<p>解决办法：</p>\n<ol>\n<li>在Tomcat环境解决：启动时加入参数<code>-Djava.security.egd=file:/dev/urandom</code></li>\n<li>在JVM环境解决：修改<code>$JAVA_PATH/jre/lib/security/java.security</code>中的<code>securerandom.source=file:/dev/random</code>为<code>securerandom.source=file:/dev/urandom</code></li>\n</ol>\n<hr>\n<h4 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h4><p><code>crontab -e</code> 编辑当前用户的定时命令<br><code>crontab -l</code> 查看当前用户的定时命令</p>\n<p>一条典型的定时任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 4 * * * /usr/bin/java -Xms256m -Xmx1024m -Duser.timezone=GMT+08  -jar /root/projects/crash-reporter/crash-reporter-0.1-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>\n<p>在配置这个任务时，由于没有理解它本质上的原理，自己犯了一个愚蠢的错误，把时间写成了<code>* 4 * * *</code>，导致凌晨4点内，每分钟发出一篇邮件，还是发给全组人的……</p>\n<p>附图一张，crontab的命令配置</p>\n<p><img src=\"/img/160909_deploy_app_in_tomcat/crontab.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tomcat容器时间\"><a href=\"#Tomcat容器时间\" class=\"headerlink\" title=\"Tomcat容器时间\"></a>Tomcat容器时间</h4><p>在Linux系统里通过<code>date</code>命令查看，时区已经更改为北京时间。但是实际运行时，发现代码里通过<code>new Date()</code>创建的时间，format后打印出来居然是标准时间；同时，log4j记录的时间也有一样的问题。</p>\n<p>原因在于，JVM的时间需要在启动时配置，需要在tomcat的启动命令中增加如下参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Duser.timezone=GMT+08</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"http://my.oschina.net/wangnian/blog/687914\" target=\"_blank\" rel=\"noopener\">Tomcat启动时SecureRandom超级慢的问题</a></li>\n<li><a href=\"http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（50）：crontab命令</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Backend"]},{"title":"Android 中 View Visibility 的坑","url":"https://lilei.pro/2016/06/29/Android-View-Visibility/","content":"<blockquote>\n<p>前几天爆出来一个线上bug：处于“已售完”状态的菜品，依然可以点击加菜。好在提交订单时有校验，对于这种订单会直接打回。<br>究其原因，是加减控件中的代码出了问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"问题回顾\"><a href=\"#问题回顾\" class=\"headerlink\" title=\"问题回顾\"></a>问题回顾</h3><p>在加减控件中，提供了<code>enlargeEmptyAddBtnClickArea</code>方法，用来扩大第一次加菜按钮的点击区域（PM提出的渣渣，更渣渣的是UX居然通过了这个需求）。</p>\n<p><strong>Talk is cheap, read the code.</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 将初始加菜按钮点击矩形区域向外扩大</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> parentView 包含更大点击区域的父View</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> unit 扩大的dp值</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enlargeEmptyAddBtnClickArea</span><span class=\"params\">(<span class=\"keyword\">final</span> View parentView, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> unit)</span> </span>&#123;</span><br><span class=\"line\">       parentView.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (emptyAddBtn.getVisibility() != VISIBLE) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               checkContext();</span><br><span class=\"line\">               Context context = getContext();</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] emptyAddBtnCoord = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">               emptyAddBtn.getLocationOnScreen(emptyAddBtnCoord);</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] parentViewCoord = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">               parentView.getLocationOnScreen(parentViewCoord);</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] relativeCoord = &#123;emptyAddBtnCoord[<span class=\"number\">0</span>] - parentViewCoord[<span class=\"number\">0</span>], emptyAddBtnCoord[<span class=\"number\">1</span>] - parentViewCoord[<span class=\"number\">1</span>]&#125;;</span><br><span class=\"line\">               Rect delegateArea = <span class=\"keyword\">new</span> Rect(relativeCoord[<span class=\"number\">0</span>], relativeCoord[<span class=\"number\">1</span>], relativeCoord[<span class=\"number\">0</span>] + emptyAddBtn.getMeasuredWidth(), relativeCoord[<span class=\"number\">1</span>] + emptyAddBtn.getMeasuredHeight());</span><br><span class=\"line\">               <span class=\"keyword\">int</span> enlargeUnit = ViewUtils.dip2px(context, unit);</span><br><span class=\"line\">               delegateArea.left -= enlargeUnit;</span><br><span class=\"line\">               delegateArea.top -= enlargeUnit;</span><br><span class=\"line\">               delegateArea.right += enlargeUnit;</span><br><span class=\"line\">               delegateArea.bottom += enlargeUnit;</span><br><span class=\"line\">               CustomTouchDelegate touchDelegate = <span class=\"keyword\">new</span> CustomTouchDelegate(delegateArea, emptyAddBtn);</span><br><span class=\"line\">               parentView.setTouchDelegate(touchDelegate);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样通过直接<code>operateBtn.enlargeEmptyAddBtnClickArea</code>就可以扩大点击区域。</p>\n<p>乍看起来没什么问题对吧？代码中同样考虑到了如果<code>加菜按钮</code>当前不可见，就不会主动扩大其区域。</p>\n<p>但是为什么，还会出现文章开头提到的“已售完的菜品仍然可以添加至购物车”问题！！！</p>\n<hr>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>在debug后，发现问题出在这段代码中的判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (emptyAddBtn.getVisibility() != VISIBLE) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当整个加减控件（OperateButton）的Visibility == INVISIBLE or GONE时，其内部<code>emptyAddBtn</code>的Visibility<strong>居！然！还！是！Visible！</strong></p>\n<p>写个Demo验证一下</p>\n<hr>\n<h3 id=\"Talk-is-cheap-just-code\"><a href=\"#Talk-is-cheap-just-code\" class=\"headerlink\" title=\"Talk is cheap, just code\"></a>Talk is cheap, just code</h3><p>demo功能很简单，外层的ViewGroup &amp; 内层的View，当outer置为不可见（INVISIBLE or GONE）时，输出inner的Visibility。界面如下：</p>\n<p><img src=\"/img/160629_visibility/capture.png\" alt=\"\"></p>\n<p>验证后发现一个惊人的事实，Outer的Visibility不会影响Inner的Visibility！也就是说，不论Outer设置为Gone还是Invisible，只要Inner之前是Visible，那么调用<code>inner.getVisibility()</code>后，都会返回Visible！</p>\n<hr>\n<h3 id=\"正确的判断方法\"><a href=\"#正确的判断方法\" class=\"headerlink\" title=\"正确的判断方法\"></a>正确的判断方法</h3><p>View.java中为我们提供了<code>isShown()</code>方法，从注释中即可看出它会将外层ViewGroup可见性计算进去</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the visibility of this view and all of its ancestors</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> True if this view and all of its ancestors are &#123;<span class=\"doctag\">@link</span> #VISIBLE&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isShown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    View current = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ViewParent parent = current.mParent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// We are not attached to the view root</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(parent <span class=\"keyword\">instanceof</span> View)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = (View) parent;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h3><p>起初编码的时候，谁能想到，外层设置Invisibile后，内层View居然还是Visible的状态呢？</p>\n<p>出现这个问题的根本原因在于自己对View的机制研究不够深入，引以为戒。</p>\n<p>更应该注意到View本身提供了isShown()方法来判断可见性，根本不需要使用Visibility来重复造轮子，更何况还是错误的轮子。</p>\n<hr>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"=========END=========\"></a><em>=========END=========</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Use DiffMerge As Default Git Diff Tool","url":"https://lilei.pro/2016/06/22/Use-Diffmerge-As-Default-Git-Diff-Tool/","content":"<blockquote>\n<p>使用DiffMerge作为默认的git diff GUI工具</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>P4Merge</strong>: 界面美观，功能强大，安装包大（100M）</p>\n<p><strong>DiffMerge</strong>: 界面简单，功能一般，安装包小（10M）</p>\n<h4 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global merge.tool diffmerge</span><br><span class=\"line\">$ git config --global mergetool.diffmerge.cmd <span class=\"string\">\"/Applications/DiffMerge.app/Contents/MacOS/diffmerge --merge --result=\\$MERGED \\$LOCAL \\$BASE \\$REMOTE\"</span></span><br><span class=\"line\">$ git config --global mergetool.keepBackup <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global diff.tool diffmerge</span><br><span class=\"line\">$ git config --global difftool.diffmerge.cmd <span class=\"string\">\"/Applications/DiffMerge.app/Contents/MacOS/diffmerge \\$LOCAL \\$REMOTE\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"http://coding4streetcred.com/blog/post/Configure-DiffMerge-for-Your-Git-DiffTool\" target=\"_blank\" rel=\"noopener\">Configure DiffMerge for Your Git DiffTool</a></p>\n","categories":[],"tags":["技术流"]},{"title":"macOS 通过终端启动 Sublime2","url":"https://lilei.pro/2016/06/22/Launch-Sublime-In-Terminal/","content":"<blockquote>\n<p>同样适用于 <code>*nix</code> 系统下通过控制台启动任何指令</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"将Sublime的启动命令加入到环境变量中\"><a href=\"#将Sublime的启动命令加入到环境变量中\" class=\"headerlink\" title=\"将Sublime的启动命令加入到环境变量中\"></a>将Sublime的启动命令加入到环境变量中</h3><p>macOS中，<strong>Sublime Text 2</strong> 的启动命令位于<code>/Applications/Sublime Text 2.app/Contents/SharedSupport/bin</code>中，该目录下仅有一个命令，就是<code>subl</code>。如果我们需要在终端中启动Sublime对文件<code>foo.txt</code>进行编辑，需要执行的指令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ subl foo.txt</span><br></pre></td></tr></table></figure>\n<p>前提是，环境变量中包含了<code>subl</code>这个指令。在macOS中，有两种途径可以达成这个效果。</p>\n<ol>\n<li><p>在<code>~/.zshrc</code>（我使用的是zsh）中添加<code>$SUBLIME_HOME</code>，并将<code>$SUBLIME_HOME/bin</code>添加至<code>$PATH</code></p>\n</li>\n<li><p>在<code>/usr/local/bin</code>中创建指向<code>subl</code>的符号链接</p>\n</li>\n</ol>\n<p>两种方法具体实现分别如下所示：</p>\n<p>.zshrc，注意空格前需要用<code>\\</code>转义</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SUBLIME_HOME=/Applications/Sublime\\ Text\\ 2.app</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;SUBLIME_HOME&#125;</span>/Contents/SharedSupport/bin</span><br></pre></td></tr></table></figure>\n<p>创建符号链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln -s <span class=\"string\">\"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\"</span> /usr/<span class=\"built_in\">local</span>/bin/subl</span><br></pre></td></tr></table></figure>\n<p>方法1适用于一个文件夹下多个命令的启动（比如Android SDK），方法2适用于单个指令的启动（比如Sublime）。</p>\n<hr>\n<h3 id=\"在Windows中我们怎么做\"><a href=\"#在Windows中我们怎么做\" class=\"headerlink\" title=\"在Windows中我们怎么做\"></a>在Windows中我们怎么做</h3><p>在Windows中，我们可以通过类似方法2的途径，来快速启动某个应用，步骤如下：</p>\n<ol>\n<li>任意位置创建一个文件夹<code>A</code></li>\n<li>将文件夹<code>A</code>加入到环境变量中</li>\n<li>对于要快速启动的App，对其创建快捷方式后，把快捷方式重命名（比如<code>lol</code>），然后将快捷方式丢入<code>A</code>文件夹</li>\n<li>以后可以通过<code>cmd+R</code>打开运行窗口后，直接输入<code>lol</code>来启动对应App</li>\n</ol>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Android Studio .gitignore 文件范本","url":"https://lilei.pro/2016/06/22/Android-Studio-gitignore/","content":"<blockquote>\n<p>一份标准的 Android Studio 工程 <code>.gitignore</code> 文件</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Built application files</span></span><br><span class=\"line\">*.apk</span><br><span class=\"line\">*.ap_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Files for the ART/Dalvik VM</span></span><br><span class=\"line\">*.dex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Java class files</span></span><br><span class=\"line\">*.class</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generated files</span></span><br><span class=\"line\">bin/</span><br><span class=\"line\">gen/</span><br><span class=\"line\">out/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Gradle files</span></span><br><span class=\"line\">.gradle</span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local configuration file (sdk path, etc)</span></span><br><span class=\"line\">local.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Proguard folder generated by Eclipse</span></span><br><span class=\"line\">proguard/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Log files</span></span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Android Studio Navigation editor temp files</span></span><br><span class=\"line\">.navigation/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Android Studio captures folder</span></span><br><span class=\"line\">captures/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Intellij</span></span><br><span class=\"line\">*.iml</span><br><span class=\"line\">.idea/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keystore files</span></span><br><span class=\"line\">*.jks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows thumbnail db</span></span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OSX files</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Eclipse project files</span></span><br><span class=\"line\">.classpath</span><br><span class=\"line\">.project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NDK</span></span><br><span class=\"line\">obj/</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Android中动态加载JNI失效问题探究(未完待续)","url":"https://lilei.pro/2016/06/17/Dynamic-Loading-JNI-Not-Work/","content":"<blockquote>\n<p>在做so动态加载时遇到了后加载的JNI方法失效的问题</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h3><p>在进行动态加载3期分享时，使用<code>so</code>文件的动态加载作为示例，发现一个有趣的现象——在某些情况下，通过<code>System.load(&quot;foo.so&quot;)</code>加载进来的<code>so</code>并没有生效。</p>\n<p>先看作为示例的动态加载Demo代码。</p>\n<p>声明的native接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>C文件中实现方法很简单，返回一个预定义好的字符串<code>Keep Quiet!</code></p>\n<p><code>jni.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_leili_season1_jni_activity_JNIActivity.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_com_leili_season1_jni_activity_JNIActivity_say</span><br><span class=\"line\">        (JNIEnv *env, jobject obj) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"Keep Quiet!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化时，加载返回<code>Keep Quiet!</code>的so文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"Jni\"</span>); <span class=\"comment\">// 写法A，通过System.loadLibrary()首次加载</span></span><br><span class=\"line\">\tSystem.load(getFilesDir().getParent() + <span class=\"string\">\"/lib/libJni.so\"</span>); <span class=\"comment\">// 写法B，通过System.load()首次加载</span></span><br><span class=\"line\">\t... <span class=\"comment\">// 以下无关内容省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击按钮后加载新的so文件，其中修改了<code>say()</code>方法的返回值为<code>Hello World!</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soFilePath = getFilesDir() + <span class=\"string\">\"/libJni2.so\"</span>; <span class=\"comment\">// /data/data/com.leili.season1/lib/libJni.so</span></span><br><span class=\"line\">System.load(soFilePath);</span><br></pre></td></tr></table></figure>\n<p>此时再次调用<code>say()</code>后，根据预期，应该返回的是修改后的<code>Hello World!</code>。然而，如代码中的注释所写，使用写法A进行首次加载的so库，无法通过<code>System.load(soFilePath)</code>被覆盖；使用写法B进行首次加载的so库，却可以通过<code>System.load(soFilePath)</code>被覆盖。</p>\n<hr>\n<h3 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h3><p>第一个想法是，<code>System.load</code>和<code>System.loadLibrary</code>内部实现有差异，通过<code>System.loadLibrary</code>加载进来的so库，其方法无法被覆盖。</p>\n<p>先来看一下SDK源码中这两个方法的细节，首先是<code>System.load</code>，使用SDK版本为23</p>\n<h4 id=\"System-load-过程\"><a href=\"#System-load-过程\" class=\"headerlink\" title=\"System.load 过程\"></a>System.load 过程</h4><p>System.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * See &#123;<span class=\"doctag\">@link</span> Runtime#load&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String pathName)</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().load(pathName, VMStack.getCallingClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了Runtime中的load方法</p>\n<p>Runtime.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Loads the given shared library using the given ClassLoader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String absolutePath, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absolutePath == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"absolutePath == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String error = doLoad(absolutePath, loader);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟进 doLoad 方法查看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">doLoad</span><span class=\"params\">(String name, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Android apps are forked from the zygote, so they can't have a custom LD_LIBRARY_PATH,</span></span><br><span class=\"line\">    <span class=\"comment\">// which means that by default an app's shared library directory isn't on LD_LIBRARY_PATH.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The PathClassLoader set up by frameworks/base knows the appropriate path, so we can load</span></span><br><span class=\"line\">    <span class=\"comment\">// libraries with no dependencies just fine, but an app that has multiple libraries that</span></span><br><span class=\"line\">    <span class=\"comment\">// depend on each other needed to load them in most-dependent-first order.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We added API to Android's dynamic linker so we can update the library path used for</span></span><br><span class=\"line\">    <span class=\"comment\">// the currently-running process. We pull the desired path out of the ClassLoader here</span></span><br><span class=\"line\">    <span class=\"comment\">// and pass it to nativeLoad so that it can call the private dynamic linker API.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We didn't just change frameworks/base to update the LD_LIBRARY_PATH once at the</span></span><br><span class=\"line\">    <span class=\"comment\">// beginning because multiple apks can run in the same process and third party code can</span></span><br><span class=\"line\">    <span class=\"comment\">// use its own BaseDexClassLoader.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We didn't just add a dlopen_with_custom_LD_LIBRARY_PATH call because we wanted any</span></span><br><span class=\"line\">    <span class=\"comment\">// dlopen(3) calls made from a .so's JNI_OnLoad to work too.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// So, find out what the native library search path is for the ClassLoader in question...</span></span><br><span class=\"line\">    String ldLibraryPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    String dexPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We use the given library path for the boot class loader. This is the path</span></span><br><span class=\"line\">        <span class=\"comment\">// also used in loadLibraryName if loader is null.</span></span><br><span class=\"line\">        ldLibraryPath = System.getProperty(<span class=\"string\">\"java.library.path\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (loader <span class=\"keyword\">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class=\"line\">        BaseDexClassLoader dexClassLoader = (BaseDexClassLoader) loader;</span><br><span class=\"line\">        ldLibraryPath = dexClassLoader.getLdLibraryPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// nativeLoad should be synchronized so there's only one LD_LIBRARY_PATH in use regardless</span></span><br><span class=\"line\">    <span class=\"comment\">// of how many ClassLoaders are in the system, but dalvik doesn't support synchronized</span></span><br><span class=\"line\">    <span class=\"comment\">// internal natives.</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nativeLoad(name, loader, ldLibraryPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> should be synchronized, but dalvik doesn't support synchronized internal natives.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeLoad</span><span class=\"params\">(String filename, ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String ldLibraryPath)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>可以看到最终通过native调用<code>nativeLoad</code>加载了lib文件。</p>\n<h4 id=\"System-loadLibrary-过程\"><a href=\"#System-loadLibrary-过程\" class=\"headerlink\" title=\"System.loadLibrary 过程\"></a>System.loadLibrary 过程</h4><p>System.loadLibrary 的写法是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(<span class=\"string\">\"Jni\"</span>);</span><br></pre></td></tr></table></figure>\n<p>真实加载的so文件是libJni.so，可以猜想内部进行了一个拼接文件名的过程。</p>\n<p>System.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * See &#123;<span class=\"doctag\">@link</span> Runtime#loadLibrary&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLibrary</span><span class=\"params\">(String libName)</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().loadLibrary(libName, VMStack.getCallingClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Runtime.java中的loadLibrary方法</p>\n<p>Runtime.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Searches for and loads the given shared library using the given ClassLoader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadLibrary</span><span class=\"params\">(String libraryName, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        String filename = loader.findLibrary(libraryName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filename == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// It's not necessarily true that the ClassLoader used</span></span><br><span class=\"line\">            <span class=\"comment\">// System.mapLibraryName, but the default setup does, and it's</span></span><br><span class=\"line\">            <span class=\"comment\">// misleading to say we didn't find \"libMyLibrary.so\" when we</span></span><br><span class=\"line\">            <span class=\"comment\">// actually searched for \"liblibMyLibrary.so.so\".</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(loader + <span class=\"string\">\" couldn't find \\\"\"</span> +</span><br><span class=\"line\">                                           System.mapLibraryName(libraryName) + <span class=\"string\">\"\\\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String error = doLoad(filename, loader);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String filename = System.mapLibraryName(libraryName);</span><br><span class=\"line\">    List&lt;String&gt; candidates = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    String lastError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String directory : mLibPaths) &#123;</span><br><span class=\"line\">        String candidate = directory + filename;</span><br><span class=\"line\">        candidates.add(candidate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;</span><br><span class=\"line\">            String error = doLoad(candidate, loader);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; <span class=\"comment\">// We successfully loaded the library. Job done.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lastError = error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastError != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(lastError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(<span class=\"string\">\"Library \"</span> + libraryName + <span class=\"string\">\" not found; tried \"</span> + candidates);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到这里参数中的<code>libraryName</code>仍然是形如<code>Jni</code>的不包含前缀<code>lib</code>与后缀<code>.so</code>的文件名。真正的文件名补全是在这一步进行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String filename = loader.findLibrary(libraryName);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://android.googlesource.com/platform/libcore-snapshot/+/ics-mr1/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java\" target=\"_blank\" rel=\"noopener\">BaseDexClassLoader.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLibrary</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathList.findLibrary(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://android.googlesource.com/platform/libcore-snapshot/+/ics-mr1/dalvik/src/main/java/dalvik/system/DexPathList.java\" target=\"_blank\" rel=\"noopener\">DexPathList.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Finds the named native code library on any of the library</span></span><br><span class=\"line\"><span class=\"comment\"> * directories pointed at by this instance. This will find the</span></span><br><span class=\"line\"><span class=\"comment\"> * one in the earliest listed directory, ignoring any that are not</span></span><br><span class=\"line\"><span class=\"comment\"> * readable regular files.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the complete path to the library or &#123;<span class=\"doctag\">@code</span> null&#125; if no</span></span><br><span class=\"line\"><span class=\"comment\"> * library was found</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLibrary</span><span class=\"params\">(String libraryName)</span> </span>&#123;</span><br><span class=\"line\">    String fileName = System.mapLibraryName(libraryName);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File directory : nativeLibraryDirectories) &#123;</span><br><span class=\"line\">        String path = <span class=\"keyword\">new</span> File(directory, fileName).getPath();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IoUtils.canOpenReadOnly(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绕了一圈，又回到<code>System</code>这个类中，看到下面这儿一目了然。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the platform specific file name format for the shared library</span></span><br><span class=\"line\"><span class=\"comment\"> * named by the argument. On Android, this would turn &#123;<span class=\"doctag\">@code</span> \"MyLibrary\"&#125; into</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> \"libMyLibrary.so\"&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">mapLibraryName</span><span class=\"params\">(String nickname)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nickname == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"nickname == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"lib\"</span> + nickname + <span class=\"string\">\".so\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>追踪过了补全文件名的过程，我们回到最初<code>System.loadLibrary</code>的代码中，可以看到与<code>System.load</code>一样，也是调用了同样的doLoad方法！！！</p>\n<p>到这里可能会有些困惑了，既然两者殊途同归，为什么在应用时会有差别呢？先别急，既然方法是同样的，会不会是参数有区别？</p>\n<hr>\n<h3 id=\"System-load-amp-System-loadLibrary-加载so库文件\"><a href=\"#System-load-amp-System-loadLibrary-加载so库文件\" class=\"headerlink\" title=\"System.load &amp; System.loadLibrary 加载so库文件\"></a>System.load &amp; System.loadLibrary 加载so库文件</h3><p>通过断点，分别查看以下两个语句的执行情况，果然发现了一丝区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(<span class=\"string\">\"Jni\"</span>); <span class=\"comment\">// 写法A，通过System.loadLibrary()首次加载</span></span><br></pre></td></tr></table></figure>\n<p>写法A加载的lib文件，真实路径是<code>/data/app/com.leili.season1-1/lib/x86/libJni.so</code>，这是用户app在安装时的路径（系统app安装目录为<code>/system/app</code>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.load(getFilesDir().getParent() + <span class=\"string\">\"/lib/libJni.so\"</span>); <span class=\"comment\">// 写法B，通过System.load()首次加载</span></span><br></pre></td></tr></table></figure>\n<p>写法B加载的lib文件，真实路径是<code>/data/data/com.leili.season1/lib/libJni.so</code>。与我们的预期一致。</p>\n<p>等等，我们通过adb shell看一下<code>/data/data/com.leili.season1/lib/</code>这个目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vbox86p:/data/data/com.leili.season1 <span class=\"comment\"># ll</span></span><br><span class=\"line\">drwxrwx--x u0_a174  u0_a174           2016-06-16 19:34 cache</span><br><span class=\"line\">drwx------ u0_a174  u0_a174           2016-06-16 19:34 files</span><br><span class=\"line\">lrwxrwxrwx install  install           2016-06-17 10:28 lib -&gt; /data/app/com.leili.season1-1/lib/x86</span><br></pre></td></tr></table></figure>\n<p>发现了什么？目录<code>/data/data/com.leili.season1/lib/</code>竟然是指向<code>/data/app/com.leili.season1-1/lib/x86</code>的软链接。天哪！这说明，通过<code>System.load(filePath)</code>加载的so文件，与通过<code>System.loadLibrary(libName)</code>加载的so文件，压根就是同一个！</p>\n<p>我的天哪。。。明明是调用同样的方法加载同一个文件，为啥会出现两种截然不同的结果？！！！</p>\n<p>最新发现：初次加载时不用<code>System.loadLibrary(&quot;Jni&quot;)</code>，而用<code>System.load(&quot;/data/app/com.leili.season1-2/lib/x86/libJni.so&quot;)</code>来直接加载<code>/data/app</code>的库文件时，一样会阻止后续的加载！</p>\n<h1 id=\"到这里被BLOCK住了，HELP～\"><a href=\"#到这里被BLOCK住了，HELP～\" class=\"headerlink\" title=\"到这里被BLOCK住了，HELP～\"></a>到这里被<strong>BLOCK</strong>住了，HELP～</h1><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"MT&DP Hackathon 小结","url":"https://lilei.pro/2016/05/27/Hackathon-1-0/","content":"<blockquote>\n<p>16年5月27日～28日，北京美团总部举办Hackathon，项目小结<br>不论比赛排名如何、能否拿到奖品，学到知识才是自己硬实力的提升</p>\n</blockquote>\n<p><img src=\"/img/160527_hackathon/hackathon_logo.png\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Database部分\"><a href=\"#Database部分\" class=\"headerlink\" title=\"Database部分\"></a>Database部分</h1><h3 id=\"VARCHAR-TEXT\"><a href=\"#VARCHAR-TEXT\" class=\"headerlink\" title=\"VARCHAR, TEXT\"></a>VARCHAR, TEXT</h3><p><strong>VARCHAR(n)</strong>: 存储在列元素中；可以作为索引<br><strong>TEXT</strong>: 列元素中只保存一个指针，真实文本保存在另外的存储区域；不可作为索引</p>\n<p>注：存储位置区别仅出现在MySQL上，对于InnoDB，如果VARCHAR类型的元素过长，内部仍然会使用TEXT形式的保存方案</p>\n<p>实际应用中，要根据不同类型的输入，选择不同类型的格式</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VARCHAR(X)</td>\n<td>user name, email, country, subject, password</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>messages, emails, comments, formatted text, html, code, images, links</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>large json bodies, short to medium length books, csv strings</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>textbooks, programs, years of logs files, harry potter and the goblet of fire, scientific research logging</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Node部分\"><a href=\"#Node部分\" class=\"headerlink\" title=\"Node部分\"></a>Node部分</h1><h3 id=\"数据库连接\"><a href=\"#数据库连接\" class=\"headerlink\" title=\"数据库连接\"></a>数据库连接</h3><p>一个典型的SELECT请求写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖mysql模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建连接，指定DB地址／用户名／密码／库名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'10.4.232.53'</span>,</span><br><span class=\"line\">    user: <span class=\"string\">'mock_user'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'mock_user_pwd'</span>,</span><br><span class=\"line\">    database: <span class=\"string\">'live_show'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// exports以将接口暴露在模块外</span></span><br><span class=\"line\">exports.queryComments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channelId, limit, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> select = <span class=\"string\">'SELECT `comment` FROM instant_comment where `channel_id` = \\''</span> + channelId + <span class=\"string\">'\\' ORDER BY `id` DESC LIMIT '</span> + limit;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"queryComments: \"</span> + select); <span class=\"comment\">// 建议每一次执行DB操作，都通过log记录下具体指令</span></span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; <span class=\"comment\">// 请求一个连接</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">// js里通常的写法，回调函数中第一个参数是err</span></span><br><span class=\"line\">        conn.query(select,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, rows, fields</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    callback(rows); <span class=\"comment\">// 回调函数处理row</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                conn.release(); <span class=\"comment\">// 注意！一定要在回调函数中释放连接，不然一旦进行10次（默认值）数据请求，就会导致连接打满而挂掉</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"http请求\"><a href=\"#http请求\" class=\"headerlink\" title=\"http请求\"></a>http请求</h3><p>一般写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// handler为回调函数</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(handler).listen(port);</span><br><span class=\"line\"><span class=\"comment\">// handler写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\">req, resp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do your business</span></span><br><span class=\"line\">    resp.write(<span class=\"string\">'this is response'</span>);</span><br><span class=\"line\">    resp.end();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>resp.write(&#39;foo&#39;)</code> <code>resp.end()</code> 也可以简写为 <code>resp.end(&#39;foo&#39;)</code></p>\n<h3 id=\"数据Json化\"><a href=\"#数据Json化\" class=\"headerlink\" title=\"数据Json化\"></a>数据Json化</h3><p>js中使用的是弱类型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    code : <span class=\"number\">200</span>,</span><br><span class=\"line\">    msg : <span class=\"string\">'成功'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这种对象，直接使用 <code>resp.write(foo.toString())</code> 是无法返回数据的，拿到的其实是对象在内存中的指针。这里要用 <code>JSON.stringify(foo).toString()</code> 来生成结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp.write(<span class=\"built_in\">JSON</span>.stringify(foo).toString());</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><p>使用 <code>express</code> 框架，非常简单（@王善成 介绍说现在 <code>koa</code> 更为流行，待调研）。<br>通过形如 <code>http://10.4.232.53:9528/live_1.jpg</code> 的地址来获取静态资源（不需要拼接 <code>public</code>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>)); <span class=\"comment\">// 项目目录下的public文件夹，即为静态文件目录</span></span><br><span class=\"line\">app.listen(<span class=\"number\">9528</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><p>使用 <code>setInterval(func, delay)</code> 来执行周期任务，因为代码本身有运行时间，函数有调用时间，因此在时刻上并不会保证100%的精确，（如声明了3000ms，可能在2990时执行，也可能在3010时执行）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时任务,关闭不在保活列表里的直播源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> livingPeriod = <span class=\"number\">10</span> * <span class=\"number\">1000</span>; <span class=\"comment\">// 需要保活的直播,要在30s内调用保活接口</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"living shows: \"</span> + livingShows);</span><br><span class=\"line\">    dbHelper.killDeadShow(livingShows, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        livingShows = []; <span class=\"comment\">// clear</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, livingPeriod);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"使用Git对最近n个commit进行合并","url":"https://lilei.pro/2016/03/31/Git-Squash-Commits/","content":"<blockquote>\n<p>如何在Git中合并多次commit呢？</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>通过Git对最近的n个commit进行合并，可以使用下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --soft HEAD~n</span><br><span class=\"line\">$ git commit</span><br></pre></td></tr></table></figure>\n<p>炒鸡简单！</p>\n<hr>\n<p>如果要合并的是有间隔的commit，笔者目前还没有学会…</p>\n","categories":[],"tags":["技术流"]},{"title":"Android Performance Patterns - s4ep7 Removing Unused Code","url":"https://lilei.pro/2016/03/31/Android-Performance-Patterns-s4ep7-Removing-Unused-Code/","content":"<blockquote>\n<p>Third party libraries can be some serious time savers for Android development. They allow us to do awesome things in our app without having to write any of the functionality ourselves. That’s a pretty big convenience. What’s not convenient though is the code-bloat they can often come with.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=5frxLkO4oTM&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=17\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5frxLkO4oTM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Third-Party-Library\"><a href=\"#Third-Party-Library\" class=\"headerlink\" title=\"Third Party Library\"></a>Third Party Library</h4><p>在自己的app中使用第三方库有哪些优点呢？</p>\n<ul>\n<li>第三方库可以为我们提供便捷的功能</li>\n<li>它们都经过了良好全面的测试，并且在生产环境中得到验证</li>\n</ul>\n<p><img src=\"/img/160331_app_s4ep7/advantage.png\" alt=\"\"></p>\n<p>而缺点可能就不那么明显</p>\n<ul>\n<li>你必须引用整个第三方库，即使用到的只是其中一个简单的类——这被叫做<code>code bloat</code>（代码膨胀）</li>\n<li>这会使你的apk体积增大</li>\n<li>甚至可能触及65k的方法数天花板（关于65k，请查阅这一篇<a href=\"https://developer.android.com/tools/building/multidex.html\" target=\"_blank\" rel=\"noopener\">Building Apps with Over 65K Methods</a>）</li>\n</ul>\n<p><img src=\"/img/160331_app_s4ep7/code_bloat.png\" alt=\"\"></p>\n<p>对于<code>MultiDex</code>，小哥给出了非常幽默的描述</p>\n<blockquote>\n<p>It’s pretty much as much fun going to the dentist…</p>\n</blockquote>\n<hr>\n<h4 id=\"Proguard\"><a href=\"#Proguard\" class=\"headerlink\" title=\"Proguard\"></a>Proguard</h4><p>作用</p>\n<ul>\n<li>Shrink：精简代码，去除无用的类</li>\n<li>Optimize：优化逻辑</li>\n<li>Obfuscate：混淆，增加逆向工程的难度</li>\n</ul>\n<p>一个例子是，使用Proguard后，原本8.4mb的Google IO app被缩减到了4.1mb</p>\n<p><img src=\"/img/160331_app_s4ep7/proguard.png\" alt=\"\"></p>\n<p>开启 proguard 也十分简单，只要在 gradle 文件中将 <code>minifyEnabled</code> 属性声明为 <code>true</code>，并写明 <code>proguardFiles</code> 路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tbuildTypes &#123;</span><br><span class=\"line\">\t\trelease &#123;</span><br><span class=\"line\">\t\t\tminifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tproguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，proguard会导致应用到“反射”的代码无法正常工作，因为它会改变方法名&amp;类名，需要用 <code>keep</code> 在相关代码上关闭proguard</p>\n<p><a href=\"http://developer.android.com/tools/help/proguard.html\" target=\"_blank\" rel=\"noopener\">ProGuard 官方文档</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"骨盆前倾101","url":"https://lilei.pro/2016/03/24/Fixing-Anterior-Pelvic-Tilt/","content":"<hr>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>骨盆前倾是一种不良的体态，如果你在早晨醒来不时感到下背部疼痛；在健身房里的里的深蹲、硬拉总会因为下背力竭而有所阻滞；身体曲线侧面看起来下腹向前、臀部向后突出，那么要当心，很可能你正在遭遇骨盆前倾。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"什么是骨盆前倾\"><a href=\"#什么是骨盆前倾\" class=\"headerlink\" title=\"什么是骨盆前倾\"></a>什么是骨盆前倾</h4><p>骨盆前倾（Anterior Pelvic Tilt，简称APT），常见于久坐伏案工作人群，具体表现就是臀部后凸，腹部向前顶，前挺后撅，图中的第二种即为APT。</p>\n<p><img src=\"/img/160325_fixing_apt/apt.jpeg\" alt=\"\"></p>\n<p>另外，在健身房里一些体态发展不均的人身上也经常看到骨盆前倾的现象，故也称为“健美腰”。</p>\n<p><img src=\"/img/160325_fixing_apt/gym_waist_2.jpg\" alt=\"\"></p>\n<p>从骨骼透视图上来看</p>\n<p><img src=\"/img/160325_fixing_apt/apt_bone.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"如何判断骨盆前倾\"><a href=\"#如何判断骨盆前倾\" class=\"headerlink\" title=\"如何判断骨盆前倾\"></a>如何判断骨盆前倾</h4><p>判断骨盆前倾的原因有很多种，当然，去正规医院进行外科（脊柱）检验是最省事也最准确的方法。医学手段之外，还有一些显著特征可以比较容易的帮助我们鉴别骨盆前倾。</p>\n<ul>\n<li>方法一：对镜自检，不管是健身房还是卧室的，只要有一面足够大的镜子，按照正常放松姿态站立，观察腰腹及臀部。</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/gym_waist.jpg\" alt=\"\"></p>\n<ul>\n<li>方法二：贴墙立正，如果背后能放入一掌，基本身姿还算正常；如果能放入一拳，很有可能是骨盆前倾。</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/stand_by_wall.jpg\" alt=\"\"></p>\n<ul>\n<li>方法三：在睡觉时，如果仰睡时腰部总是悬空，睡醒后伴随疼痛，以至于不得不采取侧卧方式入睡，这时也要小心了。</li>\n</ul>\n<hr>\n<h4 id=\"骨盆前倾的起因\"><a href=\"#骨盆前倾的起因\" class=\"headerlink\" title=\"骨盆前倾的起因\"></a>骨盆前倾的起因</h4><p>首先来看一下APT患者的脊椎与正常的脊椎，APT患者的尾椎呈现了一个夸张的弧度</p>\n<p><img src=\"/img/160325_fixing_apt/exaggerated_lumbar_curve.jpeg\" alt=\"\"></p>\n<p>造成这一切的根本原因是——</p>\n<p><strong>肌力不均</strong></p>\n<p>想象你的盆腔，它的前上（腹直肌）、后下（臀大肌、腘绳肌）是肌肉组A，它的后上（竖脊肌）、前下（髂腰肌、股直肌）为肌肉组B。</p>\n<ul>\n<li>A与B之间维持平衡时，人的盆腔处于一个刚好的直立状态。</li>\n<li>A弱B强时，造成骨盆前倾，Anterior Pelvic Tilt（APT）</li>\n<li>A强B弱时，造成骨盆后倾，Posterior Pelvic Tilt（PPT）</li>\n</ul>\n<p>力矩图</p>\n<p><img src=\"/img/160325_fixing_apt/balance.jpg\" alt=\"\"></p>\n<p>竖脊肌、髂腰肌太强（过短）导致骨盆前倾</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect.jpeg\" alt=\"\"></p>\n<p>正常状态下，腹直肌、臀大肌会起到抑制骨盆前倾的效果</p>\n<p><img src=\"/img/160325_fixing_apt/correct.jpeg\" alt=\"\"></p>\n<p>为什么竖脊肌、髂腰肌会起一个负面作用呢？</p>\n<p>竖脊肌，也就是通常我们所说的“下背部”，当练习硬拉、深蹲时都会带到这部分肌肉。而肌肉越强壮，肌纤维往往也会变得越短越粗，导致拉动盆腔向前倾斜。</p>\n<p>腹直肌、腹外斜肌、臀大肌、腘绳肌这几处肌肉，往往在训练中得不到重视，导致松垮无力，带不动盆腔回归。</p>\n<p>说到底，就是一组<strong>拮抗肌</strong>相互之间发展不均的问题。</p>\n<p>这位美国大叔很好地解释了骨盆前倾的起因，并介绍了几种容易操作的矫正方法。</p>\n<p><strong>YouTube视频，请自备云梯</strong></p>\n<p>Your Back is Whack!<br><a href=\"https://www.youtube.com/watch?v=BEn61BL4Nwk\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=BEn61BL4Nwk</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BEn61BL4Nwk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h4 id=\"骨盆前倾的危害\"><a href=\"#骨盆前倾的危害\" class=\"headerlink\" title=\"骨盆前倾的危害\"></a>骨盆前倾的危害</h4><ul>\n<li>丑！让人小腹前凸、臀部横向发展并下垂；辛辛苦苦练成的8块／6块腹肌从侧面看就像裹在了一个球外面</li>\n<li>腰椎前凸，病理性姿势不正确，必然会导致腰酸背痛，并且肩颈酸胀。此外骨盆承托着腹部内脏等，如果骨盆倾斜，也会导致内脏的运转不畅</li>\n<li>僵硬的下背部成为阻碍硬拉、深蹲水平进一步提高的瓶颈</li>\n<li>如果说骨盆前倾有什么好处的话，大概就是会产生“前凸后翘”的效果。你所见到的翘臀，极有可能是骨盆前倾造成的“伪”翘臀</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/nice_glute.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"如何矫正骨盆前倾\"><a href=\"#如何矫正骨盆前倾\" class=\"headerlink\" title=\"如何矫正骨盆前倾\"></a>如何矫正骨盆前倾</h4><p>矫正骨盆前倾，最根本的原则只有一点</p>\n<p><strong>增强弱势肌肉，拉伸强势肌肉</strong></p>\n<ul>\n<li>“弱势肌肉”：将骨盆拉回平衡状态的腹直肌、腹外斜肌、臀大肌、腘绳肌</li>\n<li>“强势肌肉”：将骨盆向前倾状态拉动的髋部屈肌（髂腰肌 股直肌）、竖脊肌</li>\n</ul>\n<p>一方面强化弱势肌肉，使身体增强将骨盆拉回原角度的扭力，另一方面拉伸强势肌肉，放松紧张的肌肉，拉长肌纤维</p>\n<p>强化臀大肌、腘绳肌、腹外斜肌、腹直肌</p>\n<ul>\n<li>臀大肌：臀桥，仰卧顶臀，美式硬拉</li>\n<li>腘绳肌：俯卧腿弯举，反向腿弯举</li>\n<li>腹肌：RKC平板支撑，反向卷腹，悬垂V字举腿</li>\n</ul>\n<p>拉伸竖脊肌、髋部屈肌（髂腰肌、股直肌）</p>\n<ul>\n<li>竖脊肌：泡沫轴放松、坐姿拉伸、扶杆下蹲</li>\n<li>髂腰肌：弓步拉伸</li>\n<li>股直肌：侧卧拉腿</li>\n</ul>\n<p>下面是一些训练方法的图片，需要强调的是，每个人的身体条件不同，肌肉强弱有别，要根据实际情况选取不同的动作；就算是同一个动作，在做的时候使用不同的角度、拉伸不同的时间，也会产生迥异的效果。</p>\n<hr>\n<h4 id=\"臀大肌（强化）\"><a href=\"#臀大肌（强化）\" class=\"headerlink\" title=\"臀大肌（强化）\"></a>臀大肌（强化）</h4><p>臀桥：下背放松，靠臀部收紧发力，顶峰收缩，感受臀大肌夹紧带来的刺激感。</p>\n<p><img src=\"/img/160325_fixing_apt/glute_bridge.jpg\" alt=\"\"></p>\n<p>臀桥对于塑造翘臀有着无可比拟的作用，注意在动作顶端时身体应该保持一条直线，腹部不要上顶。</p>\n<p>进阶臀桥使用单腿支撑。</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect_glute_bridge.jpeg\" alt=\"\"></p>\n<p>下面是视频讲解：</p>\n<p><a href=\"https://youtu.be/viyoVBR_J5c\" target=\"_blank\" rel=\"noopener\">https://youtu.be/viyoVBR_J5c</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/viyoVBR_J5c\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>仰卧顶臀，臀桥的负重强化版，请量力而行，也可借助长凳顶在背部进行。</p>\n<p><img src=\"/img/160325_fixing_apt/glute_bridge_plus.jpg\" alt=\"\"></p>\n<p>视频讲解：</p>\n<p><a href=\"https://youtu.be/vSA-EBNUb-M\" target=\"_blank\" rel=\"noopener\">https://youtu.be/vSA-EBNUb-M</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/vSA-EBNUb-M\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>美式硬拉：我们Glute Lab已经发现在进行罗马尼亚硬拉训练时，臀部几乎没有参与活动，主要是腘绳肌，至少在轻负重的时候是这样。这不是一件好事。因此，我们需要了解在髋屈伸过程中如何利用臀大肌。美式硬拉与罗马尼亚硬拉非常相似，然而它加入了一些骨盆运动。在杠铃下降的过程中，你需要保持骨盆稍向前倾。在杠铃上升的过程中，你需要利用臀大肌的收缩来让骨盆稍向后倾。要注意的是骨盆后倾是由臀部的收缩挤压达成的！而不是腰椎翻转！当硬拉至躯干直立时，杠铃可能由于你的臀部收缩从而向前移动。你可以把美式硬拉想象成一种以臀部为中心的罗马尼亚硬拉。再次强调，依靠臀大肌使骨盆向后倾，保持腰椎稳定。</p>\n<p>美式硬拉；杠铃位于底部时，保持脊柱中立；杠铃位于顶部时，弯曲胸椎（上背部），同时骨盆后倾</p>\n<p><img src=\"/img/160325_fixing_apt/usa_dead_lift_1.png\" alt=\"\"></p>\n<p>杠铃至顶部，挤压臀大肌但避免腰椎翻转</p>\n<p><img src=\"/img/160325_fixing_apt/usa_dead_lift_2.png\" alt=\"\"></p>\n<p>Dimel硬拉是几年前由路易·西蒙斯和美国西部杠铃俱乐部推广开来的。你可以看成是多次数的美式硬拉。用你最大重量的30%-40%负重练习15-30次硬拉，以最大化的刺激你的臀大肌，增强泵感。如果你动作正确，这和臀推（Hip Thrust）有点像的。</p>\n<p>美式硬拉的视频演示：<a href=\"https://youtu.be/1aVjkPzKovc\" target=\"_blank\" rel=\"noopener\">https://youtu.be/1aVjkPzKovc</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/1aVjkPzKovc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>另外，关于罗马尼亚硬拉、美式硬拉、屈腿硬拉、直腿硬拉，请参考下面这篇文章</p>\n<p><a href=\"http://www.actrainer.com/bbs/detail_962\" target=\"_blank\" rel=\"noopener\">http://www.actrainer.com/bbs/detail_962</a></p>\n<hr>\n<h4 id=\"腘绳肌（强化）\"><a href=\"#腘绳肌（强化）\" class=\"headerlink\" title=\"腘绳肌（强化）\"></a>腘绳肌（强化）</h4><p>俯卧腿弯举：大部分健身房里都会有的器械，注意训练时集中注意力到腘绳肌上，感受肌肉收缩。</p>\n<p><img src=\"/img/160325_fixing_apt/hsj_strenthen.jpeg\" alt=\"\"></p>\n<p>反向腿弯举：需要借助特定器械或者伙伴帮助才能进行，持续对腘绳肌、臀大肌进行狂轰滥炸。</p>\n<p><img src=\"/img/160325_fixing_apt/hsj_reverse_strenthen.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"腹肌（强化）\"><a href=\"#腹肌（强化）\" class=\"headerlink\" title=\"腹肌（强化）\"></a>腹肌（强化）</h4><p>RKC平板支撑：这项平板支撑和一般的初始动作没有什么区别，但是你身体肌肉的紧张程度会相对较高，平衡感的要求也会更高，相当于一般平板支撑4倍的运动量，而且每组仅仅需要你10秒的时间，你就能够拥有坚实的6块腹肌了。让我们来接下来看一些RKC平板支撑应该怎么做。</p>\n<ol>\n<li>先以传统的平板支撑做好准备姿势，小臂着地，与肩部处在一条直线上，双脚并拢，面部朝下。身体从头到脚呈一条直线。</li>\n<li>双手握拳，两肩张开，小臂向地面用力，就好像你要把你的小臂往你的脚所在的地方拖拽一样。</li>\n<li>臀部以及脚筋用力，让你的尾椎骨抬升至微微向头部倾斜，保持后背下部分挺直，这时你就会感觉到你的臀部和腿开始有相应的感觉了。保持膝盖打直。</li>\n<li>保持姿势，注意保持整个身体肌肉的最大紧张程度。</li>\n</ol>\n<p><img src=\"/img/160325_fixing_apt/rkcp.jpg\" alt=\"\"></p>\n<p>RKCP的视频讲解：<a href=\"https://youtu.be/6TKktamzq4o\" target=\"_blank\" rel=\"noopener\">https://youtu.be/6TKktamzq4o</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/6TKktamzq4o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>反向卷腹：</p>\n<p><img src=\"/img/160325_fixing_apt/reverse_crunches.jpg\" alt=\"\"></p>\n<p><strong>动作描述</strong></p>\n<ol>\n<li>仰卧开始，可以直腿，也可以曲腿。双手也可以抓住健身凳或床沿支撑。</li>\n<li>使用腹肌的力量卷曲身体。慢慢将大腿拉近身体。下腰部离开地面。</li>\n<li>慢慢放下，重复。</li>\n</ol>\n<p><strong>动作要点</strong></p>\n<p>重点不是大腿的运动，而是腹肌带动躯干的卷曲！你甚至可以不改变大腿与身体的角度（腿和髂等肌群就不发力了）。</p>\n<p>试着把大腿和躯干的角度维持固定。</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect_reverse_crunches.jpeg\" alt=\"\"></p>\n<p>V字举腿：《囚徒健身》里面，“六艺”中的“举腿”最终式，注意在举起－下放的过程中有意识地控制腹部肌肉——尤其是下腹部，不要借助惯性甩上去。</p>\n<p><img src=\"/img/160325_fixing_apt/v.jpg\" alt=\"\"></p>\n<p>视频讲解：<a href=\"https://youtu.be/rI1xHnMVcfk\" target=\"_blank\" rel=\"noopener\">https://youtu.be/rI1xHnMVcfk</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/rI1xHnMVcfk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h4 id=\"竖脊肌（拉伸）\"><a href=\"#竖脊肌（拉伸）\" class=\"headerlink\" title=\"竖脊肌（拉伸）\"></a>竖脊肌（拉伸）</h4><p>泡沫轴放松</p>\n<p><img src=\"/img/160325_fixing_apt/foam_roller.jpeg\" alt=\"\"></p>\n<p>泡沫轴讲解视频（同样来自YouTube）</p>\n<p><a href=\"https://youtu.be/QJLxruO3su0\" target=\"_blank\" rel=\"noopener\">https://youtu.be/QJLxruO3su0</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/QJLxruO3su0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>坐姿拉伸：坐在椅子上，双脚打开，臀部坐在椅面的前面，上身直立双手交叉从后面抱住颈部的下端（颈椎与胸椎交界的肩部位置）。慢慢地双手用力，身体逐步往下压，直到头部低于椅面后进一步弯向椅子的后面，这时感觉到腰背部的肌肉充分被拉长拉紧，尤其是下腰部可能还有酸痛的感觉，保持这样的姿势10~20秒（心里读数20~40下）后，缓慢返回起始位置。</p>\n<p><img src=\"/img/160325_fixing_apt/sjj_sit_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"髂腰肌（拉伸）\"><a href=\"#髂腰肌（拉伸）\" class=\"headerlink\" title=\"髂腰肌（拉伸）\"></a>髂腰肌（拉伸）</h4><p>弓步拉伸：采用单跪式的体位，保持上身直立（腹部不能往前挺），前面的腿保持大腿与小腿成90°。<br>身体逐步往下坐开始拉伸，后面的腿尽量往后伸和下压，感觉到腰椎以及髋关节被拉紧，维持10~20秒（心里读数20~40下）后慢慢抬起身体回到起始位置完成一侧的拉伸。更换姿势重复动作拉伸另一侧的髂腰肌后完成两侧的拉伸。注意在动作的过程中，腹部不能往前挺。</p>\n<p><img src=\"/img/160325_fixing_apt/qyj_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"股直肌（拉伸）\"><a href=\"#股直肌（拉伸）\" class=\"headerlink\" title=\"股直肌（拉伸）\"></a>股直肌（拉伸）</h4><p>美女演示的卧姿拉伸</p>\n<p><a href=\"https://youtu.be/cWuVcqvoEFo\" target=\"_blank\" rel=\"noopener\">https://youtu.be/cWuVcqvoEFo</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/cWuVcqvoEFo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>侧卧拉腿：选择采用比较舒适的卧位进行自我拉伸。侧身平躺在垫子上，远离地面的手抓住同侧的脚背，保持身体挺直。<br>抓住脚背的手慢慢用力，将腿往自己身体的后上方拉和往臀部靠，到达大腿和骨盆都处于后伸的位置，明显感觉股直肌被拉紧并有隐隐的痛感时往回放松一丁点儿便保持在这样的位置10~20秒（心里读数达到20或40下），缓慢放松回到起始位置，完成单侧股直肌的一次拉伸后，进行另一侧的拉伸。</p>\n<p><img src=\"/img/160325_fixing_apt/gzj_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"参考资料-amp-扩展阅读\"><a href=\"#参考资料-amp-扩展阅读\" class=\"headerlink\" title=\"参考资料&amp;扩展阅读\"></a>参考资料&amp;扩展阅读</h4><p><a href=\"https://www.t-nation.com/training/dont-be-like-donald-duck\" target=\"_blank\" rel=\"noopener\">https://www.t-nation.com/training/dont-be-like-donald-duck</a></p>\n<p><a href=\"http://www.styleforum.net/t/380309/oksus-guide-to-anterior-pelvic-tilt-apt\" target=\"_blank\" rel=\"noopener\">http://www.styleforum.net/t/380309/oksus-guide-to-anterior-pelvic-tilt-apt</a></p>\n<p><a href=\"http://zhuanlan.zhihu.com/oh-hard/19986866\" target=\"_blank\" rel=\"noopener\">http://zhuanlan.zhihu.com/oh-hard/19986866</a></p>\n<p><a href=\"http://tieba.baidu.com/p/2492811917\" target=\"_blank\" rel=\"noopener\">http://tieba.baidu.com/p/2492811917</a></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["大保健"]},{"title":"nova自动化测试后续内容安排","url":"https://lilei.pro/2016/03/24/Nova-Automation-Develop-Plan/","content":"<p><a href=\"../2016/01/28/Nova-Automation-Practice\">上篇链接</a></p>\n<a id=\"more\"></a>\n<hr>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>milestone 1</th>\n<th>milestone 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>appium</td>\n<td>1. 配置在独立机器<br>2. 使用命令行启动</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>mock server</td>\n<td>1. 配置在独立机器<br> 2. 多终端注册<br>3. 多终端配置加载<br>4. 使用sql数据库存储配置文件<br>5. 精简代码，删除无用功能</td>\n<td>1. 梳理日志</td>\n</tr>\n<tr>\n<td>test case</td>\n<td>1. 排队全套用例<br>2. 用例模板优化<br>3. 用例执行过程可以截屏</td>\n<td>1. 用例执行报告（email）<br>2. 每日构建，自动执行<br>3. 其它业务线主流程case</td>\n</tr>\n<tr>\n<td>完成节点</td>\n<td>排队业务主流程回归迁移到自动化测试</td>\n<td>n/a</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>with iOS</p>\n<p>前提</p>\n<ol>\n<li>iOS本身有清晰化的MVC结构，对View做测试</li>\n</ol>\n<p>优点</p>\n<ol>\n<li>组件输入的组合</li>\n<li>包含截图的报表</li>\n</ol>\n<p>不够完善</p>\n<ol>\n<li>人肉验证</li>\n</ol>\n<p>改进</p>\n<ol>\n<li>mock server 平台化，可供 iOS 使用</li>\n</ol>\n<hr>\n<p>appium 文档阅读</p>\n<p><a href=\"http://appium.io/slate/en/master/?java#introduction-to-appium\" target=\"_blank\" rel=\"noopener\">http://appium.io/slate/en/master/?java#introduction-to-appium</a></p>\n<p>appium的设计思想</p>\n<ol>\n<li>You shouldn’t have to recompile your app or modify it in any way in order to automate it.</li>\n<li>You shouldn’t be locked into a specific language or framework to write and run your tests.</li>\n<li>A mobile automation framework shouldn’t reinvent the wheel when it comes to automation APIs.</li>\n<li>A mobile automation framework should be open source, in spirit and practice as well as in name!</li>\n</ol>\n<hr>\n<p>Parallel Android Tests</p>\n<p>-p the main Appium port<br>-U the device id<br>-bp the Appium bootstrap port<br>–chromedriver-port the chromedriver port (if using webviews or chrome)<br>–selendroid-port the selendroid port (if using selendroid)</p>\n<p>If we had two devices with the ID’s 43364 and 32456, we would start two different Appium servers with the following commands:</p>\n<p>node . -p 4492 -bp 2251 -U 32456</p>\n<p>node . -p 4491 -bp 2252 -U 43364</p>\n<hr>\n<p>ignoreUnimportantViews</p>\n<h2 id=\"Another-example-of-a-use-case-for-settings-would-be-telling-appium-to-ignore-elements-which-are-not-visible-s\"><a href=\"#Another-example-of-a-use-case-for-settings-would-be-telling-appium-to-ignore-elements-which-are-not-visible-s\" class=\"headerlink\" title=\"Another example of a use-case for settings would be telling appium to ignore elements which are not visible.s\"></a>Another example of a use-case for settings would be telling appium to ignore elements which are not visible.s</h2><hr>\n","categories":[],"tags":["技术流","自动化测试"]},{"title":"Android Performance Patterns - s4ep6 Service Performance Patterns","url":"https://lilei.pro/2016/03/20/Android-Performance-Patterns-s4ep6-Service-Performance-Patterns/","content":"<blockquote>\n<p>Services are an integral component of almost every android application. But the functionality they provide comes with a drain on battery and system resources. And if you’re not paying attention, services can easily stick around longer than they should which wastes system resources, and can often cause performance problems for your rendering thread. But Colt McAnlis has the answer : using services in the most efficient way possible means killing them off the right way, and sometimes, not even using them.<br><a href=\"https://www.youtube.com/watch?v=NJsq0TU0qeg&amp;index=16&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NJsq0TU0qeg?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"On-System-Level-Services-Ain’t-Free\"><a href=\"#On-System-Level-Services-Ain’t-Free\" class=\"headerlink\" title=\"On System Level, Services Ain’t Free\"></a>On System Level, Services Ain’t Free</h4><p>创建、销毁 Service 需要时间与内存</p>\n<p><img src=\"/img/160320_app_s4ep6/cost.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Service-May-Cost-Frame-Lost\"><a href=\"#Service-May-Cost-Frame-Lost\" class=\"headerlink\" title=\"Service May Cost Frame Lost\"></a>Service May Cost Frame Lost</h4><ol>\n<li>作为 Local Service 启动，对应的 Service 运行在主进程的主线程上</li>\n<li>作为 Remote Service 启动，对应的 Service 则是运行在独立进程的主线程上</li>\n</ol>\n<p>对于<code>1</code>中的情况，如果 Service 中进行了耗时操作（超过了16ms），则在屏幕绘制时可能引起丢帧。</p>\n<hr>\n<h4 id=\"Don’t-Use-Services\"><a href=\"#Don’t-Use-Services\" class=\"headerlink\" title=\"Don’t Use Services\"></a>Don’t Use Services</h4><p>if you don’t have to…</p>\n<p>参见下一节罗列的 Solutions</p>\n<hr>\n<h4 id=\"Async-Event-Functions\"><a href=\"#Async-Event-Functions\" class=\"headerlink\" title=\"Async Event Functions\"></a>Async Event Functions</h4><ul>\n<li>GCM</li>\n<li>BroadcastReceiver</li>\n<li>LocalBroadcastReceiver</li>\n<li>HandlerThreads</li>\n<li>AsyncTaskLoaders</li>\n<li>IntentService</li>\n</ul>\n<hr>\n<h4 id=\"Do-not-Let-Services-Live-Longer-Than-They-Needed\"><a href=\"#Do-not-Let-Services-Live-Longer-Than-They-Needed\" class=\"headerlink\" title=\"Do not Let Services Live Longer Than They Needed\"></a>Do not Let Services Live Longer Than They Needed</h4><p>Service 有两种不同的启动方法，对应的种植方法也为两种</p>\n<ul>\n<li>Started Services：在 Service 中调用<code>stopSelf()</code>，或者在外面调用<code>stopService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/started_services.png\" alt=\"\"></p>\n<ul>\n<li>Bound Services：通过<code>unBindService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/bound_services.png\" alt=\"\"></p>\n<ul>\n<li>Mixed：如果是先通过<code>startService()</code>启动，再用<code>bindService()</code>绑定的 Service，那么在<code>unBind()</code>后，还要显示通过<code>stopService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/mixed_services.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><ul>\n<li>光头哥又在推销 <a href=\"http://developer.android.com/tools/help/systrace.html\" target=\"_blank\" rel=\"noopener\">Systrace</a> 了</li>\n</ul>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s4ep5 Minimizing Asset Payload","url":"https://lilei.pro/2016/03/08/Android-Performance-Patterns-s4ep5-Minimizing-Asset-Payload/","content":"<blockquote>\n<p>No matter how aggressively you’ve optimized your networking code for performance, there’s still a huge problematic performance issue that you haven’t seen: Bloated asset files. If you’re not aggressively attacking the size of the assets you’re transferring to your users, you’re basically stealing time (and money) from them.<br><a href=\"https://www.youtube.com/watch?v=ts5o6t7enOk&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=15\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ts5o6t7enOk?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Smaller-Is-Better\"><a href=\"#Smaller-Is-Better\" class=\"headerlink\" title=\"Smaller Is Better\"></a>Smaller Is Better</h4><p><img src=\"/img/160308_app_s4ep5/network_speed.png\" alt=\"\"></p>\n<ol>\n<li>速度缓慢并不是所有用户都处于高速的4G／wifi环境下</li>\n<li>大数据量导致的大电量消耗</li>\n<li>流量＝金钱</li>\n</ol>\n<p>引起数据流量过大的，主要有两个因素：图片、序列化数据。</p>\n<hr>\n<h4 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h4><p><img src=\"/img/160308_app_s4ep5/imagefiles.png\" alt=\"\"></p>\n<p>如果不需要图片透明度设定，那就尽量不要使用PNG格式的图片文件，这会产生难以置信的图片体积。</p>\n<p>JPG和WEBP是不错的选择，在使用这两种图片格式时，记住图片质量的极小降低，可以大大缩小图片体积。</p>\n<p><img src=\"/img/160308_app_s4ep5/control_quality.png\" alt=\"\"></p>\n<p>图片的分辨率并不是越大越好，根据具体的使用场景，返回不同像素的图片。如果只是需要缩略图，那就不要返回高清的无码大图。</p>\n<p><img src=\"/img/160308_app_s4ep5/judge_conditions.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Serialized-Data\"><a href=\"#Serialized-Data\" class=\"headerlink\" title=\"Serialized Data\"></a>Serialized Data</h4><p>JSON /dʒeɪ’sʌn/ 是一个<strong>horrible</strong>的数据格式！！！</p>\n<p>看看下面的代码，包含了大量的<strong>空格、引号、key值</strong>等冗余信息，这些字段存在的意义只是为了方便人工阅读，并非数据传输。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"MOPayOrderDo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RefundDetails\"</span>: [<span class=\"string\">\"10.1元   2016-02-12 20:00 退款\"</span>, <span class=\"string\">\"10.02元   2016-02-17 19:00 退款\"</span>, <span class=\"string\">\"10.003元   2016-02-18 17:00 退款\"</span>, <span class=\"string\">\"10.0004元   2016-02-18 18:00 退款\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"BaseOrderId\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OriAmount#D\"</span>: <span class=\"number\">2.123456</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RemainAmount#D\"</span>: <span class=\"number\">100.123456</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SerializedId\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RepayUrl\"</span>: <span class=\"string\">\"dianping://shopinfo?id=2062015\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"CurrentAmount#D\"</span>: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SaveAmount#D\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderRemarks\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ErrorMsg\"</span>: <span class=\"string\">\"支付成功|此为付款凭证，请向商户展示\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SerialNumber\"</span>: <span class=\"string\">\"80033630111\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RightDos\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MerchantAmountString\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Discounts\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HuiTicketShareDo\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"HuiTicketShareDo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketValidPeriod\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketDesc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketValue\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketShareStatus#I\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketButtonClickable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"PayTicketDesc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketPicUrl\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketTitle\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketButtonText\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ShareDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ExtraTickets\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ShopID#I\"</span>: <span class=\"number\">2062015</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"PointMallDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RefundAmount#D\"</span>: <span class=\"number\">40.1234</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"BuffetDescs\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"PayFailDescription\"</span>: <span class=\"string\">\"您的付款将于1-5个工作日原路退还\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Time#U\"</span>: <span class=\"number\">1442469357</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HuiReviewInfo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Banner\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderID#I\"</span>: <span class=\"number\">43956789</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"VoucherSerials\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"Status#I\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OperationBanners\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"AlertLoginTips\"</span>: <span class=\"string\">\"绑定手机后订单不会丢哦\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"AlertLoginLink\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Name\"</span>: <span class=\"string\">\"现在去绑定\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"MerchantAmount#D\"</span>: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ServiceUrl\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"StatusMsg\"</span>: <span class=\"string\">\"已退款\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ContactMerchantTip\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderDetailTipsDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ShopPhones\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"4008205527\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"ShopName\"</span>: <span class=\"string\">\"大众点评网\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"IsHobbit#I\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"NoDiscountAmount#D\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SuccessMsg\"</span>: <span class=\"string\">\"请向服务员出示验证码\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HasVoiceReport\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MobileNo\"</span>: <span class=\"string\">\"13774283697\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"VerifyStatus#I\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MOPayShare\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"Share\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"IconUrl\"</span>: <span class=\"string\">\"http://qcloud.dpfile.com/pc/9vKBXqRXPl6vyOVFe4zlXMLys21f38u--LZmWbufGI2pRKzSBzQnLPwzWURFZUAvtOnd3gXQdDYlAqlaVaAFeZ0rYYyiRo_EhzufqWWjTjs.jpg\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Title\"</span>: <span class=\"string\">\"在【大众点评网】不用现金，手机买单有优惠!\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Desc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"BtnText\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>: <span class=\"string\">\"http://m.dianping.com/hui/share/weixin?shopId=2062015\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"UserAmountString\"</span>: <span class=\"string\">\"&#123;\\\"userAmount\\\":\\\"1.123456元\\\",\\\"boughtVoucher\\\":\\\"\\\",\\\"usedVoucher\\\":\\\"\\\"&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"BizType#I\"</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>光头哥在video中给出了几种高效的序列化替代方式，讲解参见<a href=\"https://www.youtube.com/watch?v=IwxIIUypnTE\" target=\"_blank\" rel=\"noopener\">Serialization performance (Android Performance Patterns Season 4 ep14)</a></p>\n<ul>\n<li>Protocol Buffers</li>\n<li>Nano-Proto-Buffers</li>\n<li>FlatBuffers</li>\n</ul>\n<p>同样，在http压缩过程里，也有进一步优化的空间，参见<a href=\"https://www.youtube.com/watch?v=qBxeHkvJoOQ\" target=\"_blank\" rel=\"noopener\">Smaller Serialized Data (Android Performance Patterns Season 4 ep15)</a></p>\n<p><img src=\"/img/160308_app_s4ep5/http_stack.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s4ep4 Adapting to Latency","url":"https://lilei.pro/2016/03/08/Android-Performance-Patterns-s4ep4-Adapting-to-Latency/","content":"<blockquote>\n<p>One of the most frequent performance problems your users will notice is how your app reacts when moving from a great network connection to a bad one. If things slow down, get sluggish, or start showing too many spinners, they can show your app the “uninstall“ button.<br><a href=\"https://www.youtube.com/watch?v=uzboHWX3Kvc&amp;index=14&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uzboHWX3Kvc?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Bottlenecks-Happen-Anywhere\"><a href=\"#Bottlenecks-Happen-Anywhere\" class=\"headerlink\" title=\"Bottlenecks Happen Anywhere\"></a>Bottlenecks Happen Anywhere</h4><p>在一次由app发起的网络请求过程中，会建立“手机－基站－负载均衡服务器－后端server”的一个往复链路，在这个链路的任何一个环节，都可能造成网络请求的延迟。</p>\n<p><img src=\"/img/160308_app_s4ep4/bottlenecks.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Adapting-To-Lagency\"><a href=\"#Adapting-To-Lagency\" class=\"headerlink\" title=\"Adapting To Lagency\"></a>Adapting To Lagency</h4><p>为了适应复杂多变的网络环境，必须做下面两件事：</p>\n<ol>\n<li>Gather information.</li>\n<li>Make adjustments.</li>\n</ol>\n<p>SDK中为我们提供了判断当前网络环境的Api</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">NetworkInfo activeNetwork = cm.getActiveNetworkInfo();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (activeNetwork.getType() != ConnectivityManager.TYPE_WIFI) &#123;</span><br><span class=\"line\">\tString typeName = activeNetwork.getSubtypeName();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type = activeNetwork.getSubtype();</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do the cases</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不同网络环境的基本传输速度如下图所示：</p>\n<p><img src=\"/img/160308_app_s4ep4/speed.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Do-It-Yourself\"><a href=\"#Do-It-Yourself\" class=\"headerlink\" title=\"Do It Yourself\"></a>Do It Yourself</h4><p>然而，即使判断出当前处于诸如LTE的网络环境，依然不能完全保证较高的传输速度，比如，瓶颈可能发生在服务端。</p>\n<p><img src=\"/img/160308_app_s4ep4/slow_server.png\" alt=\"\"></p>\n<p>这时就需要主动去测算当前网络延迟了，多次测算后，求平均值。</p>\n<p><img src=\"/img/160308_app_s4ep4/evaluate_average.png\" alt=\"\"></p>\n<p>接着，你可以定义出三个网络状况区间，以60ms、220ms为界</p>\n<p><img src=\"/img/160308_app_s4ep4/levels.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>GOOD</th>\n<th>OK</th>\n<th>BAD</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt; 60ms</td>\n<td>60ms ~ 220ms</td>\n<td>&gt; 220ms</td>\n</tr>\n<tr>\n<td>更多的预加载，几乎不需要缓存</td>\n<td>依赖缓存，拒绝部分网络请求</td>\n<td>拒绝大部分网络请求，只加载重要信息</td>\n</tr>\n</tbody>\n</table>\n<p>当然，阈值（60ms、220ms）不是固定的。</p>\n<hr>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>在测试时，针对难测的网络环境条件，可以使用一些工具进行延时模拟。</p>\n<ul>\n<li>Emulator Throttling: <a href=\"http://developer.android.com/tools/devices/emulator.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/tools/devices/emulator.html</a></li>\n<li>Network Attenuator: <a href=\"http://developer.att.com/developer/legalAgreementPage.jsp?passedItemId=14500040\" target=\"_blank\" rel=\"noopener\">http://developer.att.com/developer/legalAgreementPage.jsp?passedItemId=14500040</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s4ep3 Effective Prefetching","url":"https://lilei.pro/2016/03/08/Android-Performance-Patterns-s4ep3-Effective-Prefetching/","content":"<blockquote>\n<p>If you’re looking for the optimal way to batch requests to reduce overall network traffic, then prefetching is for you.<br><a href=\"https://www.youtube.com/watch?v=GajI0uKyAGE&amp;index=13&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GajI0uKyAGE?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Why-Prefetching\"><a href=\"#Why-Prefetching\" class=\"headerlink\" title=\"Why Prefetching?\"></a>Why Prefetching?</h4><p>很多场景下，app发出的网络请求是连续的，譬如，一个正在下拉中的每一项都包含一张缩略图的列表。</p>\n<p>如果可以预见的话，将未来即将发生的网络请求合并到一起进行发送，比起单独来发送各自请求，一方面减少了网络请求对于资源的消耗（如：节约电量与带宽），另一方面也使得app界面运行更加流畅。</p>\n<p><img src=\"/img/160308_app_s4ep3/prefetching.png\" alt=\"\"></p>\n<p>但是，如何确定预加载的度，是一个值得思考的问题。加载的太少了，起不到期望的效果；加载太多了，反而拖慢app。</p>\n<p><img src=\"/img/160308_app_s4ep3/little_or_much.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How-much-do-we-prefetch\"><a href=\"#How-much-do-we-prefetch\" class=\"headerlink\" title=\"How much do we prefetch?\"></a>How much do we prefetch?</h4><p>有2个可以参考的指标</p>\n<ol>\n<li>空间：预加载1~5mb的数据</li>\n<li>时间：预加载未来1~2min内会用到的数据</li>\n</ol>\n<p>此外，预加载必须要考虑用户所处的网络环境</p>\n<ul>\n<li>4G：12张图片</li>\n<li>2G：3张图片</li>\n</ul>\n<p>一个很好的衡量用户网络环境的方法是，计算某一个特定大小文件的传输时间。</p>\n<p>在一个网络连接的窗口期，可以把之前hold住的网络请求，连同后面即将加载的网络请求一同打包发送。</p>\n<p><img src=\"/img/160308_app_s4ep3/put_them_all.png\" alt=\"\"></p>\n<p><a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\" target=\"_blank\" rel=\"noopener\">GcmNetworkManager</a>为你提供了强力的工具用以完成上面的需求。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n<hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s4ep2 Optimizing Network Request Frequencies","url":"https://lilei.pro/2016/03/07/Android-Performance-Patterns-s4ep2-Optimizing-Network-Request-Frequencies/","content":"<blockquote>\n<p>Syncing too often, can be the worst idea for the performance of your application.<br><a href=\"https://www.youtube.com/watch?v=nDHeuEM30ks&amp;index=12&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nDHeuEM30ks?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Do-not-Over-Sync\"><a href=\"#Do-not-Over-Sync\" class=\"headerlink\" title=\"Do not Over Sync\"></a>Do not Over Sync</h4><p>对于用户来说，有些信息是要保持最新的（天气、账户余额等等），有些信息却不必时刻更新，太频繁的同步操作反而过犹不及：</p>\n<ol>\n<li>耗电量：比起待机，网络请求会消耗更多的电量</li>\n<li>网络流量：同样，会占用带宽，小心用户在收到流量账单变得抓狂</li>\n</ol>\n<hr>\n<h4 id=\"Sync-Less-Win-More\"><a href=\"#Sync-Less-Win-More\" class=\"headerlink\" title=\"Sync Less, Win More\"></a>Sync Less, Win More</h4><p>优化缓存的关键在于区分数据是当下立即需要的还是稍后请求也无伤大雅的，比如，用户进行下拉刷新，显然需要马上向服务器请求数据。而后台进行的数据下载与上传，相比之下就不那么重要。</p>\n<p><img src=\"/img/160307_app_s4ep2/now_or_later.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Always-Poll-Just-Listen\"><a href=\"#Don’t-Always-Poll-Just-Listen\" class=\"headerlink\" title=\"Don’t Always Poll, Just Listen\"></a>Don’t Always Poll, Just Listen</h4><p>不要试图经常轮询Server请求新数据，这并没有什么卵用，要知道很多情况下数据在服务端根本就没有更新。</p>\n<p><img src=\"/img/160307_app_s4ep2/do_not_poll.png\" alt=\"\"></p>\n<p>使用诸如<a href=\"https://developers.google.com/cloud-messaging/\" target=\"_blank\" rel=\"noopener\">Google Cloud Messaging</a>的服务进行从Server发起的push —— What the hell is this?</p>\n<p>由于天朝的特殊性，GCM无法使用，因此诞生了诸如极光推送等一系列替代品，一些有能力的大厂干脆自己实现消息推送系统，可以参考微信这篇文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Android微信智能心跳方案</a></p>\n<p><img src=\"/img/160307_app_s4ep2/listen.png\" alt=\"\"></p>\n<p>如果不得不采用客户端轮询来做，考虑二进制退让算法</p>\n<p><img src=\"/img/160307_app_s4ep2/binary.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"因地制宜\"><a href=\"#因地制宜\" class=\"headerlink\" title=\"因地制宜\"></a>因地制宜</h4><p>下面这个听起来就有一些炫酷了：根据用户当前不同的行为模式采取不同的同步策略，比如用户在驾驶时、跑步时、睡觉时……</p>\n<p><img src=\"/img/160307_app_s4ep2/scenery.png\" alt=\"\"></p>\n<p>比如，当你监测到用户刚刚从8小时的睡眠中醒来并开启手机时，不妨马上进行一次同步。</p>\n<p>根据是否正在充电、是否连接wifi等配置信息，调节同步时间：</p>\n<p><img src=\"/img/160307_app_s4ep2/situations.png\" alt=\"\"></p>\n<p>然而，场景那么多，你要怎么办呢？</p>\n<p>幸运的是，你并不需要为此实现太多复杂的逻辑，参考<a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\" target=\"_blank\" rel=\"noopener\">GCM Network Manager</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s4ep1 Cachematters for networking","url":"https://lilei.pro/2016/03/07/Android-Performance-Patterns-s4ep1-Cachematters-for-networking/","content":"<blockquote>\n<p>You know what the fastest, most efficient piece of content for networking performance is? The one you never have to download.<br><a href=\"https://www.youtube.com/watch?v=7lxVqqWwTb0&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=11\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<hr>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7lxVqqWwTb0?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Reading-data-from-local-memory-v-s-Reading-data-from-network\"><a href=\"#Reading-data-from-local-memory-v-s-Reading-data-from-network\" class=\"headerlink\" title=\"Reading data from local memory v.s. Reading data from network\"></a>Reading data from local memory v.s. Reading data from network</h4><p><img src=\"/img/160307_app_s4ep1/local_vs_network.png\" alt=\"\"></p>\n<p>访问本地数据的速度要远远快于访问网络数据（废话！）。接下来，文章中会介绍一些本地缓存的策略与实现。</p>\n<h4 id=\"Enable-Http-Caching\"><a href=\"#Enable-Http-Caching\" class=\"headerlink\" title=\"Enable Http Caching\"></a>Enable Http Caching</h4><p>默认情况下，Http Cache在Android系统中是关闭的，需要使用<a href=\"http://developer.android.com/reference/android/net/http/HttpResponseCache.html\" target=\"_blank\" rel=\"noopener\">HttpResponseCache</a>手动开启，如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tFile httpCacheDir = <span class=\"keyword\">new</span> File(context.getCacheDir(), <span class=\"string\">\"http\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> httpCacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MB</span></span><br><span class=\"line\">\t\tHttpResponseCache.install(httpCacheDir, httpCacheSize);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\tLot.i(TAG, <span class=\"string\">\"Http response cache installation failed\"</span> + e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tHttpResponseCache cache = HttpResponseCache.installed();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tcache.flush();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做会为所有的Http请求提供缓存，不仅是自己代码中发出的，也包括所依赖外部jar包发出的请求。</p>\n<hr>\n<h4 id=\"Invalidation\"><a href=\"#Invalidation\" class=\"headerlink\" title=\"Invalidation\"></a>Invalidation</h4><p>Cache有两种最基本的过期的策略：空间（Cache空间不足时触发）和时间（Cache超过过期时间后触发）。</p>\n<p><img src=\"/img/160307_app_s4ep1/invalidation.png\" alt=\"\"></p>\n<p>在 Http 1.x 的header中，用<code>Cache-Control</code>来标示缓存策略。</p>\n<p><img src=\"/img/160307_app_s4ep1/cache_control_header.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"HttpResponseCache的限制\"><a href=\"#HttpResponseCache的限制\" class=\"headerlink\" title=\"HttpResponseCache的限制\"></a>HttpResponseCache的限制</h4><p>HttpResponseCache通过Server来控制所有Cache策略，这在大部分场景是没有问题的，毕竟Server知道它返回给Client的具体内容是什么（文字、图片、文件等等），然而，移动应用的特殊性使得它还需要更精细的控制。</p>\n<ul>\n<li>Server可能在Header中压根就没有为<code>Cache-Control</code>赋值</li>\n<li>移动设备的存储空间有限以至于无法保存Cache数据</li>\n<li>网络环境高延迟</li>\n</ul>\n<p><img src=\"/img/160307_app_s4ep1/constraint.png\" alt=\"\"></p>\n<p>因此，你需要自己定制一个Cache框架并引入Cache功能，这两件事不得不做：</p>\n<ol>\n<li>Write your own Disk Cache manager</li>\n<li>Use custom Caching Logic</li>\n</ol>\n<p>可以参照已有的<a href=\"https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html\" target=\"_blank\" rel=\"noopener\">DiskLruCache</a></p>\n<p>不同数据的各自属性通常要求各异的Cache策略，比如，文字提示语的过期时间与头像的过期时间是不同的。</p>\n<p><img src=\"/img/160307_app_s4ep1/different_cache_time.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Codes-amp-Tools\"><a href=\"#Codes-amp-Tools\" class=\"headerlink\" title=\"Codes &amp; Tools\"></a>Codes &amp; Tools</h4><p>一些优秀的网络请求框架</p>\n<ul>\n<li>Volly: <a href=\"https://developer.android.com/training/volley/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/volley/index.html</a></li>\n<li>OkHttp: <a href=\"http://square.github.io/okhttp\" target=\"_blank\" rel=\"noopener\">http://square.github.io/okhttp</a></li>\n<li>Picasso: <a href=\"http://square.github.io/picasso\" target=\"_blank\" rel=\"noopener\">http://square.github.io/picasso</a></li>\n</ul>\n<p>AndroidStudio提供了查看网络数据流量的<a href=\"http://developer.android.com/tools/debugging/ddms.html#network\" target=\"_blank\" rel=\"noopener\">Network Traffic Tool</a></p>\n<p><img src=\"/img/160307_app_s4ep1/network_traffic_tool.png\" alt=\"\"></p>\n<p>更专业的工具是AT&amp;T提供的<a href=\"https://developer.att.com/application-resource-optimizer\" target=\"_blank\" rel=\"noopener\">ARO tool</a></p>\n<p><img src=\"/img/160307_app_s4ep1/aro_tool.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"长宁国际体操中心游泳馆开放时间","url":"https://lilei.pro/2016/03/04/Changning-Swimming-Pool-Opening-Hours/","content":"<p>🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊</p>\n<hr>\n<blockquote>\n<p>性价比最高时段依旧为工作日6:30~8:30，水质好，人少，价格低<br>游泳馆网址：<a href=\"http://www.swim.sh.cn\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<p><img src=\"/img/160304_changning_swimming_pool/photo.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["大保健"]},{"title":"Android Performance Patterns - s5ep10 Profile GPU Rendering, M Update","url":"https://lilei.pro/2016/02/25/Android-Performance-Patterns-s5ep10-Profile-GPU-Rendering/","content":"<blockquote>\n<p>Season 5 的最后一期，Android M 中新增了GPU渲染分析工具<br>光头哥，我们下一季再见！<br>PS. 光头哥的大名是 Colt McAnlis<br><a href=\"https://www.youtube.com/watch?v=erGJw8WDV74&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=10\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/erGJw8WDV74?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Why-GPU-Profile-Tool\"><a href=\"#Why-GPU-Profile-Tool\" class=\"headerlink\" title=\"Why GPU Profile Tool\"></a>Why GPU Profile Tool</h4><p>用户在使用app时，并不关心你的代码内部使用了多么NB的算法、多么碉堡的框架，用户最直观的体验是——你的app有没有卡顿、会不会丢帧。同网站一样，app加载的时间越长，用户流失也就越严重。因此，找到画面卡顿的原因便格外重要。</p>\n<hr>\n<h4 id=\"GPU-Profiling-Tool-Before-M\"><a href=\"#GPU-Profiling-Tool-Before-M\" class=\"headerlink\" title=\"GPU Profiling Tool Before M\"></a>GPU Profiling Tool Before M</h4><p>在笔者的Meizu手机上（Android 5.0），可以在开发者选项中开启“GPU呈现模式分析”来查看CPU绘制情况。现在笔者打开微信朋友圈的一个链接（html5页面）</p>\n<p><img src=\"/img/160225_app_s5ep10/click_link.jpg\" alt=\"\"></p>\n<p>结合说明，可以初步判断那一条暴增的曲线是由于Process过程所致。</p>\n<p><img src=\"/img/160225_app_s5ep10/gpu_profiling.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Strongerrrrrrr\"><a href=\"#Strongerrrrrrr\" class=\"headerlink\" title=\"Strongerrrrrrr!\"></a>Strongerrrrrrr!</h4><p>Android M 为我们提供了更为强大的GPU渲染分析工具，可以细化到以下8个维度，注意到1、2、4也就是上一节图中的三个维度（Process、Execute、Update），它们保持了与历史相同的颜色！</p>\n<p><img src=\"/img/160225_app_s5ep10/eight_phases.png\" alt=\"\"></p>\n<p>下面我们着重分析一下另外的五项指标。</p>\n<hr>\n<h4 id=\"Sync-amp-Upload\"><a href=\"#Sync-amp-Upload\" class=\"headerlink\" title=\"Sync &amp; Upload\"></a>Sync &amp; Upload</h4><p><img src=\"/img/160225_app_s5ep10/sync_and_upload.png\" alt=\"\"></p>\n<ul>\n<li>这项指数衡量了bitmap被同步到GPU的耗时，越大的图像，数值越高，通常处理高像素的图片时会导致飙升。</li>\n<li>减少同时展示的图片数量，或者对图片进行预处理，降低图片尺寸可以有效降低数值。</li>\n</ul>\n<hr>\n<h4 id=\"Measure-Layout\"><a href=\"#Measure-Layout\" class=\"headerlink\" title=\"Measure / Layout\"></a>Measure / Layout</h4><p><img src=\"/img/160225_app_s5ep10/measure_layout.png\" alt=\"\"></p>\n<ul>\n<li>过高的指数，表明页面布局过于复杂（super complex view hierarchy）</li>\n<li>也可能是由于double taxation所致（关于double layout taxation请参阅<a href=\"https://www.youtube.com/watch?v=dB3_vgS-Uqo\" target=\"_blank\" rel=\"noopener\">Season 3 ep 8</a>）</li>\n<li>试着简化布局</li>\n</ul>\n<hr>\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p><img src=\"/img/160225_app_s5ep10/animation.png\" alt=\"\"></p>\n<ul>\n<li>若GPU在动画上的负载过高，去检查你所使用到的自定义动画</li>\n<li>谨慎使用 <a href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\" rel=\"noopener\"><strong>PropertyAnimation</strong></a></li>\n</ul>\n<hr>\n<h4 id=\"Input-Handling\"><a href=\"#Input-Handling\" class=\"headerlink\" title=\"Input Handling\"></a>Input Handling</h4><p><img src=\"/img/160225_app_s5ep10/input_handling.png\" alt=\"\"></p>\n<ul>\n<li>GPU消耗了多少时间用于处理用户输入</li>\n<li>或者说，在相应用户输入的callback中，GPU的消耗</li>\n<li>如果处理输入的逻辑过于复杂，使用<code>Worker Thread</code></li>\n</ul>\n<hr>\n<h4 id=\"Misc-Vsync-Delay\"><a href=\"#Misc-Vsync-Delay\" class=\"headerlink\" title=\"Misc / Vsync Delay\"></a>Misc / Vsync Delay</h4><p><img src=\"/img/160225_app_s5ep10/misc_vsync_delay.png\" alt=\"\"></p>\n<ul>\n<li>如果你从日志中看到诸如“misc vsync … skipping … frames”的信息，That’s this thing!</li>\n<li>发生在相邻两帧之间的事情，都可以归类于此</li>\n<li>使用<code>Worker Thread</code>来处理耗时操作，避免丢帧</li>\n</ul>\n<hr>\n<h4 id=\"A-Bigger-Bar\"><a href=\"#A-Bigger-Bar\" class=\"headerlink\" title=\"A Bigger Bar\"></a>A Bigger Bar</h4><p>上面提到了5个维度，加上之前的3个，一共是8个维度。要把这8个维度同时用柱状图展示出来可不是件容易的事，这对你的视力有着相当的要求。</p>\n<p>方便的是，GPU工具里贴心地适当扩宽加重了那些可能有问题的标示，你会看到一个更醒目的柱状图展示。</p>\n<p><img src=\"/img/160225_app_s5ep10/bigger_bar.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Bye-Bye-Colt-McAlnis\"><a href=\"#Bye-Bye-Colt-McAlnis\" class=\"headerlink\" title=\"Bye Bye! Colt McAlnis\"></a>Bye Bye! Colt McAlnis</h4><p>See you in Season 6!</p>\n<p><img src=\"/img/160225_app_s5ep10/thank_you.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep9 The Importance Of Thread Priority","url":"https://lilei.pro/2016/02/25/Android-Performance-Patterns-s5ep9-The-Importance-Of-Thread-Priority/","content":"<blockquote>\n<p>CPU同一时间只能处理有限数目的线程，赋予线程怎样的优先级，将决定其最终在CPU上得以执行的顺序<br>光头哥回归啦！读信的样子简直不要太萌！<br><a href=\"https://www.youtube.com/watch?v=NwFXVsM15Co&amp;index=9&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NwFXVsM15Co?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Thread-Scheduling\"><a href=\"#Thread-Scheduling\" class=\"headerlink\" title=\"Thread Scheduling\"></a>Thread Scheduling</h4><p>线程调度是现代计算机系统必不可少的功能，Android做为独特的移动系统，在线程调度上，还有一些它与众不同的特性。</p>\n<p>Android系统中对于线程优先级的考虑，还会包括以下方面：</p>\n<ul>\n<li>Activity生命周期</li>\n<li>是否可见</li>\n<li>Activity在前台还是运行</li>\n</ul>\n<hr>\n<h4 id=\"Visible-vs-Invisible\"><a href=\"#Visible-vs-Invisible\" class=\"headerlink\" title=\"Visible vs Invisible\"></a>Visible vs Invisible</h4><p>CPU时间的90%左右，都是用以处理界面展示中的线程，只有约10%留给了后台线程</p>\n<p><img src=\"/img/160225_app_s5ep9/foreground_vs_background.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"拼爹的线程\"><a href=\"#拼爹的线程\" class=\"headerlink\" title=\"拼爹的线程\"></a>拼爹的线程</h4><p>在线程的世界里，一样要拼爹——新创建的线程，其优先级与创建它的线程相同。</p>\n<p>也就是说，如果<code>UI Thread</code>创建了20个<code>Worker Thread</code>，那么这20个<code>Worker Thread</code>都具有相同的优先级，它们会平等竞争CPU时间。</p>\n<p><img src=\"/img/160225_app_s5ep9/same_priority.png\" alt=\"\"></p>\n<p>这其实是很不好的，我们知道哪些工作更重要，哪些工作相比于其它不那么重要，所以我们要主动设置线程优先级，让那些具有更高优先级的线程优先得到执行。</p>\n<hr>\n<h4 id=\"Priority\"><a href=\"#Priority\" class=\"headerlink\" title=\"Priority\"></a>Priority</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.os.Process.setThreadPriority(<span class=\"keyword\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的方法接受<code>-20~24</code>闭区间内所有的整数作为参数，数值越小，优先级越高。为甚么采用负数呢？数值越低，表示这个线程越没有耐心，情绪越暴躁，越急切希望得到执行。</p>\n<p><code>android.os.Process</code>中为我们定义了一些表示线程优先级的常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of application threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_DEFAULT = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * ***************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * ** Keep in sync with utils/threads.h **</span></span><br><span class=\"line\"><span class=\"comment\">     * ***************************************</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Lowest available thread priority.  Only for those who really, really</span></span><br><span class=\"line\"><span class=\"comment\">     * don't want to run if anything else is happening.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_LOWEST = <span class=\"number\">19</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority background threads.  This gives your thread a slightly</span></span><br><span class=\"line\"><span class=\"comment\">     * lower than normal priority, so that it will have less chance of impacting</span></span><br><span class=\"line\"><span class=\"comment\">     * the responsiveness of the user interface.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_BACKGROUND = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of threads that are currently running a user interface</span></span><br><span class=\"line\"><span class=\"comment\">     * that the user is interacting with.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority; the system will automatically adjust your</span></span><br><span class=\"line\"><span class=\"comment\">     * application threads as the user moves through the UI.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_FOREGROUND = -<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of system display threads, involved in updating</span></span><br><span class=\"line\"><span class=\"comment\">     * the user interface.  Applications can not</span></span><br><span class=\"line\"><span class=\"comment\">     * normally change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_DISPLAY = -<span class=\"number\">4</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of the most important display threads, for compositing</span></span><br><span class=\"line\"><span class=\"comment\">     * the screen and retrieving input events.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_URGENT_DISPLAY = -<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of audio threads.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_AUDIO = -<span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of the most important audio threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * Applications can not normally change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_URGENT_AUDIO = -<span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n<p>此外，还有两个常量用于提高／降低优先级，记住，负数越小，优先级越高（more favorable）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Minimum increment to make a priority more favorable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_MORE_FAVORABLE = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Minimum increment to make a priority less favorable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_LESS_FAVORABLE = +<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>有了上面的知识，你就可以在<code>UI Thread</code>启动<code>Worker Thread</code>时，通过<code>setPriority(THREAD_PRIORITY_DEFAULT + THREAD_PRIORITY_LESS_FAVORABLE * n)</code>的方式，酌情降低<code>Worker Thread</code>的优先级了。</p>\n<hr>\n<h4 id=\"That’s-How-We-Did-It\"><a href=\"#That’s-How-We-Did-It\" class=\"headerlink\" title=\"That’s How We Did It!\"></a>That’s How We Did It!</h4><p>还记得之前我们总是提到的 <strong>AsyncTask/HandlerThread/ThreadPool/IntentService</strong> 么？其中AsyncTask和IntentService已经为自动我们实现了“降低<code>Worker Thread</code>优先级”的功能，我们无需额外设置。而另外两种则没有这么周到，我们需要主动设置工作线程优先级。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep8 Threading And Loaders","url":"https://lilei.pro/2016/02/25/Android-Performance-Patterns-s5ep8-Threading-And-Loaders/","content":"<blockquote>\n<p>Let’s say you’ve got some 20 bitmaps being decoded on a worker thread. Well, what happens if your activity is destroyed before that work completes?<br>相比于本期的大叔，笔者更喜欢之前的光头哥<br><a href=\"https://www.youtube.com/watch?v=s4eAtMHU5gI&amp;index=8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/s4eAtMHU5gI?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"No-One-Writes-to-the-Colonel\"><a href=\"#No-One-Writes-to-the-Colonel\" class=\"headerlink\" title=\"No One Writes to the Colonel\"></a>No One Writes to the Colonel</h4><blockquote>\n<p>五十六年了，上校唯一做过的事情就是等待。</p>\n</blockquote>\n<p>我们知道，<code>Worker Thread</code>是在<code>UI Thread</code>之外用来处理耗时任务的线程，存在这样一种情况，当任务由<code>Worker Thread</code>执行完毕时，引发这项任务的Activity已经走完了<code>onDestroy</code>，这会产生什么样的后果呢？</p>\n<p>第一，Activity虽然结束了它的生命周期，可这个实例并没有从内存中释放——因为<code>Worker Thread</code>还拥有着Activity的reference，这会导致内存泄漏，如图1；第二，已经<code>onDestroy</code>过的Activity早已从屏幕上消失，无法响应任务执行后的返回，我们必须重新创建Activity2来处理任务返回后界面变化，如图2。</p>\n<p>图1<br><img src=\"/img/160225_app_s5ep8/activity_destroy.png\" alt=\"\"></p>\n<p>图2<br><img src=\"/img/160225_app_s5ep8/use_activity_2.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"You-Should-Use-Loaders\"><a href=\"#You-Should-Use-Loaders\" class=\"headerlink\" title=\"You Should Use Loaders\"></a>You Should Use Loaders</h4><p>针对上面的场景，建议使用<code>Loader</code>。设计合理的Loader可以避免内存泄漏、正确处理UI事件、并且不需要重复执行。</p>\n<p><a href=\"http://developer.android.com/reference/android/content/AsyncTaskLoader.html?utm_campaign=app_series_asyncsamplecode_021816&amp;utm_source=gdev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\"><strong>LoaderManager</strong></a>是用来管理Loader的接口，借助前面链接中例子不难理解Loader运行的机制：获取LoaderManager实例－初始化Loader－实现LoaderCallbacks接口处理回调。</p>\n<p>LoaderManager可以缓存任务执行结果，这样当Activity销毁并重建时，就不需要重复执行前面已经执行过的任务了。</p>\n<p><img src=\"/img/160225_app_s5ep8/cache_result.png\" alt=\"\"></p>\n<p>如果一个Activity被终止后不会重建，我们就应该在LoaderManager的<code>onLoaderReset</code>中处理这种情形，释放引用。</p>\n<p><img src=\"/img/160225_app_s5ep8/report_stop.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"The-Downside-of-Loaders\"><a href=\"#The-Downside-of-Loaders\" class=\"headerlink\" title=\"The Downside of Loaders\"></a>The Downside of Loaders</h4><p>集成较为复杂，代码量大。</p>\n<p>参考下面<a href=\"http://developer.android.com/reference/android/content/AsyncTaskLoader.html?utm_campaign=app_series_asyncsamplecode_021816&amp;utm_source=gdev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\">Reference</a>给出的例子，实现了Fragment的ListView从联系人ContentProvider中通过CursorLoader获取数据的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CursorLoaderListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">OnQueryTextListener</span>, <span class=\"title\">OnCloseListener</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">LoaderManager</span>.<span class=\"title\">LoaderCallbacks</span>&lt;<span class=\"title\">Cursor</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the Adapter being used to display the list's data.</span></span><br><span class=\"line\">    SimpleCursorAdapter mAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The SearchView for doing filtering.</span></span><br><span class=\"line\">    SearchView mSearchView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If non-null, this is the current filter the user has provided.</span></span><br><span class=\"line\">    String mCurFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Give some text to display if there is no data.  In a real</span></span><br><span class=\"line\">        <span class=\"comment\">// application this would come from a resource.</span></span><br><span class=\"line\">        setEmptyText(<span class=\"string\">\"No phone numbers\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We have a menu item to show in action bar.</span></span><br><span class=\"line\">        setHasOptionsMenu(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create an empty adapter we will use to display the loaded data.</span></span><br><span class=\"line\">        mAdapter = <span class=\"keyword\">new</span> SimpleCursorAdapter(getActivity(),</span><br><span class=\"line\">                android.R.layout.simple_list_item_2, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; android.R.id.text1, android.R.id.text2 &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        setListAdapter(mAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Start out with a progress indicator.</span></span><br><span class=\"line\">        setListShown(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare the loader.  Either re-connect with an existing one,</span></span><br><span class=\"line\">        <span class=\"comment\">// or start a new one.</span></span><br><span class=\"line\">        getLoaderManager().initLoader(<span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySearchView</span> <span class=\"keyword\">extends</span> <span class=\"title\">SearchView</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MySearchView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The normal SearchView doesn't clear its search text when</span></span><br><span class=\"line\">        <span class=\"comment\">// collapsed, so we will do this for it.</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActionViewCollapsed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            setQuery(<span class=\"string\">\"\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onActionViewCollapsed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Place an action bar item for searching.</span></span><br><span class=\"line\">        MenuItem item = menu.add(<span class=\"string\">\"Search\"</span>);</span><br><span class=\"line\">        item.setIcon(android.R.drawable.ic_menu_search);</span><br><span class=\"line\">        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM</span><br><span class=\"line\">                | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);</span><br><span class=\"line\">        mSearchView = <span class=\"keyword\">new</span> MySearchView(getActivity());</span><br><span class=\"line\">        mSearchView.setOnQueryTextListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mSearchView.setOnCloseListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mSearchView.setIconifiedByDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        item.setActionView(mSearchView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onQueryTextChange</span><span class=\"params\">(String newText)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Called when the action bar search text has changed.  Update</span></span><br><span class=\"line\">        <span class=\"comment\">// the search filter, and restart the loader to do a new query</span></span><br><span class=\"line\">        <span class=\"comment\">// with this filter.</span></span><br><span class=\"line\">        String newFilter = !TextUtils.isEmpty(newText) ? newText : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Don't do anything if the filter hasn't actually changed.</span></span><br><span class=\"line\">        <span class=\"comment\">// Prevents restarting the loader when restoring state.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter == <span class=\"keyword\">null</span> &amp;&amp; newFilter == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter != <span class=\"keyword\">null</span> &amp;&amp; mCurFilter.equals(newFilter)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mCurFilter = newFilter;</span><br><span class=\"line\">        getLoaderManager().restartLoader(<span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onQueryTextSubmit</span><span class=\"params\">(String query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Don't care about this.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(mSearchView.getQuery())) &#123;</span><br><span class=\"line\">            mSearchView.setQuery(<span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView l, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Insert desired behavior here.</span></span><br><span class=\"line\">        Log.i(<span class=\"string\">\"FragmentComplexList\"</span>, <span class=\"string\">\"Item clicked: \"</span> + id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These are the Contacts rows that we will retrieve.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CONTACTS_SUMMARY_PROJECTION = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">        Contacts._ID,</span><br><span class=\"line\">        Contacts.DISPLAY_NAME,</span><br><span class=\"line\">        Contacts.CONTACT_STATUS,</span><br><span class=\"line\">        Contacts.CONTACT_PRESENCE,</span><br><span class=\"line\">        Contacts.PHOTO_ID,</span><br><span class=\"line\">        Contacts.LOOKUP_KEY,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Loader&lt;Cursor&gt; <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is called when a new Loader needs to be created.  This</span></span><br><span class=\"line\">        <span class=\"comment\">// sample only has one Loader, so we don't care about the ID.</span></span><br><span class=\"line\">        <span class=\"comment\">// First, pick the base URI to use depending on whether we are</span></span><br><span class=\"line\">        <span class=\"comment\">// currently filtering.</span></span><br><span class=\"line\">        Uri baseUri;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,</span><br><span class=\"line\">                    Uri.encode(mCurFilter));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            baseUri = Contacts.CONTENT_URI;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now create and return a CursorLoader that will take care of</span></span><br><span class=\"line\">        <span class=\"comment\">// creating a Cursor for the data being displayed.</span></span><br><span class=\"line\">        String select = <span class=\"string\">\"((\"</span> + Contacts.DISPLAY_NAME + <span class=\"string\">\" NOTNULL) AND (\"</span></span><br><span class=\"line\">                + Contacts.HAS_PHONE_NUMBER + <span class=\"string\">\"=1) AND (\"</span></span><br><span class=\"line\">                + Contacts.DISPLAY_NAME + <span class=\"string\">\" != '' ))\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CursorLoader(getActivity(), baseUri,</span><br><span class=\"line\">                CONTACTS_SUMMARY_PROJECTION, select, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                Contacts.DISPLAY_NAME + <span class=\"string\">\" COLLATE LOCALIZED ASC\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Swap the new cursor in.  (The framework will take care of closing the</span></span><br><span class=\"line\">        <span class=\"comment\">// old cursor once we return.)</span></span><br><span class=\"line\">        mAdapter.swapCursor(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The list should now be shown.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isResumed()) &#123;</span><br><span class=\"line\">            setListShown(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            setListShownNoAnimation(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is called when the last Cursor provided to onLoadFinished()</span></span><br><span class=\"line\">        <span class=\"comment\">// above is about to be closed.  We need to make sure we are no</span></span><br><span class=\"line\">        <span class=\"comment\">// longer using it.</span></span><br><span class=\"line\">        mAdapter.swapCursor(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep7 The Zen Of IntentService","url":"https://lilei.pro/2016/02/24/Android-Performance-Patterns-s5ep7-The-Zen-Of-IntentService/","content":"<blockquote>\n<p>Season 5 ep 7，IntentService之禅。<br>见山是山，见水是水；见山不是山，见水不是水；见山仍是山，见水仍是水。<br><a href=\"https://www.youtube.com/watch?v=9FweabuBi1U&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=7\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9FweabuBi1U?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Work-With-An-Intent\"><a href=\"#Work-With-An-Intent\" class=\"headerlink\" title=\"Work With An Intent\"></a>Work With An Intent</h4><p>在Android系统中我们经常会用Intent来传递消息，如果一个Intent需要花很长时间来处理，在上过了前面几节课之后，你一定已经掌握了如何应对这种task的办法——在新的<code>Worker Thread</code>中解决这个任务。</p>\n<p><img src=\"/img/160224_app_s5ep7/large_intent_work.png\" alt=\"\"></p>\n<p>基于Season 5前面几节所讲的知识，你可能会选用<strong>AsyncTask</strong>或者<strong>HandlerThread</strong>来完成这个工作，然而，这两个并非最好的选择，因为：</p>\n<ul>\n<li>AsyncTask通常处理UI交互方面的事情，当你的Activity正处于后台（没有任何UI元素在渲染中）时，AsyncTask并不能完成它的任务</li>\n<li>HandlerThread倒是可以脱离UI运行，不过因为它是一个独立的Thread，当没有Intent过来时，这个Thread仍然会维持它的生命活动，意味着，空闲时占用资源。（一条Thread会占用65k+的内存）</li>\n</ul>\n<hr>\n<h4 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h4><p>这是就要隆重推出<a href=\"http://developer.android.com/reference/android/app/IntentService.html\" target=\"_blank\" rel=\"noopener\"><strong>IntentService</strong></a>了。IntentService更像是Service与HandlerThread的合体（a hybrid between Service class and HandlerThread），它继承自Service，在运行时会创建HandlerThread，来处理接收到的Intent请求。</p>\n<p><img src=\"/img/160224_app_s5ep7/intent_service.png\" alt=\"\"></p>\n<p>因为IntentService本质上是一个Service，你可以通过它进行一些Service既有的功能，如使用alarm做定时／循环操作。</p>\n<hr>\n<h4 id=\"Be-Careful-With-IntentService\"><a href=\"#Be-Careful-With-IntentService\" class=\"headerlink\" title=\"Be Careful With IntentService\"></a>Be Careful With IntentService</h4><p>在享受IntentService所带来便利的时候，也有一些注意事项。</p>\n<p>首先，IntentService所有任务是在同一个队列中按顺序处理的，同AsyncTask一样，如果排在前面的一个任务极其耗时，会使得后面任务迟迟得不到执行，这是就要考虑HandlerThread等其他解决方案了。</p>\n<p><img src=\"/img/160224_app_s5ep7/one_work_queue.png\" alt=\"\"></p>\n<p>其次，IntentService使用类似Broadcast Receiver的机制将任务执行结果返回给Activity，这在运行结果的正确性上并没有任何问题。然而对于简单的结果返回操作，是不需要使用如此重量级的Broadcast Receiver来进行的。你可以改用<code>runOnUIThread</code>来降低资源消耗。</p>\n<p><img src=\"/img/160224_app_s5ep7/broadcast_receiver.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Other-Benifits-of-IntentService\"><a href=\"#Other-Benifits-of-IntentService\" class=\"headerlink\" title=\"Other Benifits of IntentService\"></a>Other Benifits of IntentService</h4><p>使用IntentService还有一个附加的好处——它会使你的app在被切换到后台时，不那么容易被杀死。（相比于那些在后台运行且没有Service的app而言）</p>\n<p><img src=\"/img/160224_app_s5ep7/not_killed.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep6 Swimming in ThreadPools","url":"https://lilei.pro/2016/02/24/Android-Performance-Patterns-s5ep6-Swimming-In-ThreadPools/","content":"<blockquote>\n<p>Season 5 ep 6，关于线程池你应该知道的事<br><a href=\"https://www.youtube.com/watch?v=uCmHoEY1iTM&amp;index=6&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uCmHoEY1iTM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"One-Thread-One-Thing\"><a href=\"#One-Thread-One-Thing\" class=\"headerlink\" title=\"One Thread, One Thing\"></a>One Thread, One Thing</h4><blockquote>\n<p>且说孔明自引一军屯于五丈原，累令人搦战，魏兵只不出。孔明乃取巾帼并妇人缟素之服，盛于大盒之内，修书一封，遣人送至魏寨。诸将不敢隐蔽，引来使入见司马懿。懿对众启盒视之，内有巾帼妇人之衣，并书一封。懿拆视其书，略曰：“仲达既为大将，统领中原之众，不思披坚执锐，以决雌雄，乃甘窟守土巢，谨避刀箭，与妇人又何异哉！今遣人送巾帼素衣至，如不出战，可再拜而受之。倘耻心未泯，犹有男子胸襟，早与批回，依期赴敌。”司马懿看毕，心中大怒，乃佯笑曰：“孔明视我为妇人耶！”即受之，令重待来使。懿问曰：“孔明寝食及事之烦简若何？”使者曰：“丞相<strong>夙兴夜寐，罚二十以上皆亲览焉。</strong>所啖之食，日不过数升。”懿顾谓诸将曰：“<strong>孔明食少事烦，其能久乎？</strong>” ——《三国演义》第一百十三回  上方谷司马受困 五丈原诸葛禳星</p>\n</blockquote>\n<p>论智计谋略，诸葛亮要胜过司马懿，然而，由于丞相不论巨细事必躬亲，只落得星落五丈原的悲惨结局。可见，人的精力是有限的，不应当把所有的任务都压在同一个人头上。在计算机科学中，这一理论同样适用。</p>\n<p>对于线程，有专门处理音频的Audio Thread，有响应IO的IO Thread，还有负责网络事务的Networking Thread，这些都是良好的编程典范。</p>\n<p>然而，存在这样的情况：当某一系列的任务数量实在太多，已经超过了单个线程所能承受的极限。这时我们应当怎么做？如果工作线程有且只能由一个，就像诸葛丞相一样不得不亲力亲为，那可就GG了。不必担心，新时代的计算机科学已经让我们习得了秘-影分身之术。</p>\n<p>看一看下面这个场景，页面里需要展示40张图片，每张图片的解码消耗4ms时间，如果只有单一线程进行操作，总共需要用掉160ms。这显然是难以接受的。</p>\n<p>如果我们用10条线程并行计算，可以把时间压缩到16ms。</p>\n<p><img src=\"/img/160224_app_s5ep6/parallel.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Thread-Pool-Executor\"><a href=\"#Thread-Pool-Executor\" class=\"headerlink\" title=\"Thread Pool Executor\"></a>Thread Pool Executor</h4><p>有了并发处理这一个思路，便可以借助于JAVA提供的强力工具<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html\" target=\"_blank\" rel=\"noopener\"><strong>ThreadPoolExecutor</strong></a>来执行任务了。你只需要声明需要的线程数，并且把拆分好的Task传递给ThreadPoolExecutor，ThreadPoolExecutor自身会处理任务分配、线程调度、线程回收等操作。</p>\n<p><img src=\"/img/160224_app_s5ep6/thread_pool_executor.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"The-More-The-Better\"><a href=\"#The-More-The-Better\" class=\"headerlink\" title=\"The More, The Better?\"></a>The More, The Better?</h4><blockquote>\n<p>Thread is evil</p>\n</blockquote>\n<p>并发的线程数并非越多越好，首先，一台主机能够开启的线程数是有上限的；其次，线程之间切换本身有代价（线程同步、锁与互斥、环境准备等等）；再次，跟CPU数有关，CPU越多，最大性能下可并发线程数越多。</p>\n<p>最佳线程数要在实践中通过压测等手段获知。通常我们开发中控制并行线程数=CPU数即可。</p>\n<p><img src=\"/img/160224_app_s5ep6/thread_is_evil.png\" alt=\"\"></p>\n<p>每条线程至少占用<code>64k</code>的内存</p>\n<p><img src=\"/img/160224_app_s5ep6/64k.png\" alt=\"\"></p>\n<p><code>ThreadPoolExecutor</code>的构造过程中，允许我们控制初始线程数、最大线程数。需要注意的是，通过<code>Runtime.getRuntime().availableProcessors()</code>获取到的内核数也许会小于真实CPU数——出于节约电量等考虑，Android系统会让某些CPU在空闲时处于休眠状态，这些CPU不会被计数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NUM_OF_CORES = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">mDecodeThreadPool = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">\t\t\t\tNUM_OF_CORES &gt;&gt; <span class=\"number\">1</span>, <span class=\"comment\">// initial pool size</span></span><br><span class=\"line\">\t\t\t\tNUM_OF_CORES, <span class=\"comment\">// max pool size</span></span><br><span class=\"line\">\t\t\t\tKEEP_ALIVE_TIME, <span class=\"comment\">// keep alive time</span></span><br><span class=\"line\">\t\t\t\tKEEP_ALIVE_TIME_UNIT, <span class=\"comment\">// keep alive units (seconds etc)</span></span><br><span class=\"line\">\t\t\t\tmDecodeTaskQueue);</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"For-Power-Users-Like-U\"><a href=\"#For-Power-Users-Like-U\" class=\"headerlink\" title=\"For Power Users Like U\"></a>For Power Users Like U</h4><p><a href=\"http://developer.android.com/guide/topics/renderscript/compute.html\" target=\"_blank\" rel=\"noopener\"><strong>RenderScript</strong></a>是专门用来进行大量并行计算的工具，当你有这方面的需求时，不妨尝试一下。</p>\n<p><img src=\"/img/160224_app_s5ep6/renderscript.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Use-Systrace-to-Analyze\"><a href=\"#Use-Systrace-to-Analyze\" class=\"headerlink\" title=\"Use Systrace to Analyze\"></a>Use Systrace to Analyze</h4><p>用以分析线程、内存的Systrace工具在前文已经介绍过，这里不再赘述。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep5 Getting A HandlerThread","url":"https://lilei.pro/2016/02/24/Android-Performance-Patterns-s5ep5-Getting-A-HandlerThread/","content":"<blockquote>\n<p>Season5 ep5的主题是HandlerThread<br><a href=\"https://www.youtube.com/watch?v=adPLIAnx9og&amp;index=5&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/adPLIAnx9og?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"A-Case-–-Camera-Preview\"><a href=\"#A-Case-–-Camera-Preview\" class=\"headerlink\" title=\"A Case – Camera Preview\"></a>A Case – Camera Preview</h4><p>在大部分场景下，AsyncTask已经可以满足我们的功能需求。不过，AsyncTask并不是对于各种场景全都适用的。对于特别耗时的操作，如照相机的预览图绘制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreviewFrame</span> <span class=\"params\">(<span class=\"keyword\">byte</span>[] data, Camera camera)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160224_app_s5ep5/camera_preview.png\" alt=\"\"></p>\n<p><code>onPreviewFrame</code>放在主线程中执行的话，会因为大量时间用于计算而产生丢帧，方案一pass！</p>\n<p><img src=\"/img/160224_app_s5ep5/no_in_main_thread.png\" alt=\"\"></p>\n<p>放在AsyncTask中执行的话，因为自身的耗时特别长，导致后续任务始终得不到执行，方案二pass！</p>\n<p><img src=\"/img/160224_app_s5ep5/no_in_asynctask.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h4><p>基于上面的考虑，我们需要有这样一个独立于主线程、可以执行冗长任务的机制，来完成照相机预览图的获取。</p>\n<p>让我们来认识一下<a href=\"http://developer.android.com/reference/android/os/HandlerThread.html\" target=\"_blank\" rel=\"noopener\"><strong>HandlerThread</strong></a>。<code>HandlerThread</code>继承自<code>java.lang.Thread</code>，可以通过<code>getLooper()</code>的方法来获取某个<code>HandlerThread</code>的Looper，拿到Looper之后，就可以通过它创建一个Handler，进而用这个Handler处理预览图绘制这样的工作了。</p>\n<p><img src=\"/img/160224_app_s5ep5/handler_thread.png\" alt=\"\"></p>\n<p>demo见下面的代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerThread handlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"photo preview\"</span>);</span><br><span class=\"line\">handlerThread.start();</span><br><span class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler(handlerThread.getLooper());</span><br><span class=\"line\">handler.sendMessage(Handler.obtainMessage(<span class=\"number\">0</span>)); <span class=\"comment\">// 在handleMessage方法中绘制预览图</span></span><br></pre></td></tr></table></figure>\n<p>当计算完成后，就可以通过<code>Activity.runOnUIThread(Runnable r)</code>来更新预览图了。</p>\n<p><img src=\"/img/160224_app_s5ep5/run_on_ui_thread.png\" alt=\"\"></p>\n<p><code>HandlerThread</code>不仅可以处理冗长的触发UI事件，也可以用它来做UI无关的事情。</p>\n<h4 id=\"Priority\"><a href=\"#Priority\" class=\"headerlink\" title=\"Priority\"></a>Priority</h4><p>创建<code>HandlerThread</code>时，记得根据实际需求赋予它适当的优先级，这会使cpu为它分配合适的执行顺序。</p>\n<p><img src=\"/img/160224_app_s5ep5/priority.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"你好哇，汤圆儿！","url":"https://lilei.pro/2016/02/23/Hello-TangYuan/","content":"<hr>\n<p><img src=\"/img/160223_hello_tangyuan/cup.jpg\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/160223_hello_tangyuan/plate.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["槑"]},{"title":"Android Performance Patterns - s5ep4 Good AsyncTask Hunting","url":"https://lilei.pro/2016/02/23/Android-Performance-Patterns-s5ep4-Good-AsyncTask-Hunting/","content":"<blockquote>\n<p>本节介绍<a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">AsyncTask</a>的使用方法与风险<br><a href=\"https://www.youtube.com/watch?v=jtlRNNhane0&amp;index=67&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jtlRNNhane0?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"AsyncTask-Basics\"><a href=\"#AsyncTask-Basics\" class=\"headerlink\" title=\"AsyncTask Basics\"></a>AsyncTask Basics</h4><p><a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">AsyncTask</a>是一把双刃剑，用的好了无往不利，用得不好则伤人伤己。</p>\n<p>考虑下面这种场景，有一个非常耗时的操作需要进行，我们在<code>UI Thread</code>之外启动了一个<code>Worker Thread</code>，当<code>Worker Thread</code>完成它的工作时，会把计算结果返回给<code>UI Thread</code>。</p>\n<p><img src=\"/img/160223_app_s5ep4/worker_thread.png\" alt=\"\"></p>\n<p>由于这种应用场景太常见了，Android为我们提供了<code>AsyncTask</code>这一机制。<code>AsyncTask</code>有三个重要的函数。</p>\n<ul>\n<li>onPreExecute()，在<code>UI Thread</code>中执行，准备Task</li>\n<li>doInBackground()，在<code>Worker Thread</code>中执行复杂的任务</li>\n<li>onPostExecute()，在<code>UI Thread</code>中执行，处理任务执行结果</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep4/async_task_func.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"特别说明！onPreExecute并不保证在UI线程中执行！\"><a href=\"#特别说明！onPreExecute并不保证在UI线程中执行！\" class=\"headerlink\" title=\"特别说明！onPreExecute并不保证在UI线程中执行！\"></a>特别说明！<code>onPreExecute</code>并不保证在UI线程中执行！</h4><p>虽然<a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">官方API文档</a>中的说明写到<code>AsyncTask</code>“必须在UI线程中执行”，但Framework底层实现中并没有保证这一机制</p>\n<blockquote>\n<p>The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN.</p>\n</blockquote>\n<p>换句话说，“保证<code>onPreExecute()</code>在UI线程中执行”是一个编程规范，而并非强制要求。相比之下，<code>onPostExecue()</code>一定是在UI线程中执行的，因为它是用的是mainLooper。</p>\n<p>AsyncTask.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">       Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</span><br><span class=\"line\">       message.sendToTarget();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span> (AsyncTask.class) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               sHandler = <span class=\"keyword\">new</span> InternalHandler();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> sHandler;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InternalHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>(Looper.getMainLooper());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">           AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> MESSAGE_POST_RESULT:</span><br><span class=\"line\">                   <span class=\"comment\">// There is only one result</span></span><br><span class=\"line\">                   result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> MESSAGE_POST_PROGRESS:</span><br><span class=\"line\">                   result.mTask.onProgressUpdate(result.mData);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>关于上面这一点，可以参考这个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = <span class=\"string\">\"mainactivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    View titleView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        initViews();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                MyAsyncTask task = <span class=\"keyword\">new</span> MyAsyncTask();</span><br><span class=\"line\">                task.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        titleView = findViewById(R.id.title);</span><br><span class=\"line\">        titleView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                toast(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toast</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, s, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onPreExecute\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Object[] values)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onProgressUpdate\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(values);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onPostExecute\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doInBackground</span><span class=\"params\">(Object[] params)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"doInBackGround\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">checkRunningInMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, methodName + <span class=\"string\">\" is running in UI Thread? \"</span> + (Looper.myLooper() != <span class=\"keyword\">null</span> &amp;&amp; Looper.getMainLooper() == Looper.myLooper()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子中有一些无关代码（titleView），不过不影响阅读。</p>\n<p>日志输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">02-29 20:29:06.440 13212-13239/com.leili.geeker D/mainactivity: onPreExecute is running in UI Thread? false</span><br><span class=\"line\">02-29 20:29:06.443 13212-13241/com.leili.geeker D/mainactivity: doInBackGround is running in UI Thread? false</span><br><span class=\"line\">02-29 20:29:06.850 13212-13212/com.leili.geeker D/mainactivity: onPostExecute is running in UI Thread? true</span><br></pre></td></tr></table></figure>\n<p>印证了<code>onPreExecute()</code>并不保证在UI线程中执行。</p>\n<hr>\n<h4 id=\"AsyncTask-May-Get-You-Into-A-Trouble\"><a href=\"#AsyncTask-May-Get-You-Into-A-Trouble\" class=\"headerlink\" title=\"AsyncTask May Get You Into A Trouble\"></a>AsyncTask May Get You Into A Trouble</h4><p>有了上面三个函数，似乎AsyncTask用起来并没有什么困难。然而，如果使用不当，AsyncTask会产生很多匪夷所思的问题。</p>\n<p>首先，AsyncTask处理的所有Task，都是放在同一个队列中依次进行的。这意味着，如果前面的Task相当耗时，会使得它后面的Task在很久之后才得以执行。在你处理long running task时应给予高度关注。</p>\n<p><img src=\"/img/160223_app_s5ep4/serial.png\" alt=\"\"></p>\n<p>实际上，AsyncTask提供了一个用来并行执行Task的方法<code>executeOnExecutor</code>，然而光头哥建议，当你足够理解这个方法时，你就会觉得还是不用为好。</p>\n<p><img src=\"/img/160223_app_s5ep4/execute_on_executor.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"AsyncTask-Canceling\"><a href=\"#AsyncTask-Canceling\" class=\"headerlink\" title=\"AsyncTask Canceling\"></a>AsyncTask Canceling</h4><p>AsyncTask在执行之前／执行过程中，是可以被Cancel掉的。参数<code>mayInterruptIfRunning</code>决定了是否允许在执行过程中被中断。如果一项任务执行了<code>cacel</code>方法，那么在<code>doInBackground</code>后被调起的将不再是<code>onPostExecute</code>，而是<code>onCancel</code>，同样是在<code>UI Thread</code>中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Attempts to cancel execution of this task. This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling this method will result in onCancelled(Object) being invoked on the UI thread after doInBackground(Object[]) returns. Calling this method guarantees that onPostExecute(Object) is never invoked. After invoking this method, you should check the value returned by isCancelled() periodically from doInBackground(Object[]) to finish the task as early as possible.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span> <span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>如果你的Task在设计时，考虑了cancel的情况，那么你还需要额外做两件事。</p>\n<ol>\n<li>Check a “canceled” flag regularly</li>\n<li>Report work results invalid</li>\n</ol>\n<p>对于<code>1</code>，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doInBackground(..) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Doing some stuff</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isCanceled()) &#123;..&#125; <span class=\"comment\">// Oh noez, we done, clean up</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i &lt; obj.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isCanceled()) &#123;..&#125; <span class=\"comment\">// Oh noez, we done, clean up</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于<code>2</code>，当我们知道被cancel的task会调用<code>onCancel</code>方法时，可以在<code>onCancel</code>中做一些诸如更新UI、清理内存的事情。</p>\n<p><img src=\"/img/160223_app_s5ep4/on_cancel.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep3 Memory & Threading","url":"https://lilei.pro/2016/02/23/Android-Performance-Patterns-s5ep3-Memory-And-Threading/","content":"<blockquote>\n<p>Season5 ep3 主要介绍了Android中使用多线程可能导致的风险——内存泄漏<br><a href=\"https://www.youtube.com/watch?v=tBHPmQQNiS8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=66\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tBHPmQQNiS8?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Memory-Contention-Problems\"><a href=\"#Memory-Contention-Problems\" class=\"headerlink\" title=\"Memory Contention Problems\"></a>Memory Contention Problems</h4><p>内存问题的产生，是由于两个线程操作了同一块内存，由于两者执行的先后顺序未知，导致运行结果不可预测。</p>\n<p>用光头哥的话说（给光头哥的幽默感点赞）</p>\n<blockquote>\n<p>Memory contention problems with read-write access order, ABA problems, rips in the fabric of space-time…</p>\n</blockquote>\n<p><img src=\"/img/160223_app_s5ep3/memory_problem.png\" alt=\"\"></p>\n<p>怎样解决上述问题呢？<strong>加锁</strong>是一个通用的方法——不过这一点要是扩展起来讲，可说来话长了。</p>\n<hr>\n<h4 id=\"Memory-Problems-in-Android\"><a href=\"#Memory-Problems-in-Android\" class=\"headerlink\" title=\"Memory Problems in Android\"></a>Memory Problems in Android</h4><p>记住一点：Android中的UI对象不！是！线！程！安！全！的！（not thread-safe）！所有UI对象的生命周期都在UI线程里进行，在其它线程中维护的UI对象引用，很可能正处于一个invalid的状态。</p>\n<p><img src=\"/img/160223_app_s5ep3/invalid_button.png\" alt=\"\"></p>\n<p>譬如，在<code>Worker Thread</code>中持有一个View的引用，而这个引用实际上已经在<code>UI Thread</code>中结束了它的生命周期，从<code>view hierarchy</code>里面被移除掉了。然而，<code>Worker Thread</code>却傻傻地对此一无所知，接下来对这个View的一切操作都将是徒劳。</p>\n<p><img src=\"/img/160223_app_s5ep3/removed_view.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Keep-Activity-References\"><a href=\"#Don’t-Keep-Activity-References\" class=\"headerlink\" title=\"Don’t Keep Activity References\"></a>Don’t Keep Activity References</h4><p><code>Worker Thread</code>中是不应该持有Activity引用的，这会导致Activity无法正常回收，进而产生内存泄漏。在Android中，当我们不可避免地用到多线程时，这个问题的风险被放大了。当在<code>Worker Thread</code>中持有Activity引用时，除非<code>Worker Thread</code>完成运算（通常这是一项非常耗时的操作），否则Activity的实例不会真正被释放。</p>\n<p><img src=\"/img/160223_app_s5ep3/activity_still_alive.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Implicit-Reference-of-Activity\"><a href=\"#Implicit-Reference-of-Activity\" class=\"headerlink\" title=\"Implicit Reference of Activity\"></a>Implicit Reference of Activity</h4><p>除了上文提到的显式引用（explicit reference），还应该当心内部类导致的隐式引用（implicit reference）。Android为我们提供了解决方案——WeakReference &amp; static 关键字。</p>\n<p><img src=\"/img/160223_app_s5ep3/implicit_reference.png\" alt=\"\"></p>\n<p>上述场景是可能导致应用程序crash的一个原因——AsyncTask持有一个Activity的引用，而这个Activity实际上已经处于invalid状态时（例如，执行过onDestroy()），AsyncTask却对此一无所知，当AsyncTask执行完它所运行的任务，试图操作Activity的界面时，这个Activity实际上并不可用。这就导致了下面的糟糕场景——</p>\n<p><img src=\"/img/160223_app_s5ep3/application_stop.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Hold-References\"><a href=\"#Don’t-Hold-References\" class=\"headerlink\" title=\"Don’t Hold References\"></a>Don’t Hold References</h4><p>不要试图在UI线程外保存任何UI元素的引用！！！</p>\n<p><img src=\"/img/160223_app_s5ep3/dont_hold_references.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How-We-Do\"><a href=\"#How-We-Do\" class=\"headerlink\" title=\"How We Do?\"></a>How We Do?</h4><p>我们要遵守的唯一准则是：<strong>所有UI操作，都在UI线程里进行。</strong></p>\n<p><code>Worker Thread</code>可以通过callback、intent等任意进程间通信方法来告诉UI线程——我需要你帮我变更一下界面。</p>\n<p><img src=\"/img/160223_app_s5ep3/work_thread_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tool-in-Android-Studio-2-0\"><a href=\"#Tool-in-Android-Studio-2-0\" class=\"headerlink\" title=\"Tool in Android Studio 2.0\"></a>Tool in Android Studio 2.0</h4><p>如果你想更深入地了解运行时Thread&amp;Memory的情况，请使用Android Studio 2.0中提供的有力工具。</p>\n<p><img src=\"/img/160223_app_s5ep3/tool.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep2 Understanding Android Threading","url":"https://lilei.pro/2016/02/23/Android-Performance-Patterns-s5ep2-Understanding-Android-Threading/","content":"<blockquote>\n<p>ep2讲解了将Thread原型扩展为HandlerThread的原理与实践。<br><a href=\"https://www.youtube.com/watch?v=0Z5MZ0jL2BM&amp;index=65&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0Z5MZ0jL2BM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"大叔的帽衫造型很有范儿啊！！！\"><a href=\"#大叔的帽衫造型很有范儿啊！！！\" class=\"headerlink\" title=\"大叔的帽衫造型很有范儿啊！！！\"></a>大叔的帽衫造型很有范儿啊！！！</h4><p><img src=\"/img/160223_app_s5ep2/uncle.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Build-Worker-Thread\"><a href=\"#Build-Worker-Thread\" class=\"headerlink\" title=\"Build Worker Thread\"></a>Build Worker Thread</h4><p>一个Thread，从本质上讲，就是完成了一个“接受任务－执行任务－完成任务”的过程</p>\n<p><img src=\"/img/160223_app_s5ep2/thread_basic_work.png\" alt=\"\"></p>\n<p>如果我们希望这个Thread可以在它的生命周期内多做一些事，是的，尽可能压榨这个Thread，毕竟我们在前面要创建它，在后面要摧毁它，在这中间要让它物尽其用。</p>\n<p>Do Work … Do Work … Do Work …</p>\n<p><img src=\"/img/160223_app_s5ep2/do_work.png\" alt=\"\"></p>\n<p>现在这个Thread已经被成功洗脑，进入了无限Do Work的循环中，就像一头拉磨的毛驴，是时候向磨盘里加上一些谷子了。我们将待处理的工作称为Task，这些Task被组织在一个叫做WorkQueue的队列中。</p>\n<p><img src=\"/img/160223_app_s5ep2/work_queue.png\" alt=\"\"></p>\n<p>加谷子的工作，交由另一个Thread进行——把专业的事情交给专业的角色去做。</p>\n<p><img src=\"/img/160223_app_s5ep2/other_thread_produces_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Android-Implementations\"><a href=\"#Android-Implementations\" class=\"headerlink\" title=\"Android Implementations\"></a>Android Implementations</h4><p>了解过上面的基本原理，我们看看Android中是如何实现这一机制的。</p>\n<p>首先是<code>Looper</code>，也就是上文中的<code>Worker Thread</code>，干活儿的线程。</p>\n<p>然后是<code>MessageQueue</code>，<code>Looper</code>在运行的过程中，会不断从<code>MessageQueue</code>里拉取任务执行。</p>\n<p><img src=\"/img/160223_app_s5ep2/looper.png\" alt=\"\"></p>\n<p><code>Handler</code>被用来向工作队列中添加任务</p>\n<p><img src=\"/img/160223_app_s5ep2/handler.png\" alt=\"\"></p>\n<p>每一个被添加的单元任务（<code>Unit of Work</code>），可以是Intent/runnable/message</p>\n<p><img src=\"/img/160223_app_s5ep2/unit_of_work.png\" alt=\"\"></p>\n<p>这样一整套系统，就构成了Android中很重要的Handler机制。注意到，在<code>Handler</code>之外还有一个<code>Handler Thread</code>，它用来处理Task执行结果。</p>\n<p><img src=\"/img/160223_app_s5ep2/handler_thread.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"When-An-App-Starts\"><a href=\"#When-An-App-Starts\" class=\"headerlink\" title=\"When An App Starts\"></a>When An App Starts</h4><p>当我们的App启动时，系统为它分配了一个单独的进程，并且启动了<code>MainThread</code>，<code>MainThread</code>本质上是一个<code>HandlerThread</code>，它有且只有一个<code>MainLooper</code>。</p>\n<p><img src=\"/img/160223_app_s5ep2/main_thread.png\" alt=\"\"></p>\n<p><code>MainThread</code>也是<code>UI Thread</code>，在它运行过程中几乎会处理一切操作（在ep1中已经提到过）</p>\n<ul>\n<li>系统消息（翻转手机，界面重新绘制）</li>\n<li>用户输入（下滑列表）</li>\n<li>其它应用传过来的信息</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep2/main_thread_does.png\" alt=\"\"></p>\n<p>要知道，<code>MainThread</code>一个很重要的任务是负责UI绘制，如果交给MainThread太多的任务，会影响每16ms一次的UI渲染，造成ANR。</p>\n<p><img src=\"/img/160223_app_s5ep2/main_thread_does_all.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Choose-Your-Tool-–-No-Silver-Bullet\"><a href=\"#Choose-Your-Tool-–-No-Silver-Bullet\" class=\"headerlink\" title=\"Choose Your Tool – No Silver Bullet\"></a>Choose Your Tool – No Silver Bullet</h4><ul>\n<li>AsyncTask：将任务切换到UI线程／非UI线程</li>\n<li>HandlerThread：当需要Callback时使用</li>\n<li>ThreadPool：执行更细化的单元任务</li>\n<li>IntentService：用以执行后台任务，或将Intent任务从UI线程中提取出来执行</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep2/sdk_tools.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Systrace\"><a href=\"#Systrace\" class=\"headerlink\" title=\"Systrace\"></a>Systrace</h4><p><a href=\"http://developer.android.com/tools/debugging/systrace.html\" target=\"_blank\" rel=\"noopener\">Systrace</a> 是SDK提供、用于查看CPU操作耗时的工具，当你在测试应用时发现了丢帧现象，需要深究原因的时候，可以通过Systrace获得一些有用的信息。</p>\n<p><img src=\"/img/160223_app_s5ep2/systrace.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"Android Performance Patterns - s5ep1 Threading Performance 101","url":"https://lilei.pro/2016/02/23/Android-Performance-Patterns-s5ep1-Threading-Performance-101/","content":"<blockquote>\n<p>Season 5 ep 1 介绍了Android系统中线程与UI渲染一些最基础的知识。<br><a href=\"https://www.youtube.com/watch?v=qk5F6Bxqhr4&amp;index=64&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qk5F6Bxqhr4?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Main-Thread\"><a href=\"#Main-Thread\" class=\"headerlink\" title=\"Main Thread\"></a>Main Thread</h4><p>主线程是Android中最重要的线程，承担了响应系统时间、处理输入、绘制UI等重要任务。</p>\n<p><img src=\"/img/160223_app_s5ep1/main_thread_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"UI-drawing-and-frame-dropping\"><a href=\"#UI-drawing-and-frame-dropping\" class=\"headerlink\" title=\"UI drawing and frame dropping\"></a>UI drawing and frame dropping</h4><p>出于简化的考虑，android系统将大部分任务都放在了主线程中进行。然而其中一个任务是与其它有所不同的 —— UI 渲染。因为UI渲染一旦出现卡顿，用户会立刻感知到ANR，极不友好。下面我们模拟一个输入并处理的过程，看一下冗长的操作是如何阻塞UI绘制的。</p>\n<p>My Awesome Code!!!</p>\n<p><img src=\"/img/160223_app_s5ep1/input_event.png\" alt=\"\"></p>\n<p>人眼能感知的流畅UI界面必须保持在60fps，意味着每16ms就要有一次绘制完成。</p>\n<p><img src=\"/img/160223_app_s5ep1/60_frames.png\" alt=\"\"></p>\n<p>一旦主线程被某个操作阻塞超过了16ms，势必会丢掉（至少）一次绘制，这就是 dropping frame。</p>\n<p><img src=\"/img/160223_app_s5ep1/dropping_frame.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Solve-frame-dropping\"><a href=\"#Solve-frame-dropping\" class=\"headerlink\" title=\"Solve frame dropping\"></a>Solve frame dropping</h4><p>解决上述问题的思路很简单：既然主线程必须保证流畅运行，那我们就在自己的<code>worker thread</code>里处理这些恼人的<code>Lame Work</code>（瘸腿工作）好了。</p>\n<p><img src=\"/img/160223_app_s5ep1/worker_thread.png\" alt=\"\"></p>\n<p>我们可以直接使用以下几种由系统提供的解决方案，注意它们不同的应用场景。</p>\n<p><img src=\"/img/160223_app_s5ep1/sdk_tools.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Be-Careful\"><a href=\"#Be-Careful\" class=\"headerlink\" title=\"Be Careful!\"></a>Be Careful!</h4><p>当你决定使用内部类来完成上述操作时，一定要注意这可能引起内存泄漏！因为非静态内部类实例会保存外部类的引用，而在移动系统这种内存有限的设备上，内存泄漏是非常可怕的。</p>\n<p><img src=\"/img/160223_app_s5ep1/inner_class.png\" alt=\"\"></p>\n<p>一个解决方案是用静态内部类替代，并且内部以WeakReference保存Activity的引用。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"乔-韦德健美训练法则","url":"https://lilei.pro/2016/02/19/乔-韦德健美训练法则/","content":"<blockquote>\n<p>乔·韦德，男，1922年出生，加拿大裔健美冠军，被称为“健美冠军之父”、“现代健美之父”，他曾创办了韦德运动器材公司，是《肌肉与健美》、《形体美》和《男子健康》等健美杂志主编，开创了当今最具影响力和最高水准的职业健美比赛——“奥林匹亚先生”大赛，并设立了高额奖金。他是阿诺德·施瓦辛格的恩师，开创了乔·韦德训练法则，推动了世界健美运动的发展。</p>\n</blockquote>\n<p><img src=\"/img/160219_joe_weider/joe-weider.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>在笔者看来，韦德的成功之处，不仅仅在于他是一个优秀的bodybuilder，更是因为他推广了健身健美的训练法则、创办了举世闻名的奥赛、并且培育了施瓦辛格这样伟大的健美者，不得不提的是，韦德是一位成功的商人。</p>\n<p>韦德健美训练法则共32条，分为初、中、高级三个阶段，仔细阅读，科学训练，定会受益无穷。</p>\n<hr>\n<h2 id=\"入门须知\"><a href=\"#入门须知\" class=\"headerlink\" title=\"入门须知\"></a>入门须知</h2><h4 id=\"器械须知\"><a href=\"#器械须知\" class=\"headerlink\" title=\"器械须知\"></a>器械须知</h4><ol>\n<li>全套家庭健身器械包括：卧推凳、腹肌板、杠铃和哑铃各一副。可以按个人条件配置其它器械。</li>\n</ol>\n<h4 id=\"服装须知\"><a href=\"#服装须知\" class=\"headerlink\" title=\"服装须知\"></a>服装须知</h4><ol>\n<li>宽松舒适，不会妨碍动作（务必要穿比较舒适的内裤）；</li>\n<li>保证适宜的体温；</li>\n<li>最好穿鞋，保护踝关节；</li>\n<li>进行负重训练时，为了保护腰背部位，腰间最好扎上举重皮带；</li>\n</ol>\n<h4 id=\"锻炼须知\"><a href=\"#锻炼须知\" class=\"headerlink\" title=\"锻炼须知\"></a>锻炼须知</h4><ol>\n<li>渐进增重。初练者可从25％-30％最大重量开始进行训练。</li>\n<li>注意动作的规范性和节奏感。每个动作要使肌肉充分伸展和彻底收缩，不能用借力的方法进行练习。在有一定经验后，初练者可开始在最后一组或最后几次练习中，对该肌肉采用助力的方法。在每个动作中都要集中精神，有助于调动更多的肌纤维参加用力。</li>\n<li>注意姿势。在负重练习中，要保持两边重量的平衡，两眼平视，两脚自然开立，身体上下移动过程中始终保持头部正直。</li>\n<li>控制动作速率。在训练中，每组间间歇时间是60-90秒，可以保持体温，避免肌肉伤害，还能使大量血液集中到肌肉中去。做动作时，上举和放下的速度必须缓慢，且有节奏。若举起时间为2-3秒，则放下时间为4秒。掌握了正确的技术动作后，可适当加快动作。</li>\n<li>为了减轻肌肉酸痛，在训练中要穿足够的衣服以使身体保持适宜的体温，并在训练后洗温水浴，用橡胶皮肤刷按摩全身。</li>\n<li>呼吸特别重要。通常当用力时呼气，在放松还原时吸气；胸腔被扩大时吸气，胸腔受压时呼气。</li>\n<li>补充高质量的蛋白质、维生素、矿物质和不经过精炼的碳水化合物（粗粮）；</li>\n<li>饮大量的纯开水（每天至少12-16杯容量为30毫升的水）；</li>\n<li>持之以恒；</li>\n</ol>\n<h4 id=\"计划须知\"><a href=\"#计划须知\" class=\"headerlink\" title=\"计划须知\"></a>计划须知</h4><ol>\n<li>保证足够的睡眠和休息，晚上睡眠时间约为6-10小时，有条件最好白天小睡一会儿；</li>\n<li>最初阶段每周练三天，每隔一天锻炼一次；</li>\n<li>最好的训练时间是日常学习和工作之余，且精力最佳时，尽量安排在每天同一时间锻炼；</li>\n<li>制订课程计划时必须考虑对有缺陷部位的突出训练，但不提倡偏练有缺陷部位。初练者应按课程内容训练至少六个月，绝不能在初练的六个月内安排重点部位的突出训练。</li>\n</ol>\n<h4 id=\"练习次数\"><a href=\"#练习次数\" class=\"headerlink\" title=\"练习次数\"></a>练习次数</h4><ol>\n<li>低次数（1-5次）：主要增长体力和力量；</li>\n<li>中次数（8-12次）：主要增长肌肉块、线条和耐力；</li>\n<li>高次数（15次以上）：主要增强肌肉耐力、线条和减缩肌肉块；</li>\n<li>如果做较高次数（20次以上）并采用一种连续的循环训练，组与组织间没有休息，还可以增强心脏和呼吸系统的功能。</li>\n</ol>\n<h4 id=\"精神因素\"><a href=\"#精神因素\" class=\"headerlink\" title=\"精神因素\"></a>精神因素</h4><ol>\n<li>训练时集中精力，排除杂念。平时在脑海里塑造体型，并为之努力，保持愉快的心情。</li>\n</ol>\n<h4 id=\"训练伴侣\"><a href=\"#训练伴侣\" class=\"headerlink\" title=\"训练伴侣\"></a>训练伴侣</h4><ol>\n<li>依个人爱好，选择是否要伴侣或谁做伴侣。</li>\n</ol>\n<h4 id=\"本能训练－跟着感觉走\"><a href=\"#本能训练－跟着感觉走\" class=\"headerlink\" title=\"本能训练－跟着感觉走\"></a>本能训练－跟着感觉走</h4><ol>\n<li>重视自身的身体感觉，在体能允许的情况下，充分满足自身的愿望，但不要有懒惰和训练过度。这样有利于保持自己较高的情绪水平。</li>\n</ol>\n<hr>\n<h2 id=\"初级篇\"><a href=\"#初级篇\" class=\"headerlink\" title=\"初级篇\"></a>初级篇</h2><ol>\n<li><p><strong>渐增超负荷训练原则 （Progressive Overload Training Principle）</strong></p>\n<ul>\n<li>使肌肉逐渐增加负荷，并让肌肉受到更强烈的训练是增强任何身体素质（力量、肌肉围度、耐久力等）的基础。如：要增长力量，就必须使用较大的重量；若增加肌肉围度，不仅要采用越来越重的负荷，还要增加训练组数和每周的训练次数；如要增加局部肌肉的耐久力，就要逐渐减少组与组之间的间歇时间或增加训练组数和训练次数。一切都要逐渐增长。超负荷训练是所有体型训练法的基础。</li>\n<li>注：通常在超力量或大强度训练中使用。</li>\n</ul>\n</li>\n<li><p><strong>多组数训练原则 （Set System Training Principle）</strong></p>\n<ul>\n<li>多组数训练原则（有时每个动作最多3-4组），以便使每个肌肉群都能完全彻底地得到锻炼，并达到最大限度的肌肉膨胀。</li>\n<li>注：不同的训练课程中，要更具自己的体力情况和所锻炼的部位的强弱情况安排合适的训练组数。</li>\n</ul>\n</li>\n<li><p><strong>孤立训练原则（Isolation Training Principle）</strong></p>\n<ul>\n<li>不同的肌肉群可以一起练或相对地各自单独分开训练。在完成动作过程中，每一块肌肉都有它们各自的用力特点，但总有某肌肉群是主要用力的，其它肌肉起着协同作用或相对关节的固定作用，或对抗作用。如果您要最大限度地单独发展某一部位的肌肉，就要尽可能使主要用力的肌肉与其它肌肉的活动分开。可按解剖位置进行变换，如斯高特（斜托）弯举对臂部的屈肌锻炼就比用窄握重锤下拉的效果要好。</li>\n<li>注：适合于在需要重点发展的肌肉训练中使用。</li>\n</ul>\n</li>\n<li><p><strong>肌肉全面训练原则（Muscle Priority Training Principle）</strong></p>\n<ul>\n<li>要使肌肉不断地增长，就不能采用某个固定不变的锻炼课程。如果固定采用相同的动作、组数、次数和角度，就不能使肌肉获得全面的强度刺激以使肌肉增长。</li>\n<li>注：适合在平时的训练课程中使用。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"中级篇\"><a href=\"#中级篇\" class=\"headerlink\" title=\"中级篇\"></a>中级篇</h2><ol start=\"5\">\n<li><p><strong>重点肌肉优先训练原则（Muscle Priority Training Principle）</strong></p>\n<ul>\n<li>薄弱部位的锻炼应在训练课刚开始体力最旺盛、精力最充沛的时候进行，以承受最大的刺激强度和运动量。</li>\n<li>注：适合在每次训练课所需重点训练的肌肉。</li>\n</ul>\n</li>\n<li><p><strong>金字塔训练原则(Pyramiding Training Principle)</strong></p>\n<ul>\n<li>肌肉纤维的增长与力量的增长是阻力训练的结果。理论上来讲，如果在一个动作中能用最大的重量做8次，并能做几组，那么对增长体围和力量有很大效果。但没做热身活动就用大重量来练，会有潜在的危险。因此应从极小重量开始逐渐地增大负荷重量。金字塔训练法就是解决这个问题。如：开始用60％最大重量做15次，然后再增加重量，试做10-12次，最后加重到80％，最多做5-6次，会获得很好的效果，避免受伤。</li>\n<li>注：适用于平时的训练课程，或超量训练课程。</li>\n</ul>\n</li>\n<li><p><strong>分化训练原则（Split System Training Principle）</strong></p>\n<ul>\n<li>当连续三个月的每星期三次训练以后，就可以进行超强度训练。可以把全身分成上身和下身两部分来训练，每个部分可以增加动作和训练组数，这样每个部分肌肉就可以得到更多的锻炼。分化训练方法是：把一个星期的第一次训练课先安排锻炼上身的8个动作，采用超强度的训练；在当天的第二次训练课中只做下身的6-8个动作，采取同样的超强度训练。如果采用每周练三天的方法，同一次训练课中同时练上身和下身，肌肉的刺激强度就很难上去。分化训练对每个部位肌肉的锻炼强度会更大，时间会更长。</li>\n<li>注：适用于平时训练阶段，或增长肌肉块的训练课中。</li>\n</ul>\n</li>\n<li><p><strong>局部集中训练原则（Flushing Training Principle）</strong></p>\n<ul>\n<li>训练中必须使大量血液集中到被锻炼的肌肉中去，才能使肌肉更好地增长。如：在锻炼胸部时，课程中安排的3-4个动作要连续进行，中间不插入锻炼其它部位肌肉的动作，不断地使血液集中到这个部位，从而达到局部肌肉充分膨胀的状态。</li>\n<li>注：适合于重点发展或强化某块肌肉时使用。</li>\n</ul>\n</li>\n<li><p><strong>双组合训练原则（Supersets Training Principle）</strong></p>\n<ul>\n<li>这是韦德最著名的训练原则之一。几把两个功能相对应的肌肉群结合在一起锻炼。如，把锻炼肱二头肌的弯举和锻炼肱三头肌的臂屈伸结合起来就是一个双组合训练。双组合是把两个功能相对应的单块肌肉的动作轮流地练，一个动作练一组，组与组之间只允许有极少的间歇时间或不休息，是神经系统处于集中刺激状态。</li>\n<li>注：适合于集中锻炼某部位肌肉或减脂时使用。</li>\n</ul>\n</li>\n<li><p><strong>复合组数训练原则（Compound Sets Training Principle）</strong></p>\n<ul>\n<li>同一部位的肌肉群的双组合训练（如连续两个练肱二头肌的动作成为一个复合组数训练），即在局部肌肉还没恢复时，使其连续进行超强度刺激。</li>\n<li>注：对赛前减脂或加大某锻炼部位的肌肉强度效果较好。</li>\n</ul>\n</li>\n<li><p><strong>综合训练原则（Holistic Training Principle）</strong></p>\n<ul>\n<li>经不同方式使不同部位肌肉细胞的蛋白质和热能产生不同反应。当肌肉纤维遇到较大阻力负荷时，肌肉纤维就会增大，即经过不同角度的阻力负荷能促使整块肌肉的细胞增大。因此，必须采用各种不同的动作和训练次数。</li>\n<li>注：更适合于集中对某块重点肌肉的突击训练，但不宜长期使用。</li>\n</ul>\n</li>\n<li><p><strong>循环训练原则(Cycle Training Principle)</strong></p>\n<ul>\n<li>在全年训练中的某一时期，训练课程可集中安排增长肌肉块和力量，而另一时期安排以减轻负荷、增加试举次数、缩短间歇时间（优质训练）为主。可避免机能受伤并保持训练效果的稳步提高。</li>\n<li>注：适用于减脂或提高心血管系统的功能水平。</li>\n</ul>\n</li>\n<li><p><strong>静力紧张训练原则(ISO-Tension Training Principle)</strong></p>\n<ul>\n<li>静力紧张是韦德最被公认的训练原则之一。静力紧张用于肌肉控制，即把肌肉收缩到极点，保持静止控制3-6秒，重复做3次。这种训练能提高神经系统对肌肉的控制能力，可使在比赛中表现各种造型姿势时，分别控制各部位肌肉，以使肌肉线条更加清晰和突出。</li>\n<li>注：适用于动作造型的训练。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2><ol start=\"14\">\n<li><p><strong>助力训练原则(Cheating Training Principle)</strong></p>\n<ul>\n<li>借助其它肌肉的力量完成动作练习的最后1-2次，或利用身体其它部位来协助在运动中的肌肉完成最后试举。如：俯立弯举做到最后几次试举感到很难完成时用另一只手轻微托住手背在完成几次。但如在做仰卧推举时，采用背和臀部离开凳面的力量来多完成几次，就不是韦德助力训练原则了。</li>\n<li>注：适用于对某块重点肌肉的超强度训练。</li>\n</ul>\n</li>\n<li><p><strong>三组合训练原则(Tri-Sets Training Principle)</strong></p>\n<ul>\n<li>同一块肌肉采用三个不同的动作锻炼，且动作之间没有休息。该方法对增加血管中血流量很有效。</li>\n<li>注：适用于对某块重点肌肉的超强度和减脂训练。</li>\n</ul>\n</li>\n<li><p><strong>超组合训练原则(Giant Sets Training Principle)</strong></p>\n<ul>\n<li>同一肌肉群采用4-6种动作锻炼，动作间歇很短或没有。</li>\n<li>注：适用于减脂训练和提高肌肉耐力训练。</li>\n</ul>\n</li>\n<li><p><strong>预热训练原则(Pre-Exhaustion Training Principle)</strong></p>\n<ul>\n<li>在锻炼某块肌肉时，开始先采用孤立动作练习，然后立刻用双组合训练进行正常训练。</li>\n<li>注：通常用于训练课程的开始阶段或某块肌肉的开始训练之前。</li>\n</ul>\n</li>\n<li><p><strong>停息训练原则(Rest-Pause Training Principle)</strong></p>\n<ul>\n<li>用最大重量试举时，每次都试举到极限次数，然后停息一会儿，再接着试举。第一次停息可为30-45秒，以后每次增加30秒。这是增长力量和肌肉围度的好方法。</li>\n<li>注：适用于增长力量的练习。</li>\n</ul>\n</li>\n<li><p><strong>顶峰收缩训练原则(Peak Contraction Training Principle)</strong></p>\n<ul>\n<li>顶峰收缩是指肌肉达到完全收缩时使活动的肌肉处于最紧张的收缩状态。肌肉完全收缩时若没有锁定这个重量，肌肉会出现松弛现象。为了避免这一现象，在肌肉收缩到最紧张的位置时，应给予一定的减阻力。如，做哑铃弯举到最高点时，把躯干稍向前倾，让上臂处于重力的垂线之外，就会锁定重量，使肌肉处于彻底收紧状态。这种训练课使肌肉增大且肌纹分割线清晰。</li>\n<li>注：适合于所有动作练习中肌肉收缩至极限时采用。</li>\n</ul>\n</li>\n<li><p><strong>持续紧张训练原则(Continuous Tension Training Principle)</strong></p>\n<ul>\n<li>在整个动作过程中，动作要做得慢些，使肌肉能逐渐收缩，始终保持紧张的收缩状态。</li>\n<li>注：适用于平时训练中增长肌肉的最后几组训练，或提高肌肉耐力训练。</li>\n</ul>\n</li>\n<li><p><strong>抗重力训练原则(Reverse-Gravity Training Principle)</strong></p>\n<ul>\n<li>举起重物后放下时，用力抵抗下降重物，进行退让性练习，是让已收缩的肌肉被动拉长的动作，对肌肉刺激更强烈，有利于增大肌肉，增加力量。因为这种方法强度很大，在训练中不宜经常使用。运动负荷安排要注意以下几点：</li>\n<li>强度：采用90％-120％最大重量。</li>\n<li>组数：较少，通常为4±2组。</li>\n<li>次数：较少，通常做2-3次。</li>\n<li>时间：6-8秒。</li>\n<li>速度：慢。</li>\n<li>这种训练方法也可用于发展薄弱环节，强迫促使其平衡发展。</li>\n<li>注：通常在平时的训练周期中发展力量或超强度刺激被锻炼的肌肉</li>\n</ul>\n</li>\n<li><p><strong>强迫次数训练原则(Forced Reps Training Principle)</strong></p>\n<ul>\n<li>当举至力竭时，由同伴稍加助力再做2-3次的强迫次数，但助力只在举起的开始阶段，接下来把杠铃举至两臂伸直就应该依靠自己的力量。</li>\n<li>注：通常在平时训练周期对所重点发展肌肉的最后1-2组的最后几次推举中使用，不宜整个训练课程的每组推举都采用。</li>\n</ul>\n</li>\n<li><p><strong>双分化训练原则(Double-Split Training Principle)</strong></p>\n<ul>\n<li>高级健美运动员为提高总负荷，又不至于过度训练，将总负荷量一分为二，上午练1-2个部位，下午练另外1-2个部位。有利于精力更集中，采用更大的重量和组数。</li>\n<li>注：适用于时间不能保证的锻炼者，或赛前减脂。</li>\n</ul>\n</li>\n<li><p><strong>三分化训练原则(Triple-Split Training Principle)</strong></p>\n<ul>\n<li>少数健美运动员有惊人的恢复能力，根据双分化原理，一天练三次。</li>\n<li>注：适用于具有很好体力的高级健美运动员的赛前减脂。</li>\n</ul>\n</li>\n<li><p><strong>膨胀训练原则(Burns Training Principle)</strong></p>\n<ul>\n<li>在正常训练的最后一次试举时再做2-3次半程的练习，是正在活动 的肌肉进入更多的血液并产生超量的乳酸，引起肌肉发胀感觉。这种感觉是由于局部动作时更多的血液进入肌肉中引起的毛细血管膨胀，有助于增加肌肉围度和肌肉中毛细血管的增粗。</li>\n<li>注：适用于训练课程中的重点肌肉训练，不宜经常使用。</li>\n</ul>\n</li>\n<li><p><strong>优化训练原则(Quality Training Principle)</strong></p>\n<ul>\n<li>按规定的组数和次数进行锻炼时，逐渐减少组间间歇时间。</li>\n<li>注：适用于赛前提高肌肉质量或减脂训练。</li>\n</ul>\n</li>\n<li><p><strong>递减训练原则(Descending Sets Training Principle)</strong></p>\n<ul>\n<li>采用由重到轻的逐降重量的方法，需要有两个训练伙伴帮助，当采用一定重量完成规定的次数时，有两旁的伙伴立即从两端各取下一片杠铃；继续举到力竭时，在各取下一片，再举几次，直至没有杠铃片为止。此法的训练强度很大，每次训练课不超过1-2<br>个动作。</li>\n<li>注：适用于在平时训练周期的训练课中需要重点发展的大肌肉。</li>\n</ul>\n</li>\n<li><p><strong>本能训练原则(Instinctive Training Principle)</strong></p>\n<ul>\n<li>根据自己的感觉安排动作、组数和次数、饮食营养及训练计划。有利于充分发挥自己的潜能。</li>\n<li>注：适用于不同训练周期的不同训练课程。</li>\n</ul>\n</li>\n<li><p><strong>兼顾训练原则(Eclectic Training Principle)</strong></p>\n<ul>\n<li>把大肌肉群的发展和肌肉孤立训练结合起来，即为发展某主要肌肉块，把相应的大肌肉群训练动作和局部肌肉训练动作放到同一课程中，并于本能训练原则结合起来，是力量、形体、肌肉块增强到最大限度。</li>\n<li>注：适用于平时训练周期的调整训练。</li>\n</ul>\n</li>\n<li><p><strong>粘点训练原则(Partial Reps Training Principle)</strong></p>\n<ul>\n<li>粘点指在做某组动作到力竭时，肌肉不能再收缩出现的粘滞状态。不同肌肉做不同动作出现粘点的时间和位置不一样。一般做徒手动作很难出现粘点，对肌肉力量的增长效果不大，故给徒手动作增加负重能取得很好的效果。对于高级健美运动员来说，采用粘点训练方法克服薄弱环节能取得最大效果。</li>\n<li>注：适用于平时训练周期的发展力量训练课程。</li>\n</ul>\n</li>\n<li><p><strong>快速原则(Speed Principle)</strong></p>\n<ul>\n<li>一般健美训练中的组数和次数使用要严格掌握要点，使局部肌肉感到完全收缩才能达到最好的训练效果。而采用大重量训练是增长围度的好方法，快速原则能使训练更加完美。快速原则必须有高级训练阶段的技术基础，结合大重量训练同时进行（超过75％~80％重量），且动作决不能变形，或助力。快速原则最好是在平时训练周期集中增长力量和肌肉围度的早期使用。</li>\n<li>注：通常在发展力量训练课程或减脂训练课程中使用。</li>\n</ul>\n</li>\n<li><p><strong>交叉训练原则(Staggered Sets principle)</strong></p>\n<ul>\n<li>是优先训练原则的一种高级形式。把较小且发展较慢部位的肌肉穿插在重点要练的大肌肉群中练习，或贯穿在主要大肌肉群众锻炼。通常交叉训练的部位要求相隔较远，以免相互影响，前臂、颈部、小腿、斜方肌等都是采用交叉训练较好的候补部位。把交叉训练放在最前面连可以使精力更好地集中在最重要部位的肌肉群上。</li>\n<li>注：适用于具有较高训练水平且时间不足者，或赛前减脂者使用，但不宜经常使用。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":["健身"],"tags":["大保健"]},{"title":"Android Performance Patterns - 序言","url":"https://lilei.pro/2016/02/18/Android-Performance-Patterns-序言/","content":"<hr>\n<p><strong>Android Performance Patterns</strong> 是 <strong>Android Developers</strong> 在youtube上发布的一系列Android性能优化小视频，每一部都不超过5分钟，目前为止发布到了Season 5，共73部。</p>\n<p><img src=\"../img/160218_app_preface/logo.png\" alt=\"\"></p>\n<h4 id=\"播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\"><a href=\"#播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\" class=\"headerlink\" title=\"播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\"></a>播放列表地址：<a href=\"https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a>（视频下方有字幕开关，你也可以点击键盘上的<code>C</code>键来操作字幕）</h4><hr>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"Season-5\"><a href=\"#Season-5\" class=\"headerlink\" title=\"Season 5\"></a>Season 5</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th>链接</th>\n<th>标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep1-Threading-Performance-101\">s5ep1</a></td>\n<td>Threading Performance 101</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep2-Understanding-Android-Threading\">s5ep2</a></td>\n<td>Understand Android Threading</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep3-Memory-And-Threading\">s5ep3</a></td>\n<td>Memory &amp; Threading</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep4-Good-AsyncTask-Hunting\">s5ep4</a></td>\n<td>Good AsyncTask Hunting</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep5-Getting-A-HandlerThread\">s5ep5</a></td>\n<td>Getting a HandlerThread</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep6-Swimming-In-ThreadPools\">s5ep6</a></td>\n<td>Swimming in Threadpools</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep7-The-Zen-Of-IntentService\">s5ep7</a></td>\n<td>The Zen of IntentService</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep8-Threading-And-Loaders\">s5ep8</a></td>\n<td>Threading and Loaders</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep9-The-Importance-Of-Thread-Priority\">s5ep9</a></td>\n<td>The Importance of Thread Priority</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep10-Profile-GPU-Rendering\">s5ep10</a></td>\n<td>Profile GPU Rendering : M Update</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns","技术流"]},{"title":"ProGit读书笔记（Chapter3）","url":"https://lilei.pro/2016/02/17/ProGit读书笔记Chapter3/","content":"<hr>\n<h3 id=\"Chapter-3-Git-Branching\"><a href=\"#Chapter-3-Git-Branching\" class=\"headerlink\" title=\"Chapter 3. Git Branching\"></a>Chapter 3. Git Branching</h3><p>本章讲解Git分支功能实现的基本原理、merge操作、rebase操作等等</p>\n<a id=\"more\"></a>\n<h4 id=\"基本思想：snapshot\"><a href=\"#基本思想：snapshot\" class=\"headerlink\" title=\"基本思想：snapshot\"></a>基本思想：snapshot</h4><p>首先要理解，不同于其它VCS，对于版本之间的提交，Git存储的不是diff，而是snapshot。对于下面这样一次commit，Git会生成5个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README test.rb LICENSE</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'The initial commit of my project'</span></span><br></pre></td></tr></table></figure>\n<p>生成一个树状结构：<code>98ca9</code>记录了本次commit的信息（committer、date、message等），并有一个指针，指向tree，tree中包含本次commit中改动的全部文件snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/commit-and-tree.png\" alt=\"\"></p>\n<blockquote>\n<p>A branch in Git is simply a lightweight movable pointer to one of these commits.</p>\n</blockquote>\n<p>这也就解释了为什么在Git中，创建、删除、切换分支的操作都很快速。</p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>Git使用如下命令创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch testing</span><br></pre></td></tr></table></figure>\n<p>创建后的<code>testing</code>分支，跟<code>master</code>都指向同一个Snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/two-branches.png\" alt=\"\"></p>\n<p>那么Git如何知道当前你在编辑的是哪一个分支呢？用<code>HEAD</code>！例如，在上面的命令后，内部的分支是这样的</p>\n<p><img src=\"/img/160218_pro_git_c3/head-to-master.png\" alt=\"\"></p>\n<p>可以在<code>git log</code>中使用<code>--decorate</code>参数来观察当前<code>HEAD</code>分支。（这里推荐一下zsh，自动标示当前<code>HEAD</code>，非常方便）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --oneline --decorate</span><br><span class=\"line\">f30ab (HEAD -&gt; master, testing) add feature <span class=\"comment\">#32 - ability to add new formats to the central interface</span></span><br><span class=\"line\">34ac2 Fixed bug <span class=\"comment\">#1328 - stack overflow under certain conditions</span></span><br><span class=\"line\">98ca9 The initial commit of my project</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p>使用<code>git checkout [branch_name]</code>来切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/checkout-master.png\" alt=\"\"></p>\n<p>创建&amp;切换分支可以放在一个命令里完成：<code>git checkout -b [branch_name]</code>，作用是基于当前<code>HEAD</code>切出一个名为<code>branch_name</code>的新分支，并且将<code>HEAD</code>切换到该新分支上。</p>\n<h4 id=\"Basic-Branching-and-Merging\"><a href=\"#Basic-Branching-and-Merging\" class=\"headerlink\" title=\"Basic Branching and Merging\"></a>Basic Branching and Merging</h4><p>想象一个比较复杂的分支模型：当你开发某个功能时（iss53），突然线上基于master分支的代码爆出一个bug，此时必须要进行hotfix，并且在完成hotfix后，将hotfix的内容合并回master，最后再切换回iss53分之继续进行功能开发。</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-branching-4.png\" alt=\"\"></p>\n<p>怎样让master合并hotfix呢？切换回master分支，使用<code>git merge hotfix</code>来完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge hotfix</span><br><span class=\"line\">Updating f42c576..3a0874c</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> index.html | 2 ++</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure>\n<p>看到<code>Fast-forward</code>的提示没有？这是说，master的指针已经“向前移动到了hotfix指针所在位置”，如下图：</p>\n<p> <img src=\"/img/160218_pro_git_c3/basic-branching-5.png\" alt=\"\"></p>\n<p>这个时候hotfix已经完成了它的任务，继续留着它只会让我们的分支更加混乱。本着兔死狗烹鸟尽弓藏的原则，杯酒释兵权～最后切换回iss53分支继续coding</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d hotfix</span><br><span class=\"line\">Deleted branch hotfix (3a0874c).</span><br><span class=\"line\">$ git checkout iss53</span><br><span class=\"line\">Switched to branch <span class=\"string\">\"iss53\"</span></span><br><span class=\"line\">$ vim index.html</span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">'finished the new footer [issue 53]'</span></span><br><span class=\"line\">[iss53 ad82d7a] finished the new footer [issue 53]</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/basic-branching-6.png\" alt=\"\"></p>\n<h4 id=\"Basic-Merging\"><a href=\"#Basic-Merging\" class=\"headerlink\" title=\"Basic Merging\"></a>Basic Merging</h4><p>现在我们完成了iss53的功能开发与测试，需要将代码合并回master，以备后续上线。当然，需要先切回master，然后使用<code>git merge</code>来合并<code>iss53</code>分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">$ git merge iss53</span><br><span class=\"line\">Merge made by the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">index.html |    1 +</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>合并前</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-merging-1.png\" alt=\"\"></p>\n<p>合并后</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-merging-2.png\" alt=\"\"></p>\n<p>从图上可以看出来，Git基于master与iss53的提交历史，新创建了一个commit－C6，图中此处有误，最右边master指向的应该为C6。惯例，卸磨杀驴。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> branch -d iss53</span><br></pre></td></tr></table></figure>\n<h4 id=\"Basic-Merge-Conflicts\"><a href=\"#Basic-Merge-Conflicts\" class=\"headerlink\" title=\"Basic Merge Conflicts\"></a>Basic Merge Conflicts</h4><p>在并行开发的过程中，经常会遇到两个开发者同时修改了一个文件，在合并时发生冲突的场景，比如下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge iss53</span><br><span class=\"line\">Auto-merging index.html</span><br><span class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> index.html</span><br><span class=\"line\">Automatic merge failed; fix conflicts and <span class=\"keyword\">then</span> commit the result.</span><br></pre></td></tr></table></figure>\n<p>使用<code>git status</code>查看当前合并进程与状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">  (fix conflicts and run <span class=\"string\">\"git commit\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">    both modified:      index.html</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n<p>原来是<code>index.html</code>被分别修改了2次，导致git无法自动合并。使用编辑器或者IDE打开这个文件后，能看到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class=\"line\">=======</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</span><br><span class=\"line\"> please contact us at support@github.com</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span><br></pre></td></tr></table></figure>\n<p>Git用非常容易识别的方式标示有冲突的代码：<code>&lt;&lt;&lt;&lt;</code>和<code>====</code>之间的是HEAD的改动（也就是master），<code>====</code>和<code>&gt;&gt;&gt;&gt;</code>之间的是另一个分支（iss53）的改动，保留想保留的即可。</p>\n<p>如果喜欢图形化的界面，使用<code>git mergetool</code>来打开，Git默认的是<code>opendiff</code>。<br>修改完成后，文件处于<code>modified</code>状态，需要先用<code>add</code>将其变为<code>staged</code>，然后在commit中注明这次merge。</p>\n<h4 id=\"Branch-Management\"><a href=\"#Branch-Management\" class=\"headerlink\" title=\"Branch Management\"></a>Branch Management</h4><p>查看本地branch，使用<code>git branch</code>，增加<code>-r</code>参数以查看远端仓库branch，增加<code>-v</code>参数查看最新一次的commit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  iss53</span><br><span class=\"line\">* master</span><br><span class=\"line\">  testing</span><br><span class=\"line\">$ git branch -v</span><br><span class=\"line\">  iss53   93b412c fix javascript issue</span><br><span class=\"line\">* master  7a98805 Merge branch <span class=\"string\">'iss53'</span></span><br><span class=\"line\">  testing 782fd34 add scott to the author list <span class=\"keyword\">in</span> the readmes</span><br></pre></td></tr></table></figure>\n<p>如果你想看哪些分支已经被merge进了HEAD中，用<code>--merged</code>，前面没有星号<code>*</code>的分支是可以用<code>git branch -d</code>删除的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --merged</span><br><span class=\"line\">  iss53</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<p>查看没有merge的分支，用<code>--no-merged</code>参数。对于这样的分支，当你试图使用<code>git branch -d</code>进行删除时，Git会给出提示，告诉你这样的操作不被允许。（你可以使用<code>git branch -D</code>来强制删除）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --no-merged</span><br><span class=\"line\">  testing</span><br><span class=\"line\">$ git branch -d testing</span><br><span class=\"line\">error: The branch <span class=\"string\">'testing'</span> is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D testing'</span>.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Remote-Branches\"><a href=\"#Remote-Branches\" class=\"headerlink\" title=\"Remote Branches\"></a>Remote Branches</h4><p>对于远端仓库的每一个分支，本地都有一个与其对应的分支，用<code>(remote)/(branch)</code>来表示，比如<code>origin/master</code>。通常我们看到remote的名字是origin，但这不是固定的，你可以用以下命令来更改这个名字<code>git clone -o booyah</code>，这样你创建的就是<code>booyah/master</code>。<br>最开始clone并checkout时，<code>origin/master</code>与<code>master</code>指向同一个snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-1.png\" alt=\"\"></p>\n<p>只要不fetch，<code>origin/master</code>指向的位置就不会变更，<code>master</code>分支会随着commit一直向前。</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-2.png\" alt=\"\"></p>\n<p>也可以把两个remote的历史都拉下来，酌情使用</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-5.png\" alt=\"\"></p>\n<h4 id=\"Pushing\"><a href=\"#Pushing\" class=\"headerlink\" title=\"Pushing\"></a>Pushing</h4><p>使用<code>git push &lt;remote&gt; &lt;branch&gt;</code>来push到远端仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin serverfix</span><br><span class=\"line\">Counting objects: 24, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (15/15), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 24 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/schacon/simplegit</span><br><span class=\"line\"> * [new branch]      serverfix &gt; serverfix</span><br></pre></td></tr></table></figure>\n<p>这其实是一个缩写，背后完整的命令是<code>git push origin refs/heads/serverfix:refs/heads/serverfix</code>，直接引用原文</p>\n<blockquote>\n<p>which means, “Take my serverfix local branch and push it to update the remote’s serverfix branch.”</p>\n</blockquote>\n<p>分支名前面的<code>refs/heads</code>是Git内部机制，你也可以省略这个路径，写作<code>serverfix:serverfix</code>，或者你觉得在remote端不希望叫serverfix的名字，那就改一个你喜欢的！<code>git push origin serverfix:awesomebranch</code></p>\n<p>使用<code>git checkout -b &lt;branch_name&gt; &lt;remote&gt;/&lt;branch_name&gt;</code>来创建一个基于远端的本地分支，这种分支被叫做<code>tracking branch</code>，被跟踪的那个远端branch叫做<code>upstream branch</code>。有了这层关系在里面，当你进行<code>pull/push</code>时，Git就自然知道要操作哪一个分支了。</p>\n<p>由于<code>git checkout -b &lt;branch_name&gt; &lt;remote&gt;/&lt;branch_name&gt;</code>实在是太常用了，Git为它提供了一个缩写<code>git checkout --track &lt;remote&gt;/&lt;branch&gt;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --track origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p>甚至，Git提供了一个缩写的缩写：<code>git checkout &lt;branch&gt;</code>，这个命令要求本地分支与远程分支保持名字一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p>如果尚未给本地的一个分支指定远端分支，使用<code>-u</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -u origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure>\n<p>小技巧：可以用<code>{@u}</code>或者<code>@{upstream}</code>来代替upstream，比如当你处在master分支时，可以用<code>git merge @{u}</code>来代替<code>git merge origin/master</code></p>\n<p>如果你想了解本地分支的track情况（分支、ahead、behind），使用<code>git branch -vv</code>，记得先<code>git fetch --all</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class=\"line\">  master    1ae2a45 [origin/master] deploying index fix</span><br><span class=\"line\">* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should <span class=\"keyword\">do</span> it</span><br><span class=\"line\">  testing   5ea463a trying something new</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pulling\"><a href=\"#Pulling\" class=\"headerlink\" title=\"Pulling\"></a>Pulling</h4><p>相比于<code>fetch</code>把远端分支更新到本地，<code>pull</code>命令更进了一步，完成了<code>merge</code>的功能。<br>pull = fetch + merge。笔者赞同书中的观点，还是单独使用fetch&amp;merge的好。</p>\n<blockquote>\n<p>Generally it’s better to simply use the <code>fetch</code> and <code>merge</code> commands explicitly as the magic of <code>git pull</code> can often be confusing.</p>\n</blockquote>\n<h4 id=\"Deleting-Remote-Branches\"><a href=\"#Deleting-Remote-Branches\" class=\"headerlink\" title=\"Deleting Remote Branches\"></a>Deleting Remote Branches</h4><p>使用<code>git push origin --delete &lt;branch_name&gt;</code>来删除服务器上的某个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete serverfix</span><br><span class=\"line\">To https://github.com/schacon/simplegit</span><br><span class=\"line\"> - [deleted]         serverfix</span><br></pre></td></tr></table></figure>\n<p> 还有一种写法，<code>git push origin :&lt;branch_name&gt;</code>，能起到同样的作用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :feature/8.0.0_bugfix_leili</span><br><span class=\"line\">To git@code.dianpingoa.com:mobile/android-nova-booking.git</span><br><span class=\"line\"> - [deleted]         feature/8.0.0_bugfix_leili</span><br></pre></td></tr></table></figure>\n<p>记住，所删除的“分支”本质上只是“指针”，所有的代码snapshot依旧保存在服务器上，可以随时check出来</p>\n<h4 id=\"Rebasing\"><a href=\"#Rebasing\" class=\"headerlink\" title=\"Rebasing\"></a>Rebasing</h4><p>接下来我们来学习与Merge分庭抗礼的另一个强有力的功能——Rebase。两者同是将不同分支上的提交合并到一起的功能，它们之间的区别是什么样的呢？容笔者细细道来。<br>首先来看一个熟悉的场景，有<code>master</code>和<code>experiment</code>两个分支，对merge而言，如果在<code>master</code>分支的基础上，对<code>experiment</code>进行merge，Git会创建一个新的commit（C5），包含了两个分支最近的共同祖先（C2）以来发生的所有变更（C4和C3），最后把<code>master</code>的指针指向C5</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-1.png\" alt=\"\"><br><img src=\"/img/160218_pro_git_c3/basic-rebase-2.png\" alt=\"\"></p>\n<p>而对于rebase，我们这么操作。注意<code>HEAD</code>指向的是<code>experiment</code>分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout experiment</span><br><span class=\"line\">$ git rebase master</span><br><span class=\"line\">First, rewinding head to replay your work on top of it...</span><br><span class=\"line\">Applying: added staged <span class=\"built_in\">command</span></span><br></pre></td></tr></table></figure>\n<p>非常神奇地，C4这个commit消失了！！！，取而代之，Git在C3后面创建了C4’，同时将<code>experiment</code>的指针转移到了这里。整个提交历史变成了一根直线，清爽了许多。</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-3.png\" alt=\"\"></p>\n<p>接下来，我们让<code>master</code>    move forward，以合并<code>experiment</code>带来的改动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge experiment</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-4.png\" alt=\"\"></p>\n<p>注意！虽然<code>merge</code>与<code>rebase</code>看起来都是把两个分支上的改动合并到一起，但一个是“同时合并A和B”，一个是“将A合并到B”，仔细体会其中的不同。</p>\n<blockquote>\n<p>Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</p>\n</blockquote>\n<h4 id=\"有趣的Rebasing\"><a href=\"#有趣的Rebasing\" class=\"headerlink\" title=\"有趣的Rebasing\"></a>有趣的Rebasing</h4><p><img src=\"/img/160218_pro_git_c3/interesting-rebase-1.png\" alt=\"\"></p>\n<p>想象上面一个场景，对于<code>master</code> <code>server</code> <code>client</code>三个分支，如果我想要将<code>client</code>上的改动提交到<code>master</code>（C8和C9），而暂时不想合并<code>server</code>上的代码，应该怎么做？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout cient</span><br><span class=\"line\">$ git rebase master</span><br></pre></td></tr></table></figure>\n<p>上述这样肯定不行，因为会把C3带过去。<br>针对这种场景，Git也为我们提供了这个功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase --onto master server client</span><br></pre></td></tr></table></figure>\n<p>是不是有点一头雾水？这都什么鬼啊！别急，我们来仔细看看这段指令。</p>\n<blockquote>\n<p>This basically says, “Check out the client branch, figure out the patches from the common ancestor of the <code>client</code> and <code>server</code> branches, and then replay them onto <code>master</code>.” </p>\n</blockquote>\n<p>明白了吧！不过，虽然这看上去很神奇，笔者可不希望在实际的工作中碰到这种复杂的场景。<br>Rebase后的提交历史如图：</p>\n<p><img src=\"/img/160218_pro_git_c3/interesting-rebase-1.png\" alt=\"\"></p>\n<p>接下来该怎么做，相信不用我说，你也知道了——把<code>master</code> fast forward过去～</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge client</span><br></pre></td></tr></table></figure>\n<p>当你完成了<code>server</code>分支的开发，狠狠地用rebase把它甩在<code>master</code>脸上吧，<code>git rebase [basebranch] [topicbranch]</code>——将<code>topicbranch上</code>的改动在<code>basebranch</code>上重放（checks out the topic branch (in this case, <code>server</code>) for you and replays it onto the base branch (<code>master</code>)）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase master server</span><br></pre></td></tr></table></figure>\n<p>删除无用分支后，最终得到一个无比清爽的提交记录</p>\n<p><img src=\"/img/160218_pro_git_c3/interesting-rebase-5.png\" alt=\"\"></p>\n<h4 id=\"Rebase的风险\"><a href=\"#Rebase的风险\" class=\"headerlink\" title=\"Rebase的风险\"></a>Rebase的风险</h4><p>Rebase是一个无比强大的工具，借助它，我们可以将项目提交历史梳理成一条直线，然而，如果应用不当，它产生的麻烦要远远大于带来的好处。</p>\n<blockquote>\n<p><strong>Do not rebase commits that exist outside your repository.</strong></p>\n</blockquote>\n<p>简单的说，如果一个commit已经被公布给其他人使用，那就不要试图再rebase它。如果你遵守了这条准则，一切安好；可一旦你违反了他，你的同事将会恨你入骨……下面用几张图来说明这种深刻仇恨的来源</p>\n<p>首先是一个简单的分支模型，teamone和你正在合作中，显然你的工作效率更高些，已经提交了C2、C3两次</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-1.png\" alt=\"\"></p>\n<p>远端仓库也有一些更新，而且他们用到了merge，真是厉害啊！你当然不甘示弱，立即把他们的提交merge了过来。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-2.png\" alt=\"\"></p>\n<p>这时，远端team发现merge不如rebase好用，他们使用非常邪恶的<code>git push --force</code>命令，覆盖掉了代码仓库中的历史，意图抹杀掉merge的出现。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-3.png\" alt=\"\"></p>\n<p>天真的你并没有发现他们的邪恶企图，当你fetch时候，发现远端仓库有了更新，你自然想再merge一把，以保持最新代码</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-4.png\" alt=\"\"></p>\n<p>Boom！灾难发生了，由于C4和C4’实际上是一模一样的改动（实际上，如果你用<code>git log</code>来查看，你会发现这两个提交甚至有完全相同的author、date、message，当然他们的SHA1是不同的）。而且，就算你解决了冲突，把你的代码推送回远端时，邪恶的他们发现，原来让他们避之不及的C4和C6这两个提交——They are back！</p>\n<h4 id=\"Rebase-When-You-Rebase\"><a href=\"#Rebase-When-You-Rebase\" class=\"headerlink\" title=\"Rebase When You Rebase\"></a>Rebase When You Rebase</h4><p>一旦出现了上面的情况，不要慌，Git为我们提供了解决这种问题的途径，那就是——Rebase！这时你checkout到自己的<code>master</code>分支上，执行<code>git rebase teamone/master</code>，Git会为你做以下事情（实在是懒得翻译了）</p>\n<ul>\n<li>Determine what work is unique to our branch (C2, C3, C4, C6, C7)</li>\n<li>Determine which are not merge commits (C2, C3, C4)</li>\n<li>Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4’)</li>\n<li>Apply those commits to the top of <code>teamone/master</code></li>\n</ul>\n<p>最后得到如图的提交历史。需要注意，只有当C4和C4’几乎完全一致时，Git才会采取以上策略。不然，即使如上操作，依然会产生冲突。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-5.png\" alt=\"\"></p>\n<h4 id=\"Rebase-vs-Merge\"><a href=\"#Rebase-vs-Merge\" class=\"headerlink\" title=\"Rebase vs. Merge\"></a>Rebase vs. Merge</h4><p>关于Rebase和Merge该用哪个的问题，要因地制宜——Rebase可以极大简化提交历史，但它会篡改提交记录，而Merge可以原汁原味地保存每个人的提交时间与内容。应当记住，不论使用哪一个，都要按照基本法。</p>\n<blockquote>\n<p>In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere.</p>\n</blockquote>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"ProGit读书笔记（Chapter2）","url":"https://lilei.pro/2016/02/14/ProGit读书笔记Chapter2/","content":"<hr>\n<p>2016年春节前大概一周时间，忘了什么契机，忽然觉得自己用了Git这么久，一直处于一知半解的状态，而Git作为一个出色的VCS，自问世以来长盛不衰，一定有其道理。本着“不但要知其然，还要知其所以然”的态度，决定认真读一读《Pro Git》。<br>说来惭愧，组内最开始从Subversion迁移到Git时，一新就向大家推荐过这本书，当时自己简单翻了翻，由于有其他事情就耽搁下，一直没有再打开过。</p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"Chapter-2-Git-Basics\"><a href=\"#Chapter-2-Git-Basics\" class=\"headerlink\" title=\"Chapter 2. Git Basics\"></a>Chapter 2. Git Basics</h3><p>第二章主要讲了如何将一个文件添加进VCS、提交改动、历史查看、撤销操作、Tag。</p>\n<h4 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h4><p>Git中有四种文件状态，相互间转换关系见下图</p>\n<p><img src=\"/img/160217_pro_git_c2/lifecycle.png\" alt=\"\"></p>\n<ul>\n<li>使用Git时，要多多用<code>git status</code>来查看当前文件状态</li>\n<li>同一个文件是可以同时处于<code>modified</code>和<code>staged</code>两种状态的，试着edit-add-edit，你就会发现</li>\n<li><code>git status --short</code>可以用来查看更简短的文件状态描述，用处不大</li>\n</ul>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>对于不想加入到版本控制中的文件（IDE生成文件、编译中间文件等），可以使用<code>.gitignore</code>来告诉Git系统，不需要关注这些文件。<br>gitignore的例子如下，以<code>#</code>开头的行是注释，会被Git忽略掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># no .a files</span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\"># but do track lib.a, even though you&apos;re ignoring .a files above</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore all files in the build/ directory</span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore all .pdf files in the doc/ directory</span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p><code>git diff</code>用来查看进行的改动，控制台的输出不够直观，尤其是改动很多的时候。推荐使用GUI进行查看（需要在.gitconfig中进行配置，位置是<code>~/.gitconfig</code>），目前笔者在用的是DiffMerge，基本满足日常使用需求。</p>\n<ul>\n<li><code>git diff</code>用来查看<code>modified</code>的变更。</li>\n<li><code>git diff --cached</code>同<code>git diff --staged</code>作用一样，用来查看<code>staged</code>的变更</li>\n</ul>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>使用<code>git commit</code>将改动提交到仓库，以创建一个<strong>Snapshot</strong>。<strong>Snapshot</strong>是一个很重要的概念，是Git内部实现的最关键机制，也是Git能够超越Subversion等其他VCS的杀手级特性，这一点将在Chapter3中进行说明。</p>\n<p>直接输入<code>git commit</code>后，将会打开一个编辑器页面（笔者用的是Vim，可以在gitconfig中配置），内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#\tnew file:   README</span><br><span class=\"line\">#\tmodified:   CONTRIBUTING.md</span><br><span class=\"line\">#</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br><span class=\"line\">&quot;.git/COMMIT_EDITMSG&quot; 9L, 283C</span><br></pre></td></tr></table></figure>\n<p>可以在其中编辑本次提交信息，如果不写任何东西的话，Git是不会承认本次commit的。</p>\n<p>如果不想打开编辑器，可以直接在<code>commit</code>时加上<code>-m</code>参数，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</span><br></pre></td></tr></table></figure>\n<p>可以用<code>-a -m</code>或者<code>-am</code>把stage、commit两个操作一起完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">'added new benchmarks'</span></span><br><span class=\"line\">[master 83e38c7] added new benchmarks</span><br><span class=\"line\"> 1 file changed, 5 insertions(+), 0 deletions(-)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Removing-Files\"><a href=\"#Removing-Files\" class=\"headerlink\" title=\"Removing Files\"></a>Removing Files</h4><p>直接<code>rm</code>文件的话，文件是处于<code>unstaged</code>状态的，此时需要先<code>add</code>，再<code>commit</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm PROJECTS.md</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add/rm &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted:    PROJECTS.md</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n<p>或者直接用<code>git rm</code>，将文件直接置于<code>staged</code>状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm PROJECTS.md</span><br><span class=\"line\">rm <span class=\"string\">'PROJECTS.md'</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    deleted:    PROJECTS.md</span><br></pre></td></tr></table></figure>\n<p>另外一个很有用的参数是<code>--cached</code>，用来将文件从<code>staged</code>状态转移到<code>untracked</code>。如果在最初编辑<code>.gitignore</code>时漏写了某个文件，后面发现Git已经记录了这个文件的变更，可以先用<code>--cached</code>参数停止track该文件，然后编辑<code>.gitignore</code>，将文件添加进去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached README</span><br></pre></td></tr></table></figure>\n<h4 id=\"Moving-Files\"><a href=\"#Moving-Files\" class=\"headerlink\" title=\"Moving Files\"></a>Moving Files</h4><p>同样，可以用<code>git mv</code>来完成文件重命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mv README.md README</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br></pre></td></tr></table></figure>\n<h4 id=\"无比重要的-git-log\"><a href=\"#无比重要的-git-log\" class=\"headerlink\" title=\"无比重要的 git log\"></a>无比重要的 git log</h4><p><code>git log</code>用来查看当前分支的查看历史，如果不加任何参数，默认输出每次提交的SHA1值、提交者、提交时间、提交信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    first commit</span><br></pre></td></tr></table></figure>\n<p>使用<code>-p</code>参数可以展示每次提交的文件具体改动，使用<code>-[num]</code>（如<code>-2</code>）来控制显示的commit数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> -p -2</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/Rakefile b/Rakefile</span><br><span class=\"line\">index a874b73..8f94139 100644</span><br><span class=\"line\">--- a/Rakefile</span><br><span class=\"line\">+++ b/Rakefile</span><br><span class=\"line\">@@ -5,7 +5,7 @@ require <span class=\"string\">'rake/gempackagetask'</span></span><br><span class=\"line\"> spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</span><br><span class=\"line\">     s.platform  =   Gem::Platform::RUBY</span><br><span class=\"line\">     s.name      =   <span class=\"string\">\"simplegit\"</span></span><br><span class=\"line\">-    s.version   =   <span class=\"string\">\"0.1.0\"</span></span><br><span class=\"line\">+    s.version   =   <span class=\"string\">\"0.1.1\"</span></span><br><span class=\"line\">     s.author    =   <span class=\"string\">\"Scott Chacon\"</span></span><br><span class=\"line\">     s.email     =   <span class=\"string\">\"schacon@gee-mail.com\"</span></span><br><span class=\"line\">     s.summary   =   <span class=\"string\">\"A simple gem for using Git in Ruby code.\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span><br><span class=\"line\">index a0a60ae..47c6340 100644</span><br><span class=\"line\">--- a/lib/simplegit.rb</span><br><span class=\"line\">+++ b/lib/simplegit.rb</span><br><span class=\"line\">@@ -18,8 +18,3 @@ class SimpleGit</span><br><span class=\"line\">     end</span><br><span class=\"line\"></span><br><span class=\"line\"> end</span><br><span class=\"line\">-</span><br><span class=\"line\">-<span class=\"keyword\">if</span> <span class=\"variable\">$0</span> == __FILE__</span><br><span class=\"line\">-  git = SimpleGit.new</span><br><span class=\"line\">-  puts git.show</span><br><span class=\"line\">-end</span><br><span class=\"line\">\\ No newline at end of file</span><br></pre></td></tr></table></figure>\n<p>如果觉得<code>-p</code>参数展示的太多了，就用<code>--stat</code>来看改动文件与行数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\"> Rakefile | 2 +-</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"> lib/simplegit.rb | 5 -----</span><br><span class=\"line\"> 1 file changed, 5 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    first commit</span><br><span class=\"line\"></span><br><span class=\"line\"> README           |  6 ++++++</span><br><span class=\"line\"> Rakefile         | 23 +++++++++++++++++++++++</span><br><span class=\"line\"> lib/simplegit.rb | 25 +++++++++++++++++++++++++</span><br><span class=\"line\"> 3 files changed, 54 insertions(+)</span><br></pre></td></tr></table></figure>\n<p><code>--pretty</code>参数可以美化信息展示，这是一个复合参数，有<code>oneline</code>、<code>short</code>、<code>full</code>、<code>fuller</code>等选择</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\">ca82a6dff817ec66f44342007202690a93763949 changed the version number</span><br><span class=\"line\">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</span><br></pre></td></tr></table></figure>\n<p>或者自己定制输出模版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h - %an, %ar : %s\"</span></span><br><span class=\"line\">ca82a6d - Scott Chacon, 6 years ago : changed the version number</span><br><span class=\"line\">085bb3b - Scott Chacon, 6 years ago : removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\">a11bef0 - Scott Chacon, 6 years ago : first commit</span><br></pre></td></tr></table></figure>\n<p>模版参数定义如下</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description of Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%H</td>\n<td>Commit hash</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Abbreviated commit hash</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>Tree hash</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Abbreviated tree hash</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>Parent hashes</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>Abbreviated parent hashes</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>Author name</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>Author email</td>\n</tr>\n<tr>\n<td>%ad</td>\n<td>Author date (format respects the –date=option)</td>\n</tr>\n<tr>\n<td>%ar</td>\n<td>Author date, relative</td>\n</tr>\n<tr>\n<td>%cn</td>\n<td>Committer name</td>\n</tr>\n<tr>\n<td>%ce</td>\n<td>Committer email</td>\n</tr>\n<tr>\n<td>%cd</td>\n<td>Committer date</td>\n</tr>\n<tr>\n<td>%cr</td>\n<td>Committer date, relative</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>Subject</td>\n</tr>\n</tbody>\n</table>\n<p>在log中使用<code>--graph</code>来展示ASCII格式的图形化提交历史，建议使用更傻瓜的GUI工具来查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h %s\"</span> --graph</span><br><span class=\"line\">* 2d3acf9 ignore errors from SIGCHLD on <span class=\"built_in\">trap</span></span><br><span class=\"line\">*  5e3ee11 Merge branch <span class=\"string\">'master'</span> of git://github.com/dustin/grit</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 420eac9 Added a method <span class=\"keyword\">for</span> getting the current branch.</span><br><span class=\"line\">* | 30e367c timeout code and tests</span><br><span class=\"line\">* | 5a09431 add timeout protection to grit</span><br><span class=\"line\">* | e1193f8 support <span class=\"keyword\">for</span> heads with slashes <span class=\"keyword\">in</span> them</span><br><span class=\"line\">|/</span><br><span class=\"line\">* d6016bc require time <span class=\"keyword\">for</span> xmlschema</span><br><span class=\"line\">*  11d191e Merge branch <span class=\"string\">'defunkt'</span> into <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n<p>如果想查看两周以来的提交，用<code>--since</code>参数，同理，也有<code>--until</code>可供使用，后面可以接<code>2016-01-01</code>这样的时间格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --since=2.weeks</span><br></pre></td></tr></table></figure>\n<p><code>-S</code>参数查看提交中包含某个特定字段变更的log，比如你想看哪些提交改到了<code>onCreate</code>函数，就这么写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --SonCreate</span><br></pre></td></tr></table></figure>\n<p>还有其它选择功能，如查看某人的提交<code>--committer</code>，查看包含某些敏感词的提交<code>--grep</code>等等，如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(n)</td>\n<td>Show only the last n commits</td>\n</tr>\n<tr>\n<td>–since, –after</td>\n<td>Limit the commits to those made after the specified date.</td>\n</tr>\n<tr>\n<td>–until, –before</td>\n<td>Limit the commits to those made before the specified date.</td>\n</tr>\n<tr>\n<td>–author</td>\n<td>Only show commits in which the author entry matches the specified string.</td>\n</tr>\n<tr>\n<td>–committer</td>\n<td>Only show commits in which the committer entry matches the specified string.</td>\n</tr>\n<tr>\n<td>–grep</td>\n<td>Only show commits with a commit message containing the string</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>Only show commits adding or removing code matching the string</td>\n</tr>\n</tbody>\n</table>\n<p>举个🌰，直接照搬书中的好了：</p>\n<blockquote>\n<p>For example, if you want to see which commits modifying test files in the Git source code history are merged and were committed by Junio Hamano in the month of October 2008, you can run something like this:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">\"%h - %s\"</span> --author=gitster --since=<span class=\"string\">\"2008-10-01\"</span> \\</span><br><span class=\"line\">   --before=<span class=\"string\">\"2008-11-01\"</span> --no-merges -- t/</span><br><span class=\"line\">5610e3b - Fix testcase failure when extended attributes are <span class=\"keyword\">in</span> use</span><br><span class=\"line\">acd3b9e - Enhance hold_lock_file_for_&#123;update,append&#125;() API</span><br><span class=\"line\">f563754 - demonstrate breakage of detached checkout with symbolic link HEAD</span><br><span class=\"line\">d1a43f2 - reset --hard/<span class=\"built_in\">read</span>-tree --reset -u: remove unmerged new paths</span><br><span class=\"line\">51a94af - Fix <span class=\"string\">\"checkout --track -b newbranch\"</span> on detached HEAD</span><br><span class=\"line\">b0ad11e - pull: allow <span class=\"string\">\"git pull origin <span class=\"variable\">$something</span>:<span class=\"variable\">$current_branch</span>\"</span> into an unborn branch</span><br></pre></td></tr></table></figure>\n<h4 id=\"Undoing-Things\"><a href=\"#Undoing-Things\" class=\"headerlink\" title=\"Undoing Things\"></a>Undoing Things</h4><p>如果在一次commit后，发现忘了修改某个文件foo，那要怎么办？<br>当然可以修改了foo后，用<code>git commit -am</code>来增加一次commit。<br>可如果想与之前的commit并成一个呢？git为我们提供了这样的工具<code>--amend</code>(amend: vt&amp;vi 改良，修改，修订)。Git会检查<code>staged</code>区域，将其中的变更与上一个commit合并，你还可以修改合并后的commit信息。<br>针对上面的场景</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></span><br><span class=\"line\">$ git add forgotten_file</span><br><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n<p>如果<code>staged</code>区域并没有任何改动，<code>--amend</code>可以用来单纯的修改commit message，同样十分有用。</p>\n<p>下面讲讲，要是在<code>stage</code>文件后，反悔了，想要把文件回滚，怎么办？其实<code>git status</code>已经给了我们提示，那就是<code>git reset</code>，要结合<code>HEAD</code>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br><span class=\"line\">$ git reset HEAD CONTRIBUTING.md</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M CONTRIBUTING.md</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure>\n<p>上面这种用法只是回滚了<code>staged</code>中的文件，如果加上<code>--hard</code>参数，可就要慎重了——这会把commit回滚掉，而且，不留痕迹！</p>\n<p>如果文件还没有进行<code>stage</code>，正处于<code>modified</code>，你想要将它变回到<code>unmodified</code>，就用<code>checkout --</code>。同样，这个操作不会保留之前的任何修改，不带走一丝云彩。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>\n<p>Git还提供了另外一个很有力的工具<code>stash</code>，用来暂存修改，限于篇幅，暂不展开。</p>\n<h4 id=\"Working-With-Remotes\"><a href=\"#Working-With-Remotes\" class=\"headerlink\" title=\"Working With Remotes\"></a>Working With Remotes</h4><p>Git是一个强有力的协作工具，必不可少地，你会将自己的代码推送到仓库供他人使用，你也会将他人完成的代码从远端拉下来进行追踪。</p>\n<p><code>git remote -v</code>用来查看本地的分支（fetch &amp; push），对于复杂的项目，会有多个远端remote（实在找不出这个语境下合适的翻译，总不能说“分支”吧，会与branch重复）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">bakkdoor  https://github.com/bakkdoor/grit (fetch)</span><br><span class=\"line\">bakkdoor  https://github.com/bakkdoor/grit (push)</span><br><span class=\"line\">cho45     https://github.com/cho45/grit (fetch)</span><br><span class=\"line\">cho45     https://github.com/cho45/grit (push)</span><br><span class=\"line\">defunkt   https://github.com/defunkt/grit (fetch)</span><br><span class=\"line\">defunkt   https://github.com/defunkt/grit (push)</span><br><span class=\"line\">koke      git://github.com/koke/grit.git (fetch)</span><br><span class=\"line\">koke      git://github.com/koke/grit.git (push)</span><br><span class=\"line\">origin    git@github.com:mojombo/grit.git (fetch)</span><br><span class=\"line\">origin    git@github.com:mojombo/grit.git (push)</span><br></pre></td></tr></table></figure>\n<p>一般我们只会看到origin一个remote，使用<code>git remote add</code>来添加remote</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  https://github.com/schacon/ticgit (fetch)</span><br><span class=\"line\">origin  https://github.com/schacon/ticgit (push)</span><br><span class=\"line\">pb  https://github.com/paulboone/ticgit (fetch)</span><br><span class=\"line\">pb  https://github.com/paulboone/ticgit (push)</span><br></pre></td></tr></table></figure>\n<p><code>pb</code>是我们起的别名，然后使用<code>fetch</code>来更新这个remote</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch pb</span><br><span class=\"line\">remote: Counting objects: 43, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (36/36), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 43 (delta 10), reused 31 (delta 5)</span><br><span class=\"line\">Unpacking objects: 100% (43/43), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">From https://github.com/paulboone/ticgit</span><br><span class=\"line\"> * [new branch]      master     &gt; pb/master</span><br><span class=\"line\"> * [new branch]      ticgit     &gt; pb/ticgit</span><br></pre></td></tr></table></figure>\n<p> 也可以不指定remote名称，直接fetch所有remote</p>\n<p> 讲完了下载，我们来看看如何上传。<code>git push [remote-name] [branch-name]</code>，灰常简单</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p> <code>git remote show [remote-name]</code>命令可以用来观察某个remote的状态，注意！这里观察的并不是远端实时状态，而是本地上一次下载下来的版本，如果你想观察最新状态，需要先<code>fetch</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br><span class=\"line\">* remote origin</span><br><span class=\"line\">  URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  Fetch URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  Push  URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  HEAD branch: master</span><br><span class=\"line\">  Remote branches:</span><br><span class=\"line\">    master                           tracked</span><br><span class=\"line\">    dev-branch                       tracked</span><br><span class=\"line\">    markdown-strip                   tracked</span><br><span class=\"line\">    issue-43                         new (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</span><br><span class=\"line\">    issue-45                         new (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</span><br><span class=\"line\">    refs/remotes/origin/issue-11     stale (use <span class=\"string\">'git remote prune'</span> to remove)</span><br><span class=\"line\">  Local branches configured <span class=\"keyword\">for</span> <span class=\"string\">'git pull'</span>:</span><br><span class=\"line\">    dev-branch merges with remote dev-branch</span><br><span class=\"line\">    master     merges with remote master</span><br><span class=\"line\">  Local refs configured <span class=\"keyword\">for</span> <span class=\"string\">'git push'</span>:</span><br><span class=\"line\">    dev-branch                     pushes to dev-branch                     (up to date)</span><br><span class=\"line\">    markdown-strip                 pushes to markdown-strip                 (up to date)</span><br><span class=\"line\">    master                         pushes to master                         (up to date)</span><br></pre></td></tr></table></figure>\n<p>如果你觉得某个remote的名字起的太土气了，使用<code>git remote rename [old_name] [new_name]</code>来修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename pb paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">paul</span><br></pre></td></tr></table></figure>\n<p>同样，使用<code>git remote rm [remote_name]</code>来删除（可怜的paul）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tagging\"><a href=\"#Tagging\" class=\"headerlink\" title=\"Tagging\"></a>Tagging</h4><p>你完成了一个版本的全部需求，已经信心满满地进行了上线，并且线上全面回归过，一切正常——你以为全部的工作都完成了吗？并没有！你需要记录下本次提交作为一个里程碑，Git提供了Tag这个强大的工具。</p>\n<p>查看目前的tag，注意是以alphabetical顺序排列的，并非时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br></pre></td></tr></table></figure>\n<p>使用<code>-l</code>参数查看包含某个敏感词的tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -l <span class=\"string\">\"v1.8.5*\"</span></span><br><span class=\"line\">v1.8.5</span><br><span class=\"line\">v1.8.5-rc0</span><br><span class=\"line\">v1.8.5-rc1</span><br><span class=\"line\">v1.8.5-rc2</span><br><span class=\"line\">v1.8.5-rc3</span><br><span class=\"line\">v1.8.5.1</span><br><span class=\"line\">v1.8.5.2</span><br><span class=\"line\">v1.8.5.3</span><br></pre></td></tr></table></figure>\n<p>有两种Tag：lightweighted和annotated。前者非常简单，只是一个tag name，不包含任何其他信息。后者则记录了tagger name、email、date、message等信息，并且可以用GNU Privacy Guard (GPG)进行签名和校验。笔者强烈建议使用annotated进行打Tag。</p>\n<p>annotated tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v1.4 -m <span class=\"string\">\"my version 1.4\"</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br></pre></td></tr></table></figure>\n<p>用<code>git show [tag_name]</code>查看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v1.4</span><br><span class=\"line\">tag v1.4</span><br><span class=\"line\">Tagger: Ben Straub &amp;lt;ben@straub.cc&amp;gt;</span><br><span class=\"line\">Date:   Sat May 3 20:19:12 2014 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">my version 1.4</span><br><span class=\"line\"></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br></pre></td></tr></table></figure>\n<p>lightweighted tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.4-lw</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br><span class=\"line\">v1.4-lw</span><br><span class=\"line\">v1.5</span><br><span class=\"line\">$ git show v1.4-lw</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br></pre></td></tr></table></figure>\n<p>看到了没，对于这种tag，并没有提供commit之外的任何信息。</p>\n<p>如果你想要对几天之前的某一个commit打tag，怎么办？难道git只能在最新提交上打Tag吗？图样图森破！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v1.2 9fceb02</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.2</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br><span class=\"line\">v1.4-lw</span><br><span class=\"line\">v1.5</span><br><span class=\"line\"></span><br><span class=\"line\">$ git show v1.2</span><br><span class=\"line\">tag v1.2</span><br><span class=\"line\">Tagger: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Feb 9 15:32:16 2009 -0800</span><br><span class=\"line\"></span><br><span class=\"line\">version 1.2</span><br><span class=\"line\">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</span><br><span class=\"line\">Author: Magnus Chacon &amp;lt;mchacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sun Apr 27 20:43:35 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    updated rakefile</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>看到没，只需要在后面拼上checksum（可以只是一部分），就可以了</p>\n<p>按照上面的指示，你在本地打好了Tag，让我们把它推送到仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.5</span><br><span class=\"line\">Counting objects: 14, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (12/12), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 14 (delta 3), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:schacon/simplegit.git</span><br><span class=\"line\"> * [new tag]         v1.5 &gt; v1.5</span><br></pre></td></tr></table></figure>\n<p>如果tag很多，用复数！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br><span class=\"line\">Counting objects: 1, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:schacon/simplegit.git</span><br><span class=\"line\"> * [new tag]         v1.4 &gt; v1.4</span><br><span class=\"line\"> * [new tag]         v1.4-lw &gt; v1.4-lw</span><br></pre></td></tr></table></figure>\n<p>tag本身是无法进行修改的，这在一定程度上保证了代码的安全，当然，如果tag可以随便修改，那它跟普通的branch有什么区别？我们可以将tag拉成本地一个branch，用<code>git checkout -b [branchname] [tagname]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b version2 v2.0.0</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'version2'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Aliaes（别名）\"><a href=\"#Git-Aliaes（别名）\" class=\"headerlink\" title=\"Git Aliaes（别名）\"></a>Git Aliaes（别名）</h4><p>（也许是使用Git不够重度的原因，笔者认为这部分内容并不十分重要，几个常用的命令都很容易记，不常用的起了别名也记不住…）</p>\n<p>用<code>git config --global alias.[alias_name] [original_command]</code>来创建alias，在<code>~/.gitconfig</code>中查看这些alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.br branch</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>比如，你可以创建这样的alias，来回滚一个stage</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD --'</span></span><br></pre></td></tr></table></figure>\n<p>这样，你就可以用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git unstage fileA</span><br></pre></td></tr></table></figure>\n<p>来代替</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD -- fileA</span><br></pre></td></tr></table></figure>\n<p>如果你想要运行Git外部命令（rather than a Git subcommand），在命令前加上<code>!</code>（原文给的解释是<code>This is useful if you write your own tools that work with a Git repository.</code>笔者绞尽脑汁也没有想到这个功能用处在哪里…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.visual <span class=\"string\">'!gitk'</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"nova自动化测试探索与实践","url":"https://lilei.pro/2016/01/28/Nova-Automation-Practice/","content":"<hr>\n<h4 id=\"自动化测试可行性分析\"><a href=\"#自动化测试可行性分析\" class=\"headerlink\" title=\"自动化测试可行性分析\"></a>自动化测试可行性分析</h4><p>针对<code>android-nova</code>项目，每个新版本发布之前，RD 都需要进行主流程回归，这是一项重复且耗时的工作，“重复”是指每2～3周发版时就要进行一次，“耗时”则因为平均一条业务线要用一个小时时间——这还只是单android平台。<br>实现自动化后，可以大大减轻 RD 负担，并且可在迭代过程中建立 daily build 机制，及早发现问题，提高提测质量。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"对自动化测试的理解\"><a href=\"#对自动化测试的理解\" class=\"headerlink\" title=\"对自动化测试的理解\"></a>对自动化测试的理解</h4><p>这里只针对 UI 方面的白盒测试</p>\n<ol>\n<li>自动化测试的输入是用户操作（输入、点击、滑动）、网络请求返回</li>\n<li>自动化测试的输出是 UI 控件显示</li>\n</ol>\n<p>这两步都可以通过现有的自动化工具完成</p>\n<hr>\n<h4 id=\"自动化工具选取\"><a href=\"#自动化工具选取\" class=\"headerlink\" title=\"自动化工具选取\"></a>自动化工具选取</h4><p>之前组内分享了2个自动化工具，Robutium 和 Appium。查阅相关资料后，发现网络上比较流行的不外乎也就是这两个。简单罗列出各自的特点：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Robotium</th>\n<th>Appium</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否开源</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>测试类型</td>\n<td>黑盒</td>\n<td>黑盒</td>\n</tr>\n<tr>\n<td>支持平台</td>\n<td>Android</td>\n<td>Android, iOS, FirefoxOS</td>\n</tr>\n<tr>\n<td>apk是否需要再编译</td>\n<td>需要，测试代码必须打入apk包</td>\n<td>无需，测试代码单独存放</td>\n</tr>\n<tr>\n<td>可测App类型</td>\n<td>原生，hybrid</td>\n<td>原生，hybrid，甚至可以通过Safari／Chrome来测试web页面</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>“The most notable limitation”, 操作仅限本 app</td>\n<td>未知</td>\n</tr>\n<tr>\n<td>用例语言</td>\n<td>Java</td>\n<td>Any WebDriver-compatible language: Java, Python, PHP, C#, OC…</td>\n</tr>\n<tr>\n<td>参考资料</td>\n<td><a href=\"https://github.com/Androooid/treasure/blob/master/source/lockerlou/posts/android_robotium.md\" target=\"_blank\" rel=\"noopener\">Android Robotium自动化测试使用手册 by 楼赟程</a></td>\n<td><a href=\"https://github.com/Androooid/treasure/blob/master/source/qsqqinsao/posts/android_appium.md\" target=\"_blank\" rel=\"noopener\">Android Appium自动化测试指导手册 by 覃少强</a></td>\n</tr>\n</tbody>\n</table>\n<p>比较之后，选用Appium作为实践手段</p>\n<hr>\n<h4 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h4><p>如果要实现自动化测试，总结下来，以下几个方面是难点，也是必须解决的问题</p>\n<ol>\n<li>预设数据保存、读取</li>\n<li>预设数据填入组件</li>\n<li>模拟请求发送接收</li>\n<li>检验接收后的界面展示</li>\n</ol>\n<p>其中<code>2</code>&amp;<code>4</code>可以由测试框架帮助完成，<code>1</code>&amp;<code>3</code>比较棘手，详见本文讲述。</p>\n<hr>\n<h4 id=\"Appium配置与运行\"><a href=\"#Appium配置与运行\" class=\"headerlink\" title=\"Appium配置与运行\"></a>Appium配置与运行</h4><p>历时一天才跑通了Appium的demo，不得不再次感慨，中文博客的帮助的确是太太太太少了。首先要确认平台是OS X，其次还要是为android进行测试，好不容易找到了一些，发现大家都是一模一样的，不知道是谁抄谁。关键是你抄来抄去，抄的净是些错误内容……</p>\n<p>自己途中遇到一些曲折，记录如下</p>\n<ol>\n<li>理解Appium所使用的<code>client-server-app</code>的结构，<code>client</code>的代码不应该写在<code>app</code>里<br>我是这么处理的：<ul>\n<li>client：maven项目，用IntelliJ编写，测试代码位于<code>test/java/com.leili.demo.Demo</code>，注意maven项目要在pom里处理好依赖（见代码）</li>\n<li>server：Appium的GUI界面，完成配置即可使用，不需二次开发</li>\n<li>app：gradle项目，用AndroidStudio编写，不含测试代码</li>\n</ul>\n</li>\n<li>配置<code>ANDROID_HOME</code>时，记得配至到系统默认的bash配置文件中。刚开始时自己只写到了<code>~/.zshrc</code>里（因为平时用的是zsh），结果运行测试用例时报错找不到<code>ANDROID_HOME</code>，上网查找后也没有结果（baidu检索出的中文博客大多是讲路径中不要有空格…），最后醍醐灌顶恍然大悟，改了<code>~/.bash_profile</code>，才生效</li>\n<li>在写Appium测试用例（Java）时，在EditText进行输入，直接<code>element.sendKeys(&quot;foooooo&quot;)</code>即可，不要想当然在前面加上<code>element.click()</code>，否则会有奇怪的事情发生</li>\n</ol>\n<p><strong>maven依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.seleniumhq.selenium<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>selenium-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.48.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.appium<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"启动-Activity\"><a href=\"#启动-Activity\" class=\"headerlink\" title=\"启动 Activity\"></a>启动 Activity</h4><p>由于Appium目前只能用<code>包名＋类名</code>的方式启动，不支持通过intent启动Activity。如果需要在启动中携带参数，这里提供一个解决方法：在debug面板中通过scheme直接进入目标Activity。这种做法过于依赖Debug面板，其实并不是一种好的实现方式。</p>\n<p>希望Appium团队能够在后续更新中提供更多的启动Activity途径。</p>\n<p><strong>Appium中启动Activity的方法，代码位于<code>AndroidDriver.java</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appPackage</span></span><br><span class=\"line\"><span class=\"comment\"> *            The package containing the activity. [Required]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appActivity</span></span><br><span class=\"line\"><span class=\"comment\"> *            The activity to start. [Required]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appWaitPackage</span></span><br><span class=\"line\"><span class=\"comment\"> *            Automation will begin after this package starts. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appWaitActivity</span></span><br><span class=\"line\"><span class=\"comment\"> *            Automation will begin after this activity starts. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> stopApp</span></span><br><span class=\"line\"><span class=\"comment\"> *            If true, target app will be stopped. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@example</span> driver.startActivity(\"com.foo.bar\", \".MyActivity\", null, null, true);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> StartsActivity#startActivity(String, String, String, String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(String appPackage, String appActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String appWaitPackage, String appWaitActivity, <span class=\"keyword\">boolean</span> stopApp)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IllegalArgumentException</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"测试数据存取\"><a href=\"#测试数据存取\" class=\"headerlink\" title=\"测试数据存取\"></a>测试数据存取</h4><p>对于如何读取mock数据，有两种思路</p>\n<ol>\n<li><p>手机/模拟器连接mock服务器后，在mock服务器上配置，客户端每次请求会发送出去，但不是发送到真实的api后端，而是发送到mock服务器</p>\n<ul>\n<li>app代码无需变动</li>\n<li>实现简单</li>\n<li>android/iOS两个平台可以共用同一套数据、同一个mock服务器</li>\n<li>依赖mock服务器，甚至可能需要自己搭建mock服务器</li>\n<li>要考虑如何使模拟器在mock服务器上进行注册。已有的扫二维码方式显然不现实</li>\n</ul>\n</li>\n<li><p>将mock数据存入手机/模拟器，本地读取</p>\n<ul>\n<li>不依赖mock服务器</li>\n<li>需要app内部支持，实现DB、Service等功能，较复杂</li>\n<li>android/iOS各自都需要改动底层代码以进行支持</li>\n<li>仍然需要考虑正常开启的app如何自动切换到测试模式</li>\n</ul>\n</li>\n</ol>\n<p>比较后，选用<code>1</code>作为最后的实现方式，同时基于<code>mobile-httpwatch</code>搭建了自己的mock服务器，提供预加载配置的接口。</p>\n<hr>\n<h4 id=\"Show-Time\"><a href=\"#Show-Time\" class=\"headerlink\" title=\"Show Time\"></a>Show Time</h4><p>主流程测试用例（预订）：<a href=\"https://www.tapd.cn/20007421/sparrow/tcase/view/1120007421001016788?url_cache_key=53da847c3c5c703bb01d1f98ee33bb8f\" target=\"_blank\" rel=\"noopener\"><strong>test case</strong></a></p>\n<p><img src=\"/img/160128_nova_auto_test/test_case_pic.png\" alt=\"\"></p>\n<p>这条用例的操作过程中，涉及到调用以下3个接口:</p>\n<ol>\n<li><code>getbookingcontext.yy</code>，获取商户预订配置</li>\n<li><code>getbookingholidays.yy</code>，获取节假日信息（商户无关）</li>\n<li><code>book.yy</code>，下订单</li>\n</ol>\n<p>出于简化的考虑，我们本次只对接口<code>3</code>进行mock。</p>\n<p>截图应如下所示：</p>\n<p>输入</p>\n<p><img src=\"/img/160128_nova_auto_test/input.png\" alt=\"\"></p>\n<p>输出</p>\n<p><img src=\"/img/160128_nova_auto_test/output.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Q-预设的mock数据要保存在TestCase中还是保存在Server里？\"><a href=\"#Q-预设的mock数据要保存在TestCase中还是保存在Server里？\" class=\"headerlink\" title=\"Q: 预设的mock数据要保存在TestCase中还是保存在Server里？\"></a>Q: 预设的mock数据要保存在TestCase中还是保存在Server里？</h4><p>有两种方案</p>\n<ol>\n<li>mock data 保存在 TestCase 侧，每次用例执行前，TestCase 把数据传给 Server（这种方案每次传递数据量过大）</li>\n<li>mock data 保存在 Server 侧，每次用例执行前，TestCase 把 mock data id 传给 Server</li>\n</ol>\n<p>每个 case 对应一套 mock data ，可以是一个接口或者多个接口的数据。</p>\n<hr>\n<h4 id=\"功能点开发进度表\"><a href=\"#功能点开发进度表\" class=\"headerlink\" title=\"功能点开发进度表\"></a>功能点开发进度表</h4><p>||状态|功能点|备注|<br>|1|done|test engine 发送 pre-req ，告知 server caseid||<br>|2|done|server 收到请求||<br>|3|done|server 解析请求中的 caseid||<br>|4|done|server 根据 caseid ，加载本地对应 mock data ，加载完成后告知 test engine||<br>|5|done|test engine 驱动 client 进行注册||<br>|6|done|test engine 驱动 client 发送真实请求||<br>|7|done|server 根据真实请求，返回已经准备好的 mock data||<br>|8|done|client 获得 mock data||<br>|9|done|test engine 进行自动化 UI 检验||<br>|10||test engine UI 校验完成后，发送 post-req，告知 server 清除 mock data|可选|<br>|11||server 接收到 post-req 后，清除 mock data|可选|</p>\n<hr>\n<h4 id=\"一些nodejs函数方法\"><a href=\"#一些nodejs函数方法\" class=\"headerlink\" title=\"一些nodejs函数方法\"></a>一些<code>nodejs</code>函数方法</h4><p>处理<code>get</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- http:<span class=\"comment\">//appmock.dp/mockconfig.do?caseid=1024 --&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url.parse(request.url, <span class=\"literal\">true</span>).query.caseid); <span class=\"comment\">// log '1024' here</span></span><br><span class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">response.end();</span><br></pre></td></tr></table></figure>\n<p>处理<code>post</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postDataChunk</span>) </span>&#123;</span><br><span class=\"line\">    postData += postDataChunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据接收完毕'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = querystring.parse(postData);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params[<span class=\"string\">\"num\"</span>]); <span class=\"comment\">/// &#123;num=1024, name=lilei&#125;, log '1024' here</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">500</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">\"数据提交完毕\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>读取文件（同步）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> content = fs.readFileSync(<span class=\"string\">'/Users/leili/Downloads/7'</span>);</span><br><span class=\"line\">config = parseJson(content);</span><br><span class=\"line\">user.setMockConfig(config);</span><br></pre></td></tr></table></figure>\n<p>读取文件（异步）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'/Users/leili/Downloads/2'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>预订可能对已过时间有一些判断，导致在线预订页无法使用mock数据，原因未明</li>\n</ul>\n<hr>\n<h4 id=\"反过来，一些思考\"><a href=\"#反过来，一些思考\" class=\"headerlink\" title=\"反过来，一些思考\"></a>反过来，一些思考</h4><blockquote>\n<p>真的需要自动化吗？UI 本身做的逻辑就很少，如果返回数据是正确的，UI 显示也几乎不会出现问题，为何要如此多精力来写自动化 case</p>\n</blockquote>\n<ul>\n<li>准确度：每一个控件，展示什么内容？</li>\n<li>数量：case 数量大，记不住</li>\n</ul>\n<hr>\n<h4 id=\"投入到生产中，会遇到的问题\"><a href=\"#投入到生产中，会遇到的问题\" class=\"headerlink\" title=\"投入到生产中，会遇到的问题\"></a>投入到生产中，会遇到的问题</h4><ul>\n<li>前期准备量大：扒测试数据，造各种case（定金、预订成功、失败，商家营业中、暂未营业等各种状态）</li>\n<li>难以对布局之间的相对位置、缩进等进行测试</li>\n<li>即使是使用Appium进行自动化测试，也是需要rd做支持的，qa必须从rd处了解到诸如控件id等属性，方可以定位到目标控件进行操作。</li>\n<li>视觉上看是一个TextView，而实际上是两个TextView，作为QA难以判断（可能要求理解功能具体实现）</li>\n</ul>\n<hr>\n<h4 id=\"mobile-httpwatch-项目阅读笔记\"><a href=\"#mobile-httpwatch-项目阅读笔记\" class=\"headerlink\" title=\"mobile-httpwatch 项目阅读笔记\"></a>mobile-httpwatch 项目阅读笔记</h4><p>记录的内容比较琐碎</p>\n<p>web.js  注册，设置mock数据<br>mockconfig.js   mock设置界面<br>User.js 用户数据结构，每个用户有一个MockConfig<br>mock_config.js  默认的mock数值<br>html5 的 localStorage<br>ProxyFactory.js mock rule，重点看handleProxyRequest和mockResponse两个方法<br>mockConfig = user.getMockRuleForUrl(req.url)<br>Utils.js</p>\n<hr>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://www.cnblogs.com/lori/p/3437562.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lori/p/3437562.html</a><br><a href=\"http://www.mkyong.com/java/how-to-send-http-request-getpost-in-java\" target=\"_blank\" rel=\"noopener\">http://www.mkyong.com/java/how-to-send-http-request-getpost-in-java</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","自动化测试"]},{"title":"携程动态加载实践DynamicAPK项目学习","url":"https://lilei.pro/2016/01/18/携程动态加载实践DynamicAPK项目学习/","content":"<hr>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p><strong>宿主</strong>：Host Apk，打包运行的总项目，用于集成各个子工程，相当于<code>android-nova壳</code>，只有一个</p>\n<p><strong>插件</strong>：Plugin，子工程，由各个业务线独立开发，可以依赖<strong>宿主</strong>提供的资源，一个宿主能够拥有多个插件</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Andoroid-Build-流程\"><a href=\"#Andoroid-Build-流程\" class=\"headerlink\" title=\"Andoroid Build 流程\"></a>Andoroid Build 流程</h2><p><img src=\"/img/160118_dynamic_apk/android-build-2.png\" alt=\"\"></p>\n<ul>\n<li>Resource Files：项目<code>res</code>路径下的文件，包含<code>anim</code>、<code>drawable</code>、<code>layout</code>、<code>raw</code>等</li>\n<li>Source Files：项目<code>src</code>路径下(对于<code>android-nova</code>是<code>src/main/java</code>)的文件</li>\n<li>aapt: 将<code>.xml</code>文件转换为java类型</li>\n<li>Generated Source Files：由<code>aapt</code>工具生成，存储在<code>/gen</code>目录</li>\n<li>javac：java编译器，生成<code>.class</code>文件</li>\n<li>dx：将<code>.class</code>文件转换为DVM可识别的<code>dex</code>文件</li>\n<li>apkbuilder：将所有文件打包进<code>apk</code>中</li>\n<li>zipalign：将<code>apk</code>中未经压缩过的文件进行4字节对齐，以减少运行时<code>RAM</code>消耗</li>\n</ul>\n<hr>\n<h2 id=\"协同开发\"><a href=\"#协同开发\" class=\"headerlink\" title=\"协同开发\"></a>协同开发</h2><h4 id=\"与引用aar提供的公用UI组件之间的联系与区别\"><a href=\"#与引用aar提供的公用UI组件之间的联系与区别\" class=\"headerlink\" title=\"与引用aar提供的公用UI组件之间的联系与区别\"></a>与<code>引用aar提供的公用UI组件</code>之间的联系与区别</h4><ul>\n<li>本质上都是<code>classes.dex</code>与<code>res/</code>等文件的集合</li>\n<li>依赖关系不同</li>\n<li>是否包含业务逻辑</li>\n<li>最重要的一点，<code>Activity</code>注册</li>\n</ul>\n<h4 id=\"插件引用宿主资源\"><a href=\"#插件引用宿主资源\" class=\"headerlink\" title=\"插件引用宿主资源\"></a>插件引用宿主资源</h4><ul>\n<li>在<code>java</code>代码中直接用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123; <span class=\"comment\">// demo2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo2_activity_main);</span><br><span class=\"line\">        TextView textView=(TextView)findViewById(R.id.demo2_textView3);</span><br><span class=\"line\">        textView.setText(R.string.sample_text); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">        ImageView imageView=(ImageView)findViewById(R.id.demo2_imageView2);</span><br><span class=\"line\">        imageView.setImageResource(R.drawable.sample); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在布局文件中引用宿主资源，编译时会报错</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/leili/Documents/idea_workspace/BeQuietLee/DynamicAPK/demo2/res/layout/demo2_activity_main.xml:40: error: </span><br><span class=\"line\">Error: No resource found that matches the given name (at <span class=\"string\">'src'</span> with value <span class=\"string\">'@drawable/sample'</span>).</span><br></pre></td></tr></table></figure>\n<h4 id=\"宿主调起插件\"><a href=\"#宿主调起插件\" class=\"headerlink\" title=\"宿主调起插件\"></a>宿主调起插件</h4><ul>\n<li>宿主<code>AndroidMainifest.xml</code>需要对所有插件<code>Activity</code>进行注册</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"ctrip.android.sample\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.sample.BundleBaseApplication\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.demo1.MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.demo2.MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>startActivity时需要写明类的完整路径</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startActivity(<span class=\"keyword\">new</span> Intent(getApplicationContext(), Class.forName(<span class=\"string\">\"ctrip.android.demo1.MainActivity\"</span>)));</span><br></pre></td></tr></table></figure>\n<h4 id=\"对aapt工具的改造\"><a href=\"#对aapt工具的改造\" class=\"headerlink\" title=\"对aapt工具的改造\"></a>对<code>aapt</code>工具的改造</h4><p>为<code>aapt</code>增加<code>--apk-module</code>参数</p>\n<blockquote>\n<p>如前所述，资源ID其实有一个PackageID的内部字段。我们为每个插件工程指定独特的PackageID字段，这样根据资源ID就很容易判明，此资源需要从哪个插件apk中去查找并加载了。在后文的资源加载部分会有进一步阐述。</p>\n</blockquote>\n<p>通常项目中生成的<code>R.java</code>，会包含由<code>aapt</code>生成的所有资源的<code>id</code>，以<code>0x7f</code>开头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dianping.hui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">R</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">anim</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> activity_exit=<span class=\"number\">0x7f040000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> back_enter=<span class=\"number\">0x7f040001</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> back_exit=<span class=\"number\">0x7f040002</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> booking_push_up_out=<span class=\"number\">0x7f040003</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> fade_light_out=<span class=\"number\">0x7f040004</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> gradient_enter=<span class=\"number\">0x7f040005</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> grow_from_bottom=<span class=\"number\">0x7f040006</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">color</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> actionbar_title_color=<span class=\"number\">0x7f0b0000</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dimen</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> action_button_height=<span class=\"number\">0x7f0700a6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> action_button_margin_between=<span class=\"number\">0x7f0700a7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>0x7f</code>是怎么来的呢，看一下原汁原味的<code>aapt</code>中的逻辑</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceTable::ResourceTable(Bundle* bundle, <span class=\"keyword\">const</span> String16&amp; assetsPackage, ResourceTable::PackageType type)</span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> packageId = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (mPackageType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> App:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AppFeature:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x7f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> System:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> SharedLibrary:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        assert(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DynamicAPK中改动后的生成<code>packageId</code>的逻辑，位于<code>ResourceTable.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceTable::ResourceTable(Bundle* bundle, <span class=\"keyword\">const</span> String16&amp; assetsPackage, ResourceTable::PackageType type)</span><br><span class=\"line\">    : mAssetsPackage(assetsPackage)</span><br><span class=\"line\">    , mPackageType(type)</span><br><span class=\"line\">    , mTypeIdOffset(<span class=\"number\">0</span>)</span><br><span class=\"line\">    , mNumLocal(<span class=\"number\">0</span>)</span><br><span class=\"line\">    , mBundle(bundle)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> packageId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mPackageType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> App:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> AppFeature:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x7f</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> System:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SharedLibrary:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//        case Voice:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x34;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Call:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x35;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Search:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x36;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Schedule:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x37;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Train:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x38;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Destination:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x44;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Chat:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x46;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Flight:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x52;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case MyCtrip:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x54;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Pay:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x55;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Foundation:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x56;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Hotel:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x58;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Container:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x61;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case CustomerService:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x62;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case ThirdParty:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x63;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend1:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x64;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend2:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x65;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend3:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x66;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend4:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x67;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend5:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x68;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend6:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x69;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            assert(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bundle-&gt;getApkModule().isEmpty())&#123;</span><br><span class=\"line\">        android::String8 apkmoduleVal=bundle-&gt;getApkModule();</span><br><span class=\"line\">        packageId=apkStringToInt(apkmoduleVal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sp&lt;Package&gt; package = <span class=\"keyword\">new</span> Package(mAssetsPackage, packageId);</span><br><span class=\"line\">    mPackages.add(assetsPackage, package);</span><br><span class=\"line\">    mOrderedPackages.add(package);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Every resource table always has one first entry, the bag attributes.</span></span><br><span class=\"line\">    const SourcePos unknown(String8(\"????\"), 0);</span><br><span class=\"line\">    getType(mAssetsPackage, String16(<span class=\"string\">\"attr\"</span>), unknown);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来，不同业务的资源被赋予了不同的id，在加载时，便进入到各个业务打出的插件包里寻找资源.</p>\n<p>在<code>sub-project-build.gradle</code>中，组装<code>--apk-module</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">argv &lt;&lt; <span class=\"string\">'--apk-module'</span></span><br><span class=\"line\">argv &lt;&lt; <span class=\"string\">\"<span class=\"variable\">$resourceId</span>\"</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h2><p>运行时加载资源，需要知道资源从哪个插件中获取。所有插件位于压缩包的<code>assets/baseres/</code>路径下。在运行时会在<code>/data/data/ctrip.android.sample/files/storage/{num}</code>生成对应的文件夹。</p>\n<p><img src=\"/img/160118_dynamic_apk/ctrip_folders.png\" alt=\"\"></p>\n<ul>\n<li><code>1</code>、<code>2</code>分别对应了<code>demo1</code>、<code>demo2</code></li>\n<li><code>meta</code>记录了下一个可用id，即<code>3</code></li>\n<li><code>1/meta</code>中保存包名<code>ctrip.android.demo1</code></li>\n<li><code>1/version_1/bundle.zip</code>就是<code>assets/baseres/ctrip_android_demo1.so</code>，可以解压缩观察</li>\n<li><code>1/version_1/bundle.dex</code>其实与<code>bundle.zip</code>解压缩拿到的<code>dex</code>是一样的</li>\n<li><code>1/version_1/meta</code>无用（内容为<code>file:</code>）</li>\n</ul>\n<p>这部分目录与文件的管理，是通过<code>Bundle</code>、<code>Archive</code>接口完成的，<code>version_1</code>、<code>version_2</code>…<code>version_n</code>分别对应一个<code>BundleArchiveRevision</code>，它们统一由<code>BundleAchive</code>管理。<code>BundleArchive</code>由<code>BundleImpl</code>管理。图中有<code>demo1</code>、<code>demo2</code>，对应着就有2个<code>BundleImpl</code>。各个<code>Bundle</code>的启动，更新，卸载，由<code>Framework.java</code>管理。</p>\n<p>对应关系如下图所示：</p>\n<p><img src=\"/img/160118_dynamic_apk/ctrip_bundle.jpg\" alt=\"\"></p>\n<h2 id=\"热修复\"><a href=\"#热修复\" class=\"headerlink\" title=\"热修复\"></a>热修复</h2><p><code>DynamicAPK</code>中，仅仅提供了分包、资源加载的demo，未包含hotfix功能。虽然可以看到<code>HotPatchManager.java</code>，但并没有真正运行。这里我们自己来山寨一次hotfix的过程。</p>\n<p>首先了解一下apk安装以及运行时会操作的几个目录。下载好的<code>apk</code>在进行安装时，会对系统中以下几个目录进行操作</p>\n<ul>\n<li><code>/data/app</code>：apk安装时会被复制到该目录</li>\n<li><code>/data/dalvik-cache</code>：安装dex文件的真正位置，后续app启动均从此处进行load</li>\n<li><code>/data/data</code>：新建以<code>packageName</code>命名的文件夹，只有app自己能访问，用于管理数据</li>\n</ul>\n<p>在没有root过的设备上，应用程序有权限操作的目录仅仅是<code>/data/data/com.foo.foo</code>，想更改<code>/data/dalvik-cache</code>中的<code>dex</code>文件是不可能的。但是，结合上面完成的动态加载工作，我们就可以在运行时更新<code>demo1</code>、<code>demo2</code>的dex文件，从而达到热修复的目的。</p>\n<p>这里我们演示一个更换文案的demo，将<code>demo2</code>里面<code>textView</code>预设的文案由<code>This is sample  resource:</code>换成<code>下图来自于宿主资源</code>。首先需要把改好的项目进行编译，取出<code>bundle.dex</code>与<code>bundle.zip</code>（这两个文件的来源，前文已经提过）。然后把它们上传到<code>/data/data/com.ctrip.sample/files/storage/2/version_2</code>。上传完成后，下次启动就会加载我们修改后的dex文件，展示新的内容。</p>\n<p>这里直接用<strong>monitor</strong>来模拟hotfix文件下载过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo2_activity_main);</span><br><span class=\"line\">        TextView textView=(TextView)findViewById(R.id.demo2_textView3);</span><br><span class=\"line\"><span class=\"comment\">//       textView.setText(R.string.sample_text); // 宿主资源</span></span><br><span class=\"line\">        textView.setText(<span class=\"string\">\"下图来自于宿主资源\"</span>);</span><br><span class=\"line\">        ImageView imageView=(ImageView)findViewById(R.id.demo2_imageView2);</span><br><span class=\"line\">        imageView.setImageResource(R.drawable.sample); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hotfix之前</p>\n<p><img src=\"/img/160118_dynamic_apk/hotfix_before.png\" alt=\"\"></p>\n<p>hotfix之后</p>\n<p><img src=\"/img/160118_dynamic_apk/hotfix_after.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"附一：更完整的编译流程图\"><a href=\"#附一：更完整的编译流程图\" class=\"headerlink\" title=\"附一：更完整的编译流程图\"></a>附一：更完整的编译流程图</h4><p><img src=\"/img/160118_dynamic_apk/android_build_process.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"附二：推荐阅读\"><a href=\"#附二：推荐阅读\" class=\"headerlink\" title=\"附二：推荐阅读\"></a>附二：推荐阅读</h4><ul>\n<li><a href=\"http://segmentfault.com/a/1190000004086213\" target=\"_blank\" rel=\"noopener\">Android动态加载技术 系列索引</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"项目交接那点事儿","url":"https://lilei.pro/2016/01/15/项目交接那点事儿/","content":"<hr>\n<p><a href=\"http://wiki.sankuai.com/pages/viewpage.action?pageId=399281275\" target=\"_blank\" rel=\"noopener\">源文档链接 by 李全民(BigFootprint)</a></p>\n<blockquote>\n<p>2015年末，我去北京美团总部进行B端Android排号APP交接，历时2个礼拜。这是我第一次单独承接一整个客户端项目的交接，加上这还是毕业3年以来首次出差，过程中犯了一些错误，也走了很多弯路。同时，上海的小伙伴们在与美团同事进行美团app的交接。交接结束后，大家总结了本次遇到的一些问题，同时详细列出了一次成功的交接应该完成哪些任务。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>以下表格是综合Team所对接的所有项目列出的对接项，实际对接项目的时候可能不会涉及到所有的内容，填写的时候请注意：</p>\n<ol>\n<li>不要空单元，如果没有相应的对接项或者不能确定的内容，请注明，比如“无”、“待确定”，以便于Check整体情况；</li>\n<li>所有的Item，如果需要实践的，请对接人实践到位，并将权限申请、联系责任人等过程记录下来；</li>\n<li>表格本身内容有限，主要扮演汇总角色，简短的内容可直接写在表格中，较长的内容建议整理成文档，以链接的形式记录在表格内；</li>\n<li>交接过程中请随时注意表格中的不足之处并及时补足；</li>\n<li>交接一开始就复制该表格，新建文档进行填写；</li>\n</ol>\n<hr>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>对接人</li>\n<li>交接内容</li>\n<li>交接完成标准</li>\n<li>交接完成时间点</li>\n<li>进度（注意定期反馈）</li>\n</ul>\n<h3 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h3><ul>\n<li>项目演示<ul>\n<li>项目入口</li>\n<li>项目使用主流程</li>\n</ul>\n</li>\n<li>项目运行需要的配置</li>\n<li>项目承载的业务（详细）</li>\n<li>项目结构</li>\n<li>使用的技术<ul>\n<li>开源框架</li>\n<li>Hybrid框架</li>\n<li>JNI（注明支持架构）</li>\n<li>技术选型原因</li>\n</ul>\n</li>\n<li>模块划分<ul>\n<li>划分标准</li>\n<li>模块功能</li>\n<li>模块负责人</li>\n</ul>\n</li>\n<li>代码<ul>\n<li>坑（带有Bug的地方，描述请委婉一点）</li>\n<li>逻辑复杂 | 实现复杂的地方</li>\n<li>建议重构的地方</li>\n<li>提交<ul>\n<li>分支管理</li>\n<li>分支命名</li>\n<li>commit提交规范</li>\n<li>分支合并方式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>文档<ul>\n<li>相关文档</li>\n<li>更新频率（规范）</li>\n</ul>\n</li>\n<li>硬件资源<ul>\n<li>规格</li>\n<li>如何使用</li>\n<li>申请流程</li>\n<li>设备使用情况（多少台在使用中）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ul>\n<li>迭代的重要时间节点以及节点任务</li>\n<li>超出节点未完成任务补救措施</li>\n<li>出了紧急问题如何处理（主要是线上Crash）</li>\n<li>Story从提出到上线的过程<ul>\n<li>PO如何提出Story</li>\n<li>接口如何定义</li>\n<li>联调方式</li>\n<li>如何提测</li>\n<li>Bug管理</li>\n</ul>\n</li>\n<li>独立APP<ul>\n<li>签名</li>\n<li>发布流程</li>\n</ul>\n</li>\n<li>版本升级方式和规范</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li>App本身的Debug工具</li>\n<li>打包平台的配置使用</li>\n<li>包管理平台（MVN仓库地址）</li>\n<li>测试工具、账号</li>\n</ul>\n<h3 id=\"项目监测\"><a href=\"#项目监测\" class=\"headerlink\" title=\"项目监测\"></a>项目监测</h3><ul>\n<li>CrashLog<ul>\n<li>如何查询</li>\n</ul>\n</li>\n<li>打点<ul>\n<li>收集上传规则</li>\n<li>划分维度（诸如：是否区分线上和beta环境）</li>\n<li>字段含义</li>\n<li>查询方式</li>\n</ul>\n</li>\n<li>监测数据有无报表，如何添加</li>\n<li>项目当前重要数据（请仔细整理，作为项目当前状态的快照，以供日后进行对比）</li>\n</ul>\n<h3 id=\"合作资源\"><a href=\"#合作资源\" class=\"headerlink\" title=\"合作资源\"></a>合作资源</h3><ul>\n<li>QA</li>\n<li>后端</li>\n<li>UED</li>\n<li>PO</li>\n<li>相关项目负责人（比如平台）</li>\n</ul>\n<h3 id=\"其余\"><a href=\"#其余\" class=\"headerlink\" title=\"其余\"></a>其余</h3><ul>\n<li>有没有别的需要注意的点</li>\n</ul>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><ul>\n<li>找PO了解后期规划</li>\n<li>第一期Story的开发时间</li>\n<li>一段时间内需要的人力</li>\n<li>项目后期规划</li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"博客工具","url":"https://lilei.pro/2016/01/14/博客工具/","content":"<blockquote>\n<p>一些提高网站与博客编辑、浏览效率的工具</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Markdown编辑工具\"><a href=\"#Markdown编辑工具\" class=\"headerlink\" title=\"Markdown编辑工具\"></a>Markdown编辑工具</h2><p><a href=\"http://http://www.dillinger.io/\" target=\"_blank\" rel=\"noopener\">dillinger.io</a> 在线md编辑器，所见即所得</p>\n<hr>\n<h2 id=\"hexo的坑\"><a href=\"#hexo的坑\" class=\"headerlink\" title=\"hexo的坑\"></a>hexo的坑</h2><p>title中不可以包含英文的<code>[</code> <code>]</code> <code>*</code>字符，其余禁忌字符目前尚未遇到</p>\n<hr>\n<h2 id=\"首页文章“展开更多”\"><a href=\"#首页文章“展开更多”\" class=\"headerlink\" title=\"首页文章“展开更多”\"></a>首页文章“展开更多”</h2><p>默认情况下首页文章是全文展示的，很不友好。</p>\n<p>在文件中增加<code>&lt;!--more--&gt;</code>标签，即可实现“展开更多”功能。</p>\n<hr>\n<h2 id=\"变更历史\"><a href=\"#变更历史\" class=\"headerlink\" title=\"变更历史\"></a>变更历史</h2><ul>\n<li><strong>2016.02.26</strong> 修改<code>themes/landscape/source/css/_partial/article.styl</code>中的<code>.article-entry</code>下面<code>img, video</code>的<code>max-width</code>，从<code>100%</code>改为<code>70%</code></li>\n</ul>\n<hr>\n<h3 id=\"Never-Ending\"><a href=\"#Never-Ending\" class=\"headerlink\" title=\"===Never Ending===\"></a><em>===Never Ending===</em></h3><hr>\n","categories":[],"tags":["工作效率"]},{"title":"半年来我吃过的那些蛋白粉","url":"https://lilei.pro/2016/01/14/半年来我吃过的那些蛋白粉/","content":"<p>练身体的人大多会经历以下几个阶段：</p>\n<ol>\n<li>初次办卡，没请过教练，自己在健身房里漫无目的地乱玩</li>\n<li>有目的有计划地进行独立训练</li>\n<li>注重日常饮食中蛋白质的补充，一般会从水煮蛋开始，进阶的会选择鸡胸肉</li>\n<li>接触并使用蛋白粉</li>\n<li>进一步接触肌酸、氮泵、BCAAs（支链氨酸）、谷氨酰胺乃至促睾等</li>\n<li>已经超出了笔者目前认知阶段</li>\n</ol>\n<p>由于自己从使用补剂以来，陆续尝试过了市面上几种常见的品牌和口味，这里整理出来，方便自己以后对比选择，也希望为尚未接触补剂的朋友提供一些初级的知识。</p>\n<hr>\n<a id=\"more\"></a>\n<p>下面一一细数，就<strong>价格、口味、蛋白质含量、性价比</strong>等几个方面，对比一下这几种粉。</p>\n<ul>\n<li>表格中列出的每一种粉，均为笔者亲身使用过。</li>\n<li>图片、价格均来自于<a href=\"http://www.iherb.com?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">www.iherb.com</a>，截取时间为2016.1.17。计价未加入新人优惠、节假日促销等因素。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>价格</th>\n<th>重量</th>\n<th>每桶份数</th>\n<th>每份蛋白质含量/g</th>\n<th>每份支链氨酸含量/g</th>\n<th>每份谷氨酰胺含量/g</th>\n<th>口味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Optimum/欧普特蒙</td>\n<td>$65</td>\n<td>5磅</td>\n<td>74</td>\n<td>24</td>\n<td>5.5</td>\n<td>4</td>\n<td>Double Rich Chocolate</td>\n</tr>\n<tr>\n<td>Bio-X</td>\n<td>$65</td>\n<td>5磅</td>\n<td>65</td>\n<td>27</td>\n<td>未知</td>\n<td>未知</td>\n<td>Chocolate</td>\n</tr>\n<tr>\n<td>Dymatize/迪马泰兹</td>\n<td>$58</td>\n<td>5磅</td>\n<td>62</td>\n<td>25</td>\n<td>5.6</td>\n<td>4.4</td>\n<td>Chocolate Fudge</td>\n</tr>\n<tr>\n<td>MRM</td>\n<td>$59</td>\n<td>5磅</td>\n<td>73</td>\n<td>22</td>\n<td>4.6</td>\n<td>4.88</td>\n<td>Strawberry</td>\n</tr>\n<tr>\n<td>BSN Syntha-6/六重矩阵</td>\n<td>$60</td>\n<td>5磅</td>\n<td>48</td>\n<td>22</td>\n<td>未知</td>\n<td>未知</td>\n<td>Vanilla Ice Cream</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"Optimum-欧普特蒙-金牌乳清蛋白\"><a href=\"#Optimum-欧普特蒙-金牌乳清蛋白\" class=\"headerlink\" title=\"Optimum/欧普特蒙 金牌乳清蛋白\"></a>Optimum/欧普特蒙 金牌乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/optimum.jpg\" alt=\"\"></p>\n<ul>\n<li>bodybuilding.com上排名第一的乳清蛋白</li>\n<li>蛋白质纯度高，意味着同样是5磅，可以提供更多的份数</li>\n<li>口味清淡，容易摇匀</li>\n<li><a href=\"http://www.iherb.com/Optimum-Nutrition-100-Whey-Gold-Standard-Double-Rich-Chocolate-5-lbs-2-27-kg/27509?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h4 id=\"Bio-X-Power-Whey-Complex-复合乳清蛋白\"><a href=\"#Bio-X-Power-Whey-Complex-复合乳清蛋白\" class=\"headerlink\" title=\"Bio-X Power Whey Complex 复合乳清蛋白\"></a>Bio-X Power Whey Complex 复合乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/biox.jpg\" alt=\"\"></p>\n<ul>\n<li>笔者尝试的第一桶蛋白粉，<strong>@顾老师</strong>推荐</li>\n<li>淘宝购买，据卖家表示是来自香港bcshop代购</li>\n<li>iherb不售卖</li>\n<li>因购买途径单一，且使用者少，不推荐</li>\n</ul>\n<hr>\n<h4 id=\"Dymatize／迪马泰兹-Elite精英乳清蛋白\"><a href=\"#Dymatize／迪马泰兹-Elite精英乳清蛋白\" class=\"headerlink\" title=\"Dymatize／迪马泰兹 Elite精英乳清蛋白\"></a>Dymatize／迪马泰兹 Elite精英乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/dymatize.jpg\" alt=\"\"></p>\n<ul>\n<li>性价比高</li>\n<li>口味清淡，容易摇匀</li>\n<li>相较于其它蛋白粉，Dymatize的粉吃了之后会有强烈的屁意…</li>\n<li><a href=\"http://www.iherb.com/Dymatize-Nutrition-Elite-100-Whey-Protein-Chocolate-Fudge-5-lbs-2-270-g/51086?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h4 id=\"MRM\"><a href=\"#MRM\" class=\"headerlink\" title=\"MRM\"></a>MRM</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/mrm.jpg\" alt=\"\"></p>\n<ul>\n<li>性价比高</li>\n<li>草莓口味，<strong>里面居然有草莓粒！！！</strong>口感微甜，有点草莓奶昔的感觉（＋脱脂牛奶）。</li>\n<li>用摇杯摇匀时，泡沫非常多，尤其是搭配脱脂牛奶而非纯净水。导致清洗杯子很麻烦</li>\n<li><a href=\"http://www.iherb.com/MRM-Metabolic-Whey-100-Premium-Whey-Protein-Strawberry-5-lbs-2270-g/7029?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h3 id=\"BSN-Syntha-6-六重矩阵\"><a href=\"#BSN-Syntha-6-六重矩阵\" class=\"headerlink\" title=\"BSN Syntha-6 六重矩阵\"></a>BSN Syntha-6 六重矩阵</h3><p><img src=\"/img/160114_my_whey_history_last_6_months/bsn.jpg\" alt=\"\"></p>\n<ul>\n<li>严格地说这是大众所谓的“增肌粉”，并非乳清蛋白粉</li>\n<li>碳水化合物含量高，热量高</li>\n<li>日常用量大，每桶只能吃25天左右</li>\n<li>香草口味很甜，口感最棒</li>\n<li><a href=\"http://www.iherb.com/BSN-Finish-First-Syntha-6-Protein-Powder-Drink-Mix-Vanilla-Ice-Cream-5-0-lbs-2-27-kg/24884?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<p>以上就是笔者目前为止使用过的乳清蛋白了，除了Optimum的吃了两桶（一桶来自京东，一桶来自iherb），其它品牌都是一桶。在这里再一次推荐补剂海淘网站<a href=\"www.iherb.com?rcode=LSH141\">iherb</a>，经常不定期推出折扣活动，比如新人减$10优惠、黑五折上8折优惠，而且顺丰快递满¥40是免国际与国内邮费的，即使不免邮，顺丰的邮费也只有$2。与其在淘宝、京东上提心吊胆地买代购，还不如自己海淘来的划算。</p>\n<p>这里提供一下我的<strong>iherb</strong>优惠码：<strong>LSH141</strong>，在收银台结账时填写进去，会有-$5~$10不等的优惠，我当时首单减了$10，现在貌似优惠力度降低了。而且一旦你使用这个优惠码购买成功，我也将获得一定补贴金额进入账户，两全其美。</p>\n<hr>\n<p>最后讲讲肌肉科技（MuscleTech）这个牌子。首先从知名度上来说，肌肉科技在国内大概处于数一数二的地位。而且邀请到了菲尔西斯代言，真是敢砸钱啊。笔者没有尝试过肌肉科技的蛋白粉，但从笔者购买过它的复合肌酸上来看，包装比起其它几个品牌略显简陋。总的看来与Dymatize、MRM这些低价产品比起来，性价比不高；蛋白质含量又比不过Optimum。至于购不购买，就看你对这个品牌的信仰程度了。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["大保健"]},{"title":"Hello World","url":"https://lilei.pro/2016/01/10/hello-world/","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["工作效率"]},{"title":"about","url":"https://lilei.pro/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://lilei.pro/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://lilei.pro/search/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"https://lilei.pro/tags/index.html","content":"","categories":[],"tags":[]}]