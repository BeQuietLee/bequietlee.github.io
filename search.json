[{"title":"我们为什么需要《基督山伯爵》","url":"http://lilei.work/2018/04/28/再读《基督山伯爵》/","content":"<blockquote>\n<p>人类的一切智慧，都包含在这两个词语里面。</p>\n</blockquote>\n<p><strong>这是李磊在2018年读完的第1本书。</strong></p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=28885472&auto=0&height=66\"></iframe>\n\n<hr>\n<p>《基督山伯爵》这本书，应该是在中学时代读的第一遍吧，从百草园书店租借的书籍。这周中，由于写信时需要引用书中的一段话，遂在网上找来原文，谁知再次被吸引，一发不可收拾，花3天时间又从头读完了这本不薄的著作。</p>\n<p>故事内容颇有现在网文的套路，男主角（埃德蒙唐泰斯）出身平平，禀性纯良，有一青梅竹马红颜知己，本来可以升职船长娶妻生子安稳过完这一生，谁知被嫉妒他的小人暗中加害，不仅老父亲贫困而死，连蒙在鼓里的未婚妻都成为仇人的妻子，自己也在暗无天日的海上监牢里度过了十四年时光。所幸在遭难时，遇到了不世出的高人（法利亚神父），传授给他一身文武本领，又赠予一大笔富可敌国的财宝。当他成功越狱后，摇身一变基督山伯爵，将仇人玩弄于股掌之间。最后看破世事，携美人归隐。</p>\n<p>从这个角度看，《基督山伯爵》这本由大仲马（1802—1870）出版于1846年的小说，引领了后世潮流足有近两百年。然而，它并非仅仅像龙傲天那么简单粗暴。</p>\n<p>善恶分明、机智果敢、算无遗策、沉默高贵、慷慨无私……我们可以将太对赞美的词汇加诸于埃德蒙，然而对于他所承受过的痛苦，我们始终无法感同身受。不论是从与爱人的婚礼上被警察带走含冤入狱，还是在黑暗阴森的伊夫堡监狱度日如年，以及目睹亦师亦友亦父的法利亚神父死亡，还有得知所爱之人已经嫁给了谋害自己的凶徒，这些痛苦中的任何一个都足以压垮一个心智健全的人，何况是全部。</p>\n<p>其实我最想知道的是，当埃德蒙移花接木代替法利亚神父，从悬崖被投入黑暗大海时，是什么支撑着他朝着渺茫希望游去，而不是就此放手，自戕于大海。</p>\n<p>人生如此艰难，活下去比死亡更需要勇气。</p>\n<p>我来自暗无天日的地狱，只想见一见阳光。我还有健壮的身体、渊博的知识、等待发掘的无尽财富，以及，饮不完的杯中酒，杀不尽的仇人头。怎么会就这样放弃？</p>\n<p>善良的莫雷尔先生，他在我蒙冤入狱后四处奔波，导致遭人嫉恨排挤家道中落；我从伊夫堡逃狱出来后，遇到的单纯水手雅各布，丝毫没有怀疑我的身份，把我当做同伴一样赤诚对待；那落草为寇恩怨分明的罗吉万帕，比道貌岸人的衣冠禽兽好上何止千万倍；还有一心一意依赖我关心我的海黛，苦命的公主。</p>\n<p>这世界并没有那么荒凉，那么无药可救。</p>\n<p>这周初收到了<a href=\"http://www.one-school.org/\" target=\"_blank\" rel=\"noopener\">壹个村小</a>的家访反馈，小朋友生活和学习上遇到一些困难，遂写信鼓励，望其可以度过难关。</p>\n<p>我不祝福你万事顺利前路平坦，而是祝你有直面一切困难的勇气。</p>\n<blockquote>\n<p>莫雷尔拆开信念道：——<br>　　“我亲爱的马西米兰，——岛边为你们停着一只小帆船。贾可布会带你们到里窝去，那里诺瓦蒂埃先生正在等着他的孙女儿，他希望在他领他的孙女到圣坛前去以前，能先为你们祝福，我的朋友，这个洞里的一切，我在香榭丽舍大道的房子，以及我在黎港的别墅，都是爱德蒙·唐太斯送给莫雷尔船主的儿子的结婚礼物。也请维尔福小姐接受其中的一半，因为，她的父亲现在已成了一个疯子，她的弟弟已在九月间和他的母亲一同去世，我想请她把她从她父亲和她弟弟那儿继承来的那笔财产捐赠给穷人。莫雷尔，告诉那位你将终生眷顾的天使，请她时时为一个人祈祷，那个人，象撒旦一样，一度曾自以为可与上帝匹敌；但现在，他已带着基督徒的自卑承认只有上帝拥有至高无上的权力和无穷的智慧。或许那些祈祷可以减轻他心里所感到的内疚。至于你，莫雷尔，我对你说一句知心话。世界上既无所谓快乐或也无所谓痛苦；只有一种状况与另一种状况的比较，如此而已。只有体验过不幸的人才能体会最大的快乐。莫雷尔，我们必须体验过死的痛苦，才能体会到生的快乐。<br>　　所以，我心爱的孩子们，享受生命的快乐吧！永远不要忘记，直至上帝揭露人的未来图景的那一天以前，人类的一切智慧就包含在这两个词里面：‘<strong>等待</strong>’和‘<strong>希望</strong>’。<br>　　你的朋友基督山伯爵爱德蒙·唐太斯。”</p>\n</blockquote>\n","categories":["读书笔记"],"tags":["小说"]},{"title":"Android-Performance-Patterns-s4ep11-Culling","url":"http://lilei.work/2017/02/27/Android-Performance-Patterns-s4ep11-Culling/","content":"<blockquote>\n<p>去芜存菁，avoid donig unnecessary work.<br><a href=\"https://www.youtube.com/watch?v=KFklLqiEG6w&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=21\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/KFklLqiEG6w\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"过度绘制\"><a href=\"#过度绘制\" class=\"headerlink\" title=\"过度绘制\"></a>过度绘制</h1><p><a href=\"https://developer.android.com/studio/profile/dev-options-overdraw.html?utm_campaign=android_series_perf_theory:_culling_&amp;utm_source=anddev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\">过度绘制（Overdraw）</a>是指对不可见的部分也进行绘制的情况，如下图左侧，在开发者设置里可以打开查看开关。一般解决过度绘制的方法是减少布局深度，去除无用背景。</p>\n<p><img src=\"/img/170227_app_s4ep11/overdraw.png\" alt=\"Overdraw\"></p>\n<hr>\n<h1 id=\"Draw-with-care\"><a href=\"#Draw-with-care\" class=\"headerlink\" title=\"Draw with care\"></a>Draw with care</h1><p>在编写自定义控件时，可以使用<code>canvas.cliprect(..)</code>方法来使不显示的View不进行绘制。</p>\n<p>链接：<a href=\"https://www.youtube.com/watch?annotation_id=annotation_104709861&amp;feature=iv&amp;index=38&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;src_vid=KFklLqiEG6w&amp;v=vkTn3Ule4Ps\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?annotation_id=annotation_104709861&amp;feature=iv&amp;index=38&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;src_vid=KFklLqiEG6w&amp;v=vkTn3Ule4Ps</a></p>\n<hr>\n<h1 id=\"多重条件搜索\"><a href=\"#多重条件搜索\" class=\"headerlink\" title=\"多重条件搜索\"></a>多重条件搜索</h1><p>比如要搜索同时满足 A &amp; B &amp; C 三个条件下的结果，有两种方法</p>\n<ol>\n<li>把ABC三个条件同时传入，一步搜索出结果</li>\n<li>先搜A，得到结果集后，在结果集中搜索B，最后在B的结果集中搜索C</li>\n</ol>\n<p>不要想当然地以为一定是1更高效，实际操作时要根据搜索服务的特征来选择两者中的一种进行。2也是一种<code>Culling</code>的思想，逐层深入，抽丝剥茧。</p>\n<p>（视频里是用的Mc Collins大叔的照片来举例的，很搞笑）</p>\n<hr>\n<h1 id=\"提升用户体验\"><a href=\"#提升用户体验\" class=\"headerlink\" title=\"提升用户体验\"></a>提升用户体验</h1><p>在使用地理定位等实时服务时，消减那些用户不需关心的信息，比如用户居住在A地，那就无需把B地的实时状况推送给用户，使用地图软件中的实时路况查看就是这样，只需要请求并展示当前屏幕范围内的区域路况，而不是全市乃至全省、全国。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep10 Approximation","url":"http://lilei.work/2017/02/22/Android-Performance-Patterns-s4ep10-Approximation/","content":"<blockquote>\n<p>在用户无感知的情况下，合理地进行近似计算，以加快响应，增强性能。<br><a href=\"https://www.youtube.com/watch?v=aVwwwK3YIaM&amp;index=20&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"Good-enough-Let’s-ship-it\"><a href=\"#Good-enough-Let’s-ship-it\" class=\"headerlink\" title=\"Good enough. Let’s ship it.\"></a>Good enough. Let’s ship it.</h1><p>在一些情况下，用户只需要70%的精确程度，这时在程序里提供100%的精确程度是不合适的，这会额外增加30%的成本。</p>\n<p><img src=\"/img/170222_app_s4ep10/good_enough.png\" alt=\"Good enough\"></p>\n<hr>\n<h1 id=\"Position-is-not-always-helpful\"><a href=\"#Position-is-not-always-helpful\" class=\"headerlink\" title=\"Position is not always helpful\"></a>Position is not always helpful</h1><p>以一个路线规划App为例，如果缩放级别仅仅到省，那么对用户定位的标示只需要精确到城市即可，完全不必精确到街道门牌号，因为就算通过GPS精确到了街道门牌号，在省级视图上观察，也并不会有任何区别。只有当用户放大地图到街道程度时，才需要更精确的定位。</p>\n<p><img src=\"/img/170222_app_s4ep10/route_planning.png\" alt=\"route planning\"></p>\n<hr>\n<h1 id=\"Do-less-when-you-can\"><a href=\"#Do-less-when-you-can\" class=\"headerlink\" title=\"Do less, when you can.\"></a>Do less, when you can.</h1><p>Use less time, to calculate a less precision result, that still meets the user’s current need.</p>\n<p>同样以上方的路线规划App为例，当用户以固定速度在高速巡航时，可以基于用户车速计算，得到用户在公路上的大概位置，也无需时时通过GPS定位。当用户接近POI（Point of Interest）时，才唤起GPS。</p>\n<hr>\n<h1 id=\"图像上的近似计算\"><a href=\"#图像上的近似计算\" class=\"headerlink\" title=\"图像上的近似计算\"></a>图像上的近似计算</h1><p>在需要展示图片的场景，如果无需展示大图，则只加载低分辨率下的图片，这样可以节约内存并且加快加载速度。一个例子就是微信里面察看对话以及朋友圈的图片。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep9 Caching","url":"http://lilei.work/2017/02/20/Android-Performance-Patterns-s4ep9-Caching/","content":"<blockquote>\n<p>本节内容纯理论，概括成一句话：Cache很重要！<br><a href=\"https://www.youtube.com/watch?v=JkwrNmCwFfA&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=19\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/JkwrNmCwFfA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"Caches-are-FAST\"><a href=\"#Caches-are-FAST\" class=\"headerlink\" title=\"Caches are FAST\"></a>Caches are FAST</h1><p>计算机可以对Cache进行快速的读取，原因在于，读取Cache时是CPU直接操作RAM；如果不借助Cache，CPU需要间接与硬盘通信，而硬盘的读写速度是比不上RAM的。</p>\n<p>在有Cache的时候，通常情况下第一次读取是从硬盘加载，后续的读取就全都走Cache了。</p>\n<p><img src=\"/img/170220_app_s4ep9/ram.png\" alt=\"RAM\"></p>\n<hr>\n<h1 id=\"When-to-cache\"><a href=\"#When-to-cache\" class=\"headerlink\" title=\"When to cache?\"></a>When to cache?</h1><p>在循环中重复执行并且结果不变的计算，可以将其抽出来保存在Cache中。不要在循环中进行重复计算，这是编程中必须遵守的一项基本原则。</p>\n<hr>\n<h1 id=\"Caches-help-manage-resources\"><a href=\"#Caches-help-manage-resources\" class=\"headerlink\" title=\"Caches help manage resources\"></a>Caches help manage resources</h1><p>这部分强调的是Cache更新算法，LRU是个很好的选择。</p>\n<hr>\n<h1 id=\"Caching-by-pre-computing\"><a href=\"#Caching-by-pre-computing\" class=\"headerlink\" title=\"Caching by pre-computing\"></a>Caching by pre-computing</h1><p>提前执行解析程序，预处理体量大的查找表或者XML文件，这样在运行时可以很快地获取想要的结果，而不是同步等待。</p>\n<p><img src=\"/img/170220_app_s4ep9/ram.png\" alt=\"pre-computing\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"关于陆金所App在小米手机上无法展示项目详情页的问题原因与解决办法","url":"http://lilei.work/2017/02/17/Lu-App-Not-Work-On-Mi-Devices/","content":"<blockquote>\n<p>在使用陆金所Android版本的App时，进入任何理财产品详情页，都显示为空白，无法进行查阅与购买。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><img src=\"/img/170217_lu_not_work_on_mi/on_site.png\" alt=\"问题截图\"></p>\n<hr>\n<h1 id=\"情景再现\"><a href=\"#情景再现\" class=\"headerlink\" title=\"情景再现\"></a>情景再现</h1><p><img src=\"/img/170217_lu_not_work_on_mi/system.jpeg\" alt=\"系统版本\"></p>\n<p>小米系统是升级后的最新版<br>Webkit内核版本：54.0.2840.85</p>\n<p>发现截图中无法显示产品详情的问题后，我联系了陆金所的人工在线客服，在描述问题并提供截图后，客服告知需要1到2个工作日给出反馈。实际上并没有那么久，我是早上反馈的问题，下午临近下班时就收到了客服的回复电话。</p>\n<p>客服应该是从开发那里得到了反馈邮件，在这里表扬一下陆金所响应问题的速度。无法显示的原因在于小米系统里使用的WebView内核版本是53或者54，这两个版本存在bug，解决办法也很“简单”，只要把它升级成55就可以了。这里的“简单”为什么打上了引号呢？因为升级WebView需要手机上装有GooglePlay，而由于众所周知的原因，国内的Android手机系统里，安装GooglePlay的少之又少。不过什么也难不住广大的网民朋友对墙外世界的向往，内事不决问百度，自然可以找到安装的途径。</p>\n<hr>\n<h1 id=\"解决途径\"><a href=\"#解决途径\" class=\"headerlink\" title=\"解决途径\"></a>解决途径</h1><p>先安装Google框架，再安装GooglePlay后，在GooglePlay中搜索WebView进行升级安装，再打开陆金所——duang！问题迎刃而解了。</p>\n<hr>\n<h1 id=\"问题起因探究\"><a href=\"#问题起因探究\" class=\"headerlink\" title=\"问题起因探究\"></a>问题起因探究</h1><p><strong>在百度上搜不出任何国内开发者对这个问题的描述！</strong>按说但凡是使用了小米手机，只要升级到了最新版本，在打开WebView时都有很大可能遭遇这个问题，为什么内网上搜不到，我也很费解。</p>\n<p>而在Google上，很容易就找到下面这篇由Chromium官方发布的文档：<a href=\"https://www.chromium.org/developers/androidwebview/webview-ct-bug\" target=\"_blank\" rel=\"noopener\">WebView FAQ for Symantec Certificate Transparency Issue</a></p>\n<p>我在这里依个人理解简单描述一下，建议各位直接阅读原文，会认识得更加全面。</p>\n<h3 id=\"根本原因\"><a href=\"#根本原因\" class=\"headerlink\" title=\"根本原因\"></a>根本原因</h3><p>从WebView的53版本开始，它要求所有被Symantec（赛门铁克）签署的证书，必须执行Chrome证书政策。但是，Chrome自己在进行验证时，竟然出错了！！！在加载具有Symantec证书的页面时，会导致<code>onReceivedSslError()</code>的回调，页面显示一片空白。</p>\n<p>这算不算弄巧成拙？</p>\n<h3 id=\"影响范围\"><a href=\"#影响范围\" class=\"headerlink\" title=\"影响范围\"></a>影响范围</h3><p>自Android L版本开始，WebView版本53和54会受到影响，55开始恢复正常。需要注意的是，问题并非是立刻显现的，而会在WebView的build date十周之后，才暴露出来。Build版本与过期时间如下表所示，这也就解释了为什么在我刚升级Android系统时并没有发生这个问题，而是在上周使用陆金所App时才显露出来。</p>\n<table>\n<thead>\n<tr>\n<th>Build ID</th>\n<th>Expiration Date</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>54.0.2840.68</td>\n<td>12/27/2016</td>\n</tr>\n<tr>\n<td>54.0.2840.85</td>\n<td>1/7/2017</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"现身说法\"><a href=\"#现身说法\" class=\"headerlink\" title=\"现身说法\"></a>现身说法</h3><p>为了验证上文的情况，我在代码中使用<code>getPackageManager().getPackageInfo(&quot;com.google.android.webview&quot;, 0).versionCode</code>察看小米手机的WebView版本号，果然是<code>54.0.2840.85</code>，不幸中招。</p>\n<p>在通过GooglePlay安装最新的<code>55.0.2883.91</code>版本后，再打开陆金所App，一切正常了。</p>\n<h3 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q &amp; A\"></a>Q &amp; A</h3><h4 id=\"Q：Android-N系统也会遇到这个问题吗？怎么解决？\"><a href=\"#Q：Android-N系统也会遇到这个问题吗？怎么解决？\" class=\"headerlink\" title=\"Q：Android N系统也会遇到这个问题吗？怎么解决？\"></a>Q：Android N系统也会遇到这个问题吗？怎么解决？</h4><p>A：自L开始的系统都会遇到，而N系统由于不是使用单独的WebView，而是使用由Chrome提供的WebView，因此只要升级Chrome就可以。（在Chrome的属性里可以看到Webview版本）</p>\n<h4 id=\"Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\"><a href=\"#Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\" class=\"headerlink\" title=\"Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？\"></a>Q：用户可以通过修改系统时间为未过期的时间，来避免这个问题吗？</h4><p>A：笔者亲测可以，但是不建议这么做，有可能导致更多潜在的问题。</p>\n<h4 id=\"Q：可否通过UserAgent嗅探来解决这个问题？\"><a href=\"#Q：可否通过UserAgent嗅探来解决这个问题？\" class=\"headerlink\" title=\"Q：可否通过UserAgent嗅探来解决这个问题？\"></a>Q：可否通过UserAgent嗅探来解决这个问题？</h4><p>A：验证失败发生在连接TLS层时，这时还没有发送UserAgent信息，意味着页面挂掉时候是还不知道UA的。如果一定要在TLS层获取UA也不是没有办法，但这么做过于复杂，并且不安全。</p>\n<h4 id=\"Q：开发者怎样修复这个问题呢？\"><a href=\"#Q：开发者怎样修复这个问题呢？\" class=\"headerlink\" title=\"Q：开发者怎样修复这个问题呢？\"></a>Q：开发者怎样修复这个问题呢？</h4><p>A：唯一的修复办法是提示用户更新WebView，当发生问题时，WebView会发出一个<code>onReceivedSslError()</code>回调，但是回调里并没有足以说明问题的提示信息。并且通过这个回调来回避问题（比如停止使用证书）会导致更多安全隐患，强烈不建议这么做。</p>\n<hr>\n<h1 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h1><p>整个问题的描述与解释看下来，还真不是陆金所团队的锅——好久没见寸志了，如果当面问他这个事，他一定摆着手说：这个锅我不背！要怪就怪Android碎片化太严重，尤其是国内市场，各大厂商把原生系统做做美化，改头换面，再预装一大堆垃圾软件，就摇身一变成了自己的东西。而关键特性又更新不及时，就导致了上文发生的问题。</p>\n<p>Android系统的开放特性是一把双刃剑，就看我们怎么使用它。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android"]},{"title":"解决Android Studio导入项目时速度过慢的问题","url":"http://lilei.work/2017/02/17/Fix-Slow-Inilizating-Project-In-AS/","content":"<blockquote>\n<p>当我们通过Android Studio导入新项目时，往往需要同步下载新项目所需的gradle版本，这是导致加载过慢的原因。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"卡住的原因\"><a href=\"#卡住的原因\" class=\"headerlink\" title=\"卡住的原因\"></a>卡住的原因</h1><p>项目需要特定版本的gradle进行构建，而本地没有对应版本的gradle，需要从网络下载（ <a href=\"http://services.gradle.org/distributions\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions</a> ），由于大家心知肚明的原因，下载速度非常慢；而且，配置的shadowsocks对此似乎不起作用。这就导致了导入项目时一直停留在“Building gradle project info”。</p>\n<p><img src=\"/img/170217_slowing_initializing_project_in_as/building.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>本以为国内有对应的镜像站点，可以配置，但却没有找到。这里先通过浏览器下载下来gradle-xx.zip，然后替换本地文件来进行。</p>\n<h3 id=\"第一步：在-http-services-gradle-org-distributions-下载需要的版本\"><a href=\"#第一步：在-http-services-gradle-org-distributions-下载需要的版本\" class=\"headerlink\" title=\"第一步：在 http://services.gradle.org/distributions 下载需要的版本\"></a>第一步：在 <a href=\"http://services.gradle.org/distributions\" target=\"_blank\" rel=\"noopener\">http://services.gradle.org/distributions</a> 下载需要的版本</h3><p>通过已配置代理的浏览器下载，或者迅雷（要避免再次上演XcodeGhost事件）。下载完成后把zip包丢进本地gradle仓库里。以<code>gradle-2.14.1-all</code>为例，在我的电脑上路径是<code>~/.gradle/wrapper/dists/gradle-2.14.1-all/8bnwg5hd3w55iofp58khbp6yv/</code>。</p>\n<h3 id=\"第二步（可选）：修改项目gradle版本\"><a href=\"#第二步（可选）：修改项目gradle版本\" class=\"headerlink\" title=\"第二步（可选）：修改项目gradle版本\"></a>第二步（可选）：修改项目gradle版本</h3><p>如果下载的gradle版本和项目文件里声明的版本不同，需要修改项目里依赖的gradle版本。有两个文件需要修改，分别是<code>gradle/wrapper/gradle-wrapper.properties</code>和<code>build.gradle</code></p>\n<h4 id=\"gradle-wrapper-gradle-wrapper-properties\"><a href=\"#gradle-wrapper-gradle-wrapper-properties\" class=\"headerlink\" title=\"gradle/wrapper/gradle-wrapper.properties\"></a>gradle/wrapper/gradle-wrapper.properties</h4><p>修改<code>distributionUrl</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">distributionBase=GRADLE_USER_HOME</span><br><span class=\"line\">distributionPath=wrapper/dists</span><br><span class=\"line\">zipStoreBase=GRADLE_USER_HOME</span><br><span class=\"line\">zipStorePath=wrapper/dists</span><br><span class=\"line\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.14.1-all.zip</span><br></pre></td></tr></table></figure>\n<h4 id=\"build-gradle\"><a href=\"#build-gradle\" class=\"headerlink\" title=\"build.gradle\"></a>build.gradle</h4><p>修改<code>classpath</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        maven &#123;</span><br><span class=\"line\">            url &quot;http://depot.sankuai.com/nexus/content/groups/public/&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        // in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完成以上步骤后重启AS，就可以顺利地打开项目了。</p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["Android Studio"]},{"title":"Android基础知识之View绘制再思考","url":"http://lilei.work/2017/02/15/View-Drawing-In-Android/","content":"<blockquote>\n<p>近日自己在写一个结合了下拉刷新&amp;ViewPager功能于一体的自定义控件，顺便重温了View绘制的流程。</p>\n</blockquote>\n<blockquote>\n<p>本文【待完成】可能是你所看过最简单易懂的View绘制流程解读。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h1 id=\"几个重要方法\"><a href=\"#几个重要方法\" class=\"headerlink\" title=\"几个重要方法\"></a>几个重要方法</h1><h1 id=\"学以致用：实现一个简单的PullToRefresh容器\"><a href=\"#学以致用：实现一个简单的PullToRefresh容器\" class=\"headerlink\" title=\"学以致用：实现一个简单的PullToRefresh容器\"></a>学以致用：实现一个简单的PullToRefresh容器</h1>","categories":[],"tags":["Android"]},{"title":"Android基础知识之事件传递","url":"http://lilei.work/2017/02/15/Android-Touch-Event-Delivery/","content":"<blockquote>\n<p>在Android系统中，事件的传递和处理是让人很容易困惑的一个知识点，在处理复杂界面事件时，如果对这方面掌握不扎实，会遇到很多千奇百怪的问题。</p>\n</blockquote>\n<blockquote>\n<p>本文可能是你读过的对事件传递系统最简单易懂的解读。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"Android事件系统概述\"><a href=\"#Android事件系统概述\" class=\"headerlink\" title=\"Android事件系统概述\"></a>Android事件系统概述</h1><p>任何UI界面系统的设计，都一定离不来事件传递，Android系统当然不例外。</p>\n<p>要理解Android中的事件机制，需要牢记下面两个基本原则：</p>\n<ul>\n<li>事件传递，从外向内。</li>\n<li>事件消费，从内向外。</li>\n</ul>\n<p><img src=\"/img/170215_event_handling/outer_inner.png\" alt=\"例子\"></p>\n<h2 id=\"事件传递\"><a href=\"#事件传递\" class=\"headerlink\" title=\"事件传递\"></a>事件传递</h2><p>先触发外层ViewGroup的<code>dispatchTouchEvent</code>方法，该方法会在事件的整个处理流程结束后异步返回；接着触发外层ViewGroup的<code>onInterceptTouchEvent</code>方法，如果要拦截这个事件，不让它继续向下传递，就在这个方法里就要返回<code>true</code>；当事件继续向下传递时，内层View先触发<code>dispatchTouchEvent</code>，接着进行到事件消费环节。</p>\n<h2 id=\"事件消费\"><a href=\"#事件消费\" class=\"headerlink\" title=\"事件消费\"></a>事件消费</h2><p>如果外层ViewGroup在<code>onInterceptTouchEvent</code>方法里返回<code>true</code>，那么事件仅由外层进行消费，即进入<code>onTouchEvent</code>方法里，消费完成后，进行<code>dispatchTouchEvent</code>结果回调，事件消费掉了则返回<code>true</code>，反之返回<code>false</code>。</p>\n<p>如果外层ViewGroup在<code>onInterceptTouchEvent</code>方法里返回<code>false</code>，事件继续向下传递，内层View在它的<code>onTouchEvent</code>里返回处理结果，再把结果交给内层View的<code>dispatchTouchEvent</code>方法返回。如果内层消费了事件（返回true），则外层不会触发<code>onTouchEvent</code>方法；如果内层没有消费事件（返回false），那么事件交由外层消费，会触发外层ViewGroup的<code>onTouchEvent</code>方法。</p>\n<h2 id=\"上例的补充说明\"><a href=\"#上例的补充说明\" class=\"headerlink\" title=\"上例的补充说明\"></a>上例的补充说明</h2><p>上例的<code>case B</code>，还有一种写法，是外层ViewGroup不对事件进行拦截，而是在内层View的<code>onTouchEvent</code>中返回<code>false</code>，这样事件依旧会交由外层ViewGroup的<code>onTouchEvent</code>进行消费。</p>\n<p>同理，<code>case D</code>也有另外的写法，聪明的读者，你一定已经猜出来了。</p>\n<hr>\n<h1 id=\"几个关键方法\"><a href=\"#几个关键方法\" class=\"headerlink\" title=\"几个关键方法\"></a>几个关键方法</h1><p>上文中已经看出，Android系统中对事件进行处理，主要是<code>dispatchTouchEvent</code>、<code>onInterceptTouchEvent</code>、<code>onTouchEvent</code>这三个方法，下面逐一进行分析。</p>\n<h2 id=\"dispatchTouchEvent\"><a href=\"#dispatchTouchEvent\" class=\"headerlink\" title=\"dispatchTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html#dispatchTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">dispatchTouchEvent</a></h2><p>View处理事件时，最先进入的方法，直到事件处理完成后，才会返回<code>true</code>（在当前View或者内部View进行了消费）或者<code>false</code>（未进行消费）。</p>\n<p>对于View，这个方法的返回值与<code>onTouchEvent</code>返回值相同。</p>\n<p>对于ViewGroup，只要内部有任意一个View消费了事件，在ViewGroup的这个方法就会返回<code>true</code>。</p>\n<h2 id=\"onInterceptTouchEvent\"><a href=\"#onInterceptTouchEvent\" class=\"headerlink\" title=\"onInterceptTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">onInterceptTouchEvent</a></h2><p>这个方法只存在于ViewGroup中，控制是否将当前时间拦截下来不向下传递，只给自己消费。</p>\n<p>需要注意一旦<code>ACTION_DOWN</code>被拦截，后续的<code>ACTION_MOVE</code>和<code>ACTION_UP</code>根本不会走到这个方法里。</p>\n<h2 id=\"onTouchEvent\"><a href=\"#onTouchEvent\" class=\"headerlink\" title=\"onTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)\" target=\"_blank\" rel=\"noopener\">onTouchEvent</a></h2><p>处理touch事件的地方，如果要处理的是click事件，不要写在<code>onTouchEvent</code>方法里，而是应该写在<code>performClick</code>中。</p>\n<p>消费了事件则返回true，消费后的事件立即废弃，不会再交由其它View消费。</p>\n<h2 id=\"requestDisallowInterceptTouchEvent\"><a href=\"#requestDisallowInterceptTouchEvent\" class=\"headerlink\" title=\"requestDisallowInterceptTouchEvent\"></a><a href=\"https://developer.android.com/reference/android/view/ViewParent.html#requestDisallowInterceptTouchEvent(boolean)\" target=\"_blank\" rel=\"noopener\">requestDisallowInterceptTouchEvent</a></h2><p>上文讲到，外层的ViewParent可以通过<code>onInterceptTouchEvent</code>来拦截事件，不继续向下传递。上有政策下有对策，内层View同样可以拒绝外层ViewGroup的这种行为，这就是<code>requestDisallowInterceptTouchEvent(boolean)</code>方法所做的事。</p>\n<p>这个方法位于ViewParent.java中，可以通过<code>View.getParent()</code>来获取某个View的Parent。该方法会应用到当前View的所有祖先ViewGroup，而不仅仅是父亲。所有接收到这个请求的Parent必须停止它们的Intercept行为，直到当前touch事件结束（收到up信号或者cancel信号）。</p>\n<hr>\n<h1 id=\"学以致用：解决在ScrollView中嵌套ListView的问题\"><a href=\"#学以致用：解决在ScrollView中嵌套ListView的问题\" class=\"headerlink\" title=\"学以致用：解决在ScrollView中嵌套ListView的问题\"></a>学以致用：解决在ScrollView中嵌套ListView的问题</h1><p>有了这些的知识储备，我们来实操一下，解决一个很容易出现的case：在ScrollView中嵌套ListView时，ListView无法进行上下滑动，导致项目展示不完整。</p>\n<p>首先，在ScrollView中嵌套ListView并不是好的设计，如果能够避免最好，若不能避免，就必须解决ListView不能滑动的问题。我们希望当手指落在ListView上进行滑动时，会控制ListView的条目，当滑至顶端或底端时，ListView无法再滑，则进行外层ScrollView的滑动。当手指落在ListView外部的ScrollView时，直接控制ScrollView进行滑动。</p>\n<h2 id=\"出现问题的原因\"><a href=\"#出现问题的原因\" class=\"headerlink\" title=\"出现问题的原因\"></a>出现问题的原因</h2><p>原因在于ScrollView在它的<code>onInterceptTouchEvent</code>里对<code>ACTION_MOVE</code>进行了拦截，Code donesn’t lie.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * This method JUST determines whether we want to intercept the motion.</span></span><br><span class=\"line\"><span class=\"comment\">     * If we return true, onMotionEvent will be called and we do the actual</span></span><br><span class=\"line\"><span class=\"comment\">     * scrolling there.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * Shortcut the most recurring case: the user is in the dragging</span></span><br><span class=\"line\"><span class=\"comment\">    * state and he is moving his finger.  We want to intercept this</span></span><br><span class=\"line\"><span class=\"comment\">    * motion.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> action = ev.getAction();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((action == MotionEvent.ACTION_MOVE) &amp;&amp; (mIsBeingDragged)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Don't try to intercept touch if we can't scroll anyway.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getScrollY() == <span class=\"number\">0</span> &amp;&amp; !canScrollVertically(<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action &amp; MotionEvent.ACTION_MASK) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * mIsBeingDragged == false, otherwise the shortcut would have caught it. Check</span></span><br><span class=\"line\"><span class=\"comment\">             * whether the user has moved far enough from his original down touch.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * Locally do absolute value. mLastMotionY is set to the y value</span></span><br><span class=\"line\"><span class=\"comment\">            * of the down event.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> activePointerId = mActivePointerId;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (activePointerId == INVALID_POINTER) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we don't have a valid id, the touch down wasn't on content.</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> pointerIndex = ev.findPointerIndex(activePointerId);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pointerIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                Log.e(TAG, <span class=\"string\">\"Invalid pointerId=\"</span> + activePointerId</span><br><span class=\"line\">                        + <span class=\"string\">\" in onInterceptTouchEvent\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) ev.getY(pointerIndex);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> yDiff = Math.abs(y - mLastMotionY);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (yDiff &gt; mTouchSlop &amp;&amp; (getNestedScrollAxes() &amp; SCROLL_AXIS_VERTICAL) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                mIsBeingDragged = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                mLastMotionY = y;</span><br><span class=\"line\">                initVelocityTrackerIfNotExists();</span><br><span class=\"line\">                mVelocityTracker.addMovement(ev);</span><br><span class=\"line\">                mNestedYOffset = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mScrollStrictSpan == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    mScrollStrictSpan = StrictMode.enterCriticalSpan(<span class=\"string\">\"ScrollView-scroll\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> ViewParent parent = getParent();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) ev.getY();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!inChild((<span class=\"keyword\">int</span>) ev.getX(), (<span class=\"keyword\">int</span>) y)) &#123;</span><br><span class=\"line\">                mIsBeingDragged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                recycleVelocityTracker();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Remember location of down touch.</span></span><br><span class=\"line\"><span class=\"comment\">             * ACTION_DOWN always refers to pointer index 0.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            mLastMotionY = y;</span><br><span class=\"line\">            mActivePointerId = ev.getPointerId(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            initOrResetVelocityTracker();</span><br><span class=\"line\">            mVelocityTracker.addMovement(ev);</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            * If being flinged and user touches the screen, initiate drag;</span></span><br><span class=\"line\"><span class=\"comment\">            * otherwise don't.  mScroller.isFinished should be false when</span></span><br><span class=\"line\"><span class=\"comment\">            * being flinged.</span></span><br><span class=\"line\"><span class=\"comment\">            */</span></span><br><span class=\"line\">            mIsBeingDragged = !mScroller.isFinished();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mIsBeingDragged &amp;&amp; mScrollStrictSpan == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                mScrollStrictSpan = StrictMode.enterCriticalSpan(<span class=\"string\">\"ScrollView-scroll\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            startNestedScroll(SCROLL_AXIS_VERTICAL);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">            <span class=\"comment\">/* Release the drag */</span></span><br><span class=\"line\">            mIsBeingDragged = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            mActivePointerId = INVALID_POINTER;</span><br><span class=\"line\">            recycleVelocityTracker();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mScroller.springBack(mScrollX, mScrollY, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, getScrollRange())) &#123;</span><br><span class=\"line\">                postInvalidateOnAnimation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stopNestedScroll();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class=\"line\">            onSecondaryPointerUp(ev);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * The only time we want to intercept motion events is if we are in the</span></span><br><span class=\"line\"><span class=\"comment\">    * drag mode.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mIsBeingDragged;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到当<code>(action == MotionEvent.ACTION_MOVE) &amp;&amp; (mIsBeingDragged)</code>条件为真时，这个方法直接返回<code>true</code>，拦截掉了<code>ACTION_MOVE</code>事件。解决办法也很简单，在内层View接收到<code>ACTION_DOWN</code>时，禁止掉外层的拦截；在内层View收到手指抬起来的<code>ACTION_UP</code>时，放掉禁制。我们在<code>dispatchTouchEvent</code>中写入这段逻辑，也可以把它写进内层View的<code>onTouchListener</code>中。</p>\n<h2 id=\"恢复ListView滑动\"><a href=\"#恢复ListView滑动\" class=\"headerlink\" title=\"恢复ListView滑动\"></a>恢复ListView滑动</h2><p><strong><code>dispatchTouchEvent</code>中的写法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">            getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ......</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><code>onTouchListener</code>中的写法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listView.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchLister &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(event.getAction() == MotionEvent.ACTION_UP)&#123;</span><br><span class=\"line\">            scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            scrollView.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个时候ListView已经可以上下滑动了，但是当滑动到上／下尽头时，我们希望外层的ScrollView继续接管滑动。</p>\n<h2 id=\"外层ScrollView接管滑动\"><a href=\"#外层ScrollView接管滑动\" class=\"headerlink\" title=\"外层ScrollView接管滑动\"></a>外层ScrollView接管滑动</h2><p>首先需要写两个方法判断ListView已经到了穷途末路。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">scrollToBottom</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = getFirstVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = getLastVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> visibleCoutn = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = getCount();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((first + visibleCoutn) == count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">scrollToTop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> first = getFirstVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> last = getLastVisiblePosition();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> visibleCoutn = getChildCount();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = getCount();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在<code>dispatchTouchEvent</code>方法里判断，到了尽头后，把<code>ACTION_MOVE</code>事件交给外层ScrollView处理。这里包含了前文中“禁止外层ViewGroup拦截”的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> downY, y, mTouchSlop;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">            downY = ev.getRawY();</span><br><span class=\"line\">            y = downY;</span><br><span class=\"line\">            getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">            y = ev.getRawY();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollToTop()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (y - downY &gt; mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * Point 1 : 如果滑动到顶部，并且手指还想向下滑动，则事件交还给父控件，要求父控件可以拦截事件</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (scrollToBottom()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (y - downY &lt; -mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * Point 3 : 如果滑动到底部，并且手指还想向上滑动，则事件交还给父控件，要求父控件可以拦截事件</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    getParent().requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(ev);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述写法基本实现了拉到ListView尽头时，将滑动时间交给外部ScrollView处理的功能。还存在的问题是在边界判断时不够精确，会发生第一个／最后一个item只展示一个边界，就触发解除禁止的效果，待完善。</p>\n<p>希望这篇文章让你不再为Android中的事件传递机制而困惑。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://blog.csdn.net/Wisimer/article/details/49426653\" target=\"_blank\" rel=\"noopener\">ScrollView嵌套ListView处理事件冲突</a></li>\n</ul>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android"]},{"title":"Android Performance Patterns - s4ep8 Removing Unused Resources","url":"http://lilei.work/2017/02/14/Android-Performance-Patterns-s4ep8-Removing-Unused-Resources/","content":"<blockquote>\n<p>Although YOU may be diligent in removing resources your app won’t use, it’s not safe to assume that the LIBRARIES you’re including will do the same.<br>Thankfully some helpful Gradle tools can put your APK on a diet.<br><a href=\"https://www.youtube.com/watch?v=HxeW6DHEDQU&amp;index=18&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/HxeW6DHEDQU?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h1 id=\"问题起因\"><a href=\"#问题起因\" class=\"headerlink\" title=\"问题起因\"></a>问题起因</h1><p>无用的<code>Resources</code>存在于两部分，第一部分是项目文件中，开发者可以检查并直接移除这些文件；第二部分存在于依赖的<code>library</code>中。在一些情况下，我们只需要使用库里面的某一些功能，而并非全部功能。如果不加以特殊处理，其它未经使用资源文件也会被打入最终的APK中。</p>\n<h1 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h1><p><code>Gradle</code>可以分析资源文件的使用情况，从而删除那些不需引入的资源文件。</p>\n<p><img src=\"/img/170214_app_s4ep8/gradle.png\" alt=\"\"></p>\n<p>如果要开启这项功能，需要在<code>gradle</code>配置文件中将<code>minifyEnabled</code>和<code>shrinkResources</code>声明为<code>true</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\tbuildTypes &#123;</span><br><span class=\"line\">\t\trelease &#123;</span><br><span class=\"line\">\t\t\tminifyEnabled trure</span><br><span class=\"line\">\t\t\tshrinkResources true</span><br><span class=\"line\">\t\t\tproguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以强制保留／删除某些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources xmlns:tools:=&quot;http://schemas.android.com/tools&quot;</span><br><span class=\"line\">\ttools:keep=&quot;@layout/l_used*_c, @layout/l_used_b*&quot;</span><br><span class=\"line\">\ttools:discard=&quot;@layout/unused2&quot;</span><br><span class=\"line\">\t/&gt;</span><br></pre></td></tr></table></figure>\n<p>Gradle并非是万能的，它不会处理多分辨率／多语言下的资源文件（笔者对这部分存疑，这些资源文件原本就不需要精简，除非APP指定了仅供某些特定用户人群使用）</p>\n<p><img src=\"/img/170214_app_s4ep8/limitations.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s6ep6 - VectorDrawable For Smaller APKs","url":"http://lilei.work/2017/02/13/Android-Performance-Patterns-s6ep6-VectorDrawable/","content":"<blockquote>\n<p>由于Android系统存在多种分辨率，我们在使用图片时，往往需要准备ldpi、mdpi、hdpi、xhdpi等多种分辨率的图片，占用大量APK体积。<br>针对这种情况，本文介绍了如何VectorDrawable技术的优点，以及使用场景。<br><a href=\"https://www.youtube.com/watch?v=Ls3KzLRmrXg\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Ls3KzLRmrXg\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"不合适的做法\"><a href=\"#不合适的做法\" class=\"headerlink\" title=\"不合适的做法\"></a>不合适的做法</h1><p><code>JPEG</code>和<code>PNG</code>是光栅化的图片格式，如果我们不希望在不同分辨率下出现图片模糊的情况，就必须准备多张图片，这会浪费APK体积。</p>\n<p><img src=\"/img/170213_app_s6ep6/many_pic.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"VectorDrawable\"><a href=\"#VectorDrawable\" class=\"headerlink\" title=\"VectorDrawable\"></a>VectorDrawable</h1><p><code>VectorDrawable</code>则可以只用一个文件满足多种屏幕分辨率。它将图片分解为多个基本图形的组合，如下所示。</p>\n<p><img src=\"/img/170213_app_s6ep6/vector_drawable.png\" alt=\"\"></p>\n<p>对于文章开头的三个圆形的场景，可以将占用空间从56K降低到2K，降低了96%。</p>\n<p><img src=\"/img/170213_app_s6ep6/saved_size.png\" alt=\"\"></p>\n<p>使用<code>VectorDrawable</code>还可以避免因使用帧动画，导致图片文件过多的情况</p>\n<p><img src=\"/img/170213_app_s6ep6/animation.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h1><h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><p>加载时，<code>JPEG</code>、<code>PNG</code>文件可以依靠硬件进行纹理渲染，而<code>VectorDrawable</code>在处理时，需要先翻译成GPU指令，VD中的每一个基本图形，都会被作为一个图层处理。</p>\n<p><img src=\"/img/170213_app_s6ep6/loading.png\" alt=\"\"></p>\n<h2 id=\"复杂图像\"><a href=\"#复杂图像\" class=\"headerlink\" title=\"复杂图像\"></a>复杂图像</h2><p><code>VectorDrawable</code>不适用于处理复杂图像，对于下图的肖像，使用<code>PNG</code>是更好的选择。</p>\n<p><img src=\"/img/170213_app_s6ep6/complex_pic.png\" alt=\"\"></p>\n<p>简化<code>VectorDrawable</code>的路径，以便更加高效地绘制。</p>\n<p><img src=\"/img/170213_app_s6ep6/simple.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s6ep5 Smaller APKs A checklist","url":"http://lilei.work/2017/02/10/Android-Performance-Patterns-s6ep5-Smaller-APKs/","content":"<blockquote>\n<p>如何减少APK体积<br><a href=\"https://www.youtube.com/watch?v=u5xP4tFQlkA&amp;index=78&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/u5xP4tFQlkA\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"头脑风暴：怎样减少APK体积呢？\"><a href=\"#头脑风暴：怎样减少APK体积呢？\" class=\"headerlink\" title=\"头脑风暴：怎样减少APK体积呢？\"></a>头脑风暴：怎样减少APK体积呢？</h1><ul>\n<li>避免使用分辨率过大的图片</li>\n<li>使用矢量图</li>\n<li>代码、布局文件复用</li>\n<li>精简多媒体文件</li>\n<li>懒加载，某些业务功能，直到真正应用时方从网络进行下载</li>\n<li>ProGuard</li>\n</ul>\n<hr>\n<h1 id=\"Two-key-areas\"><a href=\"#Two-key-areas\" class=\"headerlink\" title=\"Two key areas\"></a>Two key areas</h1><ul>\n<li>Smaller resources (easiest to fix)</li>\n<li>Smaller code</li>\n</ul>\n<hr>\n<h1 id=\"Smaller-resources\"><a href=\"#Smaller-resources\" class=\"headerlink\" title=\"Smaller resources\"></a>Smaller resources</h1><h2 id=\"移除无用资源文件\"><a href=\"#移除无用资源文件\" class=\"headerlink\" title=\"移除无用资源文件\"></a>移除无用资源文件</h2><p>在<code>gradle</code>文件里配置<code>minifyEnabled true</code>和<code>shrinkResources true</code>，在打包时会忽略实际上没有应用到的资源文件。建议在release时才打开，以减少debug环境编译时间。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            shirnkResources true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用自动分辨率适配功能\"><a href=\"#使用自动分辨率适配功能\" class=\"headerlink\" title=\"使用自动分辨率适配功能\"></a>使用自动分辨率适配功能</h2><p>我们知道Android中有<code>ldpi</code> <code>mdpi</code> <code>hdpi</code> <code>xhdpi</code> <code>xxhdpi</code> 乃至 <code>xxxhdpi</code> 和 <code>tvdpi</code> 等分辨率，如果把每个资源文件，针对这些分辨率都分别制作一个副本，这将占用大量的空间。</p>\n<p><img src=\"/img/170210_app_s6ep5/resolutions.png\" alt=\"\"></p>\n<p>针对这个问题，有多个解决途径。</p>\n<h3 id=\"删除一部分分辨率下的文件\"><a href=\"#删除一部分分辨率下的文件\" class=\"headerlink\" title=\"删除一部分分辨率下的文件\"></a>删除一部分分辨率下的文件</h3><p>框架会根据高分辨率的资源文件自动生成低分辨率下的资源文件。这里删除了ldpi（可以从mdpi生成）、hdpi和xhdpi（可以从xxhdpi生成），另外tvdpi只应用于TVapp，这里一并删除。</p>\n<p>![][rescale.png]</p>\n<h3 id=\"使用矢量图代替像素图\"><a href=\"#使用矢量图代替像素图\" class=\"headerlink\" title=\"使用矢量图代替像素图\"></a>使用矢量图代替像素图</h3><p>矢量图会根据设备分辨率不同，自动调整自身大小，一个矢量图可以应用在多种分辨率下</p>\n<h3 id=\"复用已有的图片资源文件\"><a href=\"#复用已有的图片资源文件\" class=\"headerlink\" title=\"复用已有的图片资源文件\"></a>复用已有的图片资源文件</h3><p>对于下图这种只是变更了方向的场景，应当只使用一张图片，通过代码来控制箭头朝向。</p>\n<p><img src=\"/img/170210_app_s6ep5/reuse_pic.png\" alt=\"reuse_pic\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rotate</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_arrow_expand\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromDegrees</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toDegrees</span>=<span class=\"string\">\"270\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Smaller-Code\"><a href=\"#Smaller-Code\" class=\"headerlink\" title=\"Smaller Code\"></a>Smaller Code</h1><h2 id=\"使用ProGuard\"><a href=\"#使用ProGuard\" class=\"headerlink\" title=\"使用ProGuard\"></a>使用ProGuard</h2><p>设置<code>minifyEnabled true</code>，代码见前文。</p>\n<h2 id=\"优化代码生成器的生成代码\"><a href=\"#优化代码生成器的生成代码\" class=\"headerlink\" title=\"优化代码生成器的生成代码\"></a>优化代码生成器的生成代码</h2><p><strong>代码生成器</strong>是将原始代码转化为目标代码的一种工具，在转化的过程中，有可能生成冗余的目标代码，这部分代码需要精简。</p>\n<h2 id=\"注意依赖！\"><a href=\"#注意依赖！\" class=\"headerlink\" title=\"注意依赖！\"></a>注意依赖！</h2><p>当我们的代码需要引入外部库的时候，庞大的外部依赖会导致APK体积剧增。<code>ProGuard</code>能够为我们处理一部分这种情况，更多时候，我们需要有目的地挑选适合移动端使用的工具库。在引入外部依赖的时候，一定要关注它对APK体积产生的影响。</p>\n<h2 id=\"Segment-your-APK\"><a href=\"#Segment-your-APK\" class=\"headerlink\" title=\"Segment your APK\"></a>Segment your APK</h2><p>视频作者对这部分的内容讲述不甚清晰，我理解下来，所做的事情是，可以根据API级别、分辨率高低等条件，生成不同的APK包，在应用市场里发布时进行配置。而应用市场会根据用户手机型号，为用户推送不同的APK进行个性化安装。</p>\n<hr>\n<h1 id=\"Android-Studio-2-2\"><a href=\"#Android-Studio-2-2\" class=\"headerlink\" title=\"Android Studio 2.2\"></a>Android Studio 2.2</h1><p>新版本的AS中，增加了APK分析工具，可以很方便地察看classes、methods的数目，资源文件大小 等信息。</p>\n<p><img src=\"/img/170210_app_s6ep5/as22.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"禁止Android File Transfer自启动","url":"http://lilei.work/2017/01/24/Stop-Android-File-Transfer-From-Auto-Starting/","content":"<blockquote>\n<p><a href=\"https://www.android.com/filetransfer/\" target=\"_blank\" rel=\"noopener\">Android File Transfer</a>是macOS系统下用于在手机-电脑间传输文件的工具，然而，这个工具默认是每一次将手机连接至电脑，都会自动启动，非常恼人。本文介绍了如何将自启动关闭的方法。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Android File Transfer Auto Launches</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><ol>\n<li>Close Android File Transfer</li>\n<li>Open Activity Monitor and kill “Android File Transfer Agent”</li>\n<li>Go to where you installed “Android File Transfer.app” (I have it under /Applications)</li>\n<li>Right click and –&gt; “Show package contents”</li>\n<li>Go to Contents/Resources</li>\n<li>Rename “Android File Transfer Agent” to e.g. “Android File Transfer Agent_DISABLED”</li>\n<li>Then go to “/Users/username/Library/Application Support/Google/Android File Transfer” and again rename the Agent app.. “Android File Transfer Agent_DISABLED”.</li>\n</ol>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://mtmurdockblog.com/2012/12/17/disable-auto-start-for-android-file-transfer-on-osx/\" target=\"_blank\" rel=\"noopener\">https://mtmurdockblog.com/2012/12/17/disable-auto-start-for-android-file-transfer-on-osx/</a></p>\n<hr>\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h3><hr>\n","categories":[],"tags":["工具"]},{"title":"Android Performance Patterns s6ep4 Themed launch screens","url":"http://lilei.work/2017/01/23/Android-Performance-Patterns-s6ep4-Themed-launch-screens/","content":"<blockquote>\n<p>This video identifies some pitfalls with bad ways to implement launch screens, and provides a solution that everyone can use.<br><a href=\"https://www.youtube.com/watch?v=E5Xu2iNHRkk&amp;feature=youtu.be\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/E5Xu2iNHRkk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"Bad-Ways\"><a href=\"#Bad-Ways\" class=\"headerlink\" title=\"Bad Ways\"></a>Bad Ways</h1><h2 id=\"Theme-the-launch-screen\"><a href=\"#Theme-the-launch-screen\" class=\"headerlink\" title=\"Theme the launch screen\"></a>Theme the launch screen</h2><p>声明首页的Theme与App其它页面的Theme相同，视频作者对于这部分内容讲述不清，目前存疑。</p>\n<h2 id=\"Turn-off-the-official-startup-window\"><a href=\"#Turn-off-the-official-startup-window\" class=\"headerlink\" title=\"Turn off the official startup window\"></a>Turn off the official startup window</h2><p>使用Window Disable Preview来禁止显示Preview界面，这会导致启动App后依然停留在桌面，在此过程中无法响应用户操作。方法如下：</p>\n<p>在<code>styles.xml</code>中声明Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.NoPreviewWindow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowIsTranslucent\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.NoPreviewWindow\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.NoActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowDisablePreview\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在<code>AndroidManifest.xml</code>中使用已经定义的Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".activities.SplashActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.NoPreviewWindow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:screenOrientation</span>=<span class=\"string\">\"portrait\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"The-better-way\"><a href=\"#The-better-way\" class=\"headerlink\" title=\"The better way\"></a>The better way</h1><h2 id=\"通过切换Theme的手段来完成\"><a href=\"#通过切换Theme的手段来完成\" class=\"headerlink\" title=\"通过切换Theme的手段来完成\"></a>通过切换Theme的手段来完成</h2><p>首先声明一个以图片为背景的Theme，并且在首页Activity中应用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> <span class=\"attr\">android:opacity</span>=<span class=\"string\">\"opaque\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@android:color/white\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">bitmap</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/product_log_144dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">...android:theme</span>=<span class=\"string\">\"@style/AppTheme.Launcher\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当首页Activity正式启动时，切换到正式的theme</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundel savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\tsetTheme(R.style.Theme_MyApp);</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.tothenew.com/blog/disabling-the-preview-or-start-window-in-android\" target=\"_blank\" rel=\"noopener\">Disabling the Preview(Start) Window in Android</a></li>\n<li><a href=\"https://www.bignerdranch.com/blog/splash-screens-the-right-way/\" target=\"_blank\" rel=\"noopener\">Splash Screens the Right Way</a><h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4></li>\n</ul>\n<hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"如何在控制台输出文件系统结构","url":"http://lilei.work/2017/01/22/Print-File-System-Tree-In-Terminal/","content":"<blockquote>\n<p>安装并使用tree工具</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/java/com/example/android/architecture/blueprints/todoapp</span><br><span class=\"line\">├── BasePresenter.java</span><br><span class=\"line\">├── BaseView.java</span><br><span class=\"line\">├── addedittask</span><br><span class=\"line\">│   ├── AddEditTaskActivity.java</span><br><span class=\"line\">│   ├── AddEditTaskContract.java</span><br><span class=\"line\">│   ├── AddEditTaskFragment.java</span><br><span class=\"line\">│   └── AddEditTaskPresenter.java</span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   ├── Task.java</span><br><span class=\"line\">│   └── source</span><br><span class=\"line\">│       ├── TasksDataSource.java</span><br><span class=\"line\">│       ├── TasksRepository.java</span><br><span class=\"line\">│       ├── local</span><br><span class=\"line\">│       │   ├── TasksDbHelper.java</span><br><span class=\"line\">│       │   ├── TasksLocalDataSource.java</span><br><span class=\"line\">│       │   └── TasksPersistenceContract.java</span><br><span class=\"line\">│       └── remote</span><br><span class=\"line\">│           └── TasksRemoteDataSource.java</span><br><span class=\"line\">├── statistics</span><br><span class=\"line\">│   ├── StatisticsActivity.java</span><br><span class=\"line\">│   ├── StatisticsContract.java</span><br><span class=\"line\">│   ├── StatisticsFragment.java</span><br><span class=\"line\">│   └── StatisticsPresenter.java</span><br><span class=\"line\">├── taskdetail</span><br><span class=\"line\">│   ├── TaskDetailActivity.java</span><br><span class=\"line\">│   ├── TaskDetailContract.java</span><br><span class=\"line\">│   ├── TaskDetailFragment.java</span><br><span class=\"line\">│   └── TaskDetailPresenter.java</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│   ├── ScrollChildSwipeRefreshLayout.java</span><br><span class=\"line\">│   ├── TasksActivity.java</span><br><span class=\"line\">│   ├── TasksContract.java</span><br><span class=\"line\">│   ├── TasksFilterType.java</span><br><span class=\"line\">│   ├── TasksFragment.java</span><br><span class=\"line\">│   └── TasksPresenter.java</span><br><span class=\"line\">└── util</span><br><span class=\"line\">    ├── ActivityUtils.java</span><br><span class=\"line\">    ├── EspressoIdlingResource.java</span><br><span class=\"line\">    └── SimpleCountingIdlingResource.java</span><br></pre></td></tr></table></figure>\n<p>很多时候我们写文章，需要贴出项目的目录结构。我之前采用的方法比较笨，是在IDE中截图。相信很多人在看资料时，遇到过上面这样，在控制台输出的文件目录结构。直观而且赏心悦目，那么这是用什么工具生成的呢？</p>\n<p>答案是：<strong>Tree</strong></p>\n<hr>\n<h1 id=\"Tree的安装与使用\"><a href=\"#Tree的安装与使用\" class=\"headerlink\" title=\"Tree的安装与使用\"></a>Tree的安装与使用</h1><p>如果你用的是<strong>Ubuntu</strong>或其他的*nux系统，直接运行<code>sudo apt-get install tree</code>安装即可，但是在<strong>macOS</strong>中，并没有<code>apt-get</code>工具，需要先安装<a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>，然后通过<code>brew</code>安装<code>tree</code>。</p>\n<p>注意在安装的过程中需要输入管理员密码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$/usr/bin/ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br><span class=\"line\"><span class=\"variable\">$brew</span> install tree</span><br></pre></td></tr></table></figure>\n<p>待安装完成后（大概需要10～20分钟），就可以使用<code>tree ${folder_name}</code>在控制台中打印出目录结构了。</p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"===End===\"></a><em>===End===</em></h4><hr>\n","categories":[],"tags":["工具"]},{"title":"Google官方Android MVP Demo学习与分析（Part II）","url":"http://lilei.work/2017/01/22/Architecture-Todo-MVP-Part-2/","content":"<blockquote>\n<p>项目组织结构，Tasks页面源码解析。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h1 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h1><p>项目package的组织结构，如下所示：每一个页面对应一个<code>package</code>，package下按照MVP模式分为<code>Activity</code>、<code>Conract</code>、<code>Fragment</code>、<code>Presenter</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main/java/com/example/android/architecture/blueprints/todoapp</span><br><span class=\"line\">├── BasePresenter.java</span><br><span class=\"line\">├── BaseView.java</span><br><span class=\"line\">├── addedittask</span><br><span class=\"line\">│   ├── AddEditTaskActivity.java</span><br><span class=\"line\">│   ├── AddEditTaskContract.java</span><br><span class=\"line\">│   ├── AddEditTaskFragment.java</span><br><span class=\"line\">│   └── AddEditTaskPresenter.java</span><br><span class=\"line\">├── data</span><br><span class=\"line\">│   ├── Task.java</span><br><span class=\"line\">│   └── source</span><br><span class=\"line\">│       ├── TasksDataSource.java</span><br><span class=\"line\">│       ├── TasksRepository.java</span><br><span class=\"line\">│       ├── local</span><br><span class=\"line\">│       │   ├── TasksDbHelper.java</span><br><span class=\"line\">│       │   ├── TasksLocalDataSource.java</span><br><span class=\"line\">│       │   └── TasksPersistenceContract.java</span><br><span class=\"line\">│       └── remote</span><br><span class=\"line\">│           └── TasksRemoteDataSource.java</span><br><span class=\"line\">├── statistics</span><br><span class=\"line\">│   ├── StatisticsActivity.java</span><br><span class=\"line\">│   ├── StatisticsContract.java</span><br><span class=\"line\">│   ├── StatisticsFragment.java</span><br><span class=\"line\">│   └── StatisticsPresenter.java</span><br><span class=\"line\">├── taskdetail</span><br><span class=\"line\">│   ├── TaskDetailActivity.java</span><br><span class=\"line\">│   ├── TaskDetailContract.java</span><br><span class=\"line\">│   ├── TaskDetailFragment.java</span><br><span class=\"line\">│   └── TaskDetailPresenter.java</span><br><span class=\"line\">├── tasks</span><br><span class=\"line\">│   ├── ScrollChildSwipeRefreshLayout.java</span><br><span class=\"line\">│   ├── TasksActivity.java</span><br><span class=\"line\">│   ├── TasksContract.java</span><br><span class=\"line\">│   ├── TasksFilterType.java</span><br><span class=\"line\">│   ├── TasksFragment.java</span><br><span class=\"line\">│   └── TasksPresenter.java</span><br><span class=\"line\">└── util</span><br><span class=\"line\">    ├── ActivityUtils.java</span><br><span class=\"line\">    ├── EspressoIdlingResource.java</span><br><span class=\"line\">    └── SimpleCountingIdlingResource.java</span><br></pre></td></tr></table></figure>\n<h3 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h3><p>这部分摘自<a href=\"http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html\" target=\"_blank\" rel=\"noopener\">阮一峰的博客</a></p>\n<p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p>\n<p><img src=\"/img/170122_todo_mvp/mvp.png\" alt=\"MVP\"></p>\n<ol>\n<li>各部分之间的通信，都是双向的。</li>\n<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>\n<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>\n</ol>\n<hr>\n<h1 id=\"Tasks页面\"><a href=\"#Tasks页面\" class=\"headerlink\" title=\"Tasks页面\"></a>Tasks页面</h1><p>Tasks是App启动的首个页面——任务列表页，页面展示所有待完成的任务，</p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"===End===\"></a><em>===End===</em></h4><hr>\n","categories":[],"tags":["Android","架构"]},{"title":"Android Performance Patterns s6ep3 App Launch time & Bloated Application objects","url":"http://lilei.work/2017/01/22/Android-Performance-Patterns-s6ep3-App-Launch-Time/","content":"<blockquote>\n<p>This videos are really interesting but it seems to me that the last 3 episodes have been basically the same.﻿ ————摘自youtube评论<br><a href=\"https://www.youtube.com/watch?v=Y-u511RsC3o&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=76\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Y-u511RsC3o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h1 id=\"Slow-start-up-apps-cause-unhappy-users\"><a href=\"#Slow-start-up-apps-cause-unhappy-users\" class=\"headerlink\" title=\"Slow start-up apps cause unhappy users.\"></a>Slow start-up apps cause unhappy users.</h1><p>是的，我同意！</p>\n<p>但是你能不能多讲一些干货？</p>\n<p><img src=\"/img/170117_app_s6ep3/wasted_work.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"Android-has-tools-to-help\"><a href=\"#Android-has-tools-to-help\" class=\"headerlink\" title=\"Android has tools to help.\"></a>Android has tools to help.</h1><h2 id=\"Method-Trace\"><a href=\"#Method-Trace\" class=\"headerlink\" title=\"Method Trace\"></a>Method Trace</h2><p>前面两节已经讲过这个，图片我就不贴了。</p>\n<hr>\n<h1 id=\"Solution-lazy-loading\"><a href=\"#Solution-lazy-loading\" class=\"headerlink\" title=\"Solution: lazy loading\"></a>Solution: lazy loading</h1><p><img src=\"/img/170117_app_s6ep3/lazy_loading.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"====Ending====\"></a><em>====Ending====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns s5ep3 App Launch time & Activity creation","url":"http://lilei.work/2017/01/17/Android-Performance-Patterns-s6ep2-App-Launch-Time-And-Activity-Creation/","content":"<blockquote>\n<p>ep1介绍了Application启动过慢的原因，本节分析Activity启动过慢的原因，启动速度标准以及工具。<br><a href=\"https://www.youtube.com/watch?v=AkafJ6NdrhY&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=75\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/AkafJ6NdrhY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/170117_app_s6ep2/title.png\" alt=\"\"></p>\n<hr>\n<h1 id=\"启动MainActivity过慢\"><a href=\"#启动MainActivity过慢\" class=\"headerlink\" title=\"启动MainActivity过慢\"></a>启动MainActivity过慢</h1><p>原因可能有多个，如下图。</p>\n<p><img src=\"/img/170117_app_s6ep2/slow_main_activity.png\" alt=\"\"></p>\n<ul>\n<li>加载布局</li>\n<li>加载 Bitmap（引起GC）</li>\n<li>网络请求</li>\n<li>读写 User Preference</li>\n</ul>\n<hr>\n<h1 id=\"分析问题\"><a href=\"#分析问题\" class=\"headerlink\" title=\"分析问题\"></a>分析问题</h1><h2 id=\"Method-tracing-tool\"><a href=\"#Method-tracing-tool\" class=\"headerlink\" title=\"Method tracing tool\"></a>Method tracing tool</h2><p><a href=\"https://developer.android.com/studio/profile/am-methodtrace.html\" target=\"_blank\" rel=\"noopener\">Method Tracer</a> 工具被用来查看每个方法的执行时间。</p>\n<p>如果<code>onCreate</code>的执行超过了<strong>16ms～30ms</strong>，那么它很可能是有问题的。</p>\n<h2 id=\"Inserting-Trace-Commands\"><a href=\"#Inserting-Trace-Commands\" class=\"headerlink\" title=\"Inserting Trace Commands\"></a>Inserting Trace Commands</h2><p>使用<code>trace</code>来记录开始／截止时间，所记录的时间会显示在<a href=\"https://developer.android.com/studio/profile/systrace-commandline.html\" target=\"_blank\" rel=\"noopener\">Systrace</a>中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">trace.beginSection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// code to be valued</span></span><br><span class=\"line\"></span><br><span class=\"line\">trace.endSection();</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"造成Activity启动过慢的原因\"><a href=\"#造成Activity启动过慢的原因\" class=\"headerlink\" title=\"造成Activity启动过慢的原因\"></a>造成Activity启动过慢的原因</h1><h2 id=\"Complex-Layouts\"><a href=\"#Complex-Layouts\" class=\"headerlink\" title=\"Complex Layouts\"></a>Complex Layouts</h2><p>首当其冲的是复杂布局导致加载过慢，布局越复杂，越多的资源文件（图片、主题）需要加载。</p>\n<p><img src=\"/img/170117_app_s6ep2/complex_layout.png\" alt=\"\"></p>\n<p>解决方法有降低复杂度、使结构扁平化、对于不可见的元素暂时不加载。</p>\n<h2 id=\"懒加载-amp-异步处理\"><a href=\"#懒加载-amp-异步处理\" class=\"headerlink\" title=\"懒加载&amp;异步处理\"></a>懒加载&amp;异步处理</h2><p><img src=\"/img/170117_app_s6ep2/slow_sync.png\" alt=\"\"></p>\n<p>当初始化过程中涉及多个耗时操作，最糟糕的情况是把它们串行起来进行，这会导致每一项操作的延迟被叠加起来，让用户抓狂。</p>\n<p>这时应当判断哪些操作是一定要串行进行，哪些是可以异步加载的，从而进行优化。</p>\n<p><img src=\"/img/170117_app_s6ep2/async.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h4><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"使用Charles监控Genymotion模拟器发送的请求","url":"http://lilei.work/2017/01/16/Using-Charles-Proxy-with-Genymotion/","content":"<blockquote>\n<p>Charles在模拟器中的配置，与在真机上的配置有所不同。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>Charles是很好用的代理工具，可以用来查看网络请求的Request和Response，Genymotion则号称速度最快的Android模拟器。然而，在把这两者结合使用时，会发现并没有用真机做代理那么方便。原因在于模拟器所接入的网络是<strong>VirtualBox</strong>所建立的模拟网络，跟笔记本电脑所看到的局域网IP不在同一个网络环境。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在模拟器的WLAN配置中，将代理host改为<code>10.0.3.2</code>，端口改为Charles配置的端口（默认的是<code>8888</code>，我使用的是<code>8642</code>）。</p>\n<p>Done！</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"http://rexstjohn.com/using-genymotion-charles-proxy/\" target=\"_blank\" rel=\"noopener\">Using Genymotion With Charles Proxy</a></p>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"====End====\"></a><em>====End====</em></h4><hr>\n","categories":[],"tags":["工具"]},{"title":"Android应用签名实践","url":"http://lilei.work/2017/01/16/Android-Sign/","content":"<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"http://www.jianshu.com/p/e9a685c88258\" target=\"_blank\" rel=\"noopener\">Android给apk签名那点事</a></li>\n</ul>\n","categories":[],"tags":["Android"]},{"title":"Android-Performance-Patterns-s6ep1-Launch-Time-Performance","url":"http://lilei.work/2017/01/16/Android-Performance-Patterns-s6ep1-Launch-Time-Performance/","content":"<blockquote>\n<p>Season 6 ep 1，第六季集中讨论App启动速度的话题。</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=Vw1G1s73DsY&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=74\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Vw1G1s73DsY\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/170116_app_s6ep1/title.png\" alt=\"\"></p>\n<h1 id=\"理解启动时间（Launching-Time）\"><a href=\"#理解启动时间（Launching-Time）\" class=\"headerlink\" title=\"理解启动时间（Launching Time）\"></a>理解启动时间（Launching Time）</h1><p>当用户启动应用时，Android系统会展示一个空白（dummy）启动页，后面会讲到，可以通过在<code>AndroidManifest.xml</code>中为这个启动页配置背景图片。</p>\n<p>空白页持续到App绘制出首屏图像为止。</p>\n<p><img src=\"/img/170116_app_s6ep1/dummy.png\" alt=\"\"></p>\n<p>下面的流程图从进程角度进行说明，系统进程<code>System Process</code>会为App启动一个<code>Application Process</code>，在这进程里先执行<code>Application.onCreate</code>（在musical.ly的face to face中提到了这个），随后，应用主线程<code>MainThread</code>处理Activity初始化事务，直至绘制出第一个界面，系统才将屏幕交给应用来展示。</p>\n<p><img src=\"/img/170116_app_s6ep1/process.png\" alt=\"\"></p>\n<p>在这个过程中，<code>inflate views</code>是耗时最多的，因此在开发自己的应用时，应当有意地精简首屏布局，减少加载时间。如果有耗时操作，则使用懒加载。</p>\n<p>若你使用懒加载，当所有资源加载完成后，可以通过<code>reportFullyDrawn()</code>方法来告诉系统这一事件。系统在统计初始加载时间的时候，会以调用这个方法的时机作为结束。</p>\n<hr>\n<h1 id=\"帮助我们优化启动时间的工具\"><a href=\"#帮助我们优化启动时间的工具\" class=\"headerlink\" title=\"帮助我们优化启动时间的工具\"></a>帮助我们优化启动时间的工具</h1><p>Android Studio为我们提供了监控启动时间的工具，借助这些工具，我们可以找出启动过程中最耗时的步骤是哪个，通过懒加载等手段，将启动时间控制在合理的范围内。</p>\n<p>首先便是App启动时候自动打出的log</p>\n<p><img src=\"/img/170116_app_s6ep1/load_time.png\" alt=\"\"></p>\n<p>精确到方法，在<strong>Monitor</strong>面板中有<strong>MethodTracing</strong>工具</p>\n<p><img src=\"/img/170116_app_s6ep1/method_tracing.png\" alt=\"\"></p>\n<p>更多关于启动时间的知识，将在后续章节中介绍。</p>\n<hr>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://developer.android.com/topic/performance/launch-time.html\" target=\"_blank\" rel=\"noopener\">Launch-Time Performance</a></li>\n</ul>\n<hr>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"====END====\"></a><em>====END====</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Linux Shell ${} 用法","url":"http://lilei.work/2017/01/13/Linux-Shell-Usage/","content":"<blockquote>\n<p>在Linux Shell中，<code>${}</code>可以被用来处理文件路径字符串。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><p><code>${[input][rule]}</code>，其中<code>input</code>是需要处理的字符串，<code>rule</code>是处理规则，详细规则如下。</p>\n<p><code>#</code>去掉左边字符。</p>\n<p><code>$</code>去掉右边字符。</p>\n<p>上面两点很好记忆，键盘上<code>#</code>在左，<code>$</code>在右。</p>\n<p>单个符号最小匹配，两个符号最大匹配。</p>\n<h1 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h1><p>定义<code>file</code>=<code>/dir1/dir2/dir3/my.file.txt</code></p>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li><code>${file#*/}</code>：拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</li>\n<li><code>${file##*/}</code>：拿掉最后一条 / 及其左边的字符串：my.file.txt</li>\n<li><code>${file#*.}</code>：拿掉第一个 . 及其左边的字符串：file.txt</li>\n<li><code>${file##*.}</code>：拿掉最后一个 . 及其左边的字符串：txt</li>\n<li><code>${file%/*}</code>：拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3</li>\n<li><code>${file%%/*}</code>：拿掉第一条 / 及其右边的字符串：(空值)</li>\n<li><code>${file%.*}</code>：拿掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file</li>\n<li><code>${file%%.*}</code>：拿掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my</li>\n</ul>\n<h2 id=\"提取\"><a href=\"#提取\" class=\"headerlink\" title=\"提取\"></a>提取</h2><ul>\n<li><code>${file:0:5}</code>：提取最左边的 5 个字节：/dir1</li>\n<li><code>${file:5:5}</code>：提取第 5 个字节右边的连续 5 个字节：/dir2</li>\n</ul>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><ul>\n<li><code>${file/dir/path}</code>：将第一个 dir 提换为 path：/path1/dir2/dir3/my.file.txt</li>\n<li><code>${file//dir/path}</code>：将全部 dir 提换为 path：/path1/path2/path3/my</li>\n</ul>\n<h4 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"====END====\"></a><em>====END====</em></h4>","categories":[],"tags":["Linux","Shell"]},{"title":"Those Questions","url":"http://lilei.work/2017/01/11/Those-Questions/","content":"<blockquote>\n<p>在计算机科学的沙滩上，我始终是一个蹦蹦跳跳捡拾贝壳的孩子，而那真理的大海就在身边，我却未能发现它。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Project-Module\"><a href=\"#Project-Module\" class=\"headerlink\" title=\"Project? Module?\"></a>Project? Module?</h1><h1 id=\"AppCompatActivity\"><a href=\"#AppCompatActivity\" class=\"headerlink\" title=\"AppCompatActivity?\"></a>AppCompatActivity?</h1><h1 id=\"AndroidManifest-xml中的tools-context\"><a href=\"#AndroidManifest-xml中的tools-context\" class=\"headerlink\" title=\"AndroidManifest.xml中的tools:context\"></a>AndroidManifest.xml中的tools:context</h1>","categories":[],"tags":["Android"]},{"title":"Google官方Android MVP Demo学习与分析(Part I)","url":"http://lilei.work/2017/01/11/Architecture-Todo-MVP/","content":"<blockquote>\n<p>Sample代码阅读 <a href=\"https://github.com/googlesamples/android-architecture\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>Android是一个开放的系统，开放一方面是好事，但另一方面，过于开放导致开发者们各自为战，写出的代码结构千人千面。好在官方也认识到了这个隐患，推出以<code>Architecture</code>为主题的一系列的Demo，站在官方的角度看待Android系统，是很好的学习资料。</p>\n<hr>\n<h1 id=\"Gradle文件\"><a href=\"#Gradle文件\" class=\"headerlink\" title=\"Gradle文件\"></a>Gradle文件</h1><p>Gradle可分为project的配置与module的配置两个层次。</p>\n<hr>\n<h2 id=\"Project层次的Gradle\"><a href=\"#Project层次的Gradle\" class=\"headerlink\" title=\"Project层次的Gradle\"></a>Project层次的Gradle</h2><h3 id=\"第一部分-声明项目使用的依赖仓库与构建工具版本。\"><a href=\"#第一部分-声明项目使用的依赖仓库与构建工具版本。\" class=\"headerlink\" title=\"第一部分 声明项目使用的依赖仓库与构建工具版本。\"></a>第一部分 声明项目使用的依赖仓库与构建工具版本。</h3><p>gradle最新版本为2016年9月发布的2.2.0，<a href=\"https://developer.android.com/studio/releases/gradle-plugin.html#updating-gradle\" target=\"_blank\" rel=\"noopener\">链接地址</a></p>\n<p>一般使用<code>jcenter</code>和<code>mavenCentral</code>两者中的一个，如果使用本地仓库的话，有<code>mavenLocal</code>供选择。可以同时声明多个仓库，系统构建时会按照顺序依次选择使用。</p>\n<p>如注释所讲，不要把module的依赖写在这里，这里只用来记录project依赖。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        classpath &apos;com.android.tools.build:gradle:2.2.0&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class=\"line\">        // in the individual module build.gradle files</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二部分-声明内部mudules使用的仓库\"><a href=\"#第二部分-声明内部mudules使用的仓库\" class=\"headerlink\" title=\"第二部分 声明内部mudules使用的仓库\"></a>第二部分 声明内部mudules使用的仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三部分-定义脚本\"><a href=\"#第三部分-定义脚本\" class=\"headerlink\" title=\"第三部分 定义脚本\"></a>第三部分 定义脚本</h3><p>在gradle中以<code>task</code>关键字声明脚本执行的任务，这里声明的任务，会在所有其它任务执行完毕后才执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task clean(type: Delete) &#123;</span><br><span class=\"line\">    delete rootProject.buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第四部分-定义内部modules使用的常量\"><a href=\"#第四部分-定义内部modules使用的常量\" class=\"headerlink\" title=\"第四部分 定义内部modules使用的常量\"></a>第四部分 定义内部modules使用的常量</h3><p>一般是版本号什么的，使用<code>ext</code>保存。这里统一管理，减少modules单独管理导致冲突的风险，同时也便于统一升级。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Define versions in a single place</span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    // Sdk and tools</span><br><span class=\"line\">    minSdkVersion = 10</span><br><span class=\"line\">    targetSdkVersion = 24</span><br><span class=\"line\">    compileSdkVersion = 24</span><br><span class=\"line\">    buildToolsVersion = &apos;24.0.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // App dependencies</span><br><span class=\"line\">    supportLibraryVersion = &apos;24.2.0&apos;</span><br><span class=\"line\">    guavaVersion = &apos;18.0&apos;</span><br><span class=\"line\">    junitVersion = &apos;4.12&apos;</span><br><span class=\"line\">    mockitoVersion = &apos;1.10.19&apos;</span><br><span class=\"line\">    powerMockito = &apos;1.6.2&apos;</span><br><span class=\"line\">    hamcrestVersion = &apos;1.3&apos;</span><br><span class=\"line\">    runnerVersion = &apos;0.5&apos;</span><br><span class=\"line\">    rulesVersion = &apos;0.5&apos;</span><br><span class=\"line\">    espressoVersion = &apos;2.2.2&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Module层次的Gradle\"><a href=\"#Module层次的Gradle\" class=\"headerlink\" title=\"Module层次的Gradle\"></a>Module层次的Gradle</h2><h3 id=\"第一部分-plugin\"><a href=\"#第一部分-plugin\" class=\"headerlink\" title=\"第一部分 plugin\"></a>第一部分 plugin</h3><p>声明本gradle脚本中使用的插件，一般都会有下面的application插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: &apos;com.android.application&apos;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第二部分-编译、打包设置\"><a href=\"#第二部分-编译、打包设置\" class=\"headerlink\" title=\"第二部分 编译、打包设置\"></a>第二部分 编译、打包设置</h3><p>以<code>android</code>开头，声明以下信息</p>\n<ul>\n<li>编译时使用的SDK版本（关于compileSdkVersion、targetSdkVersion、minSdkVersion这三个版本好的区别，我会另外撰文说明）</li>\n<li>构建工具版本</li>\n</ul>\n<h4 id=\"defaultConfig\"><a href=\"#defaultConfig\" class=\"headerlink\" title=\"defaultConfig\"></a>defaultConfig</h4><ul>\n<li>app版本号，app版本名称</li>\n<li>测试工具</li>\n</ul>\n<h4 id=\"buildTypes\"><a href=\"#buildTypes\" class=\"headerlink\" title=\"buildTypes\"></a>buildTypes</h4><p>声明不同的build flavor，可以在其中配置是否开启proguard，以及指明proguard文件</p>\n<h4 id=\"productFlavors，android-variantFilter，testOptions-unitTests-all\"><a href=\"#productFlavors，android-variantFilter，testOptions-unitTests-all\" class=\"headerlink\" title=\"productFlavors，android.variantFilter，testOptions.unitTests.all\"></a>productFlavors，android.variantFilter，testOptions.unitTests.all</h4><p>目前不清楚用途，待探究。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class=\"line\">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class=\"line\"></span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        applicationId &quot;com.example.android.architecture.blueprints.todomvp&quot;</span><br><span class=\"line\">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class=\"line\">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class=\"line\">        versionCode 1</span><br><span class=\"line\">        versionName &quot;1.0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        testInstrumentationRunner &apos;android.support.test.runner.AndroidJUnitRunner&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            // Uses new built-in shrinker http://tools.android.com/tech-docs/new-build-system/built-in-shrinker</span><br><span class=\"line\">            useProguard false</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">            testProguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguardTest-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled true</span><br><span class=\"line\">            useProguard true</span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class=\"line\">            testProguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguardTest-rules.pro&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // If you need to add more flavors, consider using flavor dimensions.</span><br><span class=\"line\">    productFlavors &#123;</span><br><span class=\"line\">        mock &#123;</span><br><span class=\"line\">            applicationIdSuffix = &quot;.mock&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prod &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Remove mockRelease as it&apos;s not needed.</span><br><span class=\"line\">    android.variantFilter &#123; variant -&gt;</span><br><span class=\"line\">        if(variant.buildType.name.equals(&apos;release&apos;)</span><br><span class=\"line\">                &amp;&amp; variant.getFlavors().get(0).name.equals(&apos;mock&apos;)) &#123;</span><br><span class=\"line\">            variant.setIgnore(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Always show the result of every unit test, even if it passes.</span><br><span class=\"line\">    testOptions.unitTests.all &#123;</span><br><span class=\"line\">        testLogging &#123;</span><br><span class=\"line\">            events &apos;passed&apos;, &apos;skipped&apos;, &apos;failed&apos;, &apos;standardOut&apos;, &apos;standardError&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"第三部分-依赖\"><a href=\"#第三部分-依赖\" class=\"headerlink\" title=\"第三部分 依赖\"></a>第三部分 依赖</h3><p>代码中引入外部类时，需要在这里添加依赖。如果出现<code>class not found</code>的错误，记得来这里检查是否有对应的pkg添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    // App&apos;s dependencies, including test</span><br><span class=\"line\">    compile &quot;com.android.support:appcompat-v7:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    compile &quot;com.android.support:cardview-v7:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    compile &quot;com.android.support:design:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    compile &quot;com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    compile &quot;com.android.support:support-v4:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    compile &quot;com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion&quot;</span><br><span class=\"line\">    compile &quot;com.google.guava:guava:$rootProject.guavaVersion&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Dependencies for local unit tests</span><br><span class=\"line\">    testCompile &quot;junit:junit:$rootProject.ext.junitVersion&quot;</span><br><span class=\"line\">    testCompile &quot;org.mockito:mockito-all:$rootProject.ext.mockitoVersion&quot;</span><br><span class=\"line\">    testCompile &quot;org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Android Testing Support Library&apos;s runner and rules</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support.test:runner:$rootProject.ext.runnerVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support.test:rules:$rootProject.ext.runnerVersion&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Dependencies for Android unit tests</span><br><span class=\"line\">    androidTestCompile &quot;junit:junit:$rootProject.ext.junitVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;org.mockito:mockito-core:$rootProject.ext.mockitoVersion&quot;</span><br><span class=\"line\">    androidTestCompile &apos;com.google.dexmaker:dexmaker:1.2&apos;</span><br><span class=\"line\">    androidTestCompile &apos;com.google.dexmaker:dexmaker-mockito:1.2&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Espresso UI Testing</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Resolve conflicts between main and test APK:</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support:support-annotations:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support:support-v4:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support:appcompat-v7:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">    androidTestCompile &quot;com.android.support:design:$rootProject.supportLibraryVersion&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"===End===\"></a><em>===End===</em></h4><hr>\n","categories":[],"tags":["Android","架构"]},{"title":"尝鲜开发微信小程序有感","url":"http://lilei.work/2017/01/09/WeChat-App-Dev/","content":"<blockquote>\n<p>首次开发小程序，完成了一个简单的功能（半成品），有所思，有所感</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"始末\"><a href=\"#始末\" class=\"headerlink\" title=\"始末\"></a>始末</h1><p>2017年1月9日，微信小程序上线，朋友圈里铺天盖地的各种截图，足见其火爆。诸多移动应用大厂纷纷上线各自的小程序版本，笔者所在的D公司也悄悄发布了小程序，看来是在保密情况下开发的，在之前一段时间里自己竟从未听闻。</p>\n<p>纸上得来终觉浅，绝知此事要躬行。今天笔者就尝试开发了一个小程序，功能非常简单，见下文。</p>\n<h1 id=\"程序页面与功能\"><a href=\"#程序页面与功能\" class=\"headerlink\" title=\"程序页面与功能\"></a>程序页面与功能</h1><p>整个小程序包含两个页面，登陆页与功能页。登陆页显示一张欢迎图片和一个输入框，当用户输入正确的文字后，跳转至功能页。功能页提供一个简单的ASCII字符转换功能。</p>\n<h1 id=\"实操\"><a href=\"#实操\" class=\"headerlink\" title=\"实操\"></a>实操</h1><p>依照官方Demo，新建两个页面目录，布局写入<code>wxml</code>，逻辑写入<code>js</code>。</p>\n<p>代码过于简单，而且涉及个人隐私，略去不提。着重谈思考与感想。</p>\n<h1 id=\"思考与感想\"><a href=\"#思考与感想\" class=\"headerlink\" title=\"思考与感想\"></a>思考与感想</h1><h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>整体看来，小程序的结构还是很清晰的。</p>\n<ul>\n<li>按页面组织，每个页面是一个文件夹</li>\n<li>文件夹下，wxml（布局），json（配置），wxss（样式），js（逻辑），自带数据绑定，接近设计模式中的MVVM模式</li>\n<li>官方集成登陆、定位、地图、支付、分享、网络请求等基础服务，减少二次开发成本</li>\n<li>另一方面，这也限制了开发者对于底层工具的选择，只能寄希望于微信提供的API足够强大与高效，因为你压根也没有别的办法去修改底层服务</li>\n</ul>\n<h2 id=\"开发者工具\"><a href=\"#开发者工具\" class=\"headerlink\" title=\"开发者工具\"></a>开发者工具</h2><p>目前看来，微信官方提供的开发者工具只是个半成品，由于缺少一些常用功能，使用起来反而会碍手碍脚，拖慢开发速度。建议开发者使用自己习惯的工具进行开发，只使用官方开发工具中的预览&amp;发布功能。</p>\n<h3 id=\"官方开发者工具的一些槽点\"><a href=\"#官方开发者工具的一些槽点\" class=\"headerlink\" title=\"官方开发者工具的一些槽点\"></a>官方开发者工具的一些槽点</h3><ul>\n<li>快捷键匮乏：打开文件，关闭文件，自动格式化……</li>\n<li>无法批量操作文件</li>\n<li>无法批量重命名变量</li>\n<li>无法全局搜索</li>\n<li>不支持Less</li>\n<li><code>Wxml</code>标签中不支持键盘展开/收起节点</li>\n<li>wxml、wxss在sublime等编辑器中无语法高亮</li>\n<li>偶尔出现调试面板中只显示<code>Console</code> <code>Sources</code> <code>Network</code>三个标签的bug，重新下载后解决</li>\n</ul>\n<h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>这是笔者最不喜欢的一点，必须以公司/企业/媒体/政府机关的身份进行认证后，才能发布到线上，完全堵死了个人开发者发布的道路。</p>\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>张小龙的野心很大，当微信占据了8亿手机入口后，这野心开始显露出来————微信不会满足于只做一个通讯软件，它正试图成为一个入口，一个触达使用者生活方方面面的入口。一旦这个生态系统被证明是行之有效的，未来人们手机上可能只会安装一个微信。</p>\n<p>对于开发者，尤其是Android/iOS开发者，这并不是一个好消息，他们可能需要改行写js/css了。</p>\n<p>支付宝地位受到威胁，阿里恐成最大输家。</p>\n<p>以上的一切，都建立在小程序真正跑得够快、够好的基础上，目前看来这是远远不够的，比起原生系统，小程序的体验要下降许多，尤其是Tap/Scroll事件，卡顿非常明显。</p>\n<h1 id=\"附1-ASCII对照表\"><a href=\"#附1-ASCII对照表\" class=\"headerlink\" title=\"附1: ASCII对照表\"></a>附1: ASCII对照表</h1><p><img src=\"/img/170109_wechat_dev/ascii.png\" alt=\"\"></p>\n<h1 id=\"附2-JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\"><a href=\"#附2-JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\" class=\"headerlink\" title=\"附2: JavaScript中获取字符的ASCII值，以及将ACSII转换为字符\"></a>附2: JavaScript中获取字符的ASCII值，以及将ACSII转换为字符</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"string\">'c'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ascii = c.charCodeAt(); <span class=\"comment\">// 99</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"built_in\">String</span>.fromCharCode(ascii); <span class=\"comment\">// 'c'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"======Ending======\"></a><em>======Ending======</em></h4>","categories":[],"tags":["微信小程序"]},{"title":"Android SDK下载极速代理地址","url":"http://lilei.work/2017/01/09/Android-SDK-Manager-Proxy-Server/","content":"<blockquote>\n<p>HTTP Proxy Server: android-mirror.bugly.qq.com<br>HTTP Proxy Port: 8080</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>在Android SDK Manager中如上配置即可，为鹅厂点赞👍</p>\n<p>记得勾选下面的<code>Force https://... sources to be fetched using http://...</code></p>\n<p><img src=\"/img/170109_sdk_proxy/proxy.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"======Ending======\"></a><em>======Ending======</em></h3>","categories":[],"tags":["Android","Android Studio"]},{"title":"Android WebView 从0到1（二）","url":"http://lilei.work/2016/11/10/Android-WebView-0-to-1-part-2/","content":"<blockquote>\n<p>WebView中clearCache的执行过程源码分析。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"前情提要\"><a href=\"#前情提要\" class=\"headerlink\" title=\"前情提要\"></a>前情提要</h2><p>上一篇文章中我们对Android WebView的loadUrl方法进行了分析，这次我们来看看clearCache究竟做了什么事，进而搞清楚WebView中的缓存机制。</p>\n<h2 id=\"WebView-clearCache\"><a href=\"#WebView-clearCache\" class=\"headerlink\" title=\"WebView.clearCache\"></a>WebView.clearCache</h2><p>clearCache的源码很简单，唯一的参数<code>includeDiskFiles</code>也很容易理解。如前篇所述，WebView的大部分操作，都是代理给<code>WebViewProvider</code>来进行，clearCache也不例外。不过可以发现，这里有个<code>checkThread()</code>的操作，这是来进行什么的呢？让我们在源码中一探究竟。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clears the resource cache. Note that the cache is per-application, so</span></span><br><span class=\"line\"><span class=\"comment\"> * this will clear the cache for all WebViews used.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> includeDiskFiles if false, only the RAM cache is cleared</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    checkThread();</span><br><span class=\"line\">    mProvider.clearCache(includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">checkThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Ignore mWebViewThread == null because this can be called during in the super class</span></span><br><span class=\"line\">    <span class=\"comment\">// constructor, before this class's own constructor has even started.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mWebViewThread != <span class=\"keyword\">null</span> &amp;&amp; Looper.myLooper() != mWebViewThread) &#123;</span><br><span class=\"line\">        Throwable throwable = <span class=\"keyword\">new</span> Throwable(</span><br><span class=\"line\">                <span class=\"string\">\"A WebView method was called on thread '\"</span> +</span><br><span class=\"line\">                Thread.currentThread().getName() + <span class=\"string\">\"'. \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"All WebView methods must be called on the same thread. \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"(Expected Looper \"</span> + mWebViewThread + <span class=\"string\">\" called on \"</span> + Looper.myLooper() +</span><br><span class=\"line\">                <span class=\"string\">\", FYI main Looper is \"</span> + Looper.getMainLooper() + <span class=\"string\">\")\"</span>);</span><br><span class=\"line\">        Log.w(LOGTAG, Log.getStackTraceString(throwable));</span><br><span class=\"line\">        StrictMode.onWebViewMethodCalledOnWrongThread(throwable);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sEnforceThreadChecking) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(throwable);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>开头注释里就已经说明，忽略<code>mWebViewThread</code>为null的情况，因为可能会在超类的构造器里调用这个方法，此时WebView这个类的对象还没有构建出来，意味着<code>mWebViewThread</code>为null。<code>if</code>条件中的<code>Looper.myLooper() != mWebViewThread</code>这条判断，对Android系统有过一定了解的人的人，应该会对<code>Looper.myLooper()</code>这种写法非常熟悉，这是获取当前线程的典型手段。如果当前线程不是WebView线程的话，就要做好抛出异常的准备。为什么要做这种判断呢？我分析了10分钟，得出结论是：因为WebView中很多操作，都需要运用线程内部资源，如果在外部线程中调用，很容易出现并发问题，如果要避免，就只有增加同步的成本，所以索性只限制在线程内了。有一点值得注意的是，因为WebView是一个UI组件，大部分时间里都在主线程中初始化，因此，这里判断的就是当前线程是否为UI线程。</p>\n<p>接下来我们看一下<code>WebViewProvider</code>中的<code>clearCache</code>方法，依旧是<a href=\"https://android.googlesource.com/platform/frameworks/webview/+/4dcabae/chromium/java/com/android/webview/chromium/WebViewChromium.java\" target=\"_blank\" rel=\"noopener\">WebViewChromium.java</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    mAwContents.clearCache(includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样，这个操作被代理给了<code>AwContents</code>，源码见<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/c5c1b6121eac447fb8d8691bd637e2b6b188fd75/android_webview/java/src/org/chromium/android_webview/AwContents.java\" target=\"_blank\" rel=\"noopener\">AwContents.java</a>。需要注意，由于app内所有的WebView缓存都是保存在一个地方，这个方法会清空app全部WebView的缓存，参数<code>includeDiskFiles</code>控制清空硬盘上的缓存文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Clears the resource cache. Note that the cache is per-application, so this will clear the</span></span><br><span class=\"line\"><span class=\"comment\"> * cache for all WebViews used.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> includeDiskFiles if false, only the RAM cache is cleared</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clearCache</span><span class=\"params\">(<span class=\"keyword\">boolean</span> includeDiskFiles)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mNativeAwContents == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    nativeClearCache(mNativeAwContents, includeDiskFiles);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的实现位于<a href=\"https://chromium.googlesource.com/experimental/chromium/src/+/master/android_webview/native/aw_contents.cc\" target=\"_blank\" rel=\"noopener\">aw_contents.cc</a>代码。先检测当前线程为UI线程，然后调用<code>render_view_host_ext_</code>的ClearCache方法，如果需要清空硬盘上的缓存的话，调用<code>RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost())</code>。逐个来分析。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AwContents::ClearCache(JNIEnv* env,</span><br><span class=\"line\">                            <span class=\"keyword\">const</span> JavaParamRef&lt;jobject&gt;&amp; obj,</span><br><span class=\"line\">                            jboolean include_disk_files) &#123;</span><br><span class=\"line\">  DCHECK_CURRENTLY_ON(BrowserThread::UI);</span><br><span class=\"line\">  render_view_host_ext_-&gt;ClearCache();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (include_disk_files)</span><br><span class=\"line\">    RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先看<code>render_view_host_ext_-&gt;ClearCache()</code>，代码在<a href=\"https://chromium.googlesource.com/chromium/src/+/master/android_webview/browser/renderer_host/aw_render_view_host_ext.cc\" target=\"_blank\" rel=\"noopener\">aw_render_view_host_ext.cc</a>。这里发出了一个信息，<code>AwViewMsg_ClearCache</code>，看出来了，是广播模式。那么消息监听者在哪儿呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AwRenderViewHostExt::ClearCache() &#123;</span><br><span class=\"line\">  DCHECK(CalledOnValidThread());</span><br><span class=\"line\">  Send(<span class=\"keyword\">new</span> AwViewMsg_ClearCache);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>监听者位于<a href=\"https://chromium.googlesource.com/chromium/src/+/refs/heads/master/android_webview/renderer/aw_render_thread_observer.cc\" target=\"_blank\" rel=\"noopener\">aw_render_thread_observer.cc</a>。通过<code>blink::WebCache::clear()</code>调用clear方法。<code>blink</code>究竟是个啥？I don’t know. 借助Google的力量，找到了<code>WebCache::clear()</code>的实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AwRenderThreadObserver::OnControlMessageReceived(</span><br><span class=\"line\">    <span class=\"keyword\">const</span> IPC::Message&amp; message) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> handled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  IPC_BEGIN_MESSAGE_MAP(AwRenderThreadObserver, message)</span><br><span class=\"line\">    IPC_MESSAGE_HANDLER(AwViewMsg_ClearCache, OnClearCache)</span><br><span class=\"line\">    IPC_MESSAGE_HANDLER(AwViewMsg_SetJsOnlineProperty, OnSetJsOnlineProperty)</span><br><span class=\"line\">    IPC_MESSAGE_UNHANDLED(handled = <span class=\"literal\">false</span>)</span><br><span class=\"line\">  IPC_END_MESSAGE_MAP()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> handled;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> AwRenderThreadObserver::OnClearCache() &#123;</span><br><span class=\"line\">  blink::WebCache::clear();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/web/WebCache.cpp\" target=\"_blank\" rel=\"noopener\">WebCache.cpp</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> WebCache::clear()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MemoryCache* cache = memoryCache();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache)</span><br><span class=\"line\">        cache-&gt;evictResources();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取<code>memoryCache()</code>的方法位于<a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/web/WebCache.cpp\" target=\"_blank\" rel=\"noopener\">WebCache.cpp</a>，可以看出该cache是线程相关的，而且从命名上就可以看出，这是<code>MemoryCache</code>，位于RAM中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">MemoryCache* <span class=\"title\">memoryCache</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ASSERT(WTF::isMainThread());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!gMemoryCache)</span><br><span class=\"line\">        gMemoryCache = <span class=\"keyword\">new</span> Persistent&lt;MemoryCache&gt;(MemoryCache::create());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gMemoryCache-&gt;get();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析完清理内存缓存的路径，我们接下来看如何清理磁盘缓存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (include_disk_files)</span><br><span class=\"line\">    RemoveHttpDiskCache(web_contents_-&gt;GetRenderProcessHost());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>RemoveHttpDiskCache</code>位于<a href=\"https://chromium.googlesource.com/chromium/src.git/+/master/android_webview/browser/net_disk_cache_remover.cc\" target=\"_blank\" rel=\"noopener\">net_disk_cache_remover.cc</a>。所做的事情是，在<code>BrowserThread</code>中发布一个Task，清理<code>Render</code>进程拥有的磁盘空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">RemoveHttpDiskCache</span><span class=\"params\">(content::RenderProcessHost* render_process_host)</span> </span>&#123;</span><br><span class=\"line\">  BrowserThread::PostTask(</span><br><span class=\"line\">      BrowserThread::IO, FROM_HERE,</span><br><span class=\"line\">      base::Bind(&amp;ClearHttpDiskCacheOnIoThread,</span><br><span class=\"line\">                 base::Unretained(render_process_host-&gt;GetStoragePartition()-&gt;</span><br><span class=\"line\">                     GetURLRequestContext()),</span><br><span class=\"line\">                 base::Unretained(render_process_host-&gt;GetStoragePartition()-&gt;</span><br><span class=\"line\">                     GetMediaURLRequestContext())));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这里，似乎告一段落了。</p>\n<hr>\n","categories":[],"tags":["Android","源码分析"]},{"title":"Android WebView 从0到1（一）","url":"http://lilei.work/2016/11/09/Android-WebView-0-to-1/","content":"<blockquote>\n<p>这一系列将从源码角度，分析WebView加载页面的全过程。在摸透缓存机制的基础上，实现自己的WebView缓存控制项目Vindow。<br>从0到1很难，但是克服了之后，从1到100就容易了许多。</p>\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"WebView-java\"><a href=\"#WebView-java\" class=\"headerlink\" title=\"WebView.java\"></a>WebView.java</h2><p>这里采用<code>android-23</code>的源码示例。</p>\n<p>WebView的类说明注释非常长，建议耐心地读完每一行，随后，你就会对WebView的主要功能有一个轮廓上的认识。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A View that displays web pages. This class is the basis upon which you</span></span><br><span class=\"line\"><span class=\"comment\"> * can roll your own web browser or simply display some online content within your Activity.</span></span><br><span class=\"line\"><span class=\"comment\"> * It uses the WebKit rendering engine to display</span></span><br><span class=\"line\"><span class=\"comment\"> * web pages and includes methods to navigate forward and backward</span></span><br><span class=\"line\"><span class=\"comment\"> * through a history, zoom in and out, perform text searches and more.</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>这段是说，WebView主要用来展示网页信息，它使用WebKit内核（这里很重要，后续分析大部分源码都是来自WebKit的），包含了控制网页前进后退的导航功能、缩放功能、文本搜索功能以及其他。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * By default, a WebView provides no browser-like widgets, does not</span></span><br><span class=\"line\"><span class=\"comment\"> * enable JavaScript and web page errors are ignored. If your goal is only</span></span><br><span class=\"line\"><span class=\"comment\"> * to display some HTML as a part of your UI, this is probably fine;</span></span><br><span class=\"line\"><span class=\"comment\"> * the user won't need to interact with the web page beyond reading</span></span><br><span class=\"line\"><span class=\"comment\"> * it, and the web page won't need to interact with the user. If you</span></span><br><span class=\"line\"><span class=\"comment\"> * actually want a full-blown web browser, then you probably want to</span></span><br><span class=\"line\"><span class=\"comment\"> * invoke the Browser application with a URL Intent rather than show it</span></span><br><span class=\"line\"><span class=\"comment\"> * with a WebView.</span></span><br><span class=\"line\"><span class=\"comment\"> * Uri uri = Uri.parse(\"http://www.example.com\");</span></span><br><span class=\"line\"><span class=\"comment\"> * Intent intent = new Intent(Intent.ACTION_VIEW, uri);</span></span><br><span class=\"line\"><span class=\"comment\"> * startActivity(intent);</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>这里强调了，WebView应当仅仅提供展示，默认情况下是禁用JavaScript，并且隐藏网页错误信息的。换句话说，Google本意是不提倡在WebView中引导用户进行过多的操作，如果有这种需求，就通过intent打开浏览器页面进行操作。然而当下这条规则在很多应用场景下是被无视的，想想微信在H5页面里，可以做多少事。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;A WebView has several customization points where you can add your</span></span><br><span class=\"line\"><span class=\"comment\"> * own behavior. These are:&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Creating and setting a &#123;<span class=\"doctag\">@link</span> android.webkit.WebChromeClient&#125; subclass.</span></span><br><span class=\"line\"><span class=\"comment\"> *       This class is called when something that might impact a</span></span><br><span class=\"line\"><span class=\"comment\"> *       browser UI happens, for instance, progress updates and</span></span><br><span class=\"line\"><span class=\"comment\"> *       JavaScript alerts are sent here (see &lt;a</span></span><br><span class=\"line\"><span class=\"comment\"> * href=\"&#123;<span class=\"doctag\">@docRoot</span>&#125;guide/developing/debug-tasks.html#DebuggingWebPages\"&gt;Debugging Tasks&lt;/a&gt;).</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Creating and setting a &#123;<span class=\"doctag\">@link</span> android.webkit.WebViewClient&#125; subclass.</span></span><br><span class=\"line\"><span class=\"comment\"> *       It will be called when things happen that impact the</span></span><br><span class=\"line\"><span class=\"comment\"> *       rendering of the content, eg, errors or form submissions. You</span></span><br><span class=\"line\"><span class=\"comment\"> *       can also intercept URL loading here (via &#123;<span class=\"doctag\">@link</span></span></span><br><span class=\"line\"><span class=\"comment\"> * android.webkit.WebViewClient#shouldOverrideUrlLoading(WebView,String)</span></span><br><span class=\"line\"><span class=\"comment\"> * shouldOverrideUrlLoading()&#125;).&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Modifying the &#123;<span class=\"doctag\">@link</span> android.webkit.WebSettings&#125;, such as</span></span><br><span class=\"line\"><span class=\"comment\"> * enabling JavaScript with &#123;<span class=\"doctag\">@link</span> android.webkit.WebSettings#setJavaScriptEnabled(boolean)</span></span><br><span class=\"line\"><span class=\"comment\"> * setJavaScriptEnabled()&#125;. &lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *   &lt;li&gt;Injecting Java objects into the WebView using the</span></span><br><span class=\"line\"><span class=\"comment\"> *       &#123;<span class=\"doctag\">@link</span> android.webkit.WebView#addJavascriptInterface&#125; method. This</span></span><br><span class=\"line\"><span class=\"comment\"> *       method allows you to inject Java objects into a page's JavaScript</span></span><br><span class=\"line\"><span class=\"comment\"> *       context, so that they can be accessed by JavaScript in the page.&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * /</span></span><br></pre></td></tr></table></figure>\n<p>默认WebView的很多功能是关闭的，需要我们手动打开。这里列出了如何处理JS Alert与错误、如何开启JS、如何使native代码与页面JS进行交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implementation notes.</span></span><br><span class=\"line\"><span class=\"comment\">// The WebView is a thin API class that delegates its public API to a backend WebViewProvider</span></span><br><span class=\"line\"><span class=\"comment\">// class instance. WebView extends &#123;@link AbsoluteLayout&#125; for backward compatibility reasons.</span></span><br><span class=\"line\"><span class=\"comment\">// Methods are delegated to the provider implementation: all public API methods introduced in this</span></span><br><span class=\"line\"><span class=\"comment\">// file are fully delegated, whereas public and protected methods from the View base classes are</span></span><br><span class=\"line\"><span class=\"comment\">// only delegated where a specific need exists for them to do so.</span></span><br></pre></td></tr></table></figure>\n<p>上面这段说明了WebView主要的实现机理————WebView本身只是一个代理（delegate），提供了公共的API供客户端调用，而这些API的实现，都是代理到了一个叫WebViewProvider的对象上面。既然这样，我们就大致浏览下WebView有哪些公有API，把更多的精力保留下来，集中分析WebViewProvider的实现。</p>\n<h2 id=\"WebView-API\"><a href=\"#WebView-API\" class=\"headerlink\" title=\"WebView API\"></a>WebView API</h2><p>这部分不罗列了，只做一个简单的归类，API文档见 <a href=\"https://developer.android.com/reference/android/webkit/WebView.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/reference/android/webkit/WebView.html</a></p>\n<p><strong>加载页面</strong><br>这是最主要的功能，全部由代理Provider完成</p>\n<ul>\n<li>loadUrl</li>\n<li>postUrl</li>\n<li>loadData</li>\n<li>loadDataWithBaseURL</li>\n<li>getUrl，getOriginalUrl</li>\n<li>getFavicon，getTouchIconUrl</li>\n<li>保存页面：saveWebArchive</li>\n<li>控制加载：stopLoading，reload，getProgress</li>\n<li>页面尺寸：getContentHeight，getContentWidth</li>\n</ul>\n<p><strong>计时器</strong></p>\n<ul>\n<li>JS中的计时器，在onPause时可以暂停，onResume时恢复：pauseTimers，resumeTimers</li>\n</ul>\n<p><strong>导航</strong></p>\n<ul>\n<li>canGoBack，canGoForward，canGoBackOrForward</li>\n<li>goBack，goForward，goBackOrForward</li>\n<li>pageUp，pageDown</li>\n<li>copyBackForwardList</li>\n</ul>\n<p><strong>JavaScript</strong></p>\n<ul>\n<li>evaluateJavascript</li>\n<li>addJavascriptInterface，removeJavascriptInterface</li>\n</ul>\n<p><strong>WebViewClient／WebChromeClient</strong></p>\n<ul>\n<li>setWebViewClient：WebView本身是控制页面整体框架的前进、后退、缩放、加载等功能，而具体页面内容的变化，则要交给WebViewClient来管理。</li>\n<li>setWebChromeClient：WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等。如果页面只是简单地展示HTML，并没有JS操作，那么用WebViewClient就足够了。</li>\n</ul>\n<p><strong>下载</strong></p>\n<ul>\n<li>完成下载监听器：setDownloadListener</li>\n</ul>\n<p><strong>查找</strong></p>\n<ul>\n<li>通过FindListener回调接口实现：setFindListener，findNext，findAll……</li>\n</ul>\n<p><strong>缩放</strong></p>\n<ul>\n<li>展示缩放控件：invokeZoomPicker</li>\n<li>控制缩放：zoomIn，zoomOut……</li>\n</ul>\n<p><strong>安全认证</strong></p>\n<ul>\n<li>证书操作：getCertificate，setCertificate（deprecated），</li>\n<li>用户名密码：setHttpAuthUsernamePassword，getHttpAuthUsernamePassword</li>\n<li>私密模式：isPrivateBrowsingEnabled</li>\n</ul>\n<p><strong>设置网络</strong></p>\n<ul>\n<li>网络可用性：setNetworkAvailable</li>\n</ul>\n<p><strong>保存状态</strong></p>\n<ul>\n<li>代理给Provider进行：saveState，restoreState</li>\n</ul>\n<p><strong>生命周期与回调</strong></p>\n<ul>\n<li>postVisualStateCallback</li>\n</ul>\n<p><strong>页面内容标签</strong></p>\n<ul>\n<li>HitTestResult系列：getHitTestResult</li>\n</ul>\n<p><strong>Cache与访问历史</strong><br>本系列文章重点了解的内容，代理给Provider实现</p>\n<ul>\n<li>clearCache</li>\n<li>clearFormData</li>\n<li>clearHistory</li>\n<li>clearSslPreferences</li>\n</ul>\n<p><strong>被废弃的方法</strong></p>\n<ul>\n<li>设置滚动条样式：setHorizontalScrollbarOverlay，setVerticalScrollbarOverlay，overlayHorizontalScrollbar，overlayVerticalScrollbar……</li>\n<li>获取Title高度：getVisibleTitleHeight</li>\n<li>平台通知：enablePlatformNotifications，disablePlatformNotifications</li>\n<li>图片操作：savePicture，restorePicture……</li>\n<li>内存：freeMemory</li>\n<li>Plugins：getPluginList，refreshPlugins……</li>\n</ul>\n<h2 id=\"WebViewProvider\"><a href=\"#WebViewProvider\" class=\"headerlink\" title=\"WebViewProvider\"></a>WebViewProvider</h2><p>前面说了，WebView的功能几乎全部都是代理给WebViewProvider来实现的，<code>android.webkit.WebViewProvider</code>是一个接口，其实现要追溯源码，据版本不同有所区分。</p>\n<ul>\n<li>Android4.4之前的版本，由WebViewClassic实现。</li>\n<li>Android4.4以及之后的版本，由WebViewChromium实现。</li>\n</ul>\n<p>随SDK下载的源码里不包含这部分代码，在这个页面查看：<a href=\"https://android.googlesource.com/platform/frameworks/webview/+/4dcabae/chromium/java/com/android/webview/chromium/WebViewChromium.java\" target=\"_blank\" rel=\"noopener\">WebViewChromium.java</a></p>\n<p>WebViewChromium类实现了WebView中被代理的全部方法，篇幅所限，我们不逐一进行分析，只追踪我们关注的加载页面／cache相关，也就是<code>loadUrl</code>和<code>clearCache</code>两个方法。</p>\n<h3 id=\"loadUrl\"><a href=\"#loadUrl\" class=\"headerlink\" title=\"loadUrl\"></a>loadUrl</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">    loadUrl(url, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(String url, Map&lt;String, String&gt; additionalHttpHeaders)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> We may actually want to do some sanity checks here (like filter about://chrome).</span></span><br><span class=\"line\">    LoadUrlParams params = <span class=\"keyword\">new</span> LoadUrlParams(url);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (additionalHttpHeaders != <span class=\"keyword\">null</span>) params.setExtraHeaders(additionalHttpHeaders);</span><br><span class=\"line\">    mAwContents.loadUrl(params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们通常所用的<code>loadUrl(&quot;http://www.foo.com&quot;)</code>，会走到<code>loadUrl(String url, Map&lt;String, String&gt; additionalHttpHeaders)</code>这个方法，可以看到首先把url拼装成了一个<code>LoadUrlParams</code>，那么这个<code>LoadUrlParams</code>是用来做什么的呢？</p>\n<p><strong>LoadUrlParams.java</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Holds parameters for ContentViewCore.LoadUrl. Parameters should match</span></span><br><span class=\"line\"><span class=\"comment\"> * counterparts in NavigationController::LoadURLParams, including default</span></span><br><span class=\"line\"><span class=\"comment\"> * values.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@JNINamespace</span>(<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoadUrlParams</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Should match NavigationController::LoadUrlType exactly. See comments</span></span><br><span class=\"line\">    <span class=\"comment\">// there for proper usage. Values are initialized in initializeConstants.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_DEFAULT;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LOAD_TYPE_DATA;</span><br><span class=\"line\">    <span class=\"comment\">// Should match NavigationController::UserAgentOverrideOption exactly.</span></span><br><span class=\"line\">    <span class=\"comment\">// See comments there for proper usage. Values are initialized in</span></span><br><span class=\"line\">    <span class=\"comment\">// initializeConstants.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_INHERIT;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_FALSE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UA_OVERRIDE_TRUE;</span><br><span class=\"line\">    <span class=\"comment\">// Fields with counterparts in NavigationController::LoadURLParams.</span></span><br><span class=\"line\">    <span class=\"comment\">// Package private so that ContentViewCore.loadUrl can pass them down to</span></span><br><span class=\"line\">    <span class=\"comment\">// native code. Should not be accessed directly anywhere else outside of</span></span><br><span class=\"line\">    <span class=\"comment\">// this class.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String mUrl;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mLoadUrlType;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mTransitionType;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mUaOverrideOption;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String&gt; mExtraHeaders;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] mPostData;</span><br><span class=\"line\">    String mBaseUrlForDataUrl;</span><br><span class=\"line\">    String mVirtualUrlForDataUrl;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> mCanLoadLocalResources;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoadUrlParams</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check initializeConstants was called.</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> LOAD_TYPE_DEFAULT != LOAD_TYPE_BROWSER_INITIATED_HTTP_POST;</span><br><span class=\"line\">        mUrl = url;</span><br><span class=\"line\">        mLoadUrlType = LOAD_TYPE_DEFAULT;</span><br><span class=\"line\">        mTransitionType = PageTransitionTypes.PAGE_TRANSITION_LINK;</span><br><span class=\"line\">        mUaOverrideOption = UA_OVERRIDE_INHERIT;</span><br><span class=\"line\">        mPostData = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mBaseUrlForDataUrl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        mVirtualUrlForDataUrl = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 以下略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一个URL竟然可以解析出这么多东西来，逐个看看这些变量的含义：（参考<a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkcr/content/public/browser/navigation_controller.h\" target=\"_blank\" rel=\"noopener\">navigation_controller.h</a>）</p>\n<ul>\n<li>mUrl：最原始的URL</li>\n<li>mLoadUrlType：加载类型，有如下三种<ol>\n<li>LOAD_TYPE_DEFAULT：默认类型，以下两种以外的任意类型。</li>\n<li>LOAD_TYPE_BROWSER_INITIATED_HTTP_POST：POST请求需要设置此类型。</li>\n<li>LOAD_TYPE_DATA：使用Base64编码的图片类型，通过Base64编码图片能够减少一次网络资源加载。(可以使用以下这两个工具，查看如何在图片与Base64编码之间进行转换：<a href=\"http://dataurl.net/#dataurlmaker\" target=\"_blank\" rel=\"noopener\">http://dataurl.net/#dataurlmaker</a> <a href=\"http://codebeautify.org/base64-to-image-converter\" target=\"_blank\" rel=\"noopener\">http://codebeautify.org/base64-to-image-converter</a>)</li>\n</ol>\n</li>\n<li>mTransitionType：页面变化的类型（实在找不出合适的词语来描述），默认为，详见<a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkcr/ui/base/page_transition_types.h\" target=\"_blank\" rel=\"noopener\">page_transition_types.h</a>，举例说明：<ol>\n<li>PAGE_TRANSITION_LINK：默认值，点击link</li>\n<li>PAGE_TRANSITION_TYPED：在地址栏输入link</li>\n<li>PAGE_TRANSITION_RELOAD：刷新页面</li>\n<li>略</li>\n</ol>\n</li>\n<li>mUaOverrideOption：控制http中的UserAgent，有三个可选值<ol>\n<li>UA_OVERRIDE_INHERIT：默认值，Use the override value from the previous NavigationEntry in the NavigationController.</li>\n<li>UA_OVERRIDE_FALSE：Use the default user agent</li>\n<li>UA_OVERRIDE_TRUE：Use the user agent override, if it’s available.</li>\n</ol>\n</li>\n<li>mPostData：POST请求的data</li>\n<li>mBaseUrlForDataUrl：仅对<code>LOAD_TYPE_DATA</code>有效，用于URL的相对路径以及JavaScript跨域检验。</li>\n<li>mVirtualUrlForDataUrl：仅对<code>LOAD_TYPE_DATA</code>有效，显示在外给用户看的地址。</li>\n</ul>\n<p>分析完了LoadUrlParams，继续追溯WebViewChromium中的loadUrl方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (additionalHttpHeaders != <span class=\"keyword\">null</span>) params.setExtraHeaders(additionalHttpHeaders);</span><br></pre></td></tr></table></figure>\n<p>这里设置的<code>ExtraHeaders</code>是一个Map，具体参见http协议的header部分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mAwContents.loadUrl(params);</span><br></pre></td></tr></table></figure>\n<p>最终交给<code>AwContent</code>对象处理，完整源码见<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/c5c1b6121eac447fb8d8691bd637e2b6b188fd75/android_webview/java/src/org/chromium/android_webview/AwContents.java\" target=\"_blank\" rel=\"noopener\">AwContents.java</a>。”Aw”是”Android WebView”的缩写。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Exposes the native AwContents class, and together these classes wrap the ContentViewCore</span></span><br><span class=\"line\"><span class=\"comment\"> * and Browser components that are required to implement Android WebView API. This is the</span></span><br><span class=\"line\"><span class=\"comment\"> * primary entry point for the WebViewProvider implementation; it holds a 1:1 object</span></span><br><span class=\"line\"><span class=\"comment\"> * relationship with application WebView instances.</span></span><br><span class=\"line\"><span class=\"comment\"> * (We define this class independent of the hidden WebViewProvider interfaces, to allow</span></span><br><span class=\"line\"><span class=\"comment\"> * continuous build &amp; test in the open source SDK-based tree).</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>上述注释中最重要的是<code>This is the primary entry point for the WebViewProvider implementation; it holds a 1:1 object relationship with application WebView instances.</code>这一句，说明每一个WebView示例，都有一个AwContent对象和它对应。同样，我们只关注<code>loadUrl</code>方法，这里通过我们上一步分析的<code>LoadUrlParams</code>参数进行加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Load url without fixing up the url string. Consumers of ContentView are responsible for</span></span><br><span class=\"line\"><span class=\"comment\">     * ensuring the URL passed in is properly formatted (i.e. the scheme has been added if left</span></span><br><span class=\"line\"><span class=\"comment\">     * off during user input).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> params Parameters for this load.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(LoadUrlParams params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">                !params.isBaseUrlDataScheme()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// This allows data URLs with a non-data base URL access to file:///android_asset/ and</span></span><br><span class=\"line\">            <span class=\"comment\">// file:///android_res/ URLs. If AwSettings.getAllowFileAccess permits, it will also</span></span><br><span class=\"line\">            <span class=\"comment\">// allow access to file:// URLs (subject to OS level permission checks).</span></span><br><span class=\"line\">            params.setCanLoadLocalResources(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// If we are reloading the same url, then set transition type as reload.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getUrl() != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">                params.getUrl().equals(mContentViewCore.getUrl()) &amp;&amp;</span><br><span class=\"line\">                params.getTransitionType() == PageTransitionTypes.PAGE_TRANSITION_LINK) &#123;</span><br><span class=\"line\">            params.setTransitionType(PageTransitionTypes.PAGE_TRANSITION_RELOAD);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        params.setTransitionType(</span><br><span class=\"line\">                params.getTransitionType() | PageTransitionTypes.PAGE_TRANSITION_FROM_API);</span><br><span class=\"line\">        <span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\">        <span class=\"comment\">// every time the user agent in AwSettings is modified.</span></span><br><span class=\"line\">        params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br><span class=\"line\">        <span class=\"comment\">// We don't pass extra headers to the content layer, as WebViewClassic</span></span><br><span class=\"line\">        <span class=\"comment\">// was adding them in a very narrow set of conditions. See http://crbug.com/306873</span></span><br><span class=\"line\">        <span class=\"comment\">// However, if the embedder is attempting to inject a Referer header for their</span></span><br><span class=\"line\">        <span class=\"comment\">// loadUrl call, then we set that separately and remove it from the extra headers map/</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> String REFERER = <span class=\"string\">\"referer\"</span>;</span><br><span class=\"line\">        Map&lt;String, String&gt; extraHeaders = params.getExtraHeaders();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (extraHeaders != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String header : extraHeaders.keySet()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (REFERER.equals(header.toLowerCase(Locale.US))) &#123;</span><br><span class=\"line\">                    params.setReferrer(<span class=\"keyword\">new</span> Referrer(extraHeaders.remove(header), <span class=\"number\">1</span>));</span><br><span class=\"line\">                    params.setExtraHeaders(extraHeaders);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mNativeAwContents != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nativeSetExtraHeadersForUrl(</span><br><span class=\"line\">                    mNativeAwContents, params.getUrl(), params.getExtraHttpRequestHeadersString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        params.setExtraHeaders(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\">        mContentViewCore.loadUrl(params);</span><br><span class=\"line\">        <span class=\"comment\">// The behavior of WebViewClassic uses the populateVisitedLinks callback in WebKit.</span></span><br><span class=\"line\">        <span class=\"comment\">// Chromium does not use this use code path and the best emulation of this behavior to call</span></span><br><span class=\"line\">        <span class=\"comment\">// request visited links once on the first URL load of the WebView.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mHasRequestedVisitedHistoryFromClient) &#123;</span><br><span class=\"line\">            mHasRequestedVisitedHistoryFromClient = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            requestVisitedHistoryFromClient();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">                params.getBaseUrl() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Data loads with a base url will be resolved in Blink, and not cause an onPageStarted</span></span><br><span class=\"line\">            <span class=\"comment\">// event to be sent. Sending the callback directly from here.</span></span><br><span class=\"line\">            mContentsClient.getCallbackHelper().postOnPageStarted(params.getBaseUrl());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>设置加载本地文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (params.getLoadUrlType() == LoadUrlParams.LOAD_TYPE_DATA &amp;&amp;</span><br><span class=\"line\">        !params.isBaseUrlDataScheme()) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// This allows data URLs with a non-data base URL access to file:///android_asset/ and</span></span><br><span class=\"line\">    <span class=\"comment\">// file:///android_res/ URLs. If AwSettings.getAllowFileAccess permits, it will also</span></span><br><span class=\"line\">    <span class=\"comment\">// allow access to file:// URLs (subject to OS level permission checks).</span></span><br><span class=\"line\">    params.setCanLoadLocalResources(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重设transitionType</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If we are reloading the same url, then set transition type as reload.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (params.getUrl() != <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">        params.getUrl().equals(mContentViewCore.getUrl()) &amp;&amp;</span><br><span class=\"line\">        params.getTransitionType() == PageTransitionTypes.PAGE_TRANSITION_LINK) &#123;</span><br><span class=\"line\">    params.setTransitionType(PageTransitionTypes.PAGE_TRANSITION_RELOAD);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params.setTransitionType(</span><br><span class=\"line\">        params.getTransitionType() | PageTransitionTypes.PAGE_TRANSITION_FROM_API);</span><br></pre></td></tr></table></figure>\n<p>设置UA为override</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\"><span class=\"comment\">// every time the user agent in AwSettings is modified.</span></span><br><span class=\"line\">params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br></pre></td></tr></table></figure>\n<p>把ExtraHeaders中的referer属性提取出来单独设置，并将其从ExtraHeaders中删除，referer属性用于声明当前页面是从哪个页面跳转来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// We don't pass extra headers to the content layer, as WebViewClassic</span></span><br><span class=\"line\"><span class=\"comment\">// was adding them in a very narrow set of conditions. See http://crbug.com/306873</span></span><br><span class=\"line\"><span class=\"comment\">// However, if the embedder is attempting to inject a Referer header for their</span></span><br><span class=\"line\"><span class=\"comment\">// loadUrl call, then we set that separately and remove it from the extra headers map/</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> String REFERER = <span class=\"string\">\"referer\"</span>;</span><br><span class=\"line\">Map&lt;String, String&gt; extraHeaders = params.getExtraHeaders();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (extraHeaders != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String header : extraHeaders.keySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (REFERER.equals(header.toLowerCase(Locale.US))) &#123;</span><br><span class=\"line\">            params.setReferrer(<span class=\"keyword\">new</span> Referrer(extraHeaders.remove(header), <span class=\"number\">1</span>));</span><br><span class=\"line\">            params.setExtraHeaders(extraHeaders);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后对于剩下的属性，单独设置，最终清楚ExtraHeaders</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mNativeAwContents != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    nativeSetExtraHeadersForUrl(</span><br><span class=\"line\">            mNativeAwContents, params.getUrl(), params.getExtraHttpRequestHeadersString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">params.setExtraHeaders(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br></pre></td></tr></table></figure>\n<p>对params进行过上述二次加工后，调用mContentViewCore的loadUrl方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mContentViewCore.loadUrl(params);</span><br></pre></td></tr></table></figure>\n<p>继续追溯至<a href=\"https://chromium.googlesource.com/chromium/src/+/4907c84d52411cdc8dd78b613eeeb5bbad5ad0ab/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java\" target=\"_blank\" rel=\"noopener\">ContentViewCore.java</a>，位于<code>org.chromium.content.browser</code>包中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Load url without fixing up the url string. Consumers of ContentView are responsible for</span></span><br><span class=\"line\"><span class=\"comment\"> * ensuring the URL passed in is properly formatted (i.e. the scheme has been added if left</span></span><br><span class=\"line\"><span class=\"comment\"> * off during user input).</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> pararms Parameters for this load.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUrl</span><span class=\"params\">(LoadUrlParams params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mNativeContentViewCore == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPersonalityView()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// For WebView, always use the user agent override, which is set</span></span><br><span class=\"line\">        <span class=\"comment\">// every time the user agent in ContentSettings is modified.</span></span><br><span class=\"line\">        params.setOverrideUserAgent(LoadUrlParams.UA_OVERRIDE_TRUE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nativeLoadUrl(mNativeContentViewCore,</span><br><span class=\"line\">            params.mUrl,</span><br><span class=\"line\">            params.mLoadUrlType,</span><br><span class=\"line\">            params.mTransitionType,</span><br><span class=\"line\">            params.mUaOverrideOption,</span><br><span class=\"line\">            params.getExtraHeadersString(),</span><br><span class=\"line\">            params.mPostData,</span><br><span class=\"line\">            params.mBaseUrlForDataUrl,</span><br><span class=\"line\">            params.mVirtualUrlForDataUrl,</span><br><span class=\"line\">            params.mCanLoadLocalResources);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了nativeLoadUrl方法，传入的参数我们之前都已经分析过其含义，除了第一个参数<code>mNativeContentViewCore</code>，它是一个指向<code>ContentViewCoreImpl</code>的指针地址。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Native pointer to C++ ContentViewCoreImpl object which will be set by nativeInit().</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mNativeContentViewCore = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就要深入到cpp文件中了，<a href=\"https://android.googlesource.com/platform/external/chromium_org/+/dc0e1d3/content/browser/android/content_view_core_impl.cc\" target=\"_blank\" rel=\"noopener\">content_view_core_impl.cc</a>。注意！可能是版本的原因，这里的LoadUrl方法多出了第一个参数<code>JNIEnv* env</code>，通过对比可以发现，其它的参数是完全一致的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::LoadUrl(</span><br><span class=\"line\">    JNIEnv* env, jobject obj,</span><br><span class=\"line\">    jstring url,</span><br><span class=\"line\">    jint load_url_type,</span><br><span class=\"line\">    jint transition_type,</span><br><span class=\"line\">    jint ua_override_option,</span><br><span class=\"line\">    jstring extra_headers,</span><br><span class=\"line\">    jbyteArray post_data,</span><br><span class=\"line\">    jstring base_url_for_data_url,</span><br><span class=\"line\">    jstring virtual_url_for_data_url,</span><br><span class=\"line\">    jboolean can_load_local_resources) &#123;</span><br><span class=\"line\">  DCHECK(url);</span><br><span class=\"line\">  NavigationController::<span class=\"function\">LoadURLParams <span class=\"title\">params</span><span class=\"params\">(</span></span></span><br><span class=\"line\">      GURL(ConvertJavaStringToUTF8(env, url)));</span><br><span class=\"line\">  params.load_type = <span class=\"keyword\">static_cast</span>&lt;NavigationController::LoadURLType&gt;(</span><br><span class=\"line\">      load_url_type);</span><br><span class=\"line\">  params.transition_type = PageTransitionFromInt(transition_type);</span><br><span class=\"line\">  params.override_user_agent =</span><br><span class=\"line\">      <span class=\"keyword\">static_cast</span>&lt;NavigationController::UserAgentOverrideOption&gt;(</span><br><span class=\"line\">          ua_override_option);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (extra_headers)</span><br><span class=\"line\">    params.extra_headers = ConvertJavaStringToUTF8(env, extra_headers);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (post_data) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;uint8&gt; http_body_vector;</span><br><span class=\"line\">    base::android::JavaByteArrayToByteVector(env, post_data, &amp;http_body_vector);</span><br><span class=\"line\">    params.browser_initiated_post_data =</span><br><span class=\"line\">        base::RefCountedBytes::TakeVector(&amp;http_body_vector);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (base_url_for_data_url) &#123;</span><br><span class=\"line\">    params.base_url_for_data_url =</span><br><span class=\"line\">        GURL(ConvertJavaStringToUTF8(env, base_url_for_data_url));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (virtual_url_for_data_url) &#123;</span><br><span class=\"line\">    params.virtual_url_for_data_url =</span><br><span class=\"line\">        GURL(ConvertJavaStringToUTF8(env, virtual_url_for_data_url));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  params.can_load_local_resources = can_load_local_resources;</span><br><span class=\"line\">  LoadUrl(params);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GURL是一个宏，虽然不了解它具体做了什么，但是根据上下文可以猜测这里生成了一个<code>NavigationController::LoadURLParams</code>对象</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NavigationController::<span class=\"function\">LoadURLParams <span class=\"title\">params</span><span class=\"params\">(</span></span></span><br><span class=\"line\">    GURL(ConvertJavaStringToUTF8(env, url)));</span><br></pre></td></tr></table></figure>\n<p>随后对几个参数进行类型转换，把它们拼入params中，最后调用<code>LoadUrl(params)</code>方法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::LoadUrl(</span><br><span class=\"line\">    NavigationController::LoadURLParams&amp; params) &#123;</span><br><span class=\"line\">  GetWebContents()-&gt;GetController().LoadURLWithParams(params);</span><br><span class=\"line\">  UpdateTabCrashedFlag();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然自己对C语言不是很熟悉，但在这里也可以发现，是把上一步拼装成的params参数集合传递给了某个Controller对象。那么到底是哪一个Controller呢？跟着代码走～</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WebContents* ContentViewCoreImpl::GetWebContents() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> web_contents_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里返回成员变量<code>web_contents_</code>，而Controller就在它内部</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> ContentViewCoreImpl::InitWebContents() &#123;</span><br><span class=\"line\">  DCHECK(web_contents_);</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_RENDER_VIEW_HOST_CHANGED,</span><br><span class=\"line\">      Source&lt;NavigationController&gt;(&amp;web_contents_-&gt;GetController()));</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_RENDERER_PROCESS_CREATED,</span><br><span class=\"line\">      content::NotificationService::AllBrowserContextsAndSources());</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_WEB_CONTENTS_CONNECTED,</span><br><span class=\"line\">      Source&lt;WebContents&gt;(web_contents_));</span><br><span class=\"line\">  notification_registrar_.Add(</span><br><span class=\"line\">      <span class=\"keyword\">this</span>, NOTIFICATION_WEB_CONTENTS_SWAPPED,</span><br><span class=\"line\">      Source&lt;WebContents&gt;(web_contents_));</span><br><span class=\"line\">  <span class=\"keyword\">static_cast</span>&lt;WebContentsViewAndroid*&gt;(web_contents_-&gt;GetView())-&gt;</span><br><span class=\"line\">      SetContentViewCore(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">  DCHECK(!web_contents_-&gt;GetUserData(kContentViewUserDataKey));</span><br><span class=\"line\">  web_contents_-&gt;SetUserData(kContentViewUserDataKey,</span><br><span class=\"line\">                             <span class=\"keyword\">new</span> ContentViewUserData(<span class=\"keyword\">this</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找到了，是NavigationController类型，源码见<a href=\"https://chromium.googlesource.com/dart/dartium/src/+/releases/1650/content/browser/web_contents/navigation_controller_impl.cc\" target=\"_blank\" rel=\"noopener\">navigation_controller_impl.cc</a>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::LoadURLWithParams(<span class=\"keyword\">const</span> LoadURLParams&amp; params) &#123;</span><br><span class=\"line\">  TRACE_EVENT0(<span class=\"string\">\"browser\"</span>, <span class=\"string\">\"NavigationControllerImpl::LoadURLWithParams\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HandleDebugURL(params.url, params.transition_type))</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Checks based on params.load_type.</span></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.load_type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DEFAULT:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!params.url.SchemeIs(kHttpScheme) &amp;&amp;</span><br><span class=\"line\">          !params.url.SchemeIs(kHttpsScheme)) &#123;</span><br><span class=\"line\">        NOTREACHED() &lt;&lt; <span class=\"string\">\"Http post load must use http(s) scheme.\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DATA:</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!params.url.SchemeIs(chrome::kDataScheme)) &#123;</span><br><span class=\"line\">        NOTREACHED() &lt;&lt; <span class=\"string\">\"Data load must use data scheme.\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// The user initiated a load, we don't need to reload anymore.</span></span><br><span class=\"line\">  needs_reload_ = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">bool</span> override = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.override_user_agent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_INHERIT:</span><br><span class=\"line\">      override = ShouldKeepOverride(GetLastCommittedEntry());</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_TRUE:</span><br><span class=\"line\">      override = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> UA_OVERRIDE_FALSE:</span><br><span class=\"line\">      override = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  NavigationEntryImpl* entry = NavigationEntryImpl::FromNavigationEntry(</span><br><span class=\"line\">      CreateNavigationEntry(</span><br><span class=\"line\">          params.url,</span><br><span class=\"line\">          params.referrer,</span><br><span class=\"line\">          params.transition_type,</span><br><span class=\"line\">          params.is_renderer_initiated,</span><br><span class=\"line\">          params.extra_headers,</span><br><span class=\"line\">          browser_context_));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (params.should_replace_current_entry)</span><br><span class=\"line\">    entry-&gt;set_should_replace_entry(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  entry-&gt;set_should_clear_history_list(params.should_clear_history_list);</span><br><span class=\"line\">  entry-&gt;SetIsOverridingUserAgent(override);</span><br><span class=\"line\">  entry-&gt;set_transferred_global_request_id(</span><br><span class=\"line\">      params.transferred_global_request_id);</span><br><span class=\"line\">  entry-&gt;SetFrameToNavigate(params.frame_name);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (params.load_type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DEFAULT:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_BROWSER_INITIATED_HTTP_POST:</span><br><span class=\"line\">      entry-&gt;SetHasPostData(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      entry-&gt;SetBrowserInitiatedPostData(</span><br><span class=\"line\">          params.browser_initiated_post_data.get());</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> LOAD_TYPE_DATA:</span><br><span class=\"line\">      entry-&gt;SetBaseURLForDataURL(params.base_url_for_data_url);</span><br><span class=\"line\">      entry-&gt;SetVirtualURL(params.virtual_url_for_data_url);</span><br><span class=\"line\">      entry-&gt;SetCanLoadLocalResources(params.can_load_local_resources);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      NOTREACHED();</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  LoadEntry(entry);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里做的事情与前面类似，取出参数再次拼装成<code>NavigationEntryImpl* entry</code>，然后调用LoadEntry。LoadEntry这里的注释讲解的很清楚，当我们进入新页面时，我们并不清楚是不是要终止上一个页面，因为新页面有可能只是一个下载或者邮件。由于我们的url等信息都保存在entry中，继续追溯 SetPendingEntry(entry) 方法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::LoadEntry(NavigationEntryImpl* entry) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// When navigating to a new page, we don't know for sure if we will actually</span></span><br><span class=\"line\">  <span class=\"comment\">// end up leaving the current page.  The new page load could for example</span></span><br><span class=\"line\">  <span class=\"comment\">// result in a download or a 'no content' response (e.g., a mailto: URL).</span></span><br><span class=\"line\">  SetPendingEntry(entry);</span><br><span class=\"line\">  NavigateToPendingEntry(NO_RELOAD);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NavigationControllerImpl::SetPendingEntry(NavigationEntryImpl* entry) &#123;</span><br><span class=\"line\">  DiscardNonCommittedEntriesInternal();</span><br><span class=\"line\">  pending_entry_ = entry;</span><br><span class=\"line\">  NotificationService::current()-&gt;Notify(</span><br><span class=\"line\">      NOTIFICATION_NAV_ENTRY_PENDING,</span><br><span class=\"line\">      Source&lt;NavigationController&gt;(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">      Details&lt;NavigationEntry&gt;(entry));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码中，先是终止了尚未提交处理的Entry，然后将欲访问的entry保存在<code>pending_entry_</code>变量，最后通过<code>NotificationService::current()-&gt;Notify</code>，把Entry插入一个消息队列，可以在<a href=\"https://chromium.googlesource.com/dart/dartium/src/+/releases/1650/content/browser/notification_service_impl.cc\" target=\"_blank\" rel=\"noopener\">notification_service_impl.cc</a>的源码中看到，收到这个消息后，会通知所有的Observer</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> NotificationServiceImpl::Notify(<span class=\"keyword\">int</span> type,</span><br><span class=\"line\">                                     <span class=\"keyword\">const</span> NotificationSource&amp; source,</span><br><span class=\"line\">                                     <span class=\"keyword\">const</span> NotificationDetails&amp; details) &#123;</span><br><span class=\"line\">  DCHECK_GT(type, NOTIFICATION_ALL) &lt;&lt;</span><br><span class=\"line\">      <span class=\"string\">\"Allowed for observing, but not posting.\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">// There's no particular reason for the order in which the different</span></span><br><span class=\"line\">  <span class=\"comment\">// classes of observers get notified here.</span></span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of all types and all sources</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[NOTIFICATION_ALL], AllSources()) &amp;&amp;</span><br><span class=\"line\">      source != AllSources()) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[NOTIFICATION_ALL][AllSources().map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of all types and the given source</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[NOTIFICATION_ALL], source)) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[NOTIFICATION_ALL][source.map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of the given type and all sources</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[type], AllSources()) &amp;&amp;</span><br><span class=\"line\">      source != AllSources()) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[type][AllSources().map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// Notify observers of the given type and the given source</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (HasKey(observers_[type], source)) &#123;</span><br><span class=\"line\">    FOR_EACH_OBSERVER(NotificationObserver,</span><br><span class=\"line\">                      *observers_[type][source.map_key()],</span><br><span class=\"line\">                      Observe(type, source, details));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们必须找到是哪个Observer处理了加载Entry的消息，可是到这里，线索似乎断了，怎么才能找到对应的Observer呢？</p>\n<blockquote>\n<p>内事不决问百度，外事不决问谷歌。</p>\n</blockquote>\n<p>在Google的帮助下，找到了这篇文档<a href=\"https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code\" target=\"_blank\" rel=\"noopener\">Getting Around the Chromium Source Code Directory Structure</a>。这里介绍了整个Chromium的架构，重点关注“Navigating from the URL bar”一节。</p>\n<h3 id=\"Navigating-from-the-URL-bar\"><a href=\"#Navigating-from-the-URL-bar\" class=\"headerlink\" title=\"Navigating from the URL bar\"></a>Navigating from the URL bar</h3><ol>\n<li>When the user types into or accepts an entry in the URL bar, the autocomplete edit box determines the final target URL and passes that to <code>AutocompleteEdit::OpenURL</code>. (This may not be exactly what the user typed - for example, an URL is generated in the case of a search query.)</li>\n<li>The navigation controller is instructed to navigate to the URL in <code>NavigationController::LoadURL</code>.</li>\n<li>The <code>NavigationController</code> calls <code>TabContents::Navigate</code> with the <code>NavigationEntry</code> it created to represent this particular page transition. It will create a new <code>RenderViewHost</code> if necessary, which will cause creation of a RenderView in the renderer process. A <code>RenderView</code> won’t exist if this is the first navigation, or if the renderer has crashed, so this will also recover from crashes.</li>\n<li><code>Navigate</code> forwards to <code>RenderViewHost::NavigateToEntry</code>. The <code>NavigationController</code>stores this navigation entry, but it is marked as “pending” because it doesn’t know for sure if the transition will take place (maybe the host can not be resolved).</li>\n<li><code>RenderViewHost::NavigateToEntry</code> sends a <code>ViewMsg_Navigate</code> to the new <code>RenderView</code> in the renderer process.</li>\n<li>When told to navigate, <code>RenderView</code> may navigate, it may fail, or it may navigate somewhere else instead (for example, if the user clicks a link). <code>RenderViewHost</code> waits for a <code>ViewHostMsg_FrameNavigate</code> from the <code>RenderView</code>.</li>\n<li>When the load is “committed” by WebKit (the server responded and is sending us data), the <code>RenderView</code> sends this message, which is handled in <code>RenderViewHost::OnMsgNavigate</code>.</li>\n<li>The <code>NavigationEntry</code> is updated with the information on the load. In the case of a link click, the browser has never seen this URL before. If the navigation was browser-initiated, as in the startup case, there may have been redirects that have changed the URL.</li>\n<li>The <code>NavigationController</code> updates its list of navigations to account for this new information.</li>\n</ol>\n<p>在<code>步骤3</code>中看到，NavigationController调用了TabContents::Navigate来处理Entry，随后就进入了渲染（Render）过程。而我们想要追踪的缓存文件管理的疑问，还是要深入到渲染阶段才能有个答案。</p>\n<p>更多分析，将在后续文章中一一道出。</p>\n<hr>\n","categories":[],"tags":["Android","源码分析"]},{"title":"Deploy Web Application In Tomcat","url":"http://lilei.work/2016/09/09/Deploy-Web-Application-In-Tomcat/","content":"<blockquote>\n<p>在开发CrashReporter项目时遇到的一些坑</p>\n</blockquote>\n<a id=\"more\"></a>\n<h4 id=\"Tomcat启动时卡在”Tomcat-error-deploying-web-application-directory”\"><a href=\"#Tomcat启动时卡在”Tomcat-error-deploying-web-application-directory”\" class=\"headerlink\" title=\"Tomcat启动时卡在”Tomcat: error deploying web application directory”\"></a>Tomcat启动时卡在”Tomcat: error deploying web application directory”</h4><p>原因是Tomcat7/8需要使用org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom来产生安全随机类SecureRandom的实例作为会话ID。而我们知道，任何随机数发生器都需要一个种子，Linux中的随机数，可以从这两个特殊的文件中产生</p>\n<ul>\n<li>/dev/urandom</li>\n<li>/dev/random</li>\n</ul>\n<p>这两个文件产生随机数的原理，是利用系统的熵池，计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。</p>\n<blockquote>\n<p>熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。</p>\n</blockquote>\n<p>/dev/random在不能产生新的随机数时会阻塞程序，而/dev/urandom不会，当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用/dev/random比使用/dev/urandom产生大量随机数的速度要慢。</p>\n<p>解决办法：</p>\n<ol>\n<li>在Tomcat环境解决：启动时加入参数<code>-Djava.security.egd=file:/dev/urandom</code></li>\n<li>在JVM环境解决：修改<code>$JAVA_PATH/jre/lib/security/java.security</code>中的<code>securerandom.source=file:/dev/random</code>为<code>securerandom.source=file:/dev/urandom</code></li>\n</ol>\n<hr>\n<h4 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h4><p><code>crontab -e</code> 编辑当前用户的定时命令<br><code>crontab -l</code> 查看当前用户的定时命令</p>\n<p>一条典型的定时任务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 4 * * * /usr/bin/java -Xms256m -Xmx1024m -Duser.timezone=GMT+08  -jar /root/projects/crash-reporter/crash-reporter-0.1-SNAPSHOT-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>\n<p>在配置这个任务时，由于没有理解它本质上的原理，自己犯了一个愚蠢的错误，把时间写成了<code>* 4 * * *</code>，导致凌晨4点内，每分钟发出一篇邮件，还是发给全组人的……</p>\n<p>附图一张，crontab的命令配置</p>\n<p><img src=\"/img/160909_deploy_app_in_tomcat/crontab.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tomcat容器时间\"><a href=\"#Tomcat容器时间\" class=\"headerlink\" title=\"Tomcat容器时间\"></a>Tomcat容器时间</h4><p>在Linux系统里通过<code>date</code>命令查看，时区已经更改为北京时间。但是实际运行时，发现代码里通过<code>new Date()</code>创建的时间，format后打印出来居然是标准时间；同时，log4j记录的时间也有一样的问题。</p>\n<p>原因在于，JVM的时间需要在启动时配置，需要在tomcat的启动命令中增加如下参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Duser.timezone=GMT+08</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"http://my.oschina.net/wangnian/blog/687914\" target=\"_blank\" rel=\"noopener\">Tomcat启动时SecureRandom超级慢的问题</a></li>\n<li><a href=\"http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html\" target=\"_blank\" rel=\"noopener\">每天一个linux命令（50）：crontab命令</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Backend"]},{"title":"Android 中 View Visibility 的坑","url":"http://lilei.work/2016/06/29/Android-View-Visibility/","content":"<blockquote>\n<p>前几天爆出来一个线上bug：处于“已售完”状态的菜品，依然可以点击加菜。好在提交订单时有校验，对于这种订单会直接打回。<br>究其原因，是加减控件中的代码出了问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"问题回顾\"><a href=\"#问题回顾\" class=\"headerlink\" title=\"问题回顾\"></a>问题回顾</h3><p>在加减控件中，提供了<code>enlargeEmptyAddBtnClickArea</code>方法，用来扩大第一次加菜按钮的点击区域（PM提出的渣渣，更渣渣的是UX居然通过了这个需求）。</p>\n<p><strong>Talk is cheap, read the code.</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 将初始加菜按钮点击矩形区域向外扩大</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> parentView 包含更大点击区域的父View</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> unit 扩大的dp值</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">enlargeEmptyAddBtnClickArea</span><span class=\"params\">(<span class=\"keyword\">final</span> View parentView, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> unit)</span> </span>&#123;</span><br><span class=\"line\">       parentView.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">           <span class=\"meta\">@Override</span></span><br><span class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (emptyAddBtn.getVisibility() != VISIBLE) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               checkContext();</span><br><span class=\"line\">               Context context = getContext();</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] emptyAddBtnCoord = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">               emptyAddBtn.getLocationOnScreen(emptyAddBtnCoord);</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] parentViewCoord = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">               parentView.getLocationOnScreen(parentViewCoord);</span><br><span class=\"line\">               <span class=\"keyword\">int</span>[] relativeCoord = &#123;emptyAddBtnCoord[<span class=\"number\">0</span>] - parentViewCoord[<span class=\"number\">0</span>], emptyAddBtnCoord[<span class=\"number\">1</span>] - parentViewCoord[<span class=\"number\">1</span>]&#125;;</span><br><span class=\"line\">               Rect delegateArea = <span class=\"keyword\">new</span> Rect(relativeCoord[<span class=\"number\">0</span>], relativeCoord[<span class=\"number\">1</span>], relativeCoord[<span class=\"number\">0</span>] + emptyAddBtn.getMeasuredWidth(), relativeCoord[<span class=\"number\">1</span>] + emptyAddBtn.getMeasuredHeight());</span><br><span class=\"line\">               <span class=\"keyword\">int</span> enlargeUnit = ViewUtils.dip2px(context, unit);</span><br><span class=\"line\">               delegateArea.left -= enlargeUnit;</span><br><span class=\"line\">               delegateArea.top -= enlargeUnit;</span><br><span class=\"line\">               delegateArea.right += enlargeUnit;</span><br><span class=\"line\">               delegateArea.bottom += enlargeUnit;</span><br><span class=\"line\">               CustomTouchDelegate touchDelegate = <span class=\"keyword\">new</span> CustomTouchDelegate(delegateArea, emptyAddBtn);</span><br><span class=\"line\">               parentView.setTouchDelegate(touchDelegate);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>这样通过直接<code>operateBtn.enlargeEmptyAddBtnClickArea</code>就可以扩大点击区域。</p>\n<p>乍看起来没什么问题对吧？代码中同样考虑到了如果<code>加菜按钮</code>当前不可见，就不会主动扩大其区域。</p>\n<p>但是为什么，还会出现文章开头提到的“已售完的菜品仍然可以添加至购物车”问题！！！</p>\n<hr>\n<h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>在debug后，发现问题出在这段代码中的判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (emptyAddBtn.getVisibility() != VISIBLE) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当整个加减控件（OperateButton）的Visibility == INVISIBLE or GONE时，其内部<code>emptyAddBtn</code>的Visibility<strong>居！然！还！是！Visible！</strong></p>\n<p>写个Demo验证一下</p>\n<hr>\n<h3 id=\"Talk-is-cheap-just-code\"><a href=\"#Talk-is-cheap-just-code\" class=\"headerlink\" title=\"Talk is cheap, just code\"></a>Talk is cheap, just code</h3><p>demo功能很简单，外层的ViewGroup &amp; 内层的View，当outer置为不可见（INVISIBLE or GONE）时，输出inner的Visibility。界面如下：</p>\n<p><img src=\"/img/160629_visibility/capture.png\" alt=\"\"></p>\n<p>验证后发现一个惊人的事实，Outer的Visibility不会影响Inner的Visibility！也就是说，不论Outer设置为Gone还是Invisible，只要Inner之前是Visible，那么调用<code>inner.getVisibility()</code>后，都会返回Visible！</p>\n<hr>\n<h3 id=\"正确的判断方法\"><a href=\"#正确的判断方法\" class=\"headerlink\" title=\"正确的判断方法\"></a>正确的判断方法</h3><p>View.java中为我们提供了<code>isShown()</code>方法，从注释中即可看出它会将外层ViewGroup可见性计算进去</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the visibility of this view and all of its ancestors</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> True if this view and all of its ancestors are &#123;<span class=\"doctag\">@link</span> #VISIBLE&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isShown</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    View current = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((current.mViewFlags &amp; VISIBILITY_MASK) != VISIBLE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ViewParent parent = current.mParent;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// We are not attached to the view root</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(parent <span class=\"keyword\">instanceof</span> View)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current = (View) parent;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (current != <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h3><p>起初编码的时候，谁能想到，外层设置Invisibile后，内层View居然还是Visible的状态呢？</p>\n<p>出现这个问题的根本原因在于自己对View的机制研究不够深入，引以为戒。</p>\n<p>更应该注意到View本身提供了isShown()方法来判断可见性，根本不需要使用Visibility来重复造轮子，更何况还是错误的轮子。</p>\n<hr>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"=========END=========\"></a><em>=========END=========</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Use DiffMerge As Default Git Diff Tool","url":"http://lilei.work/2016/06/22/Use-Diffmerge-As-Default-Git-Diff-Tool/","content":"<blockquote>\n<p>使用DiffMerge作为默认的git diff GUI工具</p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>P4Merge</strong>: 界面美观，功能强大，安装包大（100M）</p>\n<p><strong>DiffMerge</strong>: 界面简单，功能一般，安装包小（10M）</p>\n<h4 id=\"配置方法\"><a href=\"#配置方法\" class=\"headerlink\" title=\"配置方法\"></a>配置方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global merge.tool diffmerge</span><br><span class=\"line\">$ git config --global mergetool.diffmerge.cmd <span class=\"string\">\"/Applications/DiffMerge.app/Contents/MacOS/diffmerge --merge --result=\\$MERGED \\$LOCAL \\$BASE \\$REMOTE\"</span></span><br><span class=\"line\">$ git config --global mergetool.keepBackup <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">$ git config --global diff.tool diffmerge</span><br><span class=\"line\">$ git config --global difftool.diffmerge.cmd <span class=\"string\">\"/Applications/DiffMerge.app/Contents/MacOS/diffmerge \\$LOCAL \\$REMOTE\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git difftool</span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"http://coding4streetcred.com/blog/post/Configure-DiffMerge-for-Your-Git-DiffTool\" target=\"_blank\" rel=\"noopener\">Configure DiffMerge for Your Git DiffTool</a></p>\n","categories":[],"tags":["技术流"]},{"title":"macOS 通过终端启动 Sublime2","url":"http://lilei.work/2016/06/22/Launch-Sublime-In-Terminal/","content":"<blockquote>\n<p>同样适用于 <code>*nix</code> 系统下通过控制台启动任何指令</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"将Sublime的启动命令加入到环境变量中\"><a href=\"#将Sublime的启动命令加入到环境变量中\" class=\"headerlink\" title=\"将Sublime的启动命令加入到环境变量中\"></a>将Sublime的启动命令加入到环境变量中</h3><p>macOS中，<strong>Sublime Text 2</strong> 的启动命令位于<code>/Applications/Sublime Text 2.app/Contents/SharedSupport/bin</code>中，该目录下仅有一个命令，就是<code>subl</code>。如果我们需要在终端中启动Sublime对文件<code>foo.txt</code>进行编辑，需要执行的指令是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ subl foo.txt</span><br></pre></td></tr></table></figure>\n<p>前提是，环境变量中包含了<code>subl</code>这个指令。在macOS中，有两种途径可以达成这个效果。</p>\n<ol>\n<li><p>在<code>~/.zshrc</code>（我使用的是zsh）中添加<code>$SUBLIME_HOME</code>，并将<code>$SUBLIME_HOME/bin</code>添加至<code>$PATH</code></p>\n</li>\n<li><p>在<code>/usr/local/bin</code>中创建指向<code>subl</code>的符号链接</p>\n</li>\n</ol>\n<p>两种方法具体实现分别如下所示：</p>\n<p>.zshrc，注意空格前需要用<code>\\</code>转义</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SUBLIME_HOME=/Applications/Sublime\\ Text\\ 2.app</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$&#123;SUBLIME_HOME&#125;</span>/Contents/SharedSupport/bin</span><br></pre></td></tr></table></figure>\n<p>创建符号链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ln -s <span class=\"string\">\"/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl\"</span> /usr/<span class=\"built_in\">local</span>/bin/subl</span><br></pre></td></tr></table></figure>\n<p>方法1适用于一个文件夹下多个命令的启动（比如Android SDK），方法2适用于单个指令的启动（比如Sublime）。</p>\n<hr>\n<h3 id=\"在Windows中我们怎么做\"><a href=\"#在Windows中我们怎么做\" class=\"headerlink\" title=\"在Windows中我们怎么做\"></a>在Windows中我们怎么做</h3><p>在Windows中，我们可以通过类似方法2的途径，来快速启动某个应用，步骤如下：</p>\n<ol>\n<li>任意位置创建一个文件夹<code>A</code></li>\n<li>将文件夹<code>A</code>加入到环境变量中</li>\n<li>对于要快速启动的App，对其创建快捷方式后，把快捷方式重命名（比如<code>lol</code>），然后将快捷方式丢入<code>A</code>文件夹</li>\n<li>以后可以通过<code>cmd+R</code>打开运行窗口后，直接输入<code>lol</code>来启动对应App</li>\n</ol>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Android Studio .gitignore 文件范本","url":"http://lilei.work/2016/06/22/Android-Studio-gitignore/","content":"<blockquote>\n<p>一份标准的 Android Studio 工程 <code>.gitignore</code> 文件</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Built application files</span></span><br><span class=\"line\">*.apk</span><br><span class=\"line\">*.ap_</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Files for the ART/Dalvik VM</span></span><br><span class=\"line\">*.dex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Java class files</span></span><br><span class=\"line\">*.class</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generated files</span></span><br><span class=\"line\">bin/</span><br><span class=\"line\">gen/</span><br><span class=\"line\">out/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Gradle files</span></span><br><span class=\"line\">.gradle</span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Local configuration file (sdk path, etc)</span></span><br><span class=\"line\">local.properties</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Proguard folder generated by Eclipse</span></span><br><span class=\"line\">proguard/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Log files</span></span><br><span class=\"line\">*.<span class=\"built_in\">log</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Android Studio Navigation editor temp files</span></span><br><span class=\"line\">.navigation/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Android Studio captures folder</span></span><br><span class=\"line\">captures/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Intellij</span></span><br><span class=\"line\">*.iml</span><br><span class=\"line\">.idea/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Keystore files</span></span><br><span class=\"line\">*.jks</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Windows thumbnail db</span></span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># OSX files</span></span><br><span class=\"line\">.DS_Store</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Eclipse project files</span></span><br><span class=\"line\">.classpath</span><br><span class=\"line\">.project</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NDK</span></span><br><span class=\"line\">obj/</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"Android中动态加载JNI失效问题探究(未完待续)","url":"http://lilei.work/2016/06/17/Dynamic-Loading-JNI-Not-Work/","content":"<blockquote>\n<p>在做so动态加载时遇到了后加载的JNI方法失效的问题</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"背景描述\"><a href=\"#背景描述\" class=\"headerlink\" title=\"背景描述\"></a>背景描述</h3><p>在进行动态加载3期分享时，使用<code>so</code>文件的动态加载作为示例，发现一个有趣的现象——在某些情况下，通过<code>System.load(&quot;foo.so&quot;)</code>加载进来的<code>so</code>并没有生效。</p>\n<p>先看作为示例的动态加载Demo代码。</p>\n<p>声明的native接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> String <span class=\"title\">say</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>C文件中实现方法很简单，返回一个预定义好的字符串<code>Keep Quiet!</code></p>\n<p><code>jni.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"com_leili_season1_jni_activity_JNIActivity.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_com_leili_season1_jni_activity_JNIActivity_say</span><br><span class=\"line\">        (JNIEnv *env, jobject obj) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*env)-&gt;NewStringUTF(env, <span class=\"string\">\"Keep Quiet!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化时，加载返回<code>Keep Quiet!</code>的so文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\tSystem.loadLibrary(<span class=\"string\">\"Jni\"</span>); <span class=\"comment\">// 写法A，通过System.loadLibrary()首次加载</span></span><br><span class=\"line\">\tSystem.load(getFilesDir().getParent() + <span class=\"string\">\"/lib/libJni.so\"</span>); <span class=\"comment\">// 写法B，通过System.load()首次加载</span></span><br><span class=\"line\">\t... <span class=\"comment\">// 以下无关内容省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击按钮后加载新的so文件，其中修改了<code>say()</code>方法的返回值为<code>Hello World!</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soFilePath = getFilesDir() + <span class=\"string\">\"/libJni2.so\"</span>; <span class=\"comment\">// /data/data/com.leili.season1/lib/libJni.so</span></span><br><span class=\"line\">System.load(soFilePath);</span><br></pre></td></tr></table></figure>\n<p>此时再次调用<code>say()</code>后，根据预期，应该返回的是修改后的<code>Hello World!</code>。然而，如代码中的注释所写，使用写法A进行首次加载的so库，无法通过<code>System.load(soFilePath)</code>被覆盖；使用写法B进行首次加载的so库，却可以通过<code>System.load(soFilePath)</code>被覆盖。</p>\n<hr>\n<h3 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h3><p>第一个想法是，<code>System.load</code>和<code>System.loadLibrary</code>内部实现有差异，通过<code>System.loadLibrary</code>加载进来的so库，其方法无法被覆盖。</p>\n<p>先来看一下SDK源码中这两个方法的细节，首先是<code>System.load</code>，使用SDK版本为23</p>\n<h4 id=\"System-load-过程\"><a href=\"#System-load-过程\" class=\"headerlink\" title=\"System.load 过程\"></a>System.load 过程</h4><p>System.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * See &#123;<span class=\"doctag\">@link</span> Runtime#load&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String pathName)</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().load(pathName, VMStack.getCallingClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了Runtime中的load方法</p>\n<p>Runtime.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Loads the given shared library using the given ClassLoader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(String absolutePath, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absolutePath == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"absolutePath == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String error = doLoad(absolutePath, loader);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(error);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>跟进 doLoad 方法查看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">doLoad</span><span class=\"params\">(String name, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Android apps are forked from the zygote, so they can't have a custom LD_LIBRARY_PATH,</span></span><br><span class=\"line\">    <span class=\"comment\">// which means that by default an app's shared library directory isn't on LD_LIBRARY_PATH.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The PathClassLoader set up by frameworks/base knows the appropriate path, so we can load</span></span><br><span class=\"line\">    <span class=\"comment\">// libraries with no dependencies just fine, but an app that has multiple libraries that</span></span><br><span class=\"line\">    <span class=\"comment\">// depend on each other needed to load them in most-dependent-first order.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We added API to Android's dynamic linker so we can update the library path used for</span></span><br><span class=\"line\">    <span class=\"comment\">// the currently-running process. We pull the desired path out of the ClassLoader here</span></span><br><span class=\"line\">    <span class=\"comment\">// and pass it to nativeLoad so that it can call the private dynamic linker API.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We didn't just change frameworks/base to update the LD_LIBRARY_PATH once at the</span></span><br><span class=\"line\">    <span class=\"comment\">// beginning because multiple apks can run in the same process and third party code can</span></span><br><span class=\"line\">    <span class=\"comment\">// use its own BaseDexClassLoader.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// We didn't just add a dlopen_with_custom_LD_LIBRARY_PATH call because we wanted any</span></span><br><span class=\"line\">    <span class=\"comment\">// dlopen(3) calls made from a .so's JNI_OnLoad to work too.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// So, find out what the native library search path is for the ClassLoader in question...</span></span><br><span class=\"line\">    String ldLibraryPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    String dexPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// We use the given library path for the boot class loader. This is the path</span></span><br><span class=\"line\">        <span class=\"comment\">// also used in loadLibraryName if loader is null.</span></span><br><span class=\"line\">        ldLibraryPath = System.getProperty(<span class=\"string\">\"java.library.path\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (loader <span class=\"keyword\">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class=\"line\">        BaseDexClassLoader dexClassLoader = (BaseDexClassLoader) loader;</span><br><span class=\"line\">        ldLibraryPath = dexClassLoader.getLdLibraryPath();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// nativeLoad should be synchronized so there's only one LD_LIBRARY_PATH in use regardless</span></span><br><span class=\"line\">    <span class=\"comment\">// of how many ClassLoaders are in the system, but dalvik doesn't support synchronized</span></span><br><span class=\"line\">    <span class=\"comment\">// internal natives.</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nativeLoad(name, loader, ldLibraryPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> should be synchronized, but dalvik doesn't support synchronized internal natives.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">nativeLoad</span><span class=\"params\">(String filename, ClassLoader loader,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String ldLibraryPath)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>可以看到最终通过native调用<code>nativeLoad</code>加载了lib文件。</p>\n<h4 id=\"System-loadLibrary-过程\"><a href=\"#System-loadLibrary-过程\" class=\"headerlink\" title=\"System.loadLibrary 过程\"></a>System.loadLibrary 过程</h4><p>System.loadLibrary 的写法是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(<span class=\"string\">\"Jni\"</span>);</span><br></pre></td></tr></table></figure>\n<p>真实加载的so文件是libJni.so，可以猜想内部进行了一个拼接文件名的过程。</p>\n<p>System.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * See &#123;<span class=\"doctag\">@link</span> Runtime#loadLibrary&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLibrary</span><span class=\"params\">(String libName)</span> </span>&#123;</span><br><span class=\"line\">    Runtime.getRuntime().loadLibrary(libName, VMStack.getCallingClassLoader());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Runtime.java中的loadLibrary方法</p>\n<p>Runtime.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Searches for and loads the given shared library using the given ClassLoader.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadLibrary</span><span class=\"params\">(String libraryName, ClassLoader loader)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loader != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        String filename = loader.findLibrary(libraryName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filename == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// It's not necessarily true that the ClassLoader used</span></span><br><span class=\"line\">            <span class=\"comment\">// System.mapLibraryName, but the default setup does, and it's</span></span><br><span class=\"line\">            <span class=\"comment\">// misleading to say we didn't find \"libMyLibrary.so\" when we</span></span><br><span class=\"line\">            <span class=\"comment\">// actually searched for \"liblibMyLibrary.so.so\".</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(loader + <span class=\"string\">\" couldn't find \\\"\"</span> +</span><br><span class=\"line\">                                           System.mapLibraryName(libraryName) + <span class=\"string\">\"\\\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String error = doLoad(filename, loader);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(error);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String filename = System.mapLibraryName(libraryName);</span><br><span class=\"line\">    List&lt;String&gt; candidates = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">    String lastError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String directory : mLibPaths) &#123;</span><br><span class=\"line\">        String candidate = directory + filename;</span><br><span class=\"line\">        candidates.add(candidate);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IoUtils.canOpenReadOnly(candidate)) &#123;</span><br><span class=\"line\">            String error = doLoad(candidate, loader);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (error == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>; <span class=\"comment\">// We successfully loaded the library. Job done.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            lastError = error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastError != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(lastError);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UnsatisfiedLinkError(<span class=\"string\">\"Library \"</span> + libraryName + <span class=\"string\">\" not found; tried \"</span> + candidates);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到这里参数中的<code>libraryName</code>仍然是形如<code>Jni</code>的不包含前缀<code>lib</code>与后缀<code>.so</code>的文件名。真正的文件名补全是在这一步进行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String filename = loader.findLibrary(libraryName);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://android.googlesource.com/platform/libcore-snapshot/+/ics-mr1/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java\" target=\"_blank\" rel=\"noopener\">BaseDexClassLoader.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLibrary</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pathList.findLibrary(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://android.googlesource.com/platform/libcore-snapshot/+/ics-mr1/dalvik/src/main/java/dalvik/system/DexPathList.java\" target=\"_blank\" rel=\"noopener\">DexPathList.java</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Finds the named native code library on any of the library</span></span><br><span class=\"line\"><span class=\"comment\"> * directories pointed at by this instance. This will find the</span></span><br><span class=\"line\"><span class=\"comment\"> * one in the earliest listed directory, ignoring any that are not</span></span><br><span class=\"line\"><span class=\"comment\"> * readable regular files.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the complete path to the library or &#123;<span class=\"doctag\">@code</span> null&#125; if no</span></span><br><span class=\"line\"><span class=\"comment\"> * library was found</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findLibrary</span><span class=\"params\">(String libraryName)</span> </span>&#123;</span><br><span class=\"line\">    String fileName = System.mapLibraryName(libraryName);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (File directory : nativeLibraryDirectories) &#123;</span><br><span class=\"line\">        String path = <span class=\"keyword\">new</span> File(directory, fileName).getPath();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (IoUtils.canOpenReadOnly(path)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>绕了一圈，又回到<code>System</code>这个类中，看到下面这儿一目了然。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns the platform specific file name format for the shared library</span></span><br><span class=\"line\"><span class=\"comment\"> * named by the argument. On Android, this would turn &#123;<span class=\"doctag\">@code</span> \"MyLibrary\"&#125; into</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> \"libMyLibrary.so\"&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">mapLibraryName</span><span class=\"params\">(String nickname)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nickname == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException(<span class=\"string\">\"nickname == null\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"lib\"</span> + nickname + <span class=\"string\">\".so\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>追踪过了补全文件名的过程，我们回到最初<code>System.loadLibrary</code>的代码中，可以看到与<code>System.load</code>一样，也是调用了同样的doLoad方法！！！</p>\n<p>到这里可能会有些困惑了，既然两者殊途同归，为什么在应用时会有差别呢？先别急，既然方法是同样的，会不会是参数有区别？</p>\n<hr>\n<h3 id=\"System-load-amp-System-loadLibrary-加载so库文件\"><a href=\"#System-load-amp-System-loadLibrary-加载so库文件\" class=\"headerlink\" title=\"System.load &amp; System.loadLibrary 加载so库文件\"></a>System.load &amp; System.loadLibrary 加载so库文件</h3><p>通过断点，分别查看以下两个语句的执行情况，果然发现了一丝区别</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.loadLibrary(<span class=\"string\">\"Jni\"</span>); <span class=\"comment\">// 写法A，通过System.loadLibrary()首次加载</span></span><br></pre></td></tr></table></figure>\n<p>写法A加载的lib文件，真实路径是<code>/data/app/com.leili.season1-1/lib/x86/libJni.so</code>，这是用户app在安装时的路径（系统app安装目录为<code>/system/app</code>）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.load(getFilesDir().getParent() + <span class=\"string\">\"/lib/libJni.so\"</span>); <span class=\"comment\">// 写法B，通过System.load()首次加载</span></span><br></pre></td></tr></table></figure>\n<p>写法B加载的lib文件，真实路径是<code>/data/data/com.leili.season1/lib/libJni.so</code>。与我们的预期一致。</p>\n<p>等等，我们通过adb shell看一下<code>/data/data/com.leili.season1/lib/</code>这个目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@vbox86p:/data/data/com.leili.season1 <span class=\"comment\"># ll</span></span><br><span class=\"line\">drwxrwx--x u0_a174  u0_a174           2016-06-16 19:34 cache</span><br><span class=\"line\">drwx------ u0_a174  u0_a174           2016-06-16 19:34 files</span><br><span class=\"line\">lrwxrwxrwx install  install           2016-06-17 10:28 lib -&gt; /data/app/com.leili.season1-1/lib/x86</span><br></pre></td></tr></table></figure>\n<p>发现了什么？目录<code>/data/data/com.leili.season1/lib/</code>竟然是指向<code>/data/app/com.leili.season1-1/lib/x86</code>的软链接。天哪！这说明，通过<code>System.load(filePath)</code>加载的so文件，与通过<code>System.loadLibrary(libName)</code>加载的so文件，压根就是同一个！</p>\n<p>我的天哪。。。明明是调用同样的方法加载同一个文件，为啥会出现两种截然不同的结果？！！！</p>\n<p>最新发现：初次加载时不用<code>System.loadLibrary(&quot;Jni&quot;)</code>，而用<code>System.load(&quot;/data/app/com.leili.season1-2/lib/x86/libJni.so&quot;)</code>来直接加载<code>/data/app</code>的库文件时，一样会阻止后续的加载！</p>\n<h1 id=\"到这里被BLOCK住了，HELP～\"><a href=\"#到这里被BLOCK住了，HELP～\" class=\"headerlink\" title=\"到这里被BLOCK住了，HELP～\"></a>到这里被<strong>BLOCK</strong>住了，HELP～</h1><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"MT&DP Hackathon 小结","url":"http://lilei.work/2016/05/27/Hackathon-1-0/","content":"<blockquote>\n<p>16年5月27日～28日，北京美团总部举办Hackathon，项目小结<br>不论比赛排名如何、能否拿到奖品，学到知识才是自己硬实力的提升</p>\n</blockquote>\n<p><img src=\"/img/160527_hackathon/hackathon_logo.png\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<h1 id=\"Database部分\"><a href=\"#Database部分\" class=\"headerlink\" title=\"Database部分\"></a>Database部分</h1><h3 id=\"VARCHAR-TEXT\"><a href=\"#VARCHAR-TEXT\" class=\"headerlink\" title=\"VARCHAR, TEXT\"></a>VARCHAR, TEXT</h3><p><strong>VARCHAR(n)</strong>: 存储在列元素中；可以作为索引<br><strong>TEXT</strong>: 列元素中只保存一个指针，真实文本保存在另外的存储区域；不可作为索引</p>\n<p>注：存储位置区别仅出现在MySQL上，对于InnoDB，如果VARCHAR类型的元素过长，内部仍然会使用TEXT形式的保存方案</p>\n<p>实际应用中，要根据不同类型的输入，选择不同类型的格式</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Case</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VARCHAR(X)</td>\n<td>user name, email, country, subject, password</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>messages, emails, comments, formatted text, html, code, images, links</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>large json bodies, short to medium length books, csv strings</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>textbooks, programs, years of logs files, harry potter and the goblet of fire, scientific research logging</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h1 id=\"Node部分\"><a href=\"#Node部分\" class=\"headerlink\" title=\"Node部分\"></a>Node部分</h1><h3 id=\"数据库连接\"><a href=\"#数据库连接\" class=\"headerlink\" title=\"数据库连接\"></a>数据库连接</h3><p>一个典型的SELECT请求写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖mysql模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建连接，指定DB地址／用户名／密码／库名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pool = mysql.createPool(&#123;</span><br><span class=\"line\">    host: <span class=\"string\">'10.4.232.53'</span>,</span><br><span class=\"line\">    user: <span class=\"string\">'mock_user'</span>,</span><br><span class=\"line\">    password: <span class=\"string\">'mock_user_pwd'</span>,</span><br><span class=\"line\">    database: <span class=\"string\">'live_show'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// exports以将接口暴露在模块外</span></span><br><span class=\"line\">exports.queryComments = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">channelId, limit, callback</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> select = <span class=\"string\">'SELECT `comment` FROM instant_comment where `channel_id` = \\''</span> + channelId + <span class=\"string\">'\\' ORDER BY `id` DESC LIMIT '</span> + limit;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"queryComments: \"</span> + select); <span class=\"comment\">// 建议每一次执行DB操作，都通过log记录下具体指令</span></span><br><span class=\"line\">    pool.getConnection(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, conn</span>) </span>&#123; <span class=\"comment\">// 请求一个连接</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err; <span class=\"comment\">// js里通常的写法，回调函数中第一个参数是err</span></span><br><span class=\"line\">        conn.query(select,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, rows, fields</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    callback(rows); <span class=\"comment\">// 回调函数处理row</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                conn.release(); <span class=\"comment\">// 注意！一定要在回调函数中释放连接，不然一旦进行10次（默认值）数据请求，就会导致连接打满而挂掉</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"http请求\"><a href=\"#http请求\" class=\"headerlink\" title=\"http请求\"></a>http请求</h3><p>一般写法是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// handler为回调函数</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>).createServer(handler).listen(port);</span><br><span class=\"line\"><span class=\"comment\">// handler写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\">req, resp</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do your business</span></span><br><span class=\"line\">    resp.write(<span class=\"string\">'this is response'</span>);</span><br><span class=\"line\">    resp.end();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 <code>resp.write(&#39;foo&#39;)</code> <code>resp.end()</code> 也可以简写为 <code>resp.end(&#39;foo&#39;)</code></p>\n<h3 id=\"数据Json化\"><a href=\"#数据Json化\" class=\"headerlink\" title=\"数据Json化\"></a>数据Json化</h3><p>js中使用的是弱类型对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">    code : <span class=\"number\">200</span>,</span><br><span class=\"line\">    msg : <span class=\"string\">'成功'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于这种对象，直接使用 <code>resp.write(foo.toString())</code> 是无法返回数据的，拿到的其实是对象在内存中的指针。这里要用 <code>JSON.stringify(foo).toString()</code> 来生成结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">resp.write(<span class=\"built_in\">JSON</span>.stringify(foo).toString());</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h3><p>使用 <code>express</code> 框架，非常简单（@王善成 介绍说现在 <code>koa</code> 更为流行，待调研）。<br>通过形如 <code>http://10.4.232.53:9528/live_1.jpg</code> 的地址来获取静态资源（不需要拼接 <code>public</code>）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>)); <span class=\"comment\">// 项目目录下的public文件夹，即为静态文件目录</span></span><br><span class=\"line\">app.listen(<span class=\"number\">9528</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><p>使用 <code>setInterval(func, delay)</code> 来执行周期任务，因为代码本身有运行时间，函数有调用时间，因此在时刻上并不会保证100%的精确，（如声明了3000ms，可能在2990时执行，也可能在3010时执行）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定时任务,关闭不在保活列表里的直播源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> livingPeriod = <span class=\"number\">10</span> * <span class=\"number\">1000</span>; <span class=\"comment\">// 需要保活的直播,要在30s内调用保活接口</span></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"living shows: \"</span> + livingShows);</span><br><span class=\"line\">    dbHelper.killDeadShow(livingShows, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        livingShows = []; <span class=\"comment\">// clear</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;, livingPeriod);</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"使用Git对最近n个commit进行合并","url":"http://lilei.work/2016/03/31/Git-Squash-Commits/","content":"<blockquote>\n<p>如何在Git中合并多次commit呢？</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>通过Git对最近的n个commit进行合并，可以使用下面的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --soft HEAD~n</span><br><span class=\"line\">$ git commit</span><br></pre></td></tr></table></figure>\n<p>炒鸡简单！</p>\n<hr>\n<p>如果要合并的是有间隔的commit，笔者目前还没有学会…</p>\n","categories":[],"tags":["技术流"]},{"title":"Android Performance Patterns - s4ep7 Removing Unused Code","url":"http://lilei.work/2016/03/31/Android-Performance-Patterns-s4ep7-Removing-Unused-Code/","content":"<blockquote>\n<p>Third party libraries can be some serious time savers for Android development. They allow us to do awesome things in our app without having to write any of the functionality ourselves. That’s a pretty big convenience. What’s not convenient though is the code-bloat they can often come with.</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=5frxLkO4oTM&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=17\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/5frxLkO4oTM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Third-Party-Library\"><a href=\"#Third-Party-Library\" class=\"headerlink\" title=\"Third Party Library\"></a>Third Party Library</h4><p>在自己的app中使用第三方库有哪些优点呢？</p>\n<ul>\n<li>第三方库可以为我们提供便捷的功能</li>\n<li>它们都经过了良好全面的测试，并且在生产环境中得到验证</li>\n</ul>\n<p><img src=\"/img/160331_app_s4ep7/advantage.png\" alt=\"\"></p>\n<p>而缺点可能就不那么明显</p>\n<ul>\n<li>你必须引用整个第三方库，即使用到的只是其中一个简单的类——这被叫做<code>code bloat</code>（代码膨胀）</li>\n<li>这会使你的apk体积增大</li>\n<li>甚至可能触及65k的方法数天花板（关于65k，请查阅这一篇<a href=\"https://developer.android.com/tools/building/multidex.html\" target=\"_blank\" rel=\"noopener\">Building Apps with Over 65K Methods</a>）</li>\n</ul>\n<p><img src=\"/img/160331_app_s4ep7/code_bloat.png\" alt=\"\"></p>\n<p>对于<code>MultiDex</code>，小哥给出了非常幽默的描述</p>\n<blockquote>\n<p>It’s pretty much as much fun going to the dentist…</p>\n</blockquote>\n<hr>\n<h4 id=\"Proguard\"><a href=\"#Proguard\" class=\"headerlink\" title=\"Proguard\"></a>Proguard</h4><p>作用</p>\n<ul>\n<li>Shrink：精简代码，去除无用的类</li>\n<li>Optimize：优化逻辑</li>\n<li>Obfuscate：混淆，增加逆向工程的难度</li>\n</ul>\n<p>一个例子是，使用Proguard后，原本8.4mb的Google IO app被缩减到了4.1mb</p>\n<p><img src=\"/img/160331_app_s4ep7/proguard.png\" alt=\"\"></p>\n<p>开启 proguard 也十分简单，只要在 gradle 文件中将 <code>minifyEnabled</code> 属性声明为 <code>true</code>，并写明 <code>proguardFiles</code> 路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\tbuildTypes &#123;</span><br><span class=\"line\">\t\trelease &#123;</span><br><span class=\"line\">\t\t\tminifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tproguardFiles getDefaultProguardFile(<span class=\"string\">'proguard-android.txt'</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，proguard会导致应用到“反射”的代码无法正常工作，因为它会改变方法名&amp;类名，需要用 <code>keep</code> 在相关代码上关闭proguard</p>\n<p><a href=\"http://developer.android.com/tools/help/proguard.html\" target=\"_blank\" rel=\"noopener\">ProGuard 官方文档</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"骨盆前倾101","url":"http://lilei.work/2016/03/24/Fixing-Anterior-Pelvic-Tilt/","content":"<hr>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>骨盆前倾是一种不良的体态，如果你在早晨醒来不时感到下背部疼痛；在健身房里的里的深蹲、硬拉总会因为下背力竭而有所阻滞；身体曲线侧面看起来下腹向前、臀部向后突出，那么要当心，很可能你正在遭遇骨盆前倾。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"什么是骨盆前倾\"><a href=\"#什么是骨盆前倾\" class=\"headerlink\" title=\"什么是骨盆前倾\"></a>什么是骨盆前倾</h4><p>骨盆前倾（Anterior Pelvic Tilt，简称APT），常见于久坐伏案工作人群，具体表现就是臀部后凸，腹部向前顶，前挺后撅，图中的第二种即为APT。</p>\n<p><img src=\"/img/160325_fixing_apt/apt.jpeg\" alt=\"\"></p>\n<p>另外，在健身房里一些体态发展不均的人身上也经常看到骨盆前倾的现象，故也称为“健美腰”。</p>\n<p><img src=\"/img/160325_fixing_apt/gym_waist_2.jpg\" alt=\"\"></p>\n<p>从骨骼透视图上来看</p>\n<p><img src=\"/img/160325_fixing_apt/apt_bone.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"如何判断骨盆前倾\"><a href=\"#如何判断骨盆前倾\" class=\"headerlink\" title=\"如何判断骨盆前倾\"></a>如何判断骨盆前倾</h4><p>判断骨盆前倾的原因有很多种，当然，去正规医院进行外科（脊柱）检验是最省事也最准确的方法。医学手段之外，还有一些显著特征可以比较容易的帮助我们鉴别骨盆前倾。</p>\n<ul>\n<li>方法一：对镜自检，不管是健身房还是卧室的，只要有一面足够大的镜子，按照正常放松姿态站立，观察腰腹及臀部。</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/gym_waist.jpg\" alt=\"\"></p>\n<ul>\n<li>方法二：贴墙立正，如果背后能放入一掌，基本身姿还算正常；如果能放入一拳，很有可能是骨盆前倾。</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/stand_by_wall.jpg\" alt=\"\"></p>\n<ul>\n<li>方法三：在睡觉时，如果仰睡时腰部总是悬空，睡醒后伴随疼痛，以至于不得不采取侧卧方式入睡，这时也要小心了。</li>\n</ul>\n<hr>\n<h4 id=\"骨盆前倾的起因\"><a href=\"#骨盆前倾的起因\" class=\"headerlink\" title=\"骨盆前倾的起因\"></a>骨盆前倾的起因</h4><p>首先来看一下APT患者的脊椎与正常的脊椎，APT患者的尾椎呈现了一个夸张的弧度</p>\n<p><img src=\"/img/160325_fixing_apt/exaggerated_lumbar_curve.jpeg\" alt=\"\"></p>\n<p>造成这一切的根本原因是——</p>\n<p><strong>肌力不均</strong></p>\n<p>想象你的盆腔，它的前上（腹直肌）、后下（臀大肌、腘绳肌）是肌肉组A，它的后上（竖脊肌）、前下（髂腰肌、股直肌）为肌肉组B。</p>\n<ul>\n<li>A与B之间维持平衡时，人的盆腔处于一个刚好的直立状态。</li>\n<li>A弱B强时，造成骨盆前倾，Anterior Pelvic Tilt（APT）</li>\n<li>A强B弱时，造成骨盆后倾，Posterior Pelvic Tilt（PPT）</li>\n</ul>\n<p>力矩图</p>\n<p><img src=\"/img/160325_fixing_apt/balance.jpg\" alt=\"\"></p>\n<p>竖脊肌、髂腰肌太强（过短）导致骨盆前倾</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect.jpeg\" alt=\"\"></p>\n<p>正常状态下，腹直肌、臀大肌会起到抑制骨盆前倾的效果</p>\n<p><img src=\"/img/160325_fixing_apt/correct.jpeg\" alt=\"\"></p>\n<p>为什么竖脊肌、髂腰肌会起一个负面作用呢？</p>\n<p>竖脊肌，也就是通常我们所说的“下背部”，当练习硬拉、深蹲时都会带到这部分肌肉。而肌肉越强壮，肌纤维往往也会变得越短越粗，导致拉动盆腔向前倾斜。</p>\n<p>腹直肌、腹外斜肌、臀大肌、腘绳肌这几处肌肉，往往在训练中得不到重视，导致松垮无力，带不动盆腔回归。</p>\n<p>说到底，就是一组<strong>拮抗肌</strong>相互之间发展不均的问题。</p>\n<p>这位美国大叔很好地解释了骨盆前倾的起因，并介绍了几种容易操作的矫正方法。</p>\n<p><strong>YouTube视频，请自备云梯</strong></p>\n<p>Your Back is Whack!<br><a href=\"https://www.youtube.com/watch?v=BEn61BL4Nwk\" target=\"_blank\" rel=\"noopener\">https://www.youtube.com/watch?v=BEn61BL4Nwk</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/BEn61BL4Nwk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h4 id=\"骨盆前倾的危害\"><a href=\"#骨盆前倾的危害\" class=\"headerlink\" title=\"骨盆前倾的危害\"></a>骨盆前倾的危害</h4><ul>\n<li>丑！让人小腹前凸、臀部横向发展并下垂；辛辛苦苦练成的8块／6块腹肌从侧面看就像裹在了一个球外面</li>\n<li>腰椎前凸，病理性姿势不正确，必然会导致腰酸背痛，并且肩颈酸胀。此外骨盆承托着腹部内脏等，如果骨盆倾斜，也会导致内脏的运转不畅</li>\n<li>僵硬的下背部成为阻碍硬拉、深蹲水平进一步提高的瓶颈</li>\n<li>如果说骨盆前倾有什么好处的话，大概就是会产生“前凸后翘”的效果。你所见到的翘臀，极有可能是骨盆前倾造成的“伪”翘臀</li>\n</ul>\n<p><img src=\"/img/160325_fixing_apt/nice_glute.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"如何矫正骨盆前倾\"><a href=\"#如何矫正骨盆前倾\" class=\"headerlink\" title=\"如何矫正骨盆前倾\"></a>如何矫正骨盆前倾</h4><p>矫正骨盆前倾，最根本的原则只有一点</p>\n<p><strong>增强弱势肌肉，拉伸强势肌肉</strong></p>\n<ul>\n<li>“弱势肌肉”：将骨盆拉回平衡状态的腹直肌、腹外斜肌、臀大肌、腘绳肌</li>\n<li>“强势肌肉”：将骨盆向前倾状态拉动的髋部屈肌（髂腰肌 股直肌）、竖脊肌</li>\n</ul>\n<p>一方面强化弱势肌肉，使身体增强将骨盆拉回原角度的扭力，另一方面拉伸强势肌肉，放松紧张的肌肉，拉长肌纤维</p>\n<p>强化臀大肌、腘绳肌、腹外斜肌、腹直肌</p>\n<ul>\n<li>臀大肌：臀桥，仰卧顶臀，美式硬拉</li>\n<li>腘绳肌：俯卧腿弯举，反向腿弯举</li>\n<li>腹肌：RKC平板支撑，反向卷腹，悬垂V字举腿</li>\n</ul>\n<p>拉伸竖脊肌、髋部屈肌（髂腰肌、股直肌）</p>\n<ul>\n<li>竖脊肌：泡沫轴放松、坐姿拉伸、扶杆下蹲</li>\n<li>髂腰肌：弓步拉伸</li>\n<li>股直肌：侧卧拉腿</li>\n</ul>\n<p>下面是一些训练方法的图片，需要强调的是，每个人的身体条件不同，肌肉强弱有别，要根据实际情况选取不同的动作；就算是同一个动作，在做的时候使用不同的角度、拉伸不同的时间，也会产生迥异的效果。</p>\n<hr>\n<h4 id=\"臀大肌（强化）\"><a href=\"#臀大肌（强化）\" class=\"headerlink\" title=\"臀大肌（强化）\"></a>臀大肌（强化）</h4><p>臀桥：下背放松，靠臀部收紧发力，顶峰收缩，感受臀大肌夹紧带来的刺激感。</p>\n<p><img src=\"/img/160325_fixing_apt/glute_bridge.jpg\" alt=\"\"></p>\n<p>臀桥对于塑造翘臀有着无可比拟的作用，注意在动作顶端时身体应该保持一条直线，腹部不要上顶。</p>\n<p>进阶臀桥使用单腿支撑。</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect_glute_bridge.jpeg\" alt=\"\"></p>\n<p>下面是视频讲解：</p>\n<p><a href=\"https://youtu.be/viyoVBR_J5c\" target=\"_blank\" rel=\"noopener\">https://youtu.be/viyoVBR_J5c</a></p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/viyoVBR_J5c\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>仰卧顶臀，臀桥的负重强化版，请量力而行，也可借助长凳顶在背部进行。</p>\n<p><img src=\"/img/160325_fixing_apt/glute_bridge_plus.jpg\" alt=\"\"></p>\n<p>视频讲解：</p>\n<p><a href=\"https://youtu.be/vSA-EBNUb-M\" target=\"_blank\" rel=\"noopener\">https://youtu.be/vSA-EBNUb-M</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/vSA-EBNUb-M\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>美式硬拉：我们Glute Lab已经发现在进行罗马尼亚硬拉训练时，臀部几乎没有参与活动，主要是腘绳肌，至少在轻负重的时候是这样。这不是一件好事。因此，我们需要了解在髋屈伸过程中如何利用臀大肌。美式硬拉与罗马尼亚硬拉非常相似，然而它加入了一些骨盆运动。在杠铃下降的过程中，你需要保持骨盆稍向前倾。在杠铃上升的过程中，你需要利用臀大肌的收缩来让骨盆稍向后倾。要注意的是骨盆后倾是由臀部的收缩挤压达成的！而不是腰椎翻转！当硬拉至躯干直立时，杠铃可能由于你的臀部收缩从而向前移动。你可以把美式硬拉想象成一种以臀部为中心的罗马尼亚硬拉。再次强调，依靠臀大肌使骨盆向后倾，保持腰椎稳定。</p>\n<p>美式硬拉；杠铃位于底部时，保持脊柱中立；杠铃位于顶部时，弯曲胸椎（上背部），同时骨盆后倾</p>\n<p><img src=\"/img/160325_fixing_apt/usa_dead_lift_1.png\" alt=\"\"></p>\n<p>杠铃至顶部，挤压臀大肌但避免腰椎翻转</p>\n<p><img src=\"/img/160325_fixing_apt/usa_dead_lift_2.png\" alt=\"\"></p>\n<p>Dimel硬拉是几年前由路易·西蒙斯和美国西部杠铃俱乐部推广开来的。你可以看成是多次数的美式硬拉。用你最大重量的30%-40%负重练习15-30次硬拉，以最大化的刺激你的臀大肌，增强泵感。如果你动作正确，这和臀推（Hip Thrust）有点像的。</p>\n<p>美式硬拉的视频演示：<a href=\"https://youtu.be/1aVjkPzKovc\" target=\"_blank\" rel=\"noopener\">https://youtu.be/1aVjkPzKovc</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/1aVjkPzKovc\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>另外，关于罗马尼亚硬拉、美式硬拉、屈腿硬拉、直腿硬拉，请参考下面这篇文章</p>\n<p><a href=\"http://www.actrainer.com/bbs/detail_962\" target=\"_blank\" rel=\"noopener\">http://www.actrainer.com/bbs/detail_962</a></p>\n<hr>\n<h4 id=\"腘绳肌（强化）\"><a href=\"#腘绳肌（强化）\" class=\"headerlink\" title=\"腘绳肌（强化）\"></a>腘绳肌（强化）</h4><p>俯卧腿弯举：大部分健身房里都会有的器械，注意训练时集中注意力到腘绳肌上，感受肌肉收缩。</p>\n<p><img src=\"/img/160325_fixing_apt/hsj_strenthen.jpeg\" alt=\"\"></p>\n<p>反向腿弯举：需要借助特定器械或者伙伴帮助才能进行，持续对腘绳肌、臀大肌进行狂轰滥炸。</p>\n<p><img src=\"/img/160325_fixing_apt/hsj_reverse_strenthen.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"腹肌（强化）\"><a href=\"#腹肌（强化）\" class=\"headerlink\" title=\"腹肌（强化）\"></a>腹肌（强化）</h4><p>RKC平板支撑：这项平板支撑和一般的初始动作没有什么区别，但是你身体肌肉的紧张程度会相对较高，平衡感的要求也会更高，相当于一般平板支撑4倍的运动量，而且每组仅仅需要你10秒的时间，你就能够拥有坚实的6块腹肌了。让我们来接下来看一些RKC平板支撑应该怎么做。</p>\n<ol>\n<li>先以传统的平板支撑做好准备姿势，小臂着地，与肩部处在一条直线上，双脚并拢，面部朝下。身体从头到脚呈一条直线。</li>\n<li>双手握拳，两肩张开，小臂向地面用力，就好像你要把你的小臂往你的脚所在的地方拖拽一样。</li>\n<li>臀部以及脚筋用力，让你的尾椎骨抬升至微微向头部倾斜，保持后背下部分挺直，这时你就会感觉到你的臀部和腿开始有相应的感觉了。保持膝盖打直。</li>\n<li>保持姿势，注意保持整个身体肌肉的最大紧张程度。</li>\n</ol>\n<p><img src=\"/img/160325_fixing_apt/rkcp.jpg\" alt=\"\"></p>\n<p>RKCP的视频讲解：<a href=\"https://youtu.be/6TKktamzq4o\" target=\"_blank\" rel=\"noopener\">https://youtu.be/6TKktamzq4o</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/6TKktamzq4o\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>反向卷腹：</p>\n<p><img src=\"/img/160325_fixing_apt/reverse_crunches.jpg\" alt=\"\"></p>\n<p><strong>动作描述</strong></p>\n<ol>\n<li>仰卧开始，可以直腿，也可以曲腿。双手也可以抓住健身凳或床沿支撑。</li>\n<li>使用腹肌的力量卷曲身体。慢慢将大腿拉近身体。下腰部离开地面。</li>\n<li>慢慢放下，重复。</li>\n</ol>\n<p><strong>动作要点</strong></p>\n<p>重点不是大腿的运动，而是腹肌带动躯干的卷曲！你甚至可以不改变大腿与身体的角度（腿和髂等肌群就不发力了）。</p>\n<p>试着把大腿和躯干的角度维持固定。</p>\n<p><img src=\"/img/160325_fixing_apt/incorrect_reverse_crunches.jpeg\" alt=\"\"></p>\n<p>V字举腿：《囚徒健身》里面，“六艺”中的“举腿”最终式，注意在举起－下放的过程中有意识地控制腹部肌肉——尤其是下腹部，不要借助惯性甩上去。</p>\n<p><img src=\"/img/160325_fixing_apt/v.jpg\" alt=\"\"></p>\n<p>视频讲解：<a href=\"https://youtu.be/rI1xHnMVcfk\" target=\"_blank\" rel=\"noopener\">https://youtu.be/rI1xHnMVcfk</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/rI1xHnMVcfk\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<h4 id=\"竖脊肌（拉伸）\"><a href=\"#竖脊肌（拉伸）\" class=\"headerlink\" title=\"竖脊肌（拉伸）\"></a>竖脊肌（拉伸）</h4><p>泡沫轴放松</p>\n<p><img src=\"/img/160325_fixing_apt/foam_roller.jpeg\" alt=\"\"></p>\n<p>泡沫轴讲解视频（同样来自YouTube）</p>\n<p><a href=\"https://youtu.be/QJLxruO3su0\" target=\"_blank\" rel=\"noopener\">https://youtu.be/QJLxruO3su0</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/QJLxruO3su0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>坐姿拉伸：坐在椅子上，双脚打开，臀部坐在椅面的前面，上身直立双手交叉从后面抱住颈部的下端（颈椎与胸椎交界的肩部位置）。慢慢地双手用力，身体逐步往下压，直到头部低于椅面后进一步弯向椅子的后面，这时感觉到腰背部的肌肉充分被拉长拉紧，尤其是下腰部可能还有酸痛的感觉，保持这样的姿势10~20秒（心里读数20~40下）后，缓慢返回起始位置。</p>\n<p><img src=\"/img/160325_fixing_apt/sjj_sit_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"髂腰肌（拉伸）\"><a href=\"#髂腰肌（拉伸）\" class=\"headerlink\" title=\"髂腰肌（拉伸）\"></a>髂腰肌（拉伸）</h4><p>弓步拉伸：采用单跪式的体位，保持上身直立（腹部不能往前挺），前面的腿保持大腿与小腿成90°。<br>身体逐步往下坐开始拉伸，后面的腿尽量往后伸和下压，感觉到腰椎以及髋关节被拉紧，维持10~20秒（心里读数20~40下）后慢慢抬起身体回到起始位置完成一侧的拉伸。更换姿势重复动作拉伸另一侧的髂腰肌后完成两侧的拉伸。注意在动作的过程中，腹部不能往前挺。</p>\n<p><img src=\"/img/160325_fixing_apt/qyj_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"股直肌（拉伸）\"><a href=\"#股直肌（拉伸）\" class=\"headerlink\" title=\"股直肌（拉伸）\"></a>股直肌（拉伸）</h4><p>美女演示的卧姿拉伸</p>\n<p><a href=\"https://youtu.be/cWuVcqvoEFo\" target=\"_blank\" rel=\"noopener\">https://youtu.be/cWuVcqvoEFo</a></p>\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/cWuVcqvoEFo\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>侧卧拉腿：选择采用比较舒适的卧位进行自我拉伸。侧身平躺在垫子上，远离地面的手抓住同侧的脚背，保持身体挺直。<br>抓住脚背的手慢慢用力，将腿往自己身体的后上方拉和往臀部靠，到达大腿和骨盆都处于后伸的位置，明显感觉股直肌被拉紧并有隐隐的痛感时往回放松一丁点儿便保持在这样的位置10~20秒（心里读数达到20或40下），缓慢放松回到起始位置，完成单侧股直肌的一次拉伸后，进行另一侧的拉伸。</p>\n<p><img src=\"/img/160325_fixing_apt/gzj_stretch.jpg\" alt=\"\"></p>\n<hr>\n<h4 id=\"参考资料-amp-扩展阅读\"><a href=\"#参考资料-amp-扩展阅读\" class=\"headerlink\" title=\"参考资料&amp;扩展阅读\"></a>参考资料&amp;扩展阅读</h4><p><a href=\"https://www.t-nation.com/training/dont-be-like-donald-duck\" target=\"_blank\" rel=\"noopener\">https://www.t-nation.com/training/dont-be-like-donald-duck</a></p>\n<p><a href=\"http://www.styleforum.net/t/380309/oksus-guide-to-anterior-pelvic-tilt-apt\" target=\"_blank\" rel=\"noopener\">http://www.styleforum.net/t/380309/oksus-guide-to-anterior-pelvic-tilt-apt</a></p>\n<p><a href=\"http://zhuanlan.zhihu.com/oh-hard/19986866\" target=\"_blank\" rel=\"noopener\">http://zhuanlan.zhihu.com/oh-hard/19986866</a></p>\n<p><a href=\"http://tieba.baidu.com/p/2492811917\" target=\"_blank\" rel=\"noopener\">http://tieba.baidu.com/p/2492811917</a></p>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["大保健"]},{"title":"nova自动化测试后续内容安排","url":"http://lilei.work/2016/03/24/Nova-Automation-Develop-Plan/","content":"<p><a href=\"../2016/01/28/Nova-Automation-Practice\">上篇链接</a></p>\n<a id=\"more\"></a>\n<hr>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>milestone 1</th>\n<th>milestone 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>appium</td>\n<td>1. 配置在独立机器<br>2. 使用命令行启动</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>mock server</td>\n<td>1. 配置在独立机器<br> 2. 多终端注册<br>3. 多终端配置加载<br>4. 使用sql数据库存储配置文件<br>5. 精简代码，删除无用功能</td>\n<td>1. 梳理日志</td>\n</tr>\n<tr>\n<td>test case</td>\n<td>1. 排队全套用例<br>2. 用例模板优化<br>3. 用例执行过程可以截屏</td>\n<td>1. 用例执行报告（email）<br>2. 每日构建，自动执行<br>3. 其它业务线主流程case</td>\n</tr>\n<tr>\n<td>完成节点</td>\n<td>排队业务主流程回归迁移到自动化测试</td>\n<td>n/a</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<p>with iOS</p>\n<p>前提</p>\n<ol>\n<li>iOS本身有清晰化的MVC结构，对View做测试</li>\n</ol>\n<p>优点</p>\n<ol>\n<li>组件输入的组合</li>\n<li>包含截图的报表</li>\n</ol>\n<p>不够完善</p>\n<ol>\n<li>人肉验证</li>\n</ol>\n<p>改进</p>\n<ol>\n<li>mock server 平台化，可供 iOS 使用</li>\n</ol>\n<hr>\n<p>appium 文档阅读</p>\n<p><a href=\"http://appium.io/slate/en/master/?java#introduction-to-appium\" target=\"_blank\" rel=\"noopener\">http://appium.io/slate/en/master/?java#introduction-to-appium</a></p>\n<p>appium的设计思想</p>\n<ol>\n<li>You shouldn’t have to recompile your app or modify it in any way in order to automate it.</li>\n<li>You shouldn’t be locked into a specific language or framework to write and run your tests.</li>\n<li>A mobile automation framework shouldn’t reinvent the wheel when it comes to automation APIs.</li>\n<li>A mobile automation framework should be open source, in spirit and practice as well as in name!</li>\n</ol>\n<hr>\n<p>Parallel Android Tests</p>\n<p>-p the main Appium port<br>-U the device id<br>-bp the Appium bootstrap port<br>–chromedriver-port the chromedriver port (if using webviews or chrome)<br>–selendroid-port the selendroid port (if using selendroid)</p>\n<p>If we had two devices with the ID’s 43364 and 32456, we would start two different Appium servers with the following commands:</p>\n<p>node . -p 4492 -bp 2251 -U 32456</p>\n<p>node . -p 4491 -bp 2252 -U 43364</p>\n<hr>\n<p>ignoreUnimportantViews</p>\n<h2 id=\"Another-example-of-a-use-case-for-settings-would-be-telling-appium-to-ignore-elements-which-are-not-visible-s\"><a href=\"#Another-example-of-a-use-case-for-settings-would-be-telling-appium-to-ignore-elements-which-are-not-visible-s\" class=\"headerlink\" title=\"Another example of a use-case for settings would be telling appium to ignore elements which are not visible.s\"></a>Another example of a use-case for settings would be telling appium to ignore elements which are not visible.s</h2><hr>\n","categories":[],"tags":["技术流","自动化测试"]},{"title":"Android Performance Patterns - s4ep6 Service Performance Patterns","url":"http://lilei.work/2016/03/20/Android-Performance-Patterns-s4ep6-Service-Performance-Patterns/","content":"<blockquote>\n<p>Services are an integral component of almost every android application. But the functionality they provide comes with a drain on battery and system resources. And if you’re not paying attention, services can easily stick around longer than they should which wastes system resources, and can often cause performance problems for your rendering thread. But Colt McAnlis has the answer : using services in the most efficient way possible means killing them off the right way, and sometimes, not even using them.<br><a href=\"https://www.youtube.com/watch?v=NJsq0TU0qeg&amp;index=16&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NJsq0TU0qeg?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"On-System-Level-Services-Ain’t-Free\"><a href=\"#On-System-Level-Services-Ain’t-Free\" class=\"headerlink\" title=\"On System Level, Services Ain’t Free\"></a>On System Level, Services Ain’t Free</h4><p>创建、销毁 Service 需要时间与内存</p>\n<p><img src=\"/img/160320_app_s4ep6/cost.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Service-May-Cost-Frame-Lost\"><a href=\"#Service-May-Cost-Frame-Lost\" class=\"headerlink\" title=\"Service May Cost Frame Lost\"></a>Service May Cost Frame Lost</h4><ol>\n<li>作为 Local Service 启动，对应的 Service 运行在主进程的主线程上</li>\n<li>作为 Remote Service 启动，对应的 Service 则是运行在独立进程的主线程上</li>\n</ol>\n<p>对于<code>1</code>中的情况，如果 Service 中进行了耗时操作（超过了16ms），则在屏幕绘制时可能引起丢帧。</p>\n<hr>\n<h4 id=\"Don’t-Use-Services\"><a href=\"#Don’t-Use-Services\" class=\"headerlink\" title=\"Don’t Use Services\"></a>Don’t Use Services</h4><p>if you don’t have to…</p>\n<p>参见下一节罗列的 Solutions</p>\n<hr>\n<h4 id=\"Async-Event-Functions\"><a href=\"#Async-Event-Functions\" class=\"headerlink\" title=\"Async Event Functions\"></a>Async Event Functions</h4><ul>\n<li>GCM</li>\n<li>BroadcastReceiver</li>\n<li>LocalBroadcastReceiver</li>\n<li>HandlerThreads</li>\n<li>AsyncTaskLoaders</li>\n<li>IntentService</li>\n</ul>\n<hr>\n<h4 id=\"Do-not-Let-Services-Live-Longer-Than-They-Needed\"><a href=\"#Do-not-Let-Services-Live-Longer-Than-They-Needed\" class=\"headerlink\" title=\"Do not Let Services Live Longer Than They Needed\"></a>Do not Let Services Live Longer Than They Needed</h4><p>Service 有两种不同的启动方法，对应的种植方法也为两种</p>\n<ul>\n<li>Started Services：在 Service 中调用<code>stopSelf()</code>，或者在外面调用<code>stopService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/started_services.png\" alt=\"\"></p>\n<ul>\n<li>Bound Services：通过<code>unBindService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/bound_services.png\" alt=\"\"></p>\n<ul>\n<li>Mixed：如果是先通过<code>startService()</code>启动，再用<code>bindService()</code>绑定的 Service，那么在<code>unBind()</code>后，还要显示通过<code>stopService()</code>来终止</li>\n</ul>\n<p><img src=\"/img/160320_app_s4ep6/mixed_services.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><ul>\n<li>光头哥又在推销 <a href=\"http://developer.android.com/tools/help/systrace.html\" target=\"_blank\" rel=\"noopener\">Systrace</a> 了</li>\n</ul>\n<hr>\n<h4 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h4><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep5 Minimizing Asset Payload","url":"http://lilei.work/2016/03/08/Android-Performance-Patterns-s4ep5-Minimizing-Asset-Payload/","content":"<blockquote>\n<p>No matter how aggressively you’ve optimized your networking code for performance, there’s still a huge problematic performance issue that you haven’t seen: Bloated asset files. If you’re not aggressively attacking the size of the assets you’re transferring to your users, you’re basically stealing time (and money) from them.<br><a href=\"https://www.youtube.com/watch?v=ts5o6t7enOk&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=15\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ts5o6t7enOk?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Smaller-Is-Better\"><a href=\"#Smaller-Is-Better\" class=\"headerlink\" title=\"Smaller Is Better\"></a>Smaller Is Better</h4><p><img src=\"/img/160308_app_s4ep5/network_speed.png\" alt=\"\"></p>\n<ol>\n<li>速度缓慢并不是所有用户都处于高速的4G／wifi环境下</li>\n<li>大数据量导致的大电量消耗</li>\n<li>流量＝金钱</li>\n</ol>\n<p>引起数据流量过大的，主要有两个因素：图片、序列化数据。</p>\n<hr>\n<h4 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h4><p><img src=\"/img/160308_app_s4ep5/imagefiles.png\" alt=\"\"></p>\n<p>如果不需要图片透明度设定，那就尽量不要使用PNG格式的图片文件，这会产生难以置信的图片体积。</p>\n<p>JPG和WEBP是不错的选择，在使用这两种图片格式时，记住图片质量的极小降低，可以大大缩小图片体积。</p>\n<p><img src=\"/img/160308_app_s4ep5/control_quality.png\" alt=\"\"></p>\n<p>图片的分辨率并不是越大越好，根据具体的使用场景，返回不同像素的图片。如果只是需要缩略图，那就不要返回高清的无码大图。</p>\n<p><img src=\"/img/160308_app_s4ep5/judge_conditions.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Serialized-Data\"><a href=\"#Serialized-Data\" class=\"headerlink\" title=\"Serialized Data\"></a>Serialized Data</h4><p>JSON /dʒeɪ’sʌn/ 是一个<strong>horrible</strong>的数据格式！！！</p>\n<p>看看下面的代码，包含了大量的<strong>空格、引号、key值</strong>等冗余信息，这些字段存在的意义只是为了方便人工阅读，并非数据传输。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"MOPayOrderDo\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RefundDetails\"</span>: [<span class=\"string\">\"10.1元   2016-02-12 20:00 退款\"</span>, <span class=\"string\">\"10.02元   2016-02-17 19:00 退款\"</span>, <span class=\"string\">\"10.003元   2016-02-18 17:00 退款\"</span>, <span class=\"string\">\"10.0004元   2016-02-18 18:00 退款\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"BaseOrderId\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OriAmount#D\"</span>: <span class=\"number\">2.123456</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RemainAmount#D\"</span>: <span class=\"number\">100.123456</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SerializedId\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RepayUrl\"</span>: <span class=\"string\">\"dianping://shopinfo?id=2062015\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"CurrentAmount#D\"</span>: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SaveAmount#D\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderRemarks\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ErrorMsg\"</span>: <span class=\"string\">\"支付成功|此为付款凭证，请向商户展示\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SerialNumber\"</span>: <span class=\"string\">\"80033630111\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RightDos\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MerchantAmountString\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Discounts\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HuiTicketShareDo\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"HuiTicketShareDo\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketValidPeriod\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketDesc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketValue\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketShareStatus#I\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketButtonClickable\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"PayTicketDesc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketPicUrl\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketTitle\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"TicketButtonText\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ShareDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ExtraTickets\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"ShopID#I\"</span>: <span class=\"number\">2062015</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"PointMallDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"RefundAmount#D\"</span>: <span class=\"number\">40.1234</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"BuffetDescs\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"PayFailDescription\"</span>: <span class=\"string\">\"您的付款将于1-5个工作日原路退还\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Time#U\"</span>: <span class=\"number\">1442469357</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HuiReviewInfo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"Banner\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderID#I\"</span>: <span class=\"number\">43956789</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"VoucherSerials\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"Status#I\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OperationBanners\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"AlertLoginTips\"</span>: <span class=\"string\">\"绑定手机后订单不会丢哦\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"AlertLoginLink\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"Link\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Name\"</span>: <span class=\"string\">\"现在去绑定\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"MerchantAmount#D\"</span>: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ServiceUrl\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"StatusMsg\"</span>: <span class=\"string\">\"已退款\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ContactMerchantTip\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"OrderDetailTipsDo\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"ShopPhones\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"4008205527\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"ShopName\"</span>: <span class=\"string\">\"大众点评网\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"IsHobbit#I\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"NoDiscountAmount#D\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"SuccessMsg\"</span>: <span class=\"string\">\"请向服务员出示验证码\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"HasVoiceReport\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MobileNo\"</span>: <span class=\"string\">\"13774283697\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"VerifyStatus#I\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"MOPayShare\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"__name\"</span>: <span class=\"string\">\"Share\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"IconUrl\"</span>: <span class=\"string\">\"http://qcloud.dpfile.com/pc/9vKBXqRXPl6vyOVFe4zlXMLys21f38u--LZmWbufGI2pRKzSBzQnLPwzWURFZUAvtOnd3gXQdDYlAqlaVaAFeZ0rYYyiRo_EhzufqWWjTjs.jpg\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Title\"</span>: <span class=\"string\">\"在【大众点评网】不用现金，手机买单有优惠!\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Desc\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"BtnText\"</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"Url\"</span>: <span class=\"string\">\"http://m.dianping.com/hui/share/weixin?shopId=2062015\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"UserAmountString\"</span>: <span class=\"string\">\"&#123;\\\"userAmount\\\":\\\"1.123456元\\\",\\\"boughtVoucher\\\":\\\"\\\",\\\"usedVoucher\\\":\\\"\\\"&#125;\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"BizType#I\"</span>: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>光头哥在video中给出了几种高效的序列化替代方式，讲解参见<a href=\"https://www.youtube.com/watch?v=IwxIIUypnTE\" target=\"_blank\" rel=\"noopener\">Serialization performance (Android Performance Patterns Season 4 ep14)</a></p>\n<ul>\n<li>Protocol Buffers</li>\n<li>Nano-Proto-Buffers</li>\n<li>FlatBuffers</li>\n</ul>\n<p>同样，在http压缩过程里，也有进一步优化的空间，参见<a href=\"https://www.youtube.com/watch?v=qBxeHkvJoOQ\" target=\"_blank\" rel=\"noopener\">Smaller Serialized Data (Android Performance Patterns Season 4 ep15)</a></p>\n<p><img src=\"/img/160308_app_s4ep5/http_stack.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep4 Adapting to Latency","url":"http://lilei.work/2016/03/08/Android-Performance-Patterns-s4ep4-Adapting-to-Latency/","content":"<blockquote>\n<p>One of the most frequent performance problems your users will notice is how your app reacts when moving from a great network connection to a bad one. If things slow down, get sluggish, or start showing too many spinners, they can show your app the “uninstall“ button.<br><a href=\"https://www.youtube.com/watch?v=uzboHWX3Kvc&amp;index=14&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uzboHWX3Kvc?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Bottlenecks-Happen-Anywhere\"><a href=\"#Bottlenecks-Happen-Anywhere\" class=\"headerlink\" title=\"Bottlenecks Happen Anywhere\"></a>Bottlenecks Happen Anywhere</h4><p>在一次由app发起的网络请求过程中，会建立“手机－基站－负载均衡服务器－后端server”的一个往复链路，在这个链路的任何一个环节，都可能造成网络请求的延迟。</p>\n<p><img src=\"/img/160308_app_s4ep4/bottlenecks.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Adapting-To-Lagency\"><a href=\"#Adapting-To-Lagency\" class=\"headerlink\" title=\"Adapting To Lagency\"></a>Adapting To Lagency</h4><p>为了适应复杂多变的网络环境，必须做下面两件事：</p>\n<ol>\n<li>Gather information.</li>\n<li>Make adjustments.</li>\n</ol>\n<p>SDK中为我们提供了判断当前网络环境的Api</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class=\"line\">NetworkInfo activeNetwork = cm.getActiveNetworkInfo();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (activeNetwork.getType() != ConnectivityManager.TYPE_WIFI) &#123;</span><br><span class=\"line\">\tString typeName = activeNetwork.getSubtypeName();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> type = activeNetwork.getSubtype();</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// do the cases</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不同网络环境的基本传输速度如下图所示：</p>\n<p><img src=\"/img/160308_app_s4ep4/speed.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Do-It-Yourself\"><a href=\"#Do-It-Yourself\" class=\"headerlink\" title=\"Do It Yourself\"></a>Do It Yourself</h4><p>然而，即使判断出当前处于诸如LTE的网络环境，依然不能完全保证较高的传输速度，比如，瓶颈可能发生在服务端。</p>\n<p><img src=\"/img/160308_app_s4ep4/slow_server.png\" alt=\"\"></p>\n<p>这时就需要主动去测算当前网络延迟了，多次测算后，求平均值。</p>\n<p><img src=\"/img/160308_app_s4ep4/evaluate_average.png\" alt=\"\"></p>\n<p>接着，你可以定义出三个网络状况区间，以60ms、220ms为界</p>\n<p><img src=\"/img/160308_app_s4ep4/levels.png\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>GOOD</th>\n<th>OK</th>\n<th>BAD</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt; 60ms</td>\n<td>60ms ~ 220ms</td>\n<td>&gt; 220ms</td>\n</tr>\n<tr>\n<td>更多的预加载，几乎不需要缓存</td>\n<td>依赖缓存，拒绝部分网络请求</td>\n<td>拒绝大部分网络请求，只加载重要信息</td>\n</tr>\n</tbody>\n</table>\n<p>当然，阈值（60ms、220ms）不是固定的。</p>\n<hr>\n<h4 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h4><p>在测试时，针对难测的网络环境条件，可以使用一些工具进行延时模拟。</p>\n<ul>\n<li>Emulator Throttling: <a href=\"http://developer.android.com/tools/devices/emulator.html\" target=\"_blank\" rel=\"noopener\">http://developer.android.com/tools/devices/emulator.html</a></li>\n<li>Network Attenuator: <a href=\"http://developer.att.com/developer/legalAgreementPage.jsp?passedItemId=14500040\" target=\"_blank\" rel=\"noopener\">http://developer.att.com/developer/legalAgreementPage.jsp?passedItemId=14500040</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep3 Effective Prefetching","url":"http://lilei.work/2016/03/08/Android-Performance-Patterns-s4ep3-Effective-Prefetching/","content":"<blockquote>\n<p>If you’re looking for the optimal way to batch requests to reduce overall network traffic, then prefetching is for you.<br><a href=\"https://www.youtube.com/watch?v=GajI0uKyAGE&amp;index=13&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/GajI0uKyAGE?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Why-Prefetching\"><a href=\"#Why-Prefetching\" class=\"headerlink\" title=\"Why Prefetching?\"></a>Why Prefetching?</h4><p>很多场景下，app发出的网络请求是连续的，譬如，一个正在下拉中的每一项都包含一张缩略图的列表。</p>\n<p>如果可以预见的话，将未来即将发生的网络请求合并到一起进行发送，比起单独来发送各自请求，一方面减少了网络请求对于资源的消耗（如：节约电量与带宽），另一方面也使得app界面运行更加流畅。</p>\n<p><img src=\"/img/160308_app_s4ep3/prefetching.png\" alt=\"\"></p>\n<p>但是，如何确定预加载的度，是一个值得思考的问题。加载的太少了，起不到期望的效果；加载太多了，反而拖慢app。</p>\n<p><img src=\"/img/160308_app_s4ep3/little_or_much.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How-much-do-we-prefetch\"><a href=\"#How-much-do-we-prefetch\" class=\"headerlink\" title=\"How much do we prefetch?\"></a>How much do we prefetch?</h4><p>有2个可以参考的指标</p>\n<ol>\n<li>空间：预加载1~5mb的数据</li>\n<li>时间：预加载未来1~2min内会用到的数据</li>\n</ol>\n<p>此外，预加载必须要考虑用户所处的网络环境</p>\n<ul>\n<li>4G：12张图片</li>\n<li>2G：3张图片</li>\n</ul>\n<p>一个很好的衡量用户网络环境的方法是，计算某一个特定大小文件的传输时间。</p>\n<p>在一个网络连接的窗口期，可以把之前hold住的网络请求，连同后面即将加载的网络请求一同打包发送。</p>\n<p><img src=\"/img/160308_app_s4ep3/put_them_all.png\" alt=\"\"></p>\n<p><a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\" target=\"_blank\" rel=\"noopener\">GcmNetworkManager</a>为你提供了强力的工具用以完成上面的需求。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n<hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep2 Optimizing Network Request Frequencies","url":"http://lilei.work/2016/03/07/Android-Performance-Patterns-s4ep2-Optimizing-Network-Request-Frequencies/","content":"<blockquote>\n<p>Syncing too often, can be the worst idea for the performance of your application.<br><a href=\"https://www.youtube.com/watch?v=nDHeuEM30ks&amp;index=12&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/nDHeuEM30ks?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Do-not-Over-Sync\"><a href=\"#Do-not-Over-Sync\" class=\"headerlink\" title=\"Do not Over Sync\"></a>Do not Over Sync</h4><p>对于用户来说，有些信息是要保持最新的（天气、账户余额等等），有些信息却不必时刻更新，太频繁的同步操作反而过犹不及：</p>\n<ol>\n<li>耗电量：比起待机，网络请求会消耗更多的电量</li>\n<li>网络流量：同样，会占用带宽，小心用户在收到流量账单变得抓狂</li>\n</ol>\n<hr>\n<h4 id=\"Sync-Less-Win-More\"><a href=\"#Sync-Less-Win-More\" class=\"headerlink\" title=\"Sync Less, Win More\"></a>Sync Less, Win More</h4><p>优化缓存的关键在于区分数据是当下立即需要的还是稍后请求也无伤大雅的，比如，用户进行下拉刷新，显然需要马上向服务器请求数据。而后台进行的数据下载与上传，相比之下就不那么重要。</p>\n<p><img src=\"/img/160307_app_s4ep2/now_or_later.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Always-Poll-Just-Listen\"><a href=\"#Don’t-Always-Poll-Just-Listen\" class=\"headerlink\" title=\"Don’t Always Poll, Just Listen\"></a>Don’t Always Poll, Just Listen</h4><p>不要试图经常轮询Server请求新数据，这并没有什么卵用，要知道很多情况下数据在服务端根本就没有更新。</p>\n<p><img src=\"/img/160307_app_s4ep2/do_not_poll.png\" alt=\"\"></p>\n<p>使用诸如<a href=\"https://developers.google.com/cloud-messaging/\" target=\"_blank\" rel=\"noopener\">Google Cloud Messaging</a>的服务进行从Server发起的push —— What the hell is this?</p>\n<p>由于天朝的特殊性，GCM无法使用，因此诞生了诸如极光推送等一系列替代品，一些有能力的大厂干脆自己实现消息推送系统，可以参考微信这篇文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994&amp;scene=0#rd\" target=\"_blank\" rel=\"noopener\">Android微信智能心跳方案</a></p>\n<p><img src=\"/img/160307_app_s4ep2/listen.png\" alt=\"\"></p>\n<p>如果不得不采用客户端轮询来做，考虑二进制退让算法</p>\n<p><img src=\"/img/160307_app_s4ep2/binary.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"因地制宜\"><a href=\"#因地制宜\" class=\"headerlink\" title=\"因地制宜\"></a>因地制宜</h4><p>下面这个听起来就有一些炫酷了：根据用户当前不同的行为模式采取不同的同步策略，比如用户在驾驶时、跑步时、睡觉时……</p>\n<p><img src=\"/img/160307_app_s4ep2/scenery.png\" alt=\"\"></p>\n<p>比如，当你监测到用户刚刚从8小时的睡眠中醒来并开启手机时，不妨马上进行一次同步。</p>\n<p>根据是否正在充电、是否连接wifi等配置信息，调节同步时间：</p>\n<p><img src=\"/img/160307_app_s4ep2/situations.png\" alt=\"\"></p>\n<p>然而，场景那么多，你要怎么办呢？</p>\n<p>幸运的是，你并不需要为此实现太多复杂的逻辑，参考<a href=\"https://developers.google.com/android/reference/com/google/android/gms/gcm/GcmNetworkManager\" target=\"_blank\" rel=\"noopener\">GCM Network Manager</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s4ep1 Cachematters for networking","url":"http://lilei.work/2016/03/07/Android-Performance-Patterns-s4ep1-Cachematters-for-networking/","content":"<blockquote>\n<p>You know what the fastest, most efficient piece of content for networking performance is? The one you never have to download.<br><a href=\"https://www.youtube.com/watch?v=7lxVqqWwTb0&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=11\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<hr>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/7lxVqqWwTb0?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Reading-data-from-local-memory-v-s-Reading-data-from-network\"><a href=\"#Reading-data-from-local-memory-v-s-Reading-data-from-network\" class=\"headerlink\" title=\"Reading data from local memory v.s. Reading data from network\"></a>Reading data from local memory v.s. Reading data from network</h4><p><img src=\"/img/160307_app_s4ep1/local_vs_network.png\" alt=\"\"></p>\n<p>访问本地数据的速度要远远快于访问网络数据（废话！）。接下来，文章中会介绍一些本地缓存的策略与实现。</p>\n<h4 id=\"Enable-Http-Caching\"><a href=\"#Enable-Http-Caching\" class=\"headerlink\" title=\"Enable Http Caching\"></a>Enable Http Caching</h4><p>默认情况下，Http Cache在Android系统中是关闭的，需要使用<a href=\"http://developer.android.com/reference/android/net/http/HttpResponseCache.html\" target=\"_blank\" rel=\"noopener\">HttpResponseCache</a>手动开启，如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tFile httpCacheDir = <span class=\"keyword\">new</span> File(context.getCacheDir(), <span class=\"string\">\"http\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> httpCacheSize = <span class=\"number\">10</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 10 MB</span></span><br><span class=\"line\">\t\tHttpResponseCache.install(httpCacheDir, httpCacheSize);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\tLot.i(TAG, <span class=\"string\">\"Http response cache installation failed\"</span> + e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tHttpResponseCache cache = HttpResponseCache.installed();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (cache != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tcache.flush();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做会为所有的Http请求提供缓存，不仅是自己代码中发出的，也包括所依赖外部jar包发出的请求。</p>\n<hr>\n<h4 id=\"Invalidation\"><a href=\"#Invalidation\" class=\"headerlink\" title=\"Invalidation\"></a>Invalidation</h4><p>Cache有两种最基本的过期的策略：空间（Cache空间不足时触发）和时间（Cache超过过期时间后触发）。</p>\n<p><img src=\"/img/160307_app_s4ep1/invalidation.png\" alt=\"\"></p>\n<p>在 Http 1.x 的header中，用<code>Cache-Control</code>来标示缓存策略。</p>\n<p><img src=\"/img/160307_app_s4ep1/cache_control_header.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"HttpResponseCache的限制\"><a href=\"#HttpResponseCache的限制\" class=\"headerlink\" title=\"HttpResponseCache的限制\"></a>HttpResponseCache的限制</h4><p>HttpResponseCache通过Server来控制所有Cache策略，这在大部分场景是没有问题的，毕竟Server知道它返回给Client的具体内容是什么（文字、图片、文件等等），然而，移动应用的特殊性使得它还需要更精细的控制。</p>\n<ul>\n<li>Server可能在Header中压根就没有为<code>Cache-Control</code>赋值</li>\n<li>移动设备的存储空间有限以至于无法保存Cache数据</li>\n<li>网络环境高延迟</li>\n</ul>\n<p><img src=\"/img/160307_app_s4ep1/constraint.png\" alt=\"\"></p>\n<p>因此，你需要自己定制一个Cache框架并引入Cache功能，这两件事不得不做：</p>\n<ol>\n<li>Write your own Disk Cache manager</li>\n<li>Use custom Caching Logic</li>\n</ol>\n<p>可以参照已有的<a href=\"https://developer.android.com/samples/DisplayingBitmaps/src/com.example.android.displayingbitmaps/util/DiskLruCache.html\" target=\"_blank\" rel=\"noopener\">DiskLruCache</a></p>\n<p>不同数据的各自属性通常要求各异的Cache策略，比如，文字提示语的过期时间与头像的过期时间是不同的。</p>\n<p><img src=\"/img/160307_app_s4ep1/different_cache_time.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Codes-amp-Tools\"><a href=\"#Codes-amp-Tools\" class=\"headerlink\" title=\"Codes &amp; Tools\"></a>Codes &amp; Tools</h4><p>一些优秀的网络请求框架</p>\n<ul>\n<li>Volly: <a href=\"https://developer.android.com/training/volley/index.html\" target=\"_blank\" rel=\"noopener\">https://developer.android.com/training/volley/index.html</a></li>\n<li>OkHttp: <a href=\"http://square.github.io/okhttp\" target=\"_blank\" rel=\"noopener\">http://square.github.io/okhttp</a></li>\n<li>Picasso: <a href=\"http://square.github.io/picasso\" target=\"_blank\" rel=\"noopener\">http://square.github.io/picasso</a></li>\n</ul>\n<p>AndroidStudio提供了查看网络数据流量的<a href=\"http://developer.android.com/tools/debugging/ddms.html#network\" target=\"_blank\" rel=\"noopener\">Network Traffic Tool</a></p>\n<p><img src=\"/img/160307_app_s4ep1/network_traffic_tool.png\" alt=\"\"></p>\n<p>更专业的工具是AT&amp;T提供的<a href=\"https://developer.att.com/application-resource-optimizer\" target=\"_blank\" rel=\"noopener\">ARO tool</a></p>\n<p><img src=\"/img/160307_app_s4ep1/aro_tool.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"长宁国际体操中心游泳馆开放时间","url":"http://lilei.work/2016/03/04/Changning-Swimming-Pool-Opening-Hours/","content":"<p>🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊🏊</p>\n<hr>\n<blockquote>\n<p>性价比最高时段依旧为工作日6:30~8:30，水质好，人少，价格低<br>游泳馆网址：<a href=\"http://www.swim.sh.cn\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<p><img src=\"/img/160304_changning_swimming_pool/photo.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["大保健"]},{"title":"Android Performance Patterns - s5ep10 Profile GPU Rendering, M Update","url":"http://lilei.work/2016/02/25/Android-Performance-Patterns-s5ep10-Profile-GPU-Rendering/","content":"<blockquote>\n<p>Season 5 的最后一期，Android M 中新增了GPU渲染分析工具<br>光头哥，我们下一季再见！<br>PS. 光头哥的大名是 Colt McAnlis<br><a href=\"https://www.youtube.com/watch?v=erGJw8WDV74&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=10\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/erGJw8WDV74?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Why-GPU-Profile-Tool\"><a href=\"#Why-GPU-Profile-Tool\" class=\"headerlink\" title=\"Why GPU Profile Tool\"></a>Why GPU Profile Tool</h4><p>用户在使用app时，并不关心你的代码内部使用了多么NB的算法、多么碉堡的框架，用户最直观的体验是——你的app有没有卡顿、会不会丢帧。同网站一样，app加载的时间越长，用户流失也就越严重。因此，找到画面卡顿的原因便格外重要。</p>\n<hr>\n<h4 id=\"GPU-Profiling-Tool-Before-M\"><a href=\"#GPU-Profiling-Tool-Before-M\" class=\"headerlink\" title=\"GPU Profiling Tool Before M\"></a>GPU Profiling Tool Before M</h4><p>在笔者的Meizu手机上（Android 5.0），可以在开发者选项中开启“GPU呈现模式分析”来查看CPU绘制情况。现在笔者打开微信朋友圈的一个链接（html5页面）</p>\n<p><img src=\"/img/160225_app_s5ep10/click_link.jpg\" alt=\"\"></p>\n<p>结合说明，可以初步判断那一条暴增的曲线是由于Process过程所致。</p>\n<p><img src=\"/img/160225_app_s5ep10/gpu_profiling.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Strongerrrrrrr\"><a href=\"#Strongerrrrrrr\" class=\"headerlink\" title=\"Strongerrrrrrr!\"></a>Strongerrrrrrr!</h4><p>Android M 为我们提供了更为强大的GPU渲染分析工具，可以细化到以下8个维度，注意到1、2、4也就是上一节图中的三个维度（Process、Execute、Update），它们保持了与历史相同的颜色！</p>\n<p><img src=\"/img/160225_app_s5ep10/eight_phases.png\" alt=\"\"></p>\n<p>下面我们着重分析一下另外的五项指标。</p>\n<hr>\n<h4 id=\"Sync-amp-Upload\"><a href=\"#Sync-amp-Upload\" class=\"headerlink\" title=\"Sync &amp; Upload\"></a>Sync &amp; Upload</h4><p><img src=\"/img/160225_app_s5ep10/sync_and_upload.png\" alt=\"\"></p>\n<ul>\n<li>这项指数衡量了bitmap被同步到GPU的耗时，越大的图像，数值越高，通常处理高像素的图片时会导致飙升。</li>\n<li>减少同时展示的图片数量，或者对图片进行预处理，降低图片尺寸可以有效降低数值。</li>\n</ul>\n<hr>\n<h4 id=\"Measure-Layout\"><a href=\"#Measure-Layout\" class=\"headerlink\" title=\"Measure / Layout\"></a>Measure / Layout</h4><p><img src=\"/img/160225_app_s5ep10/measure_layout.png\" alt=\"\"></p>\n<ul>\n<li>过高的指数，表明页面布局过于复杂（super complex view hierarchy）</li>\n<li>也可能是由于double taxation所致（关于double layout taxation请参阅<a href=\"https://www.youtube.com/watch?v=dB3_vgS-Uqo\" target=\"_blank\" rel=\"noopener\">Season 3 ep 8</a>）</li>\n<li>试着简化布局</li>\n</ul>\n<hr>\n<h4 id=\"Animation\"><a href=\"#Animation\" class=\"headerlink\" title=\"Animation\"></a>Animation</h4><p><img src=\"/img/160225_app_s5ep10/animation.png\" alt=\"\"></p>\n<ul>\n<li>若GPU在动画上的负载过高，去检查你所使用到的自定义动画</li>\n<li>谨慎使用 <a href=\"http://developer.android.com/guide/topics/graphics/prop-animation.html\" target=\"_blank\" rel=\"noopener\"><strong>PropertyAnimation</strong></a></li>\n</ul>\n<hr>\n<h4 id=\"Input-Handling\"><a href=\"#Input-Handling\" class=\"headerlink\" title=\"Input Handling\"></a>Input Handling</h4><p><img src=\"/img/160225_app_s5ep10/input_handling.png\" alt=\"\"></p>\n<ul>\n<li>GPU消耗了多少时间用于处理用户输入</li>\n<li>或者说，在相应用户输入的callback中，GPU的消耗</li>\n<li>如果处理输入的逻辑过于复杂，使用<code>Worker Thread</code></li>\n</ul>\n<hr>\n<h4 id=\"Misc-Vsync-Delay\"><a href=\"#Misc-Vsync-Delay\" class=\"headerlink\" title=\"Misc / Vsync Delay\"></a>Misc / Vsync Delay</h4><p><img src=\"/img/160225_app_s5ep10/misc_vsync_delay.png\" alt=\"\"></p>\n<ul>\n<li>如果你从日志中看到诸如“misc vsync … skipping … frames”的信息，That’s this thing!</li>\n<li>发生在相邻两帧之间的事情，都可以归类于此</li>\n<li>使用<code>Worker Thread</code>来处理耗时操作，避免丢帧</li>\n</ul>\n<hr>\n<h4 id=\"A-Bigger-Bar\"><a href=\"#A-Bigger-Bar\" class=\"headerlink\" title=\"A Bigger Bar\"></a>A Bigger Bar</h4><p>上面提到了5个维度，加上之前的3个，一共是8个维度。要把这8个维度同时用柱状图展示出来可不是件容易的事，这对你的视力有着相当的要求。</p>\n<p>方便的是，GPU工具里贴心地适当扩宽加重了那些可能有问题的标示，你会看到一个更醒目的柱状图展示。</p>\n<p><img src=\"/img/160225_app_s5ep10/bigger_bar.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Bye-Bye-Colt-McAlnis\"><a href=\"#Bye-Bye-Colt-McAlnis\" class=\"headerlink\" title=\"Bye Bye! Colt McAlnis\"></a>Bye Bye! Colt McAlnis</h4><p>See you in Season 6!</p>\n<p><img src=\"/img/160225_app_s5ep10/thank_you.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep9 The Importance Of Thread Priority","url":"http://lilei.work/2016/02/25/Android-Performance-Patterns-s5ep9-The-Importance-Of-Thread-Priority/","content":"<blockquote>\n<p>CPU同一时间只能处理有限数目的线程，赋予线程怎样的优先级，将决定其最终在CPU上得以执行的顺序<br>光头哥回归啦！读信的样子简直不要太萌！<br><a href=\"https://www.youtube.com/watch?v=NwFXVsM15Co&amp;index=9&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/NwFXVsM15Co?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Thread-Scheduling\"><a href=\"#Thread-Scheduling\" class=\"headerlink\" title=\"Thread Scheduling\"></a>Thread Scheduling</h4><p>线程调度是现代计算机系统必不可少的功能，Android做为独特的移动系统，在线程调度上，还有一些它与众不同的特性。</p>\n<p>Android系统中对于线程优先级的考虑，还会包括以下方面：</p>\n<ul>\n<li>Activity生命周期</li>\n<li>是否可见</li>\n<li>Activity在前台还是运行</li>\n</ul>\n<hr>\n<h4 id=\"Visible-vs-Invisible\"><a href=\"#Visible-vs-Invisible\" class=\"headerlink\" title=\"Visible vs Invisible\"></a>Visible vs Invisible</h4><p>CPU时间的90%左右，都是用以处理界面展示中的线程，只有约10%留给了后台线程</p>\n<p><img src=\"/img/160225_app_s5ep9/foreground_vs_background.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"拼爹的线程\"><a href=\"#拼爹的线程\" class=\"headerlink\" title=\"拼爹的线程\"></a>拼爹的线程</h4><p>在线程的世界里，一样要拼爹——新创建的线程，其优先级与创建它的线程相同。</p>\n<p>也就是说，如果<code>UI Thread</code>创建了20个<code>Worker Thread</code>，那么这20个<code>Worker Thread</code>都具有相同的优先级，它们会平等竞争CPU时间。</p>\n<p><img src=\"/img/160225_app_s5ep9/same_priority.png\" alt=\"\"></p>\n<p>这其实是很不好的，我们知道哪些工作更重要，哪些工作相比于其它不那么重要，所以我们要主动设置线程优先级，让那些具有更高优先级的线程优先得到执行。</p>\n<hr>\n<h4 id=\"Priority\"><a href=\"#Priority\" class=\"headerlink\" title=\"Priority\"></a>Priority</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.os.Process.setThreadPriority(<span class=\"keyword\">int</span>);</span><br></pre></td></tr></table></figure>\n<p>上面的方法接受<code>-20~24</code>闭区间内所有的整数作为参数，数值越小，优先级越高。为甚么采用负数呢？数值越低，表示这个线程越没有耐心，情绪越暴躁，越急切希望得到执行。</p>\n<p><code>android.os.Process</code>中为我们定义了一些表示线程优先级的常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of application threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_DEFAULT = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * ***************************************</span></span><br><span class=\"line\"><span class=\"comment\">     * ** Keep in sync with utils/threads.h **</span></span><br><span class=\"line\"><span class=\"comment\">     * ***************************************</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Lowest available thread priority.  Only for those who really, really</span></span><br><span class=\"line\"><span class=\"comment\">     * don't want to run if anything else is happening.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_LOWEST = <span class=\"number\">19</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority background threads.  This gives your thread a slightly</span></span><br><span class=\"line\"><span class=\"comment\">     * lower than normal priority, so that it will have less chance of impacting</span></span><br><span class=\"line\"><span class=\"comment\">     * the responsiveness of the user interface.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_BACKGROUND = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of threads that are currently running a user interface</span></span><br><span class=\"line\"><span class=\"comment\">     * that the user is interacting with.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority; the system will automatically adjust your</span></span><br><span class=\"line\"><span class=\"comment\">     * application threads as the user moves through the UI.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_FOREGROUND = -<span class=\"number\">2</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of system display threads, involved in updating</span></span><br><span class=\"line\"><span class=\"comment\">     * the user interface.  Applications can not</span></span><br><span class=\"line\"><span class=\"comment\">     * normally change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_DISPLAY = -<span class=\"number\">4</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of the most important display threads, for compositing</span></span><br><span class=\"line\"><span class=\"comment\">     * the screen and retrieving input events.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_URGENT_DISPLAY = -<span class=\"number\">8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of audio threads.  Applications can not normally</span></span><br><span class=\"line\"><span class=\"comment\">     * change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_AUDIO = -<span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Standard priority of the most important audio threads.</span></span><br><span class=\"line\"><span class=\"comment\">     * Applications can not normally change to this priority.</span></span><br><span class=\"line\"><span class=\"comment\">     * Use with &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int)&#125; and</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> #setThreadPriority(int, int)&#125;, &lt;b&gt;not&lt;/b&gt; with the normal</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> java.lang.Thread&#125; class.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_URGENT_AUDIO = -<span class=\"number\">19</span>;</span><br></pre></td></tr></table></figure>\n<p>此外，还有两个常量用于提高／降低优先级，记住，负数越小，优先级越高（more favorable）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Minimum increment to make a priority more favorable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_MORE_FAVORABLE = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Minimum increment to make a priority less favorable.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> THREAD_PRIORITY_LESS_FAVORABLE = +<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>有了上面的知识，你就可以在<code>UI Thread</code>启动<code>Worker Thread</code>时，通过<code>setPriority(THREAD_PRIORITY_DEFAULT + THREAD_PRIORITY_LESS_FAVORABLE * n)</code>的方式，酌情降低<code>Worker Thread</code>的优先级了。</p>\n<hr>\n<h4 id=\"That’s-How-We-Did-It\"><a href=\"#That’s-How-We-Did-It\" class=\"headerlink\" title=\"That’s How We Did It!\"></a>That’s How We Did It!</h4><p>还记得之前我们总是提到的 <strong>AsyncTask/HandlerThread/ThreadPool/IntentService</strong> 么？其中AsyncTask和IntentService已经为自动我们实现了“降低<code>Worker Thread</code>优先级”的功能，我们无需额外设置。而另外两种则没有这么周到，我们需要主动设置工作线程优先级。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep8 Threading And Loaders","url":"http://lilei.work/2016/02/25/Android-Performance-Patterns-s5ep8-Threading-And-Loaders/","content":"<blockquote>\n<p>Let’s say you’ve got some 20 bitmaps being decoded on a worker thread. Well, what happens if your activity is destroyed before that work completes?<br>相比于本期的大叔，笔者更喜欢之前的光头哥<br><a href=\"https://www.youtube.com/watch?v=s4eAtMHU5gI&amp;index=8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/s4eAtMHU5gI?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"No-One-Writes-to-the-Colonel\"><a href=\"#No-One-Writes-to-the-Colonel\" class=\"headerlink\" title=\"No One Writes to the Colonel\"></a>No One Writes to the Colonel</h4><blockquote>\n<p>五十六年了，上校唯一做过的事情就是等待。</p>\n</blockquote>\n<p>我们知道，<code>Worker Thread</code>是在<code>UI Thread</code>之外用来处理耗时任务的线程，存在这样一种情况，当任务由<code>Worker Thread</code>执行完毕时，引发这项任务的Activity已经走完了<code>onDestroy</code>，这会产生什么样的后果呢？</p>\n<p>第一，Activity虽然结束了它的生命周期，可这个实例并没有从内存中释放——因为<code>Worker Thread</code>还拥有着Activity的reference，这会导致内存泄漏，如图1；第二，已经<code>onDestroy</code>过的Activity早已从屏幕上消失，无法响应任务执行后的返回，我们必须重新创建Activity2来处理任务返回后界面变化，如图2。</p>\n<p>图1<br><img src=\"/img/160225_app_s5ep8/activity_destroy.png\" alt=\"\"></p>\n<p>图2<br><img src=\"/img/160225_app_s5ep8/use_activity_2.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"You-Should-Use-Loaders\"><a href=\"#You-Should-Use-Loaders\" class=\"headerlink\" title=\"You Should Use Loaders\"></a>You Should Use Loaders</h4><p>针对上面的场景，建议使用<code>Loader</code>。设计合理的Loader可以避免内存泄漏、正确处理UI事件、并且不需要重复执行。</p>\n<p><a href=\"http://developer.android.com/reference/android/content/AsyncTaskLoader.html?utm_campaign=app_series_asyncsamplecode_021816&amp;utm_source=gdev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\"><strong>LoaderManager</strong></a>是用来管理Loader的接口，借助前面链接中例子不难理解Loader运行的机制：获取LoaderManager实例－初始化Loader－实现LoaderCallbacks接口处理回调。</p>\n<p>LoaderManager可以缓存任务执行结果，这样当Activity销毁并重建时，就不需要重复执行前面已经执行过的任务了。</p>\n<p><img src=\"/img/160225_app_s5ep8/cache_result.png\" alt=\"\"></p>\n<p>如果一个Activity被终止后不会重建，我们就应该在LoaderManager的<code>onLoaderReset</code>中处理这种情形，释放引用。</p>\n<p><img src=\"/img/160225_app_s5ep8/report_stop.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"The-Downside-of-Loaders\"><a href=\"#The-Downside-of-Loaders\" class=\"headerlink\" title=\"The Downside of Loaders\"></a>The Downside of Loaders</h4><p>集成较为复杂，代码量大。</p>\n<p>参考下面<a href=\"http://developer.android.com/reference/android/content/AsyncTaskLoader.html?utm_campaign=app_series_asyncsamplecode_021816&amp;utm_source=gdev&amp;utm_medium=yt-annt\" target=\"_blank\" rel=\"noopener\">Reference</a>给出的例子，实现了Fragment的ListView从联系人ContentProvider中通过CursorLoader获取数据的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CursorLoaderListFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">ListFragment</span></span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"keyword\">implements</span> <span class=\"title\">OnQueryTextListener</span>, <span class=\"title\">OnCloseListener</span>,</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"title\">LoaderManager</span>.<span class=\"title\">LoaderCallbacks</span>&lt;<span class=\"title\">Cursor</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the Adapter being used to display the list's data.</span></span><br><span class=\"line\">    SimpleCursorAdapter mAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The SearchView for doing filtering.</span></span><br><span class=\"line\">    SearchView mSearchView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If non-null, this is the current filter the user has provided.</span></span><br><span class=\"line\">    String mCurFilter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityCreated</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Give some text to display if there is no data.  In a real</span></span><br><span class=\"line\">        <span class=\"comment\">// application this would come from a resource.</span></span><br><span class=\"line\">        setEmptyText(<span class=\"string\">\"No phone numbers\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// We have a menu item to show in action bar.</span></span><br><span class=\"line\">        setHasOptionsMenu(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Create an empty adapter we will use to display the loaded data.</span></span><br><span class=\"line\">        mAdapter = <span class=\"keyword\">new</span> SimpleCursorAdapter(getActivity(),</span><br><span class=\"line\">                android.R.layout.simple_list_item_2, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> String[] &#123; Contacts.DISPLAY_NAME, Contacts.CONTACT_STATUS &#125;,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; android.R.id.text1, android.R.id.text2 &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        setListAdapter(mAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Start out with a progress indicator.</span></span><br><span class=\"line\">        setListShown(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare the loader.  Either re-connect with an existing one,</span></span><br><span class=\"line\">        <span class=\"comment\">// or start a new one.</span></span><br><span class=\"line\">        getLoaderManager().initLoader(<span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySearchView</span> <span class=\"keyword\">extends</span> <span class=\"title\">SearchView</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MySearchView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The normal SearchView doesn't clear its search text when</span></span><br><span class=\"line\">        <span class=\"comment\">// collapsed, so we will do this for it.</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onActionViewCollapsed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            setQuery(<span class=\"string\">\"\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onActionViewCollapsed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu, MenuInflater inflater)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Place an action bar item for searching.</span></span><br><span class=\"line\">        MenuItem item = menu.add(<span class=\"string\">\"Search\"</span>);</span><br><span class=\"line\">        item.setIcon(android.R.drawable.ic_menu_search);</span><br><span class=\"line\">        item.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM</span><br><span class=\"line\">                | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);</span><br><span class=\"line\">        mSearchView = <span class=\"keyword\">new</span> MySearchView(getActivity());</span><br><span class=\"line\">        mSearchView.setOnQueryTextListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mSearchView.setOnCloseListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        mSearchView.setIconifiedByDefault(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        item.setActionView(mSearchView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onQueryTextChange</span><span class=\"params\">(String newText)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Called when the action bar search text has changed.  Update</span></span><br><span class=\"line\">        <span class=\"comment\">// the search filter, and restart the loader to do a new query</span></span><br><span class=\"line\">        <span class=\"comment\">// with this filter.</span></span><br><span class=\"line\">        String newFilter = !TextUtils.isEmpty(newText) ? newText : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// Don't do anything if the filter hasn't actually changed.</span></span><br><span class=\"line\">        <span class=\"comment\">// Prevents restarting the loader when restoring state.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter == <span class=\"keyword\">null</span> &amp;&amp; newFilter == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter != <span class=\"keyword\">null</span> &amp;&amp; mCurFilter.equals(newFilter)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mCurFilter = newFilter;</span><br><span class=\"line\">        getLoaderManager().restartLoader(<span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onQueryTextSubmit</span><span class=\"params\">(String query)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Don't care about this.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onClose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!TextUtils.isEmpty(mSearchView.getQuery())) &#123;</span><br><span class=\"line\">            mSearchView.setQuery(<span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onListItemClick</span><span class=\"params\">(ListView l, View v, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Insert desired behavior here.</span></span><br><span class=\"line\">        Log.i(<span class=\"string\">\"FragmentComplexList\"</span>, <span class=\"string\">\"Item clicked: \"</span> + id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// These are the Contacts rows that we will retrieve.</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] CONTACTS_SUMMARY_PROJECTION = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">        Contacts._ID,</span><br><span class=\"line\">        Contacts.DISPLAY_NAME,</span><br><span class=\"line\">        Contacts.CONTACT_STATUS,</span><br><span class=\"line\">        Contacts.CONTACT_PRESENCE,</span><br><span class=\"line\">        Contacts.PHOTO_ID,</span><br><span class=\"line\">        Contacts.LOOKUP_KEY,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Loader&lt;Cursor&gt; <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Bundle args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is called when a new Loader needs to be created.  This</span></span><br><span class=\"line\">        <span class=\"comment\">// sample only has one Loader, so we don't care about the ID.</span></span><br><span class=\"line\">        <span class=\"comment\">// First, pick the base URI to use depending on whether we are</span></span><br><span class=\"line\">        <span class=\"comment\">// currently filtering.</span></span><br><span class=\"line\">        Uri baseUri;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCurFilter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            baseUri = Uri.withAppendedPath(Contacts.CONTENT_FILTER_URI,</span><br><span class=\"line\">                    Uri.encode(mCurFilter));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            baseUri = Contacts.CONTENT_URI;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Now create and return a CursorLoader that will take care of</span></span><br><span class=\"line\">        <span class=\"comment\">// creating a Cursor for the data being displayed.</span></span><br><span class=\"line\">        String select = <span class=\"string\">\"((\"</span> + Contacts.DISPLAY_NAME + <span class=\"string\">\" NOTNULL) AND (\"</span></span><br><span class=\"line\">                + Contacts.HAS_PHONE_NUMBER + <span class=\"string\">\"=1) AND (\"</span></span><br><span class=\"line\">                + Contacts.DISPLAY_NAME + <span class=\"string\">\" != '' ))\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CursorLoader(getActivity(), baseUri,</span><br><span class=\"line\">                CONTACTS_SUMMARY_PROJECTION, select, <span class=\"keyword\">null</span>,</span><br><span class=\"line\">                Contacts.DISPLAY_NAME + <span class=\"string\">\" COLLATE LOCALIZED ASC\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader&lt;Cursor&gt; loader, Cursor data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Swap the new cursor in.  (The framework will take care of closing the</span></span><br><span class=\"line\">        <span class=\"comment\">// old cursor once we return.)</span></span><br><span class=\"line\">        mAdapter.swapCursor(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The list should now be shown.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isResumed()) &#123;</span><br><span class=\"line\">            setListShown(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            setListShownNoAnimation(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader&lt;Cursor&gt; loader)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is called when the last Cursor provided to onLoadFinished()</span></span><br><span class=\"line\">        <span class=\"comment\">// above is about to be closed.  We need to make sure we are no</span></span><br><span class=\"line\">        <span class=\"comment\">// longer using it.</span></span><br><span class=\"line\">        mAdapter.swapCursor(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep7 The Zen Of IntentService","url":"http://lilei.work/2016/02/24/Android-Performance-Patterns-s5ep7-The-Zen-Of-IntentService/","content":"<blockquote>\n<p>Season 5 ep 7，IntentService之禅。<br>见山是山，见水是水；见山不是山，见水不是水；见山仍是山，见水仍是水。<br><a href=\"https://www.youtube.com/watch?v=9FweabuBi1U&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=7\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/9FweabuBi1U?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Work-With-An-Intent\"><a href=\"#Work-With-An-Intent\" class=\"headerlink\" title=\"Work With An Intent\"></a>Work With An Intent</h4><p>在Android系统中我们经常会用Intent来传递消息，如果一个Intent需要花很长时间来处理，在上过了前面几节课之后，你一定已经掌握了如何应对这种task的办法——在新的<code>Worker Thread</code>中解决这个任务。</p>\n<p><img src=\"/img/160224_app_s5ep7/large_intent_work.png\" alt=\"\"></p>\n<p>基于Season 5前面几节所讲的知识，你可能会选用<strong>AsyncTask</strong>或者<strong>HandlerThread</strong>来完成这个工作，然而，这两个并非最好的选择，因为：</p>\n<ul>\n<li>AsyncTask通常处理UI交互方面的事情，当你的Activity正处于后台（没有任何UI元素在渲染中）时，AsyncTask并不能完成它的任务</li>\n<li>HandlerThread倒是可以脱离UI运行，不过因为它是一个独立的Thread，当没有Intent过来时，这个Thread仍然会维持它的生命活动，意味着，空闲时占用资源。（一条Thread会占用65k+的内存）</li>\n</ul>\n<hr>\n<h4 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h4><p>这是就要隆重推出<a href=\"http://developer.android.com/reference/android/app/IntentService.html\" target=\"_blank\" rel=\"noopener\"><strong>IntentService</strong></a>了。IntentService更像是Service与HandlerThread的合体（a hybrid between Service class and HandlerThread），它继承自Service，在运行时会创建HandlerThread，来处理接收到的Intent请求。</p>\n<p><img src=\"/img/160224_app_s5ep7/intent_service.png\" alt=\"\"></p>\n<p>因为IntentService本质上是一个Service，你可以通过它进行一些Service既有的功能，如使用alarm做定时／循环操作。</p>\n<hr>\n<h4 id=\"Be-Careful-With-IntentService\"><a href=\"#Be-Careful-With-IntentService\" class=\"headerlink\" title=\"Be Careful With IntentService\"></a>Be Careful With IntentService</h4><p>在享受IntentService所带来便利的时候，也有一些注意事项。</p>\n<p>首先，IntentService所有任务是在同一个队列中按顺序处理的，同AsyncTask一样，如果排在前面的一个任务极其耗时，会使得后面任务迟迟得不到执行，这是就要考虑HandlerThread等其他解决方案了。</p>\n<p><img src=\"/img/160224_app_s5ep7/one_work_queue.png\" alt=\"\"></p>\n<p>其次，IntentService使用类似Broadcast Receiver的机制将任务执行结果返回给Activity，这在运行结果的正确性上并没有任何问题。然而对于简单的结果返回操作，是不需要使用如此重量级的Broadcast Receiver来进行的。你可以改用<code>runOnUIThread</code>来降低资源消耗。</p>\n<p><img src=\"/img/160224_app_s5ep7/broadcast_receiver.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Other-Benifits-of-IntentService\"><a href=\"#Other-Benifits-of-IntentService\" class=\"headerlink\" title=\"Other Benifits of IntentService\"></a>Other Benifits of IntentService</h4><p>使用IntentService还有一个附加的好处——它会使你的app在被切换到后台时，不那么容易被杀死。（相比于那些在后台运行且没有Service的app而言）</p>\n<p><img src=\"/img/160224_app_s5ep7/not_killed.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep6 Swimming in ThreadPools","url":"http://lilei.work/2016/02/24/Android-Performance-Patterns-s5ep6-Swimming-In-ThreadPools/","content":"<blockquote>\n<p>Season 5 ep 6，关于线程池你应该知道的事<br><a href=\"https://www.youtube.com/watch?v=uCmHoEY1iTM&amp;index=6&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">Video Link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/uCmHoEY1iTM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"One-Thread-One-Thing\"><a href=\"#One-Thread-One-Thing\" class=\"headerlink\" title=\"One Thread, One Thing\"></a>One Thread, One Thing</h4><blockquote>\n<p>且说孔明自引一军屯于五丈原，累令人搦战，魏兵只不出。孔明乃取巾帼并妇人缟素之服，盛于大盒之内，修书一封，遣人送至魏寨。诸将不敢隐蔽，引来使入见司马懿。懿对众启盒视之，内有巾帼妇人之衣，并书一封。懿拆视其书，略曰：“仲达既为大将，统领中原之众，不思披坚执锐，以决雌雄，乃甘窟守土巢，谨避刀箭，与妇人又何异哉！今遣人送巾帼素衣至，如不出战，可再拜而受之。倘耻心未泯，犹有男子胸襟，早与批回，依期赴敌。”司马懿看毕，心中大怒，乃佯笑曰：“孔明视我为妇人耶！”即受之，令重待来使。懿问曰：“孔明寝食及事之烦简若何？”使者曰：“丞相<strong>夙兴夜寐，罚二十以上皆亲览焉。</strong>所啖之食，日不过数升。”懿顾谓诸将曰：“<strong>孔明食少事烦，其能久乎？</strong>” ——《三国演义》第一百十三回  上方谷司马受困 五丈原诸葛禳星</p>\n</blockquote>\n<p>论智计谋略，诸葛亮要胜过司马懿，然而，由于丞相不论巨细事必躬亲，只落得星落五丈原的悲惨结局。可见，人的精力是有限的，不应当把所有的任务都压在同一个人头上。在计算机科学中，这一理论同样适用。</p>\n<p>对于线程，有专门处理音频的Audio Thread，有响应IO的IO Thread，还有负责网络事务的Networking Thread，这些都是良好的编程典范。</p>\n<p>然而，存在这样的情况：当某一系列的任务数量实在太多，已经超过了单个线程所能承受的极限。这时我们应当怎么做？如果工作线程有且只能由一个，就像诸葛丞相一样不得不亲力亲为，那可就GG了。不必担心，新时代的计算机科学已经让我们习得了秘-影分身之术。</p>\n<p>看一看下面这个场景，页面里需要展示40张图片，每张图片的解码消耗4ms时间，如果只有单一线程进行操作，总共需要用掉160ms。这显然是难以接受的。</p>\n<p>如果我们用10条线程并行计算，可以把时间压缩到16ms。</p>\n<p><img src=\"/img/160224_app_s5ep6/parallel.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Thread-Pool-Executor\"><a href=\"#Thread-Pool-Executor\" class=\"headerlink\" title=\"Thread Pool Executor\"></a>Thread Pool Executor</h4><p>有了并发处理这一个思路，便可以借助于JAVA提供的强力工具<a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html\" target=\"_blank\" rel=\"noopener\"><strong>ThreadPoolExecutor</strong></a>来执行任务了。你只需要声明需要的线程数，并且把拆分好的Task传递给ThreadPoolExecutor，ThreadPoolExecutor自身会处理任务分配、线程调度、线程回收等操作。</p>\n<p><img src=\"/img/160224_app_s5ep6/thread_pool_executor.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"The-More-The-Better\"><a href=\"#The-More-The-Better\" class=\"headerlink\" title=\"The More, The Better?\"></a>The More, The Better?</h4><blockquote>\n<p>Thread is evil</p>\n</blockquote>\n<p>并发的线程数并非越多越好，首先，一台主机能够开启的线程数是有上限的；其次，线程之间切换本身有代价（线程同步、锁与互斥、环境准备等等）；再次，跟CPU数有关，CPU越多，最大性能下可并发线程数越多。</p>\n<p>最佳线程数要在实践中通过压测等手段获知。通常我们开发中控制并行线程数=CPU数即可。</p>\n<p><img src=\"/img/160224_app_s5ep6/thread_is_evil.png\" alt=\"\"></p>\n<p>每条线程至少占用<code>64k</code>的内存</p>\n<p><img src=\"/img/160224_app_s5ep6/64k.png\" alt=\"\"></p>\n<p><code>ThreadPoolExecutor</code>的构造过程中，允许我们控制初始线程数、最大线程数。需要注意的是，通过<code>Runtime.getRuntime().availableProcessors()</code>获取到的内核数也许会小于真实CPU数——出于节约电量等考虑，Android系统会让某些CPU在空闲时处于休眠状态，这些CPU不会被计数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NUM_OF_CORES = Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">mDecodeThreadPool = <span class=\"keyword\">new</span> ThreadPoolExecutor(</span><br><span class=\"line\">\t\t\t\tNUM_OF_CORES &gt;&gt; <span class=\"number\">1</span>, <span class=\"comment\">// initial pool size</span></span><br><span class=\"line\">\t\t\t\tNUM_OF_CORES, <span class=\"comment\">// max pool size</span></span><br><span class=\"line\">\t\t\t\tKEEP_ALIVE_TIME, <span class=\"comment\">// keep alive time</span></span><br><span class=\"line\">\t\t\t\tKEEP_ALIVE_TIME_UNIT, <span class=\"comment\">// keep alive units (seconds etc)</span></span><br><span class=\"line\">\t\t\t\tmDecodeTaskQueue);</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"For-Power-Users-Like-U\"><a href=\"#For-Power-Users-Like-U\" class=\"headerlink\" title=\"For Power Users Like U\"></a>For Power Users Like U</h4><p><a href=\"http://developer.android.com/guide/topics/renderscript/compute.html\" target=\"_blank\" rel=\"noopener\"><strong>RenderScript</strong></a>是专门用来进行大量并行计算的工具，当你有这方面的需求时，不妨尝试一下。</p>\n<p><img src=\"/img/160224_app_s5ep6/renderscript.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Use-Systrace-to-Analyze\"><a href=\"#Use-Systrace-to-Analyze\" class=\"headerlink\" title=\"Use Systrace to Analyze\"></a>Use Systrace to Analyze</h4><p>用以分析线程、内存的Systrace工具在前文已经介绍过，这里不再赘述。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep5 Getting A HandlerThread","url":"http://lilei.work/2016/02/24/Android-Performance-Patterns-s5ep5-Getting-A-HandlerThread/","content":"<blockquote>\n<p>Season5 ep5的主题是HandlerThread<br><a href=\"https://www.youtube.com/watch?v=adPLIAnx9og&amp;index=5&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/adPLIAnx9og?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"A-Case-–-Camera-Preview\"><a href=\"#A-Case-–-Camera-Preview\" class=\"headerlink\" title=\"A Case – Camera Preview\"></a>A Case – Camera Preview</h4><p>在大部分场景下，AsyncTask已经可以满足我们的功能需求。不过，AsyncTask并不是对于各种场景全都适用的。对于特别耗时的操作，如照相机的预览图绘制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreviewFrame</span> <span class=\"params\">(<span class=\"keyword\">byte</span>[] data, Camera camera)</span></span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160224_app_s5ep5/camera_preview.png\" alt=\"\"></p>\n<p><code>onPreviewFrame</code>放在主线程中执行的话，会因为大量时间用于计算而产生丢帧，方案一pass！</p>\n<p><img src=\"/img/160224_app_s5ep5/no_in_main_thread.png\" alt=\"\"></p>\n<p>放在AsyncTask中执行的话，因为自身的耗时特别长，导致后续任务始终得不到执行，方案二pass！</p>\n<p><img src=\"/img/160224_app_s5ep5/no_in_asynctask.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How?\"></a>How?</h4><p>基于上面的考虑，我们需要有这样一个独立于主线程、可以执行冗长任务的机制，来完成照相机预览图的获取。</p>\n<p>让我们来认识一下<a href=\"http://developer.android.com/reference/android/os/HandlerThread.html\" target=\"_blank\" rel=\"noopener\"><strong>HandlerThread</strong></a>。<code>HandlerThread</code>继承自<code>java.lang.Thread</code>，可以通过<code>getLooper()</code>的方法来获取某个<code>HandlerThread</code>的Looper，拿到Looper之后，就可以通过它创建一个Handler，进而用这个Handler处理预览图绘制这样的工作了。</p>\n<p><img src=\"/img/160224_app_s5ep5/handler_thread.png\" alt=\"\"></p>\n<p>demo见下面的代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HandlerThread handlerThread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">\"photo preview\"</span>);</span><br><span class=\"line\">handlerThread.start();</span><br><span class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler(handlerThread.getLooper());</span><br><span class=\"line\">handler.sendMessage(Handler.obtainMessage(<span class=\"number\">0</span>)); <span class=\"comment\">// 在handleMessage方法中绘制预览图</span></span><br></pre></td></tr></table></figure>\n<p>当计算完成后，就可以通过<code>Activity.runOnUIThread(Runnable r)</code>来更新预览图了。</p>\n<p><img src=\"/img/160224_app_s5ep5/run_on_ui_thread.png\" alt=\"\"></p>\n<p><code>HandlerThread</code>不仅可以处理冗长的触发UI事件，也可以用它来做UI无关的事情。</p>\n<h4 id=\"Priority\"><a href=\"#Priority\" class=\"headerlink\" title=\"Priority\"></a>Priority</h4><p>创建<code>HandlerThread</code>时，记得根据实际需求赋予它适当的优先级，这会使cpu为它分配合适的执行顺序。</p>\n<p><img src=\"/img/160224_app_s5ep5/priority.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"你好哇，汤圆儿！","url":"http://lilei.work/2016/02/23/Hello-TangYuan/","content":"<hr>\n<p><img src=\"/img/160223_hello_tangyuan/cup.jpg\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<p><img src=\"/img/160223_hello_tangyuan/plate.jpg\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["槑"]},{"title":"Android Performance Patterns - s5ep4 Good AsyncTask Hunting","url":"http://lilei.work/2016/02/23/Android-Performance-Patterns-s5ep4-Good-AsyncTask-Hunting/","content":"<blockquote>\n<p>本节介绍<a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">AsyncTask</a>的使用方法与风险<br><a href=\"https://www.youtube.com/watch?v=jtlRNNhane0&amp;index=67&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jtlRNNhane0?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"AsyncTask-Basics\"><a href=\"#AsyncTask-Basics\" class=\"headerlink\" title=\"AsyncTask Basics\"></a>AsyncTask Basics</h4><p><a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">AsyncTask</a>是一把双刃剑，用的好了无往不利，用得不好则伤人伤己。</p>\n<p>考虑下面这种场景，有一个非常耗时的操作需要进行，我们在<code>UI Thread</code>之外启动了一个<code>Worker Thread</code>，当<code>Worker Thread</code>完成它的工作时，会把计算结果返回给<code>UI Thread</code>。</p>\n<p><img src=\"/img/160223_app_s5ep4/worker_thread.png\" alt=\"\"></p>\n<p>由于这种应用场景太常见了，Android为我们提供了<code>AsyncTask</code>这一机制。<code>AsyncTask</code>有三个重要的函数。</p>\n<ul>\n<li>onPreExecute()，在<code>UI Thread</code>中执行，准备Task</li>\n<li>doInBackground()，在<code>Worker Thread</code>中执行复杂的任务</li>\n<li>onPostExecute()，在<code>UI Thread</code>中执行，处理任务执行结果</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep4/async_task_func.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"特别说明！onPreExecute并不保证在UI线程中执行！\"><a href=\"#特别说明！onPreExecute并不保证在UI线程中执行！\" class=\"headerlink\" title=\"特别说明！onPreExecute并不保证在UI线程中执行！\"></a>特别说明！<code>onPreExecute</code>并不保证在UI线程中执行！</h4><p>虽然<a href=\"http://developer.android.com/reference/android/os/AsyncTask.html\" target=\"_blank\" rel=\"noopener\">官方API文档</a>中的说明写到<code>AsyncTask</code>“必须在UI线程中执行”，但Framework底层实现中并没有保证这一机制</p>\n<blockquote>\n<p>The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN.</p>\n</blockquote>\n<p>换句话说，“保证<code>onPreExecute()</code>在UI线程中执行”是一个编程规范，而并非强制要求。相比之下，<code>onPostExecue()</code>一定是在UI线程中执行的，因为它是用的是mainLooper。</p>\n<p>AsyncTask.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">       Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</span><br><span class=\"line\">               <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</span><br><span class=\"line\">       message.sendToTarget();</span><br><span class=\"line\">       <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">synchronized</span> (AsyncTask.class) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">               sHandler = <span class=\"keyword\">new</span> InternalHandler();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> sHandler;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InternalHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">super</span>(Looper.getMainLooper());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</span><br><span class=\"line\">       <span class=\"meta\">@Override</span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">           AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</span><br><span class=\"line\">           <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> MESSAGE_POST_RESULT:</span><br><span class=\"line\">                   <span class=\"comment\">// There is only one result</span></span><br><span class=\"line\">                   result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">               <span class=\"keyword\">case</span> MESSAGE_POST_PROGRESS:</span><br><span class=\"line\">                   result.mTask.onProgressUpdate(result.mData);</span><br><span class=\"line\">                   <span class=\"keyword\">break</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>关于上面这一点，可以参考这个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String TAG = <span class=\"string\">\"mainactivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    View titleView;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        initViews();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                MyAsyncTask task = <span class=\"keyword\">new</span> MyAsyncTask();</span><br><span class=\"line\">                task.execute();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initViews</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        titleView = findViewById(R.id.title);</span><br><span class=\"line\">        titleView.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">                toast(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toast</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, s, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onPreExecute\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Object[] values)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onProgressUpdate\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(values);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"onPostExecute\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(o);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">doInBackground</span><span class=\"params\">(Object[] params)</span> </span>&#123;</span><br><span class=\"line\">            checkRunningInMainThread(<span class=\"string\">\"doInBackGround\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">checkRunningInMainThread</span><span class=\"params\">(String methodName)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, methodName + <span class=\"string\">\" is running in UI Thread? \"</span> + (Looper.myLooper() != <span class=\"keyword\">null</span> &amp;&amp; Looper.getMainLooper() == Looper.myLooper()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子中有一些无关代码（titleView），不过不影响阅读。</p>\n<p>日志输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">02-29 20:29:06.440 13212-13239/com.leili.geeker D/mainactivity: onPreExecute is running in UI Thread? false</span><br><span class=\"line\">02-29 20:29:06.443 13212-13241/com.leili.geeker D/mainactivity: doInBackGround is running in UI Thread? false</span><br><span class=\"line\">02-29 20:29:06.850 13212-13212/com.leili.geeker D/mainactivity: onPostExecute is running in UI Thread? true</span><br></pre></td></tr></table></figure>\n<p>印证了<code>onPreExecute()</code>并不保证在UI线程中执行。</p>\n<hr>\n<h4 id=\"AsyncTask-May-Get-You-Into-A-Trouble\"><a href=\"#AsyncTask-May-Get-You-Into-A-Trouble\" class=\"headerlink\" title=\"AsyncTask May Get You Into A Trouble\"></a>AsyncTask May Get You Into A Trouble</h4><p>有了上面三个函数，似乎AsyncTask用起来并没有什么困难。然而，如果使用不当，AsyncTask会产生很多匪夷所思的问题。</p>\n<p>首先，AsyncTask处理的所有Task，都是放在同一个队列中依次进行的。这意味着，如果前面的Task相当耗时，会使得它后面的Task在很久之后才得以执行。在你处理long running task时应给予高度关注。</p>\n<p><img src=\"/img/160223_app_s5ep4/serial.png\" alt=\"\"></p>\n<p>实际上，AsyncTask提供了一个用来并行执行Task的方法<code>executeOnExecutor</code>，然而光头哥建议，当你足够理解这个方法时，你就会觉得还是不用为好。</p>\n<p><img src=\"/img/160223_app_s5ep4/execute_on_executor.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"AsyncTask-Canceling\"><a href=\"#AsyncTask-Canceling\" class=\"headerlink\" title=\"AsyncTask Canceling\"></a>AsyncTask Canceling</h4><p>AsyncTask在执行之前／执行过程中，是可以被Cancel掉的。参数<code>mayInterruptIfRunning</code>决定了是否允许在执行过程中被中断。如果一项任务执行了<code>cacel</code>方法，那么在<code>doInBackground</code>后被调起的将不再是<code>onPostExecute</code>，而是<code>onCancel</code>，同样是在<code>UI Thread</code>中进行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Attempts to cancel execution of this task. This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task.</span></span><br><span class=\"line\"><span class=\"comment\"> * Calling this method will result in onCancelled(Object) being invoked on the UI thread after doInBackground(Object[]) returns. Calling this method guarantees that onPostExecute(Object) is never invoked. After invoking this method, you should check the value returned by isCancelled() periodically from doInBackground(Object[]) to finish the task as early as possible.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">cancel</span> <span class=\"params\">(<span class=\"keyword\">boolean</span> mayInterruptIfRunning)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>如果你的Task在设计时，考虑了cancel的情况，那么你还需要额外做两件事。</p>\n<ol>\n<li>Check a “canceled” flag regularly</li>\n<li>Report work results invalid</li>\n</ol>\n<p>对于<code>1</code>，如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doInBackground(..) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Doing some stuff</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isCanceled()) &#123;..&#125; <span class=\"comment\">// Oh noez, we done, clean up</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i &lt; obj.length)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isCanceled()) &#123;..&#125; <span class=\"comment\">// Oh noez, we done, clean up</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于<code>2</code>，当我们知道被cancel的task会调用<code>onCancel</code>方法时，可以在<code>onCancel</code>中做一些诸如更新UI、清理内存的事情。</p>\n<p><img src=\"/img/160223_app_s5ep4/on_cancel.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep3 Memory & Threading","url":"http://lilei.work/2016/02/23/Android-Performance-Patterns-s5ep3-Memory-And-Threading/","content":"<blockquote>\n<p>Season5 ep3 主要介绍了Android中使用多线程可能导致的风险——内存泄漏<br><a href=\"https://www.youtube.com/watch?v=tBHPmQQNiS8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE&amp;index=66\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tBHPmQQNiS8?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Memory-Contention-Problems\"><a href=\"#Memory-Contention-Problems\" class=\"headerlink\" title=\"Memory Contention Problems\"></a>Memory Contention Problems</h4><p>内存问题的产生，是由于两个线程操作了同一块内存，由于两者执行的先后顺序未知，导致运行结果不可预测。</p>\n<p>用光头哥的话说（给光头哥的幽默感点赞）</p>\n<blockquote>\n<p>Memory contention problems with read-write access order, ABA problems, rips in the fabric of space-time…</p>\n</blockquote>\n<p><img src=\"/img/160223_app_s5ep3/memory_problem.png\" alt=\"\"></p>\n<p>怎样解决上述问题呢？<strong>加锁</strong>是一个通用的方法——不过这一点要是扩展起来讲，可说来话长了。</p>\n<hr>\n<h4 id=\"Memory-Problems-in-Android\"><a href=\"#Memory-Problems-in-Android\" class=\"headerlink\" title=\"Memory Problems in Android\"></a>Memory Problems in Android</h4><p>记住一点：Android中的UI对象不！是！线！程！安！全！的！（not thread-safe）！所有UI对象的生命周期都在UI线程里进行，在其它线程中维护的UI对象引用，很可能正处于一个invalid的状态。</p>\n<p><img src=\"/img/160223_app_s5ep3/invalid_button.png\" alt=\"\"></p>\n<p>譬如，在<code>Worker Thread</code>中持有一个View的引用，而这个引用实际上已经在<code>UI Thread</code>中结束了它的生命周期，从<code>view hierarchy</code>里面被移除掉了。然而，<code>Worker Thread</code>却傻傻地对此一无所知，接下来对这个View的一切操作都将是徒劳。</p>\n<p><img src=\"/img/160223_app_s5ep3/removed_view.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Keep-Activity-References\"><a href=\"#Don’t-Keep-Activity-References\" class=\"headerlink\" title=\"Don’t Keep Activity References\"></a>Don’t Keep Activity References</h4><p><code>Worker Thread</code>中是不应该持有Activity引用的，这会导致Activity无法正常回收，进而产生内存泄漏。在Android中，当我们不可避免地用到多线程时，这个问题的风险被放大了。当在<code>Worker Thread</code>中持有Activity引用时，除非<code>Worker Thread</code>完成运算（通常这是一项非常耗时的操作），否则Activity的实例不会真正被释放。</p>\n<p><img src=\"/img/160223_app_s5ep3/activity_still_alive.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Implicit-Reference-of-Activity\"><a href=\"#Implicit-Reference-of-Activity\" class=\"headerlink\" title=\"Implicit Reference of Activity\"></a>Implicit Reference of Activity</h4><p>除了上文提到的显式引用（explicit reference），还应该当心内部类导致的隐式引用（implicit reference）。Android为我们提供了解决方案——WeakReference &amp; static 关键字。</p>\n<p><img src=\"/img/160223_app_s5ep3/implicit_reference.png\" alt=\"\"></p>\n<p>上述场景是可能导致应用程序crash的一个原因——AsyncTask持有一个Activity的引用，而这个Activity实际上已经处于invalid状态时（例如，执行过onDestroy()），AsyncTask却对此一无所知，当AsyncTask执行完它所运行的任务，试图操作Activity的界面时，这个Activity实际上并不可用。这就导致了下面的糟糕场景——</p>\n<p><img src=\"/img/160223_app_s5ep3/application_stop.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Don’t-Hold-References\"><a href=\"#Don’t-Hold-References\" class=\"headerlink\" title=\"Don’t Hold References\"></a>Don’t Hold References</h4><p>不要试图在UI线程外保存任何UI元素的引用！！！</p>\n<p><img src=\"/img/160223_app_s5ep3/dont_hold_references.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"How-We-Do\"><a href=\"#How-We-Do\" class=\"headerlink\" title=\"How We Do?\"></a>How We Do?</h4><p>我们要遵守的唯一准则是：<strong>所有UI操作，都在UI线程里进行。</strong></p>\n<p><code>Worker Thread</code>可以通过callback、intent等任意进程间通信方法来告诉UI线程——我需要你帮我变更一下界面。</p>\n<p><img src=\"/img/160223_app_s5ep3/work_thread_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Tool-in-Android-Studio-2-0\"><a href=\"#Tool-in-Android-Studio-2-0\" class=\"headerlink\" title=\"Tool in Android Studio 2.0\"></a>Tool in Android Studio 2.0</h4><p>如果你想更深入地了解运行时Thread&amp;Memory的情况，请使用Android Studio 2.0中提供的有力工具。</p>\n<p><img src=\"/img/160223_app_s5ep3/tool.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep2 Understanding Android Threading","url":"http://lilei.work/2016/02/23/Android-Performance-Patterns-s5ep2-Understanding-Android-Threading/","content":"<blockquote>\n<p>ep2讲解了将Thread原型扩展为HandlerThread的原理与实践。<br><a href=\"https://www.youtube.com/watch?v=0Z5MZ0jL2BM&amp;index=65&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0Z5MZ0jL2BM?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"大叔的帽衫造型很有范儿啊！！！\"><a href=\"#大叔的帽衫造型很有范儿啊！！！\" class=\"headerlink\" title=\"大叔的帽衫造型很有范儿啊！！！\"></a>大叔的帽衫造型很有范儿啊！！！</h4><p><img src=\"/img/160223_app_s5ep2/uncle.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Build-Worker-Thread\"><a href=\"#Build-Worker-Thread\" class=\"headerlink\" title=\"Build Worker Thread\"></a>Build Worker Thread</h4><p>一个Thread，从本质上讲，就是完成了一个“接受任务－执行任务－完成任务”的过程</p>\n<p><img src=\"/img/160223_app_s5ep2/thread_basic_work.png\" alt=\"\"></p>\n<p>如果我们希望这个Thread可以在它的生命周期内多做一些事，是的，尽可能压榨这个Thread，毕竟我们在前面要创建它，在后面要摧毁它，在这中间要让它物尽其用。</p>\n<p>Do Work … Do Work … Do Work …</p>\n<p><img src=\"/img/160223_app_s5ep2/do_work.png\" alt=\"\"></p>\n<p>现在这个Thread已经被成功洗脑，进入了无限Do Work的循环中，就像一头拉磨的毛驴，是时候向磨盘里加上一些谷子了。我们将待处理的工作称为Task，这些Task被组织在一个叫做WorkQueue的队列中。</p>\n<p><img src=\"/img/160223_app_s5ep2/work_queue.png\" alt=\"\"></p>\n<p>加谷子的工作，交由另一个Thread进行——把专业的事情交给专业的角色去做。</p>\n<p><img src=\"/img/160223_app_s5ep2/other_thread_produces_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Android-Implementations\"><a href=\"#Android-Implementations\" class=\"headerlink\" title=\"Android Implementations\"></a>Android Implementations</h4><p>了解过上面的基本原理，我们看看Android中是如何实现这一机制的。</p>\n<p>首先是<code>Looper</code>，也就是上文中的<code>Worker Thread</code>，干活儿的线程。</p>\n<p>然后是<code>MessageQueue</code>，<code>Looper</code>在运行的过程中，会不断从<code>MessageQueue</code>里拉取任务执行。</p>\n<p><img src=\"/img/160223_app_s5ep2/looper.png\" alt=\"\"></p>\n<p><code>Handler</code>被用来向工作队列中添加任务</p>\n<p><img src=\"/img/160223_app_s5ep2/handler.png\" alt=\"\"></p>\n<p>每一个被添加的单元任务（<code>Unit of Work</code>），可以是Intent/runnable/message</p>\n<p><img src=\"/img/160223_app_s5ep2/unit_of_work.png\" alt=\"\"></p>\n<p>这样一整套系统，就构成了Android中很重要的Handler机制。注意到，在<code>Handler</code>之外还有一个<code>Handler Thread</code>，它用来处理Task执行结果。</p>\n<p><img src=\"/img/160223_app_s5ep2/handler_thread.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"When-An-App-Starts\"><a href=\"#When-An-App-Starts\" class=\"headerlink\" title=\"When An App Starts\"></a>When An App Starts</h4><p>当我们的App启动时，系统为它分配了一个单独的进程，并且启动了<code>MainThread</code>，<code>MainThread</code>本质上是一个<code>HandlerThread</code>，它有且只有一个<code>MainLooper</code>。</p>\n<p><img src=\"/img/160223_app_s5ep2/main_thread.png\" alt=\"\"></p>\n<p><code>MainThread</code>也是<code>UI Thread</code>，在它运行过程中几乎会处理一切操作（在ep1中已经提到过）</p>\n<ul>\n<li>系统消息（翻转手机，界面重新绘制）</li>\n<li>用户输入（下滑列表）</li>\n<li>其它应用传过来的信息</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep2/main_thread_does.png\" alt=\"\"></p>\n<p>要知道，<code>MainThread</code>一个很重要的任务是负责UI绘制，如果交给MainThread太多的任务，会影响每16ms一次的UI渲染，造成ANR。</p>\n<p><img src=\"/img/160223_app_s5ep2/main_thread_does_all.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Choose-Your-Tool-–-No-Silver-Bullet\"><a href=\"#Choose-Your-Tool-–-No-Silver-Bullet\" class=\"headerlink\" title=\"Choose Your Tool – No Silver Bullet\"></a>Choose Your Tool – No Silver Bullet</h4><ul>\n<li>AsyncTask：将任务切换到UI线程／非UI线程</li>\n<li>HandlerThread：当需要Callback时使用</li>\n<li>ThreadPool：执行更细化的单元任务</li>\n<li>IntentService：用以执行后台任务，或将Intent任务从UI线程中提取出来执行</li>\n</ul>\n<p><img src=\"/img/160223_app_s5ep2/sdk_tools.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Systrace\"><a href=\"#Systrace\" class=\"headerlink\" title=\"Systrace\"></a>Systrace</h4><p><a href=\"http://developer.android.com/tools/debugging/systrace.html\" target=\"_blank\" rel=\"noopener\">Systrace</a> 是SDK提供、用于查看CPU操作耗时的工具，当你在测试应用时发现了丢帧现象，需要深究原因的时候，可以通过Systrace获得一些有用的信息。</p>\n<p><img src=\"/img/160223_app_s5ep2/systrace.png\" alt=\"\"></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"Android Performance Patterns - s5ep1 Threading Performance 101","url":"http://lilei.work/2016/02/23/Android-Performance-Patterns-s5ep1-Threading-Performance-101/","content":"<blockquote>\n<p>Season 5 ep 1 介绍了Android系统中线程与UI渲染一些最基础的知识。<br><a href=\"https://www.youtube.com/watch?v=qk5F6Bxqhr4&amp;index=64&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a></p>\n</blockquote>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/qk5F6Bxqhr4?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" frameborder=\"0\" allowfullscreen></iframe>\n\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"Main-Thread\"><a href=\"#Main-Thread\" class=\"headerlink\" title=\"Main Thread\"></a>Main Thread</h4><p>主线程是Android中最重要的线程，承担了响应系统时间、处理输入、绘制UI等重要任务。</p>\n<p><img src=\"/img/160223_app_s5ep1/main_thread_work.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"UI-drawing-and-frame-dropping\"><a href=\"#UI-drawing-and-frame-dropping\" class=\"headerlink\" title=\"UI drawing and frame dropping\"></a>UI drawing and frame dropping</h4><p>出于简化的考虑，android系统将大部分任务都放在了主线程中进行。然而其中一个任务是与其它有所不同的 —— UI 渲染。因为UI渲染一旦出现卡顿，用户会立刻感知到ANR，极不友好。下面我们模拟一个输入并处理的过程，看一下冗长的操作是如何阻塞UI绘制的。</p>\n<p>My Awesome Code!!!</p>\n<p><img src=\"/img/160223_app_s5ep1/input_event.png\" alt=\"\"></p>\n<p>人眼能感知的流畅UI界面必须保持在60fps，意味着每16ms就要有一次绘制完成。</p>\n<p><img src=\"/img/160223_app_s5ep1/60_frames.png\" alt=\"\"></p>\n<p>一旦主线程被某个操作阻塞超过了16ms，势必会丢掉（至少）一次绘制，这就是 dropping frame。</p>\n<p><img src=\"/img/160223_app_s5ep1/dropping_frame.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Solve-frame-dropping\"><a href=\"#Solve-frame-dropping\" class=\"headerlink\" title=\"Solve frame dropping\"></a>Solve frame dropping</h4><p>解决上述问题的思路很简单：既然主线程必须保证流畅运行，那我们就在自己的<code>worker thread</code>里处理这些恼人的<code>Lame Work</code>（瘸腿工作）好了。</p>\n<p><img src=\"/img/160223_app_s5ep1/worker_thread.png\" alt=\"\"></p>\n<p>我们可以直接使用以下几种由系统提供的解决方案，注意它们不同的应用场景。</p>\n<p><img src=\"/img/160223_app_s5ep1/sdk_tools.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Be-Careful\"><a href=\"#Be-Careful\" class=\"headerlink\" title=\"Be Careful!\"></a>Be Careful!</h4><p>当你决定使用内部类来完成上述操作时，一定要注意这可能引起内存泄漏！因为非静态内部类实例会保存外部类的引用，而在移动系统这种内存有限的设备上，内存泄漏是非常可怕的。</p>\n<p><img src=\"/img/160223_app_s5ep1/inner_class.png\" alt=\"\"></p>\n<p>一个解决方案是用静态内部类替代，并且内部以WeakReference保存Activity的引用。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"乔-韦德健美训练法则","url":"http://lilei.work/2016/02/19/乔-韦德健美训练法则/","content":"<blockquote>\n<p>乔·韦德，男，1922年出生，加拿大裔健美冠军，被称为“健美冠军之父”、“现代健美之父”，他曾创办了韦德运动器材公司，是《肌肉与健美》、《形体美》和《男子健康》等健美杂志主编，开创了当今最具影响力和最高水准的职业健美比赛——“奥林匹亚先生”大赛，并设立了高额奖金。他是阿诺德·施瓦辛格的恩师，开创了乔·韦德训练法则，推动了世界健美运动的发展。</p>\n</blockquote>\n<p><img src=\"/img/160219_joe_weider/joe-weider.jpg\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>在笔者看来，韦德的成功之处，不仅仅在于他是一个优秀的bodybuilder，更是因为他推广了健身健美的训练法则、创办了举世闻名的奥赛、并且培育了施瓦辛格这样伟大的健美者，不得不提的是，韦德是一位成功的商人。</p>\n<p>韦德健美训练法则共32条，分为初、中、高级三个阶段，仔细阅读，科学训练，定会受益无穷。</p>\n<hr>\n<h2 id=\"入门须知\"><a href=\"#入门须知\" class=\"headerlink\" title=\"入门须知\"></a>入门须知</h2><h4 id=\"器械须知\"><a href=\"#器械须知\" class=\"headerlink\" title=\"器械须知\"></a>器械须知</h4><ol>\n<li>全套家庭健身器械包括：卧推凳、腹肌板、杠铃和哑铃各一副。可以按个人条件配置其它器械。</li>\n</ol>\n<h4 id=\"服装须知\"><a href=\"#服装须知\" class=\"headerlink\" title=\"服装须知\"></a>服装须知</h4><ol>\n<li>宽松舒适，不会妨碍动作（务必要穿比较舒适的内裤）；</li>\n<li>保证适宜的体温；</li>\n<li>最好穿鞋，保护踝关节；</li>\n<li>进行负重训练时，为了保护腰背部位，腰间最好扎上举重皮带；</li>\n</ol>\n<h4 id=\"锻炼须知\"><a href=\"#锻炼须知\" class=\"headerlink\" title=\"锻炼须知\"></a>锻炼须知</h4><ol>\n<li>渐进增重。初练者可从25％-30％最大重量开始进行训练。</li>\n<li>注意动作的规范性和节奏感。每个动作要使肌肉充分伸展和彻底收缩，不能用借力的方法进行练习。在有一定经验后，初练者可开始在最后一组或最后几次练习中，对该肌肉采用助力的方法。在每个动作中都要集中精神，有助于调动更多的肌纤维参加用力。</li>\n<li>注意姿势。在负重练习中，要保持两边重量的平衡，两眼平视，两脚自然开立，身体上下移动过程中始终保持头部正直。</li>\n<li>控制动作速率。在训练中，每组间间歇时间是60-90秒，可以保持体温，避免肌肉伤害，还能使大量血液集中到肌肉中去。做动作时，上举和放下的速度必须缓慢，且有节奏。若举起时间为2-3秒，则放下时间为4秒。掌握了正确的技术动作后，可适当加快动作。</li>\n<li>为了减轻肌肉酸痛，在训练中要穿足够的衣服以使身体保持适宜的体温，并在训练后洗温水浴，用橡胶皮肤刷按摩全身。</li>\n<li>呼吸特别重要。通常当用力时呼气，在放松还原时吸气；胸腔被扩大时吸气，胸腔受压时呼气。</li>\n<li>补充高质量的蛋白质、维生素、矿物质和不经过精炼的碳水化合物（粗粮）；</li>\n<li>饮大量的纯开水（每天至少12-16杯容量为30毫升的水）；</li>\n<li>持之以恒；</li>\n</ol>\n<h4 id=\"计划须知\"><a href=\"#计划须知\" class=\"headerlink\" title=\"计划须知\"></a>计划须知</h4><ol>\n<li>保证足够的睡眠和休息，晚上睡眠时间约为6-10小时，有条件最好白天小睡一会儿；</li>\n<li>最初阶段每周练三天，每隔一天锻炼一次；</li>\n<li>最好的训练时间是日常学习和工作之余，且精力最佳时，尽量安排在每天同一时间锻炼；</li>\n<li>制订课程计划时必须考虑对有缺陷部位的突出训练，但不提倡偏练有缺陷部位。初练者应按课程内容训练至少六个月，绝不能在初练的六个月内安排重点部位的突出训练。</li>\n</ol>\n<h4 id=\"练习次数\"><a href=\"#练习次数\" class=\"headerlink\" title=\"练习次数\"></a>练习次数</h4><ol>\n<li>低次数（1-5次）：主要增长体力和力量；</li>\n<li>中次数（8-12次）：主要增长肌肉块、线条和耐力；</li>\n<li>高次数（15次以上）：主要增强肌肉耐力、线条和减缩肌肉块；</li>\n<li>如果做较高次数（20次以上）并采用一种连续的循环训练，组与组织间没有休息，还可以增强心脏和呼吸系统的功能。</li>\n</ol>\n<h4 id=\"精神因素\"><a href=\"#精神因素\" class=\"headerlink\" title=\"精神因素\"></a>精神因素</h4><ol>\n<li>训练时集中精力，排除杂念。平时在脑海里塑造体型，并为之努力，保持愉快的心情。</li>\n</ol>\n<h4 id=\"训练伴侣\"><a href=\"#训练伴侣\" class=\"headerlink\" title=\"训练伴侣\"></a>训练伴侣</h4><ol>\n<li>依个人爱好，选择是否要伴侣或谁做伴侣。</li>\n</ol>\n<h4 id=\"本能训练－跟着感觉走\"><a href=\"#本能训练－跟着感觉走\" class=\"headerlink\" title=\"本能训练－跟着感觉走\"></a>本能训练－跟着感觉走</h4><ol>\n<li>重视自身的身体感觉，在体能允许的情况下，充分满足自身的愿望，但不要有懒惰和训练过度。这样有利于保持自己较高的情绪水平。</li>\n</ol>\n<hr>\n<h2 id=\"初级篇\"><a href=\"#初级篇\" class=\"headerlink\" title=\"初级篇\"></a>初级篇</h2><ol>\n<li><p><strong>渐增超负荷训练原则 （Progressive Overload Training Principle）</strong></p>\n<ul>\n<li>使肌肉逐渐增加负荷，并让肌肉受到更强烈的训练是增强任何身体素质（力量、肌肉围度、耐久力等）的基础。如：要增长力量，就必须使用较大的重量；若增加肌肉围度，不仅要采用越来越重的负荷，还要增加训练组数和每周的训练次数；如要增加局部肌肉的耐久力，就要逐渐减少组与组之间的间歇时间或增加训练组数和训练次数。一切都要逐渐增长。超负荷训练是所有体型训练法的基础。</li>\n<li>注：通常在超力量或大强度训练中使用。</li>\n</ul>\n</li>\n<li><p><strong>多组数训练原则 （Set System Training Principle）</strong></p>\n<ul>\n<li>多组数训练原则（有时每个动作最多3-4组），以便使每个肌肉群都能完全彻底地得到锻炼，并达到最大限度的肌肉膨胀。</li>\n<li>注：不同的训练课程中，要更具自己的体力情况和所锻炼的部位的强弱情况安排合适的训练组数。</li>\n</ul>\n</li>\n<li><p><strong>孤立训练原则（Isolation Training Principle）</strong></p>\n<ul>\n<li>不同的肌肉群可以一起练或相对地各自单独分开训练。在完成动作过程中，每一块肌肉都有它们各自的用力特点，但总有某肌肉群是主要用力的，其它肌肉起着协同作用或相对关节的固定作用，或对抗作用。如果您要最大限度地单独发展某一部位的肌肉，就要尽可能使主要用力的肌肉与其它肌肉的活动分开。可按解剖位置进行变换，如斯高特（斜托）弯举对臂部的屈肌锻炼就比用窄握重锤下拉的效果要好。</li>\n<li>注：适合于在需要重点发展的肌肉训练中使用。</li>\n</ul>\n</li>\n<li><p><strong>肌肉全面训练原则（Muscle Priority Training Principle）</strong></p>\n<ul>\n<li>要使肌肉不断地增长，就不能采用某个固定不变的锻炼课程。如果固定采用相同的动作、组数、次数和角度，就不能使肌肉获得全面的强度刺激以使肌肉增长。</li>\n<li>注：适合在平时的训练课程中使用。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"中级篇\"><a href=\"#中级篇\" class=\"headerlink\" title=\"中级篇\"></a>中级篇</h2><ol start=\"5\">\n<li><p><strong>重点肌肉优先训练原则（Muscle Priority Training Principle）</strong></p>\n<ul>\n<li>薄弱部位的锻炼应在训练课刚开始体力最旺盛、精力最充沛的时候进行，以承受最大的刺激强度和运动量。</li>\n<li>注：适合在每次训练课所需重点训练的肌肉。</li>\n</ul>\n</li>\n<li><p><strong>金字塔训练原则(Pyramiding Training Principle)</strong></p>\n<ul>\n<li>肌肉纤维的增长与力量的增长是阻力训练的结果。理论上来讲，如果在一个动作中能用最大的重量做8次，并能做几组，那么对增长体围和力量有很大效果。但没做热身活动就用大重量来练，会有潜在的危险。因此应从极小重量开始逐渐地增大负荷重量。金字塔训练法就是解决这个问题。如：开始用60％最大重量做15次，然后再增加重量，试做10-12次，最后加重到80％，最多做5-6次，会获得很好的效果，避免受伤。</li>\n<li>注：适用于平时的训练课程，或超量训练课程。</li>\n</ul>\n</li>\n<li><p><strong>分化训练原则（Split System Training Principle）</strong></p>\n<ul>\n<li>当连续三个月的每星期三次训练以后，就可以进行超强度训练。可以把全身分成上身和下身两部分来训练，每个部分可以增加动作和训练组数，这样每个部分肌肉就可以得到更多的锻炼。分化训练方法是：把一个星期的第一次训练课先安排锻炼上身的8个动作，采用超强度的训练；在当天的第二次训练课中只做下身的6-8个动作，采取同样的超强度训练。如果采用每周练三天的方法，同一次训练课中同时练上身和下身，肌肉的刺激强度就很难上去。分化训练对每个部位肌肉的锻炼强度会更大，时间会更长。</li>\n<li>注：适用于平时训练阶段，或增长肌肉块的训练课中。</li>\n</ul>\n</li>\n<li><p><strong>局部集中训练原则（Flushing Training Principle）</strong></p>\n<ul>\n<li>训练中必须使大量血液集中到被锻炼的肌肉中去，才能使肌肉更好地增长。如：在锻炼胸部时，课程中安排的3-4个动作要连续进行，中间不插入锻炼其它部位肌肉的动作，不断地使血液集中到这个部位，从而达到局部肌肉充分膨胀的状态。</li>\n<li>注：适合于重点发展或强化某块肌肉时使用。</li>\n</ul>\n</li>\n<li><p><strong>双组合训练原则（Supersets Training Principle）</strong></p>\n<ul>\n<li>这是韦德最著名的训练原则之一。几把两个功能相对应的肌肉群结合在一起锻炼。如，把锻炼肱二头肌的弯举和锻炼肱三头肌的臂屈伸结合起来就是一个双组合训练。双组合是把两个功能相对应的单块肌肉的动作轮流地练，一个动作练一组，组与组之间只允许有极少的间歇时间或不休息，是神经系统处于集中刺激状态。</li>\n<li>注：适合于集中锻炼某部位肌肉或减脂时使用。</li>\n</ul>\n</li>\n<li><p><strong>复合组数训练原则（Compound Sets Training Principle）</strong></p>\n<ul>\n<li>同一部位的肌肉群的双组合训练（如连续两个练肱二头肌的动作成为一个复合组数训练），即在局部肌肉还没恢复时，使其连续进行超强度刺激。</li>\n<li>注：对赛前减脂或加大某锻炼部位的肌肉强度效果较好。</li>\n</ul>\n</li>\n<li><p><strong>综合训练原则（Holistic Training Principle）</strong></p>\n<ul>\n<li>经不同方式使不同部位肌肉细胞的蛋白质和热能产生不同反应。当肌肉纤维遇到较大阻力负荷时，肌肉纤维就会增大，即经过不同角度的阻力负荷能促使整块肌肉的细胞增大。因此，必须采用各种不同的动作和训练次数。</li>\n<li>注：更适合于集中对某块重点肌肉的突击训练，但不宜长期使用。</li>\n</ul>\n</li>\n<li><p><strong>循环训练原则(Cycle Training Principle)</strong></p>\n<ul>\n<li>在全年训练中的某一时期，训练课程可集中安排增长肌肉块和力量，而另一时期安排以减轻负荷、增加试举次数、缩短间歇时间（优质训练）为主。可避免机能受伤并保持训练效果的稳步提高。</li>\n<li>注：适用于减脂或提高心血管系统的功能水平。</li>\n</ul>\n</li>\n<li><p><strong>静力紧张训练原则(ISO-Tension Training Principle)</strong></p>\n<ul>\n<li>静力紧张是韦德最被公认的训练原则之一。静力紧张用于肌肉控制，即把肌肉收缩到极点，保持静止控制3-6秒，重复做3次。这种训练能提高神经系统对肌肉的控制能力，可使在比赛中表现各种造型姿势时，分别控制各部位肌肉，以使肌肉线条更加清晰和突出。</li>\n<li>注：适用于动作造型的训练。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"高级篇\"><a href=\"#高级篇\" class=\"headerlink\" title=\"高级篇\"></a>高级篇</h2><ol start=\"14\">\n<li><p><strong>助力训练原则(Cheating Training Principle)</strong></p>\n<ul>\n<li>借助其它肌肉的力量完成动作练习的最后1-2次，或利用身体其它部位来协助在运动中的肌肉完成最后试举。如：俯立弯举做到最后几次试举感到很难完成时用另一只手轻微托住手背在完成几次。但如在做仰卧推举时，采用背和臀部离开凳面的力量来多完成几次，就不是韦德助力训练原则了。</li>\n<li>注：适用于对某块重点肌肉的超强度训练。</li>\n</ul>\n</li>\n<li><p><strong>三组合训练原则(Tri-Sets Training Principle)</strong></p>\n<ul>\n<li>同一块肌肉采用三个不同的动作锻炼，且动作之间没有休息。该方法对增加血管中血流量很有效。</li>\n<li>注：适用于对某块重点肌肉的超强度和减脂训练。</li>\n</ul>\n</li>\n<li><p><strong>超组合训练原则(Giant Sets Training Principle)</strong></p>\n<ul>\n<li>同一肌肉群采用4-6种动作锻炼，动作间歇很短或没有。</li>\n<li>注：适用于减脂训练和提高肌肉耐力训练。</li>\n</ul>\n</li>\n<li><p><strong>预热训练原则(Pre-Exhaustion Training Principle)</strong></p>\n<ul>\n<li>在锻炼某块肌肉时，开始先采用孤立动作练习，然后立刻用双组合训练进行正常训练。</li>\n<li>注：通常用于训练课程的开始阶段或某块肌肉的开始训练之前。</li>\n</ul>\n</li>\n<li><p><strong>停息训练原则(Rest-Pause Training Principle)</strong></p>\n<ul>\n<li>用最大重量试举时，每次都试举到极限次数，然后停息一会儿，再接着试举。第一次停息可为30-45秒，以后每次增加30秒。这是增长力量和肌肉围度的好方法。</li>\n<li>注：适用于增长力量的练习。</li>\n</ul>\n</li>\n<li><p><strong>顶峰收缩训练原则(Peak Contraction Training Principle)</strong></p>\n<ul>\n<li>顶峰收缩是指肌肉达到完全收缩时使活动的肌肉处于最紧张的收缩状态。肌肉完全收缩时若没有锁定这个重量，肌肉会出现松弛现象。为了避免这一现象，在肌肉收缩到最紧张的位置时，应给予一定的减阻力。如，做哑铃弯举到最高点时，把躯干稍向前倾，让上臂处于重力的垂线之外，就会锁定重量，使肌肉处于彻底收紧状态。这种训练课使肌肉增大且肌纹分割线清晰。</li>\n<li>注：适合于所有动作练习中肌肉收缩至极限时采用。</li>\n</ul>\n</li>\n<li><p><strong>持续紧张训练原则(Continuous Tension Training Principle)</strong></p>\n<ul>\n<li>在整个动作过程中，动作要做得慢些，使肌肉能逐渐收缩，始终保持紧张的收缩状态。</li>\n<li>注：适用于平时训练中增长肌肉的最后几组训练，或提高肌肉耐力训练。</li>\n</ul>\n</li>\n<li><p><strong>抗重力训练原则(Reverse-Gravity Training Principle)</strong></p>\n<ul>\n<li>举起重物后放下时，用力抵抗下降重物，进行退让性练习，是让已收缩的肌肉被动拉长的动作，对肌肉刺激更强烈，有利于增大肌肉，增加力量。因为这种方法强度很大，在训练中不宜经常使用。运动负荷安排要注意以下几点：</li>\n<li>强度：采用90％-120％最大重量。</li>\n<li>组数：较少，通常为4±2组。</li>\n<li>次数：较少，通常做2-3次。</li>\n<li>时间：6-8秒。</li>\n<li>速度：慢。</li>\n<li>这种训练方法也可用于发展薄弱环节，强迫促使其平衡发展。</li>\n<li>注：通常在平时的训练周期中发展力量或超强度刺激被锻炼的肌肉</li>\n</ul>\n</li>\n<li><p><strong>强迫次数训练原则(Forced Reps Training Principle)</strong></p>\n<ul>\n<li>当举至力竭时，由同伴稍加助力再做2-3次的强迫次数，但助力只在举起的开始阶段，接下来把杠铃举至两臂伸直就应该依靠自己的力量。</li>\n<li>注：通常在平时训练周期对所重点发展肌肉的最后1-2组的最后几次推举中使用，不宜整个训练课程的每组推举都采用。</li>\n</ul>\n</li>\n<li><p><strong>双分化训练原则(Double-Split Training Principle)</strong></p>\n<ul>\n<li>高级健美运动员为提高总负荷，又不至于过度训练，将总负荷量一分为二，上午练1-2个部位，下午练另外1-2个部位。有利于精力更集中，采用更大的重量和组数。</li>\n<li>注：适用于时间不能保证的锻炼者，或赛前减脂。</li>\n</ul>\n</li>\n<li><p><strong>三分化训练原则(Triple-Split Training Principle)</strong></p>\n<ul>\n<li>少数健美运动员有惊人的恢复能力，根据双分化原理，一天练三次。</li>\n<li>注：适用于具有很好体力的高级健美运动员的赛前减脂。</li>\n</ul>\n</li>\n<li><p><strong>膨胀训练原则(Burns Training Principle)</strong></p>\n<ul>\n<li>在正常训练的最后一次试举时再做2-3次半程的练习，是正在活动 的肌肉进入更多的血液并产生超量的乳酸，引起肌肉发胀感觉。这种感觉是由于局部动作时更多的血液进入肌肉中引起的毛细血管膨胀，有助于增加肌肉围度和肌肉中毛细血管的增粗。</li>\n<li>注：适用于训练课程中的重点肌肉训练，不宜经常使用。</li>\n</ul>\n</li>\n<li><p><strong>优化训练原则(Quality Training Principle)</strong></p>\n<ul>\n<li>按规定的组数和次数进行锻炼时，逐渐减少组间间歇时间。</li>\n<li>注：适用于赛前提高肌肉质量或减脂训练。</li>\n</ul>\n</li>\n<li><p><strong>递减训练原则(Descending Sets Training Principle)</strong></p>\n<ul>\n<li>采用由重到轻的逐降重量的方法，需要有两个训练伙伴帮助，当采用一定重量完成规定的次数时，有两旁的伙伴立即从两端各取下一片杠铃；继续举到力竭时，在各取下一片，再举几次，直至没有杠铃片为止。此法的训练强度很大，每次训练课不超过1-2<br>个动作。</li>\n<li>注：适用于在平时训练周期的训练课中需要重点发展的大肌肉。</li>\n</ul>\n</li>\n<li><p><strong>本能训练原则(Instinctive Training Principle)</strong></p>\n<ul>\n<li>根据自己的感觉安排动作、组数和次数、饮食营养及训练计划。有利于充分发挥自己的潜能。</li>\n<li>注：适用于不同训练周期的不同训练课程。</li>\n</ul>\n</li>\n<li><p><strong>兼顾训练原则(Eclectic Training Principle)</strong></p>\n<ul>\n<li>把大肌肉群的发展和肌肉孤立训练结合起来，即为发展某主要肌肉块，把相应的大肌肉群训练动作和局部肌肉训练动作放到同一课程中，并于本能训练原则结合起来，是力量、形体、肌肉块增强到最大限度。</li>\n<li>注：适用于平时训练周期的调整训练。</li>\n</ul>\n</li>\n<li><p><strong>粘点训练原则(Partial Reps Training Principle)</strong></p>\n<ul>\n<li>粘点指在做某组动作到力竭时，肌肉不能再收缩出现的粘滞状态。不同肌肉做不同动作出现粘点的时间和位置不一样。一般做徒手动作很难出现粘点，对肌肉力量的增长效果不大，故给徒手动作增加负重能取得很好的效果。对于高级健美运动员来说，采用粘点训练方法克服薄弱环节能取得最大效果。</li>\n<li>注：适用于平时训练周期的发展力量训练课程。</li>\n</ul>\n</li>\n<li><p><strong>快速原则(Speed Principle)</strong></p>\n<ul>\n<li>一般健美训练中的组数和次数使用要严格掌握要点，使局部肌肉感到完全收缩才能达到最好的训练效果。而采用大重量训练是增长围度的好方法，快速原则能使训练更加完美。快速原则必须有高级训练阶段的技术基础，结合大重量训练同时进行（超过75％~80％重量），且动作决不能变形，或助力。快速原则最好是在平时训练周期集中增长力量和肌肉围度的早期使用。</li>\n<li>注：通常在发展力量训练课程或减脂训练课程中使用。</li>\n</ul>\n</li>\n<li><p><strong>交叉训练原则(Staggered Sets principle)</strong></p>\n<ul>\n<li>是优先训练原则的一种高级形式。把较小且发展较慢部位的肌肉穿插在重点要练的大肌肉群中练习，或贯穿在主要大肌肉群众锻炼。通常交叉训练的部位要求相隔较远，以免相互影响，前臂、颈部、小腿、斜方肌等都是采用交叉训练较好的候补部位。把交叉训练放在最前面连可以使精力更好地集中在最重要部位的肌肉群上。</li>\n<li>注：适用于具有较高训练水平且时间不足者，或赛前减脂者使用，但不宜经常使用。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":["健身"],"tags":["大保健"]},{"title":"Android Performance Patterns - 序言","url":"http://lilei.work/2016/02/18/Android-Performance-Patterns-序言/","content":"<hr>\n<p><strong>Android Performance Patterns</strong> 是 <strong>Android Developers</strong> 在youtube上发布的一系列Android性能优化小视频，每一部都不超过5分钟，目前为止发布到了Season 5，共73部。</p>\n<p><img src=\"../img/160218_app_preface/logo.png\" alt=\"\"></p>\n<h4 id=\"播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\"><a href=\"#播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\" class=\"headerlink\" title=\"播放列表地址：link（视频下方有字幕开关，你也可以点击键盘上的C键来操作字幕）\"></a>播放列表地址：<a href=\"https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"noopener\">link</a>（视频下方有字幕开关，你也可以点击键盘上的<code>C</code>键来操作字幕）</h4><hr>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><h3 id=\"Season-5\"><a href=\"#Season-5\" class=\"headerlink\" title=\"Season 5\"></a>Season 5</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th>链接</th>\n<th>标题</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep1-Threading-Performance-101\">s5ep1</a></td>\n<td>Threading Performance 101</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep2-Understanding-Android-Threading\">s5ep2</a></td>\n<td>Understand Android Threading</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep3-Memory-And-Threading\">s5ep3</a></td>\n<td>Memory &amp; Threading</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/23/Android-Performance-Patterns-s5ep4-Good-AsyncTask-Hunting\">s5ep4</a></td>\n<td>Good AsyncTask Hunting</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep5-Getting-A-HandlerThread\">s5ep5</a></td>\n<td>Getting a HandlerThread</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep6-Swimming-In-ThreadPools\">s5ep6</a></td>\n<td>Swimming in Threadpools</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/24/Android-Performance-Patterns-s5ep7-The-Zen-Of-IntentService\">s5ep7</a></td>\n<td>The Zen of IntentService</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep8-Threading-And-Loaders\">s5ep8</a></td>\n<td>Threading and Loaders</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep9-The-Importance-Of-Thread-Priority\">s5ep9</a></td>\n<td>The Importance of Thread Priority</td>\n</tr>\n<tr>\n<td><a href=\"../../../../2016/02/25/Android-Performance-Patterns-s5ep10-Profile-GPU-Rendering\">s5ep10</a></td>\n<td>Profile GPU Rendering : M Update</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","Android Performance Patterns"]},{"title":"ProGit读书笔记（Chapter3）","url":"http://lilei.work/2016/02/17/ProGit读书笔记Chapter3/","content":"<hr>\n<h3 id=\"Chapter-3-Git-Branching\"><a href=\"#Chapter-3-Git-Branching\" class=\"headerlink\" title=\"Chapter 3. Git Branching\"></a>Chapter 3. Git Branching</h3><p>本章讲解Git分支功能实现的基本原理、merge操作、rebase操作等等</p>\n<a id=\"more\"></a>\n<h4 id=\"基本思想：snapshot\"><a href=\"#基本思想：snapshot\" class=\"headerlink\" title=\"基本思想：snapshot\"></a>基本思想：snapshot</h4><p>首先要理解，不同于其它VCS，对于版本之间的提交，Git存储的不是diff，而是snapshot。对于下面这样一次commit，Git会生成5个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add README test.rb LICENSE</span><br><span class=\"line\">$ git commit -m <span class=\"string\">'The initial commit of my project'</span></span><br></pre></td></tr></table></figure>\n<p>生成一个树状结构：<code>98ca9</code>记录了本次commit的信息（committer、date、message等），并有一个指针，指向tree，tree中包含本次commit中改动的全部文件snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/commit-and-tree.png\" alt=\"\"></p>\n<blockquote>\n<p>A branch in Git is simply a lightweight movable pointer to one of these commits.</p>\n</blockquote>\n<p>这也就解释了为什么在Git中，创建、删除、切换分支的操作都很快速。</p>\n<h4 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h4><p>Git使用如下命令创建分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch testing</span><br></pre></td></tr></table></figure>\n<p>创建后的<code>testing</code>分支，跟<code>master</code>都指向同一个Snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/two-branches.png\" alt=\"\"></p>\n<p>那么Git如何知道当前你在编辑的是哪一个分支呢？用<code>HEAD</code>！例如，在上面的命令后，内部的分支是这样的</p>\n<p><img src=\"/img/160218_pro_git_c3/head-to-master.png\" alt=\"\"></p>\n<p>可以在<code>git log</code>中使用<code>--decorate</code>参数来观察当前<code>HEAD</code>分支。（这里推荐一下zsh，自动标示当前<code>HEAD</code>，非常方便）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --oneline --decorate</span><br><span class=\"line\">f30ab (HEAD -&gt; master, testing) add feature <span class=\"comment\">#32 - ability to add new formats to the central interface</span></span><br><span class=\"line\">34ac2 Fixed bug <span class=\"comment\">#1328 - stack overflow under certain conditions</span></span><br><span class=\"line\">98ca9 The initial commit of my project</span><br></pre></td></tr></table></figure>\n<h4 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h4><p>使用<code>git checkout [branch_name]</code>来切换分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/checkout-master.png\" alt=\"\"></p>\n<p>创建&amp;切换分支可以放在一个命令里完成：<code>git checkout -b [branch_name]</code>，作用是基于当前<code>HEAD</code>切出一个名为<code>branch_name</code>的新分支，并且将<code>HEAD</code>切换到该新分支上。</p>\n<h4 id=\"Basic-Branching-and-Merging\"><a href=\"#Basic-Branching-and-Merging\" class=\"headerlink\" title=\"Basic Branching and Merging\"></a>Basic Branching and Merging</h4><p>想象一个比较复杂的分支模型：当你开发某个功能时（iss53），突然线上基于master分支的代码爆出一个bug，此时必须要进行hotfix，并且在完成hotfix后，将hotfix的内容合并回master，最后再切换回iss53分之继续进行功能开发。</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-branching-4.png\" alt=\"\"></p>\n<p>怎样让master合并hotfix呢？切换回master分支，使用<code>git merge hotfix</code>来完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge hotfix</span><br><span class=\"line\">Updating f42c576..3a0874c</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> index.html | 2 ++</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br></pre></td></tr></table></figure>\n<p>看到<code>Fast-forward</code>的提示没有？这是说，master的指针已经“向前移动到了hotfix指针所在位置”，如下图：</p>\n<p> <img src=\"/img/160218_pro_git_c3/basic-branching-5.png\" alt=\"\"></p>\n<p>这个时候hotfix已经完成了它的任务，继续留着它只会让我们的分支更加混乱。本着兔死狗烹鸟尽弓藏的原则，杯酒释兵权～最后切换回iss53分支继续coding</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d hotfix</span><br><span class=\"line\">Deleted branch hotfix (3a0874c).</span><br><span class=\"line\">$ git checkout iss53</span><br><span class=\"line\">Switched to branch <span class=\"string\">\"iss53\"</span></span><br><span class=\"line\">$ vim index.html</span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">'finished the new footer [issue 53]'</span></span><br><span class=\"line\">[iss53 ad82d7a] finished the new footer [issue 53]</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/basic-branching-6.png\" alt=\"\"></p>\n<h4 id=\"Basic-Merging\"><a href=\"#Basic-Merging\" class=\"headerlink\" title=\"Basic Merging\"></a>Basic Merging</h4><p>现在我们完成了iss53的功能开发与测试，需要将代码合并回master，以备后续上线。当然，需要先切回master，然后使用<code>git merge</code>来合并<code>iss53</code>分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\">$ git merge iss53</span><br><span class=\"line\">Merge made by the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">index.html |    1 +</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>\n<p>合并前</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-merging-1.png\" alt=\"\"></p>\n<p>合并后</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-merging-2.png\" alt=\"\"></p>\n<p>从图上可以看出来，Git基于master与iss53的提交历史，新创建了一个commit－C6，图中此处有误，最右边master指向的应该为C6。惯例，卸磨杀驴。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$git</span> branch -d iss53</span><br></pre></td></tr></table></figure>\n<h4 id=\"Basic-Merge-Conflicts\"><a href=\"#Basic-Merge-Conflicts\" class=\"headerlink\" title=\"Basic Merge Conflicts\"></a>Basic Merge Conflicts</h4><p>在并行开发的过程中，经常会遇到两个开发者同时修改了一个文件，在合并时发生冲突的场景，比如下面这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git merge iss53</span><br><span class=\"line\">Auto-merging index.html</span><br><span class=\"line\">CONFLICT (content): Merge conflict <span class=\"keyword\">in</span> index.html</span><br><span class=\"line\">Automatic merge failed; fix conflicts and <span class=\"keyword\">then</span> commit the result.</span><br></pre></td></tr></table></figure>\n<p>使用<code>git status</code>查看当前合并进程与状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">  (fix conflicts and run <span class=\"string\">\"git commit\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &lt;file&gt;...\"</span> to mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">    both modified:      index.html</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n<p>原来是<code>index.html</code>被分别修改了2次，导致git无法自动合并。使用编辑器或者IDE打开这个文件后，能看到</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class=\"line\">=======</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"footer\"</span>&gt;</span><br><span class=\"line\"> please contact us at support@github.com</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span><br></pre></td></tr></table></figure>\n<p>Git用非常容易识别的方式标示有冲突的代码：<code>&lt;&lt;&lt;&lt;</code>和<code>====</code>之间的是HEAD的改动（也就是master），<code>====</code>和<code>&gt;&gt;&gt;&gt;</code>之间的是另一个分支（iss53）的改动，保留想保留的即可。</p>\n<p>如果喜欢图形化的界面，使用<code>git mergetool</code>来打开，Git默认的是<code>opendiff</code>。<br>修改完成后，文件处于<code>modified</code>状态，需要先用<code>add</code>将其变为<code>staged</code>，然后在commit中注明这次merge。</p>\n<h4 id=\"Branch-Management\"><a href=\"#Branch-Management\" class=\"headerlink\" title=\"Branch Management\"></a>Branch Management</h4><p>查看本地branch，使用<code>git branch</code>，增加<code>-r</code>参数以查看远端仓库branch，增加<code>-v</code>参数查看最新一次的commit</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch</span><br><span class=\"line\">  iss53</span><br><span class=\"line\">* master</span><br><span class=\"line\">  testing</span><br><span class=\"line\">$ git branch -v</span><br><span class=\"line\">  iss53   93b412c fix javascript issue</span><br><span class=\"line\">* master  7a98805 Merge branch <span class=\"string\">'iss53'</span></span><br><span class=\"line\">  testing 782fd34 add scott to the author list <span class=\"keyword\">in</span> the readmes</span><br></pre></td></tr></table></figure>\n<p>如果你想看哪些分支已经被merge进了HEAD中，用<code>--merged</code>，前面没有星号<code>*</code>的分支是可以用<code>git branch -d</code>删除的。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --merged</span><br><span class=\"line\">  iss53</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n<p>查看没有merge的分支，用<code>--no-merged</code>参数。对于这样的分支，当你试图使用<code>git branch -d</code>进行删除时，Git会给出提示，告诉你这样的操作不被允许。（你可以使用<code>git branch -D</code>来强制删除）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --no-merged</span><br><span class=\"line\">  testing</span><br><span class=\"line\">$ git branch -d testing</span><br><span class=\"line\">error: The branch <span class=\"string\">'testing'</span> is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run <span class=\"string\">'git branch -D testing'</span>.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Remote-Branches\"><a href=\"#Remote-Branches\" class=\"headerlink\" title=\"Remote Branches\"></a>Remote Branches</h4><p>对于远端仓库的每一个分支，本地都有一个与其对应的分支，用<code>(remote)/(branch)</code>来表示，比如<code>origin/master</code>。通常我们看到remote的名字是origin，但这不是固定的，你可以用以下命令来更改这个名字<code>git clone -o booyah</code>，这样你创建的就是<code>booyah/master</code>。<br>最开始clone并checkout时，<code>origin/master</code>与<code>master</code>指向同一个snapshot</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-1.png\" alt=\"\"></p>\n<p>只要不fetch，<code>origin/master</code>指向的位置就不会变更，<code>master</code>分支会随着commit一直向前。</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-2.png\" alt=\"\"></p>\n<p>也可以把两个remote的历史都拉下来，酌情使用</p>\n<p><img src=\"/img/160218_pro_git_c3/remote-branches-5.png\" alt=\"\"></p>\n<h4 id=\"Pushing\"><a href=\"#Pushing\" class=\"headerlink\" title=\"Pushing\"></a>Pushing</h4><p>使用<code>git push &lt;remote&gt; &lt;branch&gt;</code>来push到远端仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin serverfix</span><br><span class=\"line\">Counting objects: 24, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (15/15), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 24 (delta 2), reused 0 (delta 0)</span><br><span class=\"line\">To https://github.com/schacon/simplegit</span><br><span class=\"line\"> * [new branch]      serverfix &gt; serverfix</span><br></pre></td></tr></table></figure>\n<p>这其实是一个缩写，背后完整的命令是<code>git push origin refs/heads/serverfix:refs/heads/serverfix</code>，直接引用原文</p>\n<blockquote>\n<p>which means, “Take my serverfix local branch and push it to update the remote’s serverfix branch.”</p>\n</blockquote>\n<p>分支名前面的<code>refs/heads</code>是Git内部机制，你也可以省略这个路径，写作<code>serverfix:serverfix</code>，或者你觉得在remote端不希望叫serverfix的名字，那就改一个你喜欢的！<code>git push origin serverfix:awesomebranch</code></p>\n<p>使用<code>git checkout -b &lt;branch_name&gt; &lt;remote&gt;/&lt;branch_name&gt;</code>来创建一个基于远端的本地分支，这种分支被叫做<code>tracking branch</code>，被跟踪的那个远端branch叫做<code>upstream branch</code>。有了这层关系在里面，当你进行<code>pull/push</code>时，Git就自然知道要操作哪一个分支了。</p>\n<p>由于<code>git checkout -b &lt;branch_name&gt; &lt;remote&gt;/&lt;branch_name&gt;</code>实在是太常用了，Git为它提供了一个缩写<code>git checkout --track &lt;remote&gt;/&lt;branch&gt;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --track origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p>甚至，Git提供了一个缩写的缩写：<code>git checkout &lt;branch&gt;</code>，这个命令要求本地分支与远程分支保持名字一致。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p>如果尚未给本地的一个分支指定远端分支，使用<code>-u</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -u origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure>\n<p>小技巧：可以用<code>{@u}</code>或者<code>@{upstream}</code>来代替upstream，比如当你处在master分支时，可以用<code>git merge @{u}</code>来代替<code>git merge origin/master</code></p>\n<p>如果你想了解本地分支的track情况（分支、ahead、behind），使用<code>git branch -vv</code>，记得先<code>git fetch --all</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -vv</span><br><span class=\"line\">  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class=\"line\">  master    1ae2a45 [origin/master] deploying index fix</span><br><span class=\"line\">* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should <span class=\"keyword\">do</span> it</span><br><span class=\"line\">  testing   5ea463a trying something new</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pulling\"><a href=\"#Pulling\" class=\"headerlink\" title=\"Pulling\"></a>Pulling</h4><p>相比于<code>fetch</code>把远端分支更新到本地，<code>pull</code>命令更进了一步，完成了<code>merge</code>的功能。<br>pull = fetch + merge。笔者赞同书中的观点，还是单独使用fetch&amp;merge的好。</p>\n<blockquote>\n<p>Generally it’s better to simply use the <code>fetch</code> and <code>merge</code> commands explicitly as the magic of <code>git pull</code> can often be confusing.</p>\n</blockquote>\n<h4 id=\"Deleting-Remote-Branches\"><a href=\"#Deleting-Remote-Branches\" class=\"headerlink\" title=\"Deleting Remote Branches\"></a>Deleting Remote Branches</h4><p>使用<code>git push origin --delete &lt;branch_name&gt;</code>来删除服务器上的某个分支</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --delete serverfix</span><br><span class=\"line\">To https://github.com/schacon/simplegit</span><br><span class=\"line\"> - [deleted]         serverfix</span><br></pre></td></tr></table></figure>\n<p> 还有一种写法，<code>git push origin :&lt;branch_name&gt;</code>，能起到同样的作用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin :feature/8.0.0_bugfix_leili</span><br><span class=\"line\">To git@code.dianpingoa.com:mobile/android-nova-booking.git</span><br><span class=\"line\"> - [deleted]         feature/8.0.0_bugfix_leili</span><br></pre></td></tr></table></figure>\n<p>记住，所删除的“分支”本质上只是“指针”，所有的代码snapshot依旧保存在服务器上，可以随时check出来</p>\n<h4 id=\"Rebasing\"><a href=\"#Rebasing\" class=\"headerlink\" title=\"Rebasing\"></a>Rebasing</h4><p>接下来我们来学习与Merge分庭抗礼的另一个强有力的功能——Rebase。两者同是将不同分支上的提交合并到一起的功能，它们之间的区别是什么样的呢？容笔者细细道来。<br>首先来看一个熟悉的场景，有<code>master</code>和<code>experiment</code>两个分支，对merge而言，如果在<code>master</code>分支的基础上，对<code>experiment</code>进行merge，Git会创建一个新的commit（C5），包含了两个分支最近的共同祖先（C2）以来发生的所有变更（C4和C3），最后把<code>master</code>的指针指向C5</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-1.png\" alt=\"\"><br><img src=\"/img/160218_pro_git_c3/basic-rebase-2.png\" alt=\"\"></p>\n<p>而对于rebase，我们这么操作。注意<code>HEAD</code>指向的是<code>experiment</code>分支。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout experiment</span><br><span class=\"line\">$ git rebase master</span><br><span class=\"line\">First, rewinding head to replay your work on top of it...</span><br><span class=\"line\">Applying: added staged <span class=\"built_in\">command</span></span><br></pre></td></tr></table></figure>\n<p>非常神奇地，C4这个commit消失了！！！，取而代之，Git在C3后面创建了C4’，同时将<code>experiment</code>的指针转移到了这里。整个提交历史变成了一根直线，清爽了许多。</p>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-3.png\" alt=\"\"></p>\n<p>接下来，我们让<code>master</code>    move forward，以合并<code>experiment</code>带来的改动。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge experiment</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/160218_pro_git_c3/basic-rebase-4.png\" alt=\"\"></p>\n<p>注意！虽然<code>merge</code>与<code>rebase</code>看起来都是把两个分支上的改动合并到一起，但一个是“同时合并A和B”，一个是“将A合并到B”，仔细体会其中的不同。</p>\n<blockquote>\n<p>Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</p>\n</blockquote>\n<h4 id=\"有趣的Rebasing\"><a href=\"#有趣的Rebasing\" class=\"headerlink\" title=\"有趣的Rebasing\"></a>有趣的Rebasing</h4><p><img src=\"/img/160218_pro_git_c3/interesting-rebase-1.png\" alt=\"\"></p>\n<p>想象上面一个场景，对于<code>master</code> <code>server</code> <code>client</code>三个分支，如果我想要将<code>client</code>上的改动提交到<code>master</code>（C8和C9），而暂时不想合并<code>server</code>上的代码，应该怎么做？</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout cient</span><br><span class=\"line\">$ git rebase master</span><br></pre></td></tr></table></figure>\n<p>上述这样肯定不行，因为会把C3带过去。<br>针对这种场景，Git也为我们提供了这个功能</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase --onto master server client</span><br></pre></td></tr></table></figure>\n<p>是不是有点一头雾水？这都什么鬼啊！别急，我们来仔细看看这段指令。</p>\n<blockquote>\n<p>This basically says, “Check out the client branch, figure out the patches from the common ancestor of the <code>client</code> and <code>server</code> branches, and then replay them onto <code>master</code>.” </p>\n</blockquote>\n<p>明白了吧！不过，虽然这看上去很神奇，笔者可不希望在实际的工作中碰到这种复杂的场景。<br>Rebase后的提交历史如图：</p>\n<p><img src=\"/img/160218_pro_git_c3/interesting-rebase-1.png\" alt=\"\"></p>\n<p>接下来该怎么做，相信不用我说，你也知道了——把<code>master</code> fast forward过去～</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">$ git merge client</span><br></pre></td></tr></table></figure>\n<p>当你完成了<code>server</code>分支的开发，狠狠地用rebase把它甩在<code>master</code>脸上吧，<code>git rebase [basebranch] [topicbranch]</code>——将<code>topicbranch上</code>的改动在<code>basebranch</code>上重放（checks out the topic branch (in this case, <code>server</code>) for you and replays it onto the base branch (<code>master</code>)）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase master server</span><br></pre></td></tr></table></figure>\n<p>删除无用分支后，最终得到一个无比清爽的提交记录</p>\n<p><img src=\"/img/160218_pro_git_c3/interesting-rebase-5.png\" alt=\"\"></p>\n<h4 id=\"Rebase的风险\"><a href=\"#Rebase的风险\" class=\"headerlink\" title=\"Rebase的风险\"></a>Rebase的风险</h4><p>Rebase是一个无比强大的工具，借助它，我们可以将项目提交历史梳理成一条直线，然而，如果应用不当，它产生的麻烦要远远大于带来的好处。</p>\n<blockquote>\n<p><strong>Do not rebase commits that exist outside your repository.</strong></p>\n</blockquote>\n<p>简单的说，如果一个commit已经被公布给其他人使用，那就不要试图再rebase它。如果你遵守了这条准则，一切安好；可一旦你违反了他，你的同事将会恨你入骨……下面用几张图来说明这种深刻仇恨的来源</p>\n<p>首先是一个简单的分支模型，teamone和你正在合作中，显然你的工作效率更高些，已经提交了C2、C3两次</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-1.png\" alt=\"\"></p>\n<p>远端仓库也有一些更新，而且他们用到了merge，真是厉害啊！你当然不甘示弱，立即把他们的提交merge了过来。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-2.png\" alt=\"\"></p>\n<p>这时，远端team发现merge不如rebase好用，他们使用非常邪恶的<code>git push --force</code>命令，覆盖掉了代码仓库中的历史，意图抹杀掉merge的出现。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-3.png\" alt=\"\"></p>\n<p>天真的你并没有发现他们的邪恶企图，当你fetch时候，发现远端仓库有了更新，你自然想再merge一把，以保持最新代码</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-4.png\" alt=\"\"></p>\n<p>Boom！灾难发生了，由于C4和C4’实际上是一模一样的改动（实际上，如果你用<code>git log</code>来查看，你会发现这两个提交甚至有完全相同的author、date、message，当然他们的SHA1是不同的）。而且，就算你解决了冲突，把你的代码推送回远端时，邪恶的他们发现，原来让他们避之不及的C4和C6这两个提交——They are back！</p>\n<h4 id=\"Rebase-When-You-Rebase\"><a href=\"#Rebase-When-You-Rebase\" class=\"headerlink\" title=\"Rebase When You Rebase\"></a>Rebase When You Rebase</h4><p>一旦出现了上面的情况，不要慌，Git为我们提供了解决这种问题的途径，那就是——Rebase！这时你checkout到自己的<code>master</code>分支上，执行<code>git rebase teamone/master</code>，Git会为你做以下事情（实在是懒得翻译了）</p>\n<ul>\n<li>Determine what work is unique to our branch (C2, C3, C4, C6, C7)</li>\n<li>Determine which are not merge commits (C2, C3, C4)</li>\n<li>Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4’)</li>\n<li>Apply those commits to the top of <code>teamone/master</code></li>\n</ul>\n<p>最后得到如图的提交历史。需要注意，只有当C4和C4’几乎完全一致时，Git才会采取以上策略。不然，即使如上操作，依然会产生冲突。</p>\n<p><img src=\"/img/160218_pro_git_c3/perils-of-rebasing-5.png\" alt=\"\"></p>\n<h4 id=\"Rebase-vs-Merge\"><a href=\"#Rebase-vs-Merge\" class=\"headerlink\" title=\"Rebase vs. Merge\"></a>Rebase vs. Merge</h4><p>关于Rebase和Merge该用哪个的问题，要因地制宜——Rebase可以极大简化提交历史，但它会篡改提交记录，而Merge可以原汁原味地保存每个人的提交时间与内容。应当记住，不论使用哪一个，都要按照基本法。</p>\n<blockquote>\n<p>In general the way to get the best of both worlds is to rebase local changes you’ve made but haven’t shared yet before you push them in order to clean up your story, but never rebase anything you’ve pushed somewhere.</p>\n</blockquote>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"ProGit读书笔记（Chapter2）","url":"http://lilei.work/2016/02/14/ProGit读书笔记Chapter2/","content":"<hr>\n<p>2016年春节前大概一周时间，忘了什么契机，忽然觉得自己用了Git这么久，一直处于一知半解的状态，而Git作为一个出色的VCS，自问世以来长盛不衰，一定有其道理。本着“不但要知其然，还要知其所以然”的态度，决定认真读一读《Pro Git》。<br>说来惭愧，组内最开始从Subversion迁移到Git时，一新就向大家推荐过这本书，当时自己简单翻了翻，由于有其他事情就耽搁下，一直没有再打开过。</p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"Chapter-2-Git-Basics\"><a href=\"#Chapter-2-Git-Basics\" class=\"headerlink\" title=\"Chapter 2. Git Basics\"></a>Chapter 2. Git Basics</h3><p>第二章主要讲了如何将一个文件添加进VCS、提交改动、历史查看、撤销操作、Tag。</p>\n<h4 id=\"文件状态\"><a href=\"#文件状态\" class=\"headerlink\" title=\"文件状态\"></a>文件状态</h4><p>Git中有四种文件状态，相互间转换关系见下图</p>\n<p><img src=\"/img/160217_pro_git_c2/lifecycle.png\" alt=\"\"></p>\n<ul>\n<li>使用Git时，要多多用<code>git status</code>来查看当前文件状态</li>\n<li>同一个文件是可以同时处于<code>modified</code>和<code>staged</code>两种状态的，试着edit-add-edit，你就会发现</li>\n<li><code>git status --short</code>可以用来查看更简短的文件状态描述，用处不大</li>\n</ul>\n<h4 id=\"gitignore\"><a href=\"#gitignore\" class=\"headerlink\" title=\".gitignore\"></a>.gitignore</h4><p>对于不想加入到版本控制中的文件（IDE生成文件、编译中间文件等），可以使用<code>.gitignore</code>来告诉Git系统，不需要关注这些文件。<br>gitignore的例子如下，以<code>#</code>开头的行是注释，会被Git忽略掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># no .a files</span><br><span class=\"line\">*.a</span><br><span class=\"line\"></span><br><span class=\"line\"># but do track lib.a, even though you&apos;re ignoring .a files above</span><br><span class=\"line\">!lib.a</span><br><span class=\"line\"></span><br><span class=\"line\"># only ignore the TODO file in the current directory, not subdir/TODO</span><br><span class=\"line\">/TODO</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore all files in the build/ directory</span><br><span class=\"line\">build/</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore doc/notes.txt, but not doc/server/arch.txt</span><br><span class=\"line\">doc/*.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># ignore all .pdf files in the doc/ directory</span><br><span class=\"line\">doc/**/*.pdf</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"git-diff\"><a href=\"#git-diff\" class=\"headerlink\" title=\"git diff\"></a>git diff</h4><p><code>git diff</code>用来查看进行的改动，控制台的输出不够直观，尤其是改动很多的时候。推荐使用GUI进行查看（需要在.gitconfig中进行配置，位置是<code>~/.gitconfig</code>），目前笔者在用的是DiffMerge，基本满足日常使用需求。</p>\n<ul>\n<li><code>git diff</code>用来查看<code>modified</code>的变更。</li>\n<li><code>git diff --cached</code>同<code>git diff --staged</code>作用一样，用来查看<code>staged</code>的变更</li>\n</ul>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h4><p>使用<code>git commit</code>将改动提交到仓库，以创建一个<strong>Snapshot</strong>。<strong>Snapshot</strong>是一个很重要的概念，是Git内部实现的最关键机制，也是Git能够超越Subversion等其他VCS的杀手级特性，这一点将在Chapter3中进行说明。</p>\n<p>直接输入<code>git commit</code>后，将会打开一个编辑器页面（笔者用的是Vim，可以在gitconfig中配置），内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Please enter the commit message for your changes. Lines starting</span><br><span class=\"line\"># with &apos;#&apos; will be ignored, and an empty message aborts the commit.</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#\tnew file:   README</span><br><span class=\"line\">#\tmodified:   CONTRIBUTING.md</span><br><span class=\"line\">#</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br><span class=\"line\">~</span><br><span class=\"line\">&quot;.git/COMMIT_EDITMSG&quot; 9L, 283C</span><br></pre></td></tr></table></figure>\n<p>可以在其中编辑本次提交信息，如果不写任何东西的话，Git是不会承认本次commit的。</p>\n<p>如果不想打开编辑器，可以直接在<code>commit</code>时加上<code>-m</code>参数，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;</span><br></pre></td></tr></table></figure>\n<p>可以用<code>-a -m</code>或者<code>-am</code>把stage、commit两个操作一起完成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br><span class=\"line\">$ git commit -a -m <span class=\"string\">'added new benchmarks'</span></span><br><span class=\"line\">[master 83e38c7] added new benchmarks</span><br><span class=\"line\"> 1 file changed, 5 insertions(+), 0 deletions(-)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Removing-Files\"><a href=\"#Removing-Files\" class=\"headerlink\" title=\"Removing Files\"></a>Removing Files</h4><p>直接<code>rm</code>文件的话，文件是处于<code>unstaged</code>状态的，此时需要先<code>add</code>，再<code>commit</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rm PROJECTS.md</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with <span class=\"string\">'origin/master'</span>.</span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add/rm &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted:    PROJECTS.md</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use <span class=\"string\">\"git add\"</span> and/or <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n<p>或者直接用<code>git rm</code>，将文件直接置于<code>staged</code>状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm PROJECTS.md</span><br><span class=\"line\">rm <span class=\"string\">'PROJECTS.md'</span></span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    deleted:    PROJECTS.md</span><br></pre></td></tr></table></figure>\n<p>另外一个很有用的参数是<code>--cached</code>，用来将文件从<code>staged</code>状态转移到<code>untracked</code>。如果在最初编辑<code>.gitignore</code>时漏写了某个文件，后面发现Git已经记录了这个文件的变更，可以先用<code>--cached</code>参数停止track该文件，然后编辑<code>.gitignore</code>，将文件添加进去。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rm --cached README</span><br></pre></td></tr></table></figure>\n<h4 id=\"Moving-Files\"><a href=\"#Moving-Files\" class=\"headerlink\" title=\"Moving Files\"></a>Moving Files</h4><p>同样，可以用<code>git mv</code>来完成文件重命名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git mv README.md README</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br></pre></td></tr></table></figure>\n<h4 id=\"无比重要的-git-log\"><a href=\"#无比重要的-git-log\" class=\"headerlink\" title=\"无比重要的 git log\"></a>无比重要的 git log</h4><p><code>git log</code>用来查看当前分支的查看历史，如果不加任何参数，默认输出每次提交的SHA1值、提交者、提交时间、提交信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    first commit</span><br></pre></td></tr></table></figure>\n<p>使用<code>-p</code>参数可以展示每次提交的文件具体改动，使用<code>-[num]</code>（如<code>-2</code>）来控制显示的commit数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> -p -2</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/Rakefile b/Rakefile</span><br><span class=\"line\">index a874b73..8f94139 100644</span><br><span class=\"line\">--- a/Rakefile</span><br><span class=\"line\">+++ b/Rakefile</span><br><span class=\"line\">@@ -5,7 +5,7 @@ require <span class=\"string\">'rake/gempackagetask'</span></span><br><span class=\"line\"> spec = Gem::Specification.new <span class=\"keyword\">do</span> |s|</span><br><span class=\"line\">     s.platform  =   Gem::Platform::RUBY</span><br><span class=\"line\">     s.name      =   <span class=\"string\">\"simplegit\"</span></span><br><span class=\"line\">-    s.version   =   <span class=\"string\">\"0.1.0\"</span></span><br><span class=\"line\">+    s.version   =   <span class=\"string\">\"0.1.1\"</span></span><br><span class=\"line\">     s.author    =   <span class=\"string\">\"Scott Chacon\"</span></span><br><span class=\"line\">     s.email     =   <span class=\"string\">\"schacon@gee-mail.com\"</span></span><br><span class=\"line\">     s.summary   =   <span class=\"string\">\"A simple gem for using Git in Ruby code.\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span><br><span class=\"line\">index a0a60ae..47c6340 100644</span><br><span class=\"line\">--- a/lib/simplegit.rb</span><br><span class=\"line\">+++ b/lib/simplegit.rb</span><br><span class=\"line\">@@ -18,8 +18,3 @@ class SimpleGit</span><br><span class=\"line\">     end</span><br><span class=\"line\"></span><br><span class=\"line\"> end</span><br><span class=\"line\">-</span><br><span class=\"line\">-<span class=\"keyword\">if</span> <span class=\"variable\">$0</span> == __FILE__</span><br><span class=\"line\">-  git = SimpleGit.new</span><br><span class=\"line\">-  puts git.show</span><br><span class=\"line\">-end</span><br><span class=\"line\">\\ No newline at end of file</span><br></pre></td></tr></table></figure>\n<p>如果觉得<code>-p</code>参数展示的太多了，就用<code>--stat</code>来看改动文件与行数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br><span class=\"line\"></span><br><span class=\"line\"> Rakefile | 2 +-</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"></span><br><span class=\"line\">commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 16:40:33 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"> lib/simplegit.rb | 5 -----</span><br><span class=\"line\"> 1 file changed, 5 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">commit a11bef06a3f659402fe7563abf99ad00de2209e6</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sat Mar 15 10:31:28 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    first commit</span><br><span class=\"line\"></span><br><span class=\"line\"> README           |  6 ++++++</span><br><span class=\"line\"> Rakefile         | 23 +++++++++++++++++++++++</span><br><span class=\"line\"> lib/simplegit.rb | 25 +++++++++++++++++++++++++</span><br><span class=\"line\"> 3 files changed, 54 insertions(+)</span><br></pre></td></tr></table></figure>\n<p><code>--pretty</code>参数可以美化信息展示，这是一个复合参数，有<code>oneline</code>、<code>short</code>、<code>full</code>、<code>fuller</code>等选择</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\">ca82a6dff817ec66f44342007202690a93763949 changed the version number</span><br><span class=\"line\">085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\">a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</span><br></pre></td></tr></table></figure>\n<p>或者自己定制输出模版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h - %an, %ar : %s\"</span></span><br><span class=\"line\">ca82a6d - Scott Chacon, 6 years ago : changed the version number</span><br><span class=\"line\">085bb3b - Scott Chacon, 6 years ago : removed unnecessary <span class=\"built_in\">test</span></span><br><span class=\"line\">a11bef0 - Scott Chacon, 6 years ago : first commit</span><br></pre></td></tr></table></figure>\n<p>模版参数定义如下</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description of Output</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%H</td>\n<td>Commit hash</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Abbreviated commit hash</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>Tree hash</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Abbreviated tree hash</td>\n</tr>\n<tr>\n<td>%P</td>\n<td>Parent hashes</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>Abbreviated parent hashes</td>\n</tr>\n<tr>\n<td>%an</td>\n<td>Author name</td>\n</tr>\n<tr>\n<td>%ae</td>\n<td>Author email</td>\n</tr>\n<tr>\n<td>%ad</td>\n<td>Author date (format respects the –date=option)</td>\n</tr>\n<tr>\n<td>%ar</td>\n<td>Author date, relative</td>\n</tr>\n<tr>\n<td>%cn</td>\n<td>Committer name</td>\n</tr>\n<tr>\n<td>%ce</td>\n<td>Committer email</td>\n</tr>\n<tr>\n<td>%cd</td>\n<td>Committer date</td>\n</tr>\n<tr>\n<td>%cr</td>\n<td>Committer date, relative</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>Subject</td>\n</tr>\n</tbody>\n</table>\n<p>在log中使用<code>--graph</code>来展示ASCII格式的图形化提交历史，建议使用更傻瓜的GUI工具来查看</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">\"%h %s\"</span> --graph</span><br><span class=\"line\">* 2d3acf9 ignore errors from SIGCHLD on <span class=\"built_in\">trap</span></span><br><span class=\"line\">*  5e3ee11 Merge branch <span class=\"string\">'master'</span> of git://github.com/dustin/grit</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 420eac9 Added a method <span class=\"keyword\">for</span> getting the current branch.</span><br><span class=\"line\">* | 30e367c timeout code and tests</span><br><span class=\"line\">* | 5a09431 add timeout protection to grit</span><br><span class=\"line\">* | e1193f8 support <span class=\"keyword\">for</span> heads with slashes <span class=\"keyword\">in</span> them</span><br><span class=\"line\">|/</span><br><span class=\"line\">* d6016bc require time <span class=\"keyword\">for</span> xmlschema</span><br><span class=\"line\">*  11d191e Merge branch <span class=\"string\">'defunkt'</span> into <span class=\"built_in\">local</span></span><br></pre></td></tr></table></figure>\n<p>如果想查看两周以来的提交，用<code>--since</code>参数，同理，也有<code>--until</code>可供使用，后面可以接<code>2016-01-01</code>这样的时间格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --since=2.weeks</span><br></pre></td></tr></table></figure>\n<p><code>-S</code>参数查看提交中包含某个特定字段变更的log，比如你想看哪些提交改到了<code>onCreate</code>函数，就这么写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --SonCreate</span><br></pre></td></tr></table></figure>\n<p>还有其它选择功能，如查看某人的提交<code>--committer</code>，查看包含某些敏感词的提交<code>--grep</code>等等，如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-(n)</td>\n<td>Show only the last n commits</td>\n</tr>\n<tr>\n<td>–since, –after</td>\n<td>Limit the commits to those made after the specified date.</td>\n</tr>\n<tr>\n<td>–until, –before</td>\n<td>Limit the commits to those made before the specified date.</td>\n</tr>\n<tr>\n<td>–author</td>\n<td>Only show commits in which the author entry matches the specified string.</td>\n</tr>\n<tr>\n<td>–committer</td>\n<td>Only show commits in which the committer entry matches the specified string.</td>\n</tr>\n<tr>\n<td>–grep</td>\n<td>Only show commits with a commit message containing the string</td>\n</tr>\n<tr>\n<td>-S</td>\n<td>Only show commits adding or removing code matching the string</td>\n</tr>\n</tbody>\n</table>\n<p>举个🌰，直接照搬书中的好了：</p>\n<blockquote>\n<p>For example, if you want to see which commits modifying test files in the Git source code history are merged and were committed by Junio Hamano in the month of October 2008, you can run something like this:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">\"%h - %s\"</span> --author=gitster --since=<span class=\"string\">\"2008-10-01\"</span> \\</span><br><span class=\"line\">   --before=<span class=\"string\">\"2008-11-01\"</span> --no-merges -- t/</span><br><span class=\"line\">5610e3b - Fix testcase failure when extended attributes are <span class=\"keyword\">in</span> use</span><br><span class=\"line\">acd3b9e - Enhance hold_lock_file_for_&#123;update,append&#125;() API</span><br><span class=\"line\">f563754 - demonstrate breakage of detached checkout with symbolic link HEAD</span><br><span class=\"line\">d1a43f2 - reset --hard/<span class=\"built_in\">read</span>-tree --reset -u: remove unmerged new paths</span><br><span class=\"line\">51a94af - Fix <span class=\"string\">\"checkout --track -b newbranch\"</span> on detached HEAD</span><br><span class=\"line\">b0ad11e - pull: allow <span class=\"string\">\"git pull origin <span class=\"variable\">$something</span>:<span class=\"variable\">$current_branch</span>\"</span> into an unborn branch</span><br></pre></td></tr></table></figure>\n<h4 id=\"Undoing-Things\"><a href=\"#Undoing-Things\" class=\"headerlink\" title=\"Undoing Things\"></a>Undoing Things</h4><p>如果在一次commit后，发现忘了修改某个文件foo，那要怎么办？<br>当然可以修改了foo后，用<code>git commit -am</code>来增加一次commit。<br>可如果想与之前的commit并成一个呢？git为我们提供了这样的工具<code>--amend</code>(amend: vt&amp;vi 改良，修改，修订)。Git会检查<code>staged</code>区域，将其中的变更与上一个commit合并，你还可以修改合并后的commit信息。<br>针对上面的场景</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">'initial commit'</span></span><br><span class=\"line\">$ git add forgotten_file</span><br><span class=\"line\">$ git commit --amend</span><br></pre></td></tr></table></figure>\n<p>如果<code>staged</code>区域并没有任何改动，<code>--amend</code>可以用来单纯的修改commit message，同样十分有用。</p>\n<p>下面讲讲，要是在<code>stage</code>文件后，反悔了，想要把文件回滚，怎么办？其实<code>git status</code>已经给了我们提示，那就是<code>git reset</code>，要结合<code>HEAD</code>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br><span class=\"line\">$ git reset HEAD CONTRIBUTING.md</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M CONTRIBUTING.md</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use <span class=\"string\">\"git reset HEAD &amp;lt;file&amp;gt;...\"</span> to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    renamed:    README.md -&amp;gt; README</span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commit:</span><br><span class=\"line\">  (use <span class=\"string\">\"git add &amp;lt;file&amp;gt;...\"</span> to update what will be committed)</span><br><span class=\"line\">  (use <span class=\"string\">\"git checkout -- &amp;lt;file&amp;gt;...\"</span> to discard changes <span class=\"keyword\">in</span> working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure>\n<p>上面这种用法只是回滚了<code>staged</code>中的文件，如果加上<code>--hard</code>参数，可就要慎重了——这会把commit回滚掉，而且，不留痕迹！</p>\n<p>如果文件还没有进行<code>stage</code>，正处于<code>modified</code>，你想要将它变回到<code>unmodified</code>，就用<code>checkout --</code>。同样，这个操作不会保留之前的任何修改，不带走一丝云彩。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>\n<p>Git还提供了另外一个很有力的工具<code>stash</code>，用来暂存修改，限于篇幅，暂不展开。</p>\n<h4 id=\"Working-With-Remotes\"><a href=\"#Working-With-Remotes\" class=\"headerlink\" title=\"Working With Remotes\"></a>Working With Remotes</h4><p>Git是一个强有力的协作工具，必不可少地，你会将自己的代码推送到仓库供他人使用，你也会将他人完成的代码从远端拉下来进行追踪。</p>\n<p><code>git remote -v</code>用来查看本地的分支（fetch &amp; push），对于复杂的项目，会有多个远端remote（实在找不出这个语境下合适的翻译，总不能说“分支”吧，会与branch重复）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">bakkdoor  https://github.com/bakkdoor/grit (fetch)</span><br><span class=\"line\">bakkdoor  https://github.com/bakkdoor/grit (push)</span><br><span class=\"line\">cho45     https://github.com/cho45/grit (fetch)</span><br><span class=\"line\">cho45     https://github.com/cho45/grit (push)</span><br><span class=\"line\">defunkt   https://github.com/defunkt/grit (fetch)</span><br><span class=\"line\">defunkt   https://github.com/defunkt/grit (push)</span><br><span class=\"line\">koke      git://github.com/koke/grit.git (fetch)</span><br><span class=\"line\">koke      git://github.com/koke/grit.git (push)</span><br><span class=\"line\">origin    git@github.com:mojombo/grit.git (fetch)</span><br><span class=\"line\">origin    git@github.com:mojombo/grit.git (push)</span><br></pre></td></tr></table></figure>\n<p>一般我们只会看到origin一个remote，使用<code>git remote add</code>来添加remote</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">$ git remote add pb https://github.com/paulboone/ticgit</span><br><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  https://github.com/schacon/ticgit (fetch)</span><br><span class=\"line\">origin  https://github.com/schacon/ticgit (push)</span><br><span class=\"line\">pb  https://github.com/paulboone/ticgit (fetch)</span><br><span class=\"line\">pb  https://github.com/paulboone/ticgit (push)</span><br></pre></td></tr></table></figure>\n<p><code>pb</code>是我们起的别名，然后使用<code>fetch</code>来更新这个remote</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch pb</span><br><span class=\"line\">remote: Counting objects: 43, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (36/36), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Total 43 (delta 10), reused 31 (delta 5)</span><br><span class=\"line\">Unpacking objects: 100% (43/43), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">From https://github.com/paulboone/ticgit</span><br><span class=\"line\"> * [new branch]      master     &gt; pb/master</span><br><span class=\"line\"> * [new branch]      ticgit     &gt; pb/ticgit</span><br></pre></td></tr></table></figure>\n<p> 也可以不指定remote名称，直接fetch所有remote</p>\n<p> 讲完了下载，我们来看看如何上传。<code>git push [remote-name] [branch-name]</code>，灰常简单</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p> <code>git remote show [remote-name]</code>命令可以用来观察某个remote的状态，注意！这里观察的并不是远端实时状态，而是本地上一次下载下来的版本，如果你想观察最新状态，需要先<code>fetch</code></p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote show origin</span><br><span class=\"line\">* remote origin</span><br><span class=\"line\">  URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  Fetch URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  Push  URL: https://github.com/my-org/complex-project</span><br><span class=\"line\">  HEAD branch: master</span><br><span class=\"line\">  Remote branches:</span><br><span class=\"line\">    master                           tracked</span><br><span class=\"line\">    dev-branch                       tracked</span><br><span class=\"line\">    markdown-strip                   tracked</span><br><span class=\"line\">    issue-43                         new (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</span><br><span class=\"line\">    issue-45                         new (next fetch will store <span class=\"keyword\">in</span> remotes/origin)</span><br><span class=\"line\">    refs/remotes/origin/issue-11     stale (use <span class=\"string\">'git remote prune'</span> to remove)</span><br><span class=\"line\">  Local branches configured <span class=\"keyword\">for</span> <span class=\"string\">'git pull'</span>:</span><br><span class=\"line\">    dev-branch merges with remote dev-branch</span><br><span class=\"line\">    master     merges with remote master</span><br><span class=\"line\">  Local refs configured <span class=\"keyword\">for</span> <span class=\"string\">'git push'</span>:</span><br><span class=\"line\">    dev-branch                     pushes to dev-branch                     (up to date)</span><br><span class=\"line\">    markdown-strip                 pushes to markdown-strip                 (up to date)</span><br><span class=\"line\">    master                         pushes to master                         (up to date)</span><br></pre></td></tr></table></figure>\n<p>如果你觉得某个remote的名字起的太土气了，使用<code>git remote rename [old_name] [new_name]</code>来修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rename pb paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br><span class=\"line\">paul</span><br></pre></td></tr></table></figure>\n<p>同样，使用<code>git remote rm [remote_name]</code>来删除（可怜的paul）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote rm paul</span><br><span class=\"line\">$ git remote</span><br><span class=\"line\">origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"Tagging\"><a href=\"#Tagging\" class=\"headerlink\" title=\"Tagging\"></a>Tagging</h4><p>你完成了一个版本的全部需求，已经信心满满地进行了上线，并且线上全面回归过，一切正常——你以为全部的工作都完成了吗？并没有！你需要记录下本次提交作为一个里程碑，Git提供了Tag这个强大的工具。</p>\n<p>查看目前的tag，注意是以alphabetical顺序排列的，并非时间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br></pre></td></tr></table></figure>\n<p>使用<code>-l</code>参数查看包含某个敏感词的tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -l <span class=\"string\">\"v1.8.5*\"</span></span><br><span class=\"line\">v1.8.5</span><br><span class=\"line\">v1.8.5-rc0</span><br><span class=\"line\">v1.8.5-rc1</span><br><span class=\"line\">v1.8.5-rc2</span><br><span class=\"line\">v1.8.5-rc3</span><br><span class=\"line\">v1.8.5.1</span><br><span class=\"line\">v1.8.5.2</span><br><span class=\"line\">v1.8.5.3</span><br></pre></td></tr></table></figure>\n<p>有两种Tag：lightweighted和annotated。前者非常简单，只是一个tag name，不包含任何其他信息。后者则记录了tagger name、email、date、message等信息，并且可以用GNU Privacy Guard (GPG)进行签名和校验。笔者强烈建议使用annotated进行打Tag。</p>\n<p>annotated tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v1.4 -m <span class=\"string\">\"my version 1.4\"</span></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br></pre></td></tr></table></figure>\n<p>用<code>git show [tag_name]</code>查看一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git show v1.4</span><br><span class=\"line\">tag v1.4</span><br><span class=\"line\">Tagger: Ben Straub &amp;lt;ben@straub.cc&amp;gt;</span><br><span class=\"line\">Date:   Sat May 3 20:19:12 2014 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">my version 1.4</span><br><span class=\"line\"></span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br></pre></td></tr></table></figure>\n<p>lightweighted tag</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag v1.4-lw</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br><span class=\"line\">v1.4-lw</span><br><span class=\"line\">v1.5</span><br><span class=\"line\">$ git show v1.4-lw</span><br><span class=\"line\">commit ca82a6dff817ec66f44342007202690a93763949</span><br><span class=\"line\">Author: Scott Chacon &lt;schacon@gee-mail.com&gt;</span><br><span class=\"line\">Date:   Mon Mar 17 21:52:11 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    changed the version number</span><br></pre></td></tr></table></figure>\n<p>看到了没，对于这种tag，并没有提供commit之外的任何信息。</p>\n<p>如果你想要对几天之前的某一个commit打tag，怎么办？难道git只能在最新提交上打Tag吗？图样图森破！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a v1.2 9fceb02</span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">v0.1</span><br><span class=\"line\">v1.2</span><br><span class=\"line\">v1.3</span><br><span class=\"line\">v1.4</span><br><span class=\"line\">v1.4-lw</span><br><span class=\"line\">v1.5</span><br><span class=\"line\"></span><br><span class=\"line\">$ git show v1.2</span><br><span class=\"line\">tag v1.2</span><br><span class=\"line\">Tagger: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Mon Feb 9 15:32:16 2009 -0800</span><br><span class=\"line\"></span><br><span class=\"line\">version 1.2</span><br><span class=\"line\">commit 9fceb02d0ae598e95dc970b74767f19372d61af8</span><br><span class=\"line\">Author: Magnus Chacon &amp;lt;mchacon@gee-mail.com&amp;gt;</span><br><span class=\"line\">Date:   Sun Apr 27 20:43:35 2008 -0700</span><br><span class=\"line\"></span><br><span class=\"line\">    updated rakefile</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>看到没，只需要在后面拼上checksum（可以只是一部分），就可以了</p>\n<p>按照上面的指示，你在本地打好了Tag，让我们把它推送到仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin v1.5</span><br><span class=\"line\">Counting objects: 14, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Delta compression using up to 8 threads.</span><br><span class=\"line\">Compressing objects: 100% (12/12), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 14 (delta 3), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:schacon/simplegit.git</span><br><span class=\"line\"> * [new tag]         v1.5 &gt; v1.5</span><br></pre></td></tr></table></figure>\n<p>如果tag很多，用复数！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin --tags</span><br><span class=\"line\">Counting objects: 1, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:schacon/simplegit.git</span><br><span class=\"line\"> * [new tag]         v1.4 &gt; v1.4</span><br><span class=\"line\"> * [new tag]         v1.4-lw &gt; v1.4-lw</span><br></pre></td></tr></table></figure>\n<p>tag本身是无法进行修改的，这在一定程度上保证了代码的安全，当然，如果tag可以随便修改，那它跟普通的branch有什么区别？我们可以将tag拉成本地一个branch，用<code>git checkout -b [branchname] [tagname]</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b version2 v2.0.0</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'version2'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Aliaes（别名）\"><a href=\"#Git-Aliaes（别名）\" class=\"headerlink\" title=\"Git Aliaes（别名）\"></a>Git Aliaes（别名）</h4><p>（也许是使用Git不够重度的原因，笔者认为这部分内容并不十分重要，几个常用的命令都很容易记，不常用的起了别名也记不住…）</p>\n<p>用<code>git config --global alias.[alias_name] [original_command]</code>来创建alias，在<code>~/.gitconfig</code>中查看这些alias。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.co checkout</span><br><span class=\"line\">$ git config --global alias.br branch</span><br><span class=\"line\">$ git config --global alias.ci commit</span><br><span class=\"line\">$ git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<p>比如，你可以创建这样的alias，来回滚一个stage</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.unstage <span class=\"string\">'reset HEAD --'</span></span><br></pre></td></tr></table></figure>\n<p>这样，你就可以用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git unstage fileA</span><br></pre></td></tr></table></figure>\n<p>来代替</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset HEAD -- fileA</span><br></pre></td></tr></table></figure>\n<p>如果你想要运行Git外部命令（rather than a Git subcommand），在命令前加上<code>!</code>（原文给的解释是<code>This is useful if you write your own tools that work with a Git repository.</code>笔者绞尽脑汁也没有想到这个功能用处在哪里…）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global alias.visual <span class=\"string\">'!gitk'</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"nova自动化测试探索与实践","url":"http://lilei.work/2016/01/28/Nova-Automation-Practice/","content":"<hr>\n<h4 id=\"自动化测试可行性分析\"><a href=\"#自动化测试可行性分析\" class=\"headerlink\" title=\"自动化测试可行性分析\"></a>自动化测试可行性分析</h4><p>针对<code>android-nova</code>项目，每个新版本发布之前，RD 都需要进行主流程回归，这是一项重复且耗时的工作，“重复”是指每2～3周发版时就要进行一次，“耗时”则因为平均一条业务线要用一个小时时间——这还只是单android平台。<br>实现自动化后，可以大大减轻 RD 负担，并且可在迭代过程中建立 daily build 机制，及早发现问题，提高提测质量。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"对自动化测试的理解\"><a href=\"#对自动化测试的理解\" class=\"headerlink\" title=\"对自动化测试的理解\"></a>对自动化测试的理解</h4><p>这里只针对 UI 方面的白盒测试</p>\n<ol>\n<li>自动化测试的输入是用户操作（输入、点击、滑动）、网络请求返回</li>\n<li>自动化测试的输出是 UI 控件显示</li>\n</ol>\n<p>这两步都可以通过现有的自动化工具完成</p>\n<hr>\n<h4 id=\"自动化工具选取\"><a href=\"#自动化工具选取\" class=\"headerlink\" title=\"自动化工具选取\"></a>自动化工具选取</h4><p>之前组内分享了2个自动化工具，Robutium 和 Appium。查阅相关资料后，发现网络上比较流行的不外乎也就是这两个。简单罗列出各自的特点：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Robotium</th>\n<th>Appium</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否开源</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>测试类型</td>\n<td>黑盒</td>\n<td>黑盒</td>\n</tr>\n<tr>\n<td>支持平台</td>\n<td>Android</td>\n<td>Android, iOS, FirefoxOS</td>\n</tr>\n<tr>\n<td>apk是否需要再编译</td>\n<td>需要，测试代码必须打入apk包</td>\n<td>无需，测试代码单独存放</td>\n</tr>\n<tr>\n<td>可测App类型</td>\n<td>原生，hybrid</td>\n<td>原生，hybrid，甚至可以通过Safari／Chrome来测试web页面</td>\n</tr>\n<tr>\n<td>安全性</td>\n<td>“The most notable limitation”, 操作仅限本 app</td>\n<td>未知</td>\n</tr>\n<tr>\n<td>用例语言</td>\n<td>Java</td>\n<td>Any WebDriver-compatible language: Java, Python, PHP, C#, OC…</td>\n</tr>\n<tr>\n<td>参考资料</td>\n<td><a href=\"https://github.com/Androooid/treasure/blob/master/source/lockerlou/posts/android_robotium.md\" target=\"_blank\" rel=\"noopener\">Android Robotium自动化测试使用手册 by 楼赟程</a></td>\n<td><a href=\"https://github.com/Androooid/treasure/blob/master/source/qsqqinsao/posts/android_appium.md\" target=\"_blank\" rel=\"noopener\">Android Appium自动化测试指导手册 by 覃少强</a></td>\n</tr>\n</tbody>\n</table>\n<p>比较之后，选用Appium作为实践手段</p>\n<hr>\n<h4 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h4><p>如果要实现自动化测试，总结下来，以下几个方面是难点，也是必须解决的问题</p>\n<ol>\n<li>预设数据保存、读取</li>\n<li>预设数据填入组件</li>\n<li>模拟请求发送接收</li>\n<li>检验接收后的界面展示</li>\n</ol>\n<p>其中<code>2</code>&amp;<code>4</code>可以由测试框架帮助完成，<code>1</code>&amp;<code>3</code>比较棘手，详见本文讲述。</p>\n<hr>\n<h4 id=\"Appium配置与运行\"><a href=\"#Appium配置与运行\" class=\"headerlink\" title=\"Appium配置与运行\"></a>Appium配置与运行</h4><p>历时一天才跑通了Appium的demo，不得不再次感慨，中文博客的帮助的确是太太太太少了。首先要确认平台是OS X，其次还要是为android进行测试，好不容易找到了一些，发现大家都是一模一样的，不知道是谁抄谁。关键是你抄来抄去，抄的净是些错误内容……</p>\n<p>自己途中遇到一些曲折，记录如下</p>\n<ol>\n<li>理解Appium所使用的<code>client-server-app</code>的结构，<code>client</code>的代码不应该写在<code>app</code>里<br>我是这么处理的：<ul>\n<li>client：maven项目，用IntelliJ编写，测试代码位于<code>test/java/com.leili.demo.Demo</code>，注意maven项目要在pom里处理好依赖（见代码）</li>\n<li>server：Appium的GUI界面，完成配置即可使用，不需二次开发</li>\n<li>app：gradle项目，用AndroidStudio编写，不含测试代码</li>\n</ul>\n</li>\n<li>配置<code>ANDROID_HOME</code>时，记得配至到系统默认的bash配置文件中。刚开始时自己只写到了<code>~/.zshrc</code>里（因为平时用的是zsh），结果运行测试用例时报错找不到<code>ANDROID_HOME</code>，上网查找后也没有结果（baidu检索出的中文博客大多是讲路径中不要有空格…），最后醍醐灌顶恍然大悟，改了<code>~/.bash_profile</code>，才生效</li>\n<li>在写Appium测试用例（Java）时，在EditText进行输入，直接<code>element.sendKeys(&quot;foooooo&quot;)</code>即可，不要想当然在前面加上<code>element.click()</code>，否则会有奇怪的事情发生</li>\n</ol>\n<p><strong>maven依赖</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.seleniumhq.selenium<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>selenium-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.48.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.appium<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>java-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-logging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.14<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"启动-Activity\"><a href=\"#启动-Activity\" class=\"headerlink\" title=\"启动 Activity\"></a>启动 Activity</h4><p>由于Appium目前只能用<code>包名＋类名</code>的方式启动，不支持通过intent启动Activity。如果需要在启动中携带参数，这里提供一个解决方法：在debug面板中通过scheme直接进入目标Activity。这种做法过于依赖Debug面板，其实并不是一种好的实现方式。</p>\n<p>希望Appium团队能够在后续更新中提供更多的启动Activity途径。</p>\n<p><strong>Appium中启动Activity的方法，代码位于<code>AndroidDriver.java</code></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appPackage</span></span><br><span class=\"line\"><span class=\"comment\"> *            The package containing the activity. [Required]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appActivity</span></span><br><span class=\"line\"><span class=\"comment\"> *            The activity to start. [Required]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appWaitPackage</span></span><br><span class=\"line\"><span class=\"comment\"> *            Automation will begin after this package starts. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> appWaitActivity</span></span><br><span class=\"line\"><span class=\"comment\"> *            Automation will begin after this activity starts. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> stopApp</span></span><br><span class=\"line\"><span class=\"comment\"> *            If true, target app will be stopped. [Optional]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@example</span> driver.startActivity(\"com.foo.bar\", \".MyActivity\", null, null, true);</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> StartsActivity#startActivity(String, String, String, String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startActivity</span><span class=\"params\">(String appPackage, String appActivity,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        String appWaitPackage, String appWaitActivity, <span class=\"keyword\">boolean</span> stopApp)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> IllegalArgumentException</span>;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"测试数据存取\"><a href=\"#测试数据存取\" class=\"headerlink\" title=\"测试数据存取\"></a>测试数据存取</h4><p>对于如何读取mock数据，有两种思路</p>\n<ol>\n<li><p>手机/模拟器连接mock服务器后，在mock服务器上配置，客户端每次请求会发送出去，但不是发送到真实的api后端，而是发送到mock服务器</p>\n<ul>\n<li>app代码无需变动</li>\n<li>实现简单</li>\n<li>android/iOS两个平台可以共用同一套数据、同一个mock服务器</li>\n<li>依赖mock服务器，甚至可能需要自己搭建mock服务器</li>\n<li>要考虑如何使模拟器在mock服务器上进行注册。已有的扫二维码方式显然不现实</li>\n</ul>\n</li>\n<li><p>将mock数据存入手机/模拟器，本地读取</p>\n<ul>\n<li>不依赖mock服务器</li>\n<li>需要app内部支持，实现DB、Service等功能，较复杂</li>\n<li>android/iOS各自都需要改动底层代码以进行支持</li>\n<li>仍然需要考虑正常开启的app如何自动切换到测试模式</li>\n</ul>\n</li>\n</ol>\n<p>比较后，选用<code>1</code>作为最后的实现方式，同时基于<code>mobile-httpwatch</code>搭建了自己的mock服务器，提供预加载配置的接口。</p>\n<hr>\n<h4 id=\"Show-Time\"><a href=\"#Show-Time\" class=\"headerlink\" title=\"Show Time\"></a>Show Time</h4><p>主流程测试用例（预订）：<a href=\"https://www.tapd.cn/20007421/sparrow/tcase/view/1120007421001016788?url_cache_key=53da847c3c5c703bb01d1f98ee33bb8f\" target=\"_blank\" rel=\"noopener\"><strong>test case</strong></a></p>\n<p><img src=\"/img/160128_nova_auto_test/test_case_pic.png\" alt=\"\"></p>\n<p>这条用例的操作过程中，涉及到调用以下3个接口:</p>\n<ol>\n<li><code>getbookingcontext.yy</code>，获取商户预订配置</li>\n<li><code>getbookingholidays.yy</code>，获取节假日信息（商户无关）</li>\n<li><code>book.yy</code>，下订单</li>\n</ol>\n<p>出于简化的考虑，我们本次只对接口<code>3</code>进行mock。</p>\n<p>截图应如下所示：</p>\n<p>输入</p>\n<p><img src=\"/img/160128_nova_auto_test/input.png\" alt=\"\"></p>\n<p>输出</p>\n<p><img src=\"/img/160128_nova_auto_test/output.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"Q-预设的mock数据要保存在TestCase中还是保存在Server里？\"><a href=\"#Q-预设的mock数据要保存在TestCase中还是保存在Server里？\" class=\"headerlink\" title=\"Q: 预设的mock数据要保存在TestCase中还是保存在Server里？\"></a>Q: 预设的mock数据要保存在TestCase中还是保存在Server里？</h4><p>有两种方案</p>\n<ol>\n<li>mock data 保存在 TestCase 侧，每次用例执行前，TestCase 把数据传给 Server（这种方案每次传递数据量过大）</li>\n<li>mock data 保存在 Server 侧，每次用例执行前，TestCase 把 mock data id 传给 Server</li>\n</ol>\n<p>每个 case 对应一套 mock data ，可以是一个接口或者多个接口的数据。</p>\n<hr>\n<h4 id=\"功能点开发进度表\"><a href=\"#功能点开发进度表\" class=\"headerlink\" title=\"功能点开发进度表\"></a>功能点开发进度表</h4><p>||状态|功能点|备注|<br>|1|done|test engine 发送 pre-req ，告知 server caseid||<br>|2|done|server 收到请求||<br>|3|done|server 解析请求中的 caseid||<br>|4|done|server 根据 caseid ，加载本地对应 mock data ，加载完成后告知 test engine||<br>|5|done|test engine 驱动 client 进行注册||<br>|6|done|test engine 驱动 client 发送真实请求||<br>|7|done|server 根据真实请求，返回已经准备好的 mock data||<br>|8|done|client 获得 mock data||<br>|9|done|test engine 进行自动化 UI 检验||<br>|10||test engine UI 校验完成后，发送 post-req，告知 server 清除 mock data|可选|<br>|11||server 接收到 post-req 后，清除 mock data|可选|</p>\n<hr>\n<h4 id=\"一些nodejs函数方法\"><a href=\"#一些nodejs函数方法\" class=\"headerlink\" title=\"一些nodejs函数方法\"></a>一些<code>nodejs</code>函数方法</h4><p>处理<code>get</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- http:<span class=\"comment\">//appmock.dp/mockconfig.do?caseid=1024 --&gt;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(url.parse(request.url, <span class=\"literal\">true</span>).query.caseid); <span class=\"comment\">// log '1024' here</span></span><br><span class=\"line\">response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">response.end();</span><br></pre></td></tr></table></figure>\n<p>处理<code>post</code>请求</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> postData = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">request.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">postDataChunk</span>) </span>&#123;</span><br><span class=\"line\">    postData += postDataChunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">request.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'数据接收完毕'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> params = querystring.parse(postData);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(params[<span class=\"string\">\"num\"</span>]); <span class=\"comment\">/// &#123;num=1024, name=lilei&#125;, log '1024' here</span></span><br><span class=\"line\">    response.writeHead(<span class=\"number\">500</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain;charset=utf-8\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    response.end(<span class=\"string\">\"数据提交完毕\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>读取文件（同步）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> content = fs.readFileSync(<span class=\"string\">'/Users/leili/Downloads/7'</span>);</span><br><span class=\"line\">config = parseJson(content);</span><br><span class=\"line\">user.setMockConfig(config);</span><br></pre></td></tr></table></figure>\n<p>读取文件（异步）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\">fs.readFile(<span class=\"string\">'/Users/leili/Downloads/2'</span>, <span class=\"string\">'utf8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li>预订可能对已过时间有一些判断，导致在线预订页无法使用mock数据，原因未明</li>\n</ul>\n<hr>\n<h4 id=\"反过来，一些思考\"><a href=\"#反过来，一些思考\" class=\"headerlink\" title=\"反过来，一些思考\"></a>反过来，一些思考</h4><blockquote>\n<p>真的需要自动化吗？UI 本身做的逻辑就很少，如果返回数据是正确的，UI 显示也几乎不会出现问题，为何要如此多精力来写自动化 case</p>\n</blockquote>\n<ul>\n<li>准确度：每一个控件，展示什么内容？</li>\n<li>数量：case 数量大，记不住</li>\n</ul>\n<hr>\n<h4 id=\"投入到生产中，会遇到的问题\"><a href=\"#投入到生产中，会遇到的问题\" class=\"headerlink\" title=\"投入到生产中，会遇到的问题\"></a>投入到生产中，会遇到的问题</h4><ul>\n<li>前期准备量大：扒测试数据，造各种case（定金、预订成功、失败，商家营业中、暂未营业等各种状态）</li>\n<li>难以对布局之间的相对位置、缩进等进行测试</li>\n<li>即使是使用Appium进行自动化测试，也是需要rd做支持的，qa必须从rd处了解到诸如控件id等属性，方可以定位到目标控件进行操作。</li>\n<li>视觉上看是一个TextView，而实际上是两个TextView，作为QA难以判断（可能要求理解功能具体实现）</li>\n</ul>\n<hr>\n<h4 id=\"mobile-httpwatch-项目阅读笔记\"><a href=\"#mobile-httpwatch-项目阅读笔记\" class=\"headerlink\" title=\"mobile-httpwatch 项目阅读笔记\"></a>mobile-httpwatch 项目阅读笔记</h4><p>记录的内容比较琐碎</p>\n<p>web.js  注册，设置mock数据<br>mockconfig.js   mock设置界面<br>User.js 用户数据结构，每个用户有一个MockConfig<br>mock_config.js  默认的mock数值<br>html5 的 localStorage<br>ProxyFactory.js mock rule，重点看handleProxyRequest和mockResponse两个方法<br>mockConfig = user.getMockRuleForUrl(req.url)<br>Utils.js</p>\n<hr>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"http://www.cnblogs.com/lori/p/3437562.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/lori/p/3437562.html</a><br><a href=\"http://www.mkyong.com/java/how-to-send-http-request-getpost-in-java\" target=\"_blank\" rel=\"noopener\">http://www.mkyong.com/java/how-to-send-http-request-getpost-in-java</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流","自动化测试"]},{"title":"携程动态加载实践DynamicAPK项目学习","url":"http://lilei.work/2016/01/18/携程动态加载实践DynamicAPK项目学习/","content":"<hr>\n<h2 id=\"术语\"><a href=\"#术语\" class=\"headerlink\" title=\"术语\"></a>术语</h2><p><strong>宿主</strong>：Host Apk，打包运行的总项目，用于集成各个子工程，相当于<code>android-nova壳</code>，只有一个</p>\n<p><strong>插件</strong>：Plugin，子工程，由各个业务线独立开发，可以依赖<strong>宿主</strong>提供的资源，一个宿主能够拥有多个插件</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Andoroid-Build-流程\"><a href=\"#Andoroid-Build-流程\" class=\"headerlink\" title=\"Andoroid Build 流程\"></a>Andoroid Build 流程</h2><p><img src=\"/img/160118_dynamic_apk/android-build-2.png\" alt=\"\"></p>\n<ul>\n<li>Resource Files：项目<code>res</code>路径下的文件，包含<code>anim</code>、<code>drawable</code>、<code>layout</code>、<code>raw</code>等</li>\n<li>Source Files：项目<code>src</code>路径下(对于<code>android-nova</code>是<code>src/main/java</code>)的文件</li>\n<li>aapt: 将<code>.xml</code>文件转换为java类型</li>\n<li>Generated Source Files：由<code>aapt</code>工具生成，存储在<code>/gen</code>目录</li>\n<li>javac：java编译器，生成<code>.class</code>文件</li>\n<li>dx：将<code>.class</code>文件转换为DVM可识别的<code>dex</code>文件</li>\n<li>apkbuilder：将所有文件打包进<code>apk</code>中</li>\n<li>zipalign：将<code>apk</code>中未经压缩过的文件进行4字节对齐，以减少运行时<code>RAM</code>消耗</li>\n</ul>\n<hr>\n<h2 id=\"协同开发\"><a href=\"#协同开发\" class=\"headerlink\" title=\"协同开发\"></a>协同开发</h2><h4 id=\"与引用aar提供的公用UI组件之间的联系与区别\"><a href=\"#与引用aar提供的公用UI组件之间的联系与区别\" class=\"headerlink\" title=\"与引用aar提供的公用UI组件之间的联系与区别\"></a>与<code>引用aar提供的公用UI组件</code>之间的联系与区别</h4><ul>\n<li>本质上都是<code>classes.dex</code>与<code>res/</code>等文件的集合</li>\n<li>依赖关系不同</li>\n<li>是否包含业务逻辑</li>\n<li>最重要的一点，<code>Activity</code>注册</li>\n</ul>\n<h4 id=\"插件引用宿主资源\"><a href=\"#插件引用宿主资源\" class=\"headerlink\" title=\"插件引用宿主资源\"></a>插件引用宿主资源</h4><ul>\n<li>在<code>java</code>代码中直接用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123; <span class=\"comment\">// demo2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo2_activity_main);</span><br><span class=\"line\">        TextView textView=(TextView)findViewById(R.id.demo2_textView3);</span><br><span class=\"line\">        textView.setText(R.string.sample_text); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">        ImageView imageView=(ImageView)findViewById(R.id.demo2_imageView2);</span><br><span class=\"line\">        imageView.setImageResource(R.drawable.sample); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在布局文件中引用宿主资源，编译时会报错</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/Users/leili/Documents/idea_workspace/BeQuietLee/DynamicAPK/demo2/res/layout/demo2_activity_main.xml:40: error: </span><br><span class=\"line\">Error: No resource found that matches the given name (at <span class=\"string\">'src'</span> with value <span class=\"string\">'@drawable/sample'</span>).</span><br></pre></td></tr></table></figure>\n<h4 id=\"宿主调起插件\"><a href=\"#宿主调起插件\" class=\"headerlink\" title=\"宿主调起插件\"></a>宿主调起插件</h4><ul>\n<li>宿主<code>AndroidMainifest.xml</code>需要对所有插件<code>Activity</code>进行注册</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">manifest</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">package</span>=<span class=\"string\">\"ctrip.android.sample\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">application</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.sample.BundleBaseApplication\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:allowBackup</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@mipmap/ic_launcher\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/app_name\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.demo1.MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\"ctrip.android.demo2.MainActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">             &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>startActivity时需要写明类的完整路径</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startActivity(<span class=\"keyword\">new</span> Intent(getApplicationContext(), Class.forName(<span class=\"string\">\"ctrip.android.demo1.MainActivity\"</span>)));</span><br></pre></td></tr></table></figure>\n<h4 id=\"对aapt工具的改造\"><a href=\"#对aapt工具的改造\" class=\"headerlink\" title=\"对aapt工具的改造\"></a>对<code>aapt</code>工具的改造</h4><p>为<code>aapt</code>增加<code>--apk-module</code>参数</p>\n<blockquote>\n<p>如前所述，资源ID其实有一个PackageID的内部字段。我们为每个插件工程指定独特的PackageID字段，这样根据资源ID就很容易判明，此资源需要从哪个插件apk中去查找并加载了。在后文的资源加载部分会有进一步阐述。</p>\n</blockquote>\n<p>通常项目中生成的<code>R.java</code>，会包含由<code>aapt</code>生成的所有资源的<code>id</code>，以<code>0x7f</code>开头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.dianping.hui;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">R</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">anim</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> activity_exit=<span class=\"number\">0x7f040000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> back_enter=<span class=\"number\">0x7f040001</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> back_exit=<span class=\"number\">0x7f040002</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> booking_push_up_out=<span class=\"number\">0x7f040003</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> fade_light_out=<span class=\"number\">0x7f040004</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> gradient_enter=<span class=\"number\">0x7f040005</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> grow_from_bottom=<span class=\"number\">0x7f040006</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">color</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> actionbar_title_color=<span class=\"number\">0x7f0b0000</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dimen</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> action_button_height=<span class=\"number\">0x7f0700a6</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> action_button_margin_between=<span class=\"number\">0x7f0700a7</span>;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>0x7f</code>是怎么来的呢，看一下原汁原味的<code>aapt</code>中的逻辑</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceTable::ResourceTable(Bundle* bundle, <span class=\"keyword\">const</span> String16&amp; assetsPackage, ResourceTable::PackageType type)</span><br><span class=\"line\"><span class=\"keyword\">ssize_t</span> packageId = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (mPackageType) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> App:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> AppFeature:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x7f</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> System:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> SharedLibrary:</span><br><span class=\"line\">        packageId = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        assert(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DynamicAPK中改动后的生成<code>packageId</code>的逻辑，位于<code>ResourceTable.cpp</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ResourceTable::ResourceTable(Bundle* bundle, <span class=\"keyword\">const</span> String16&amp; assetsPackage, ResourceTable::PackageType type)</span><br><span class=\"line\">    : mAssetsPackage(assetsPackage)</span><br><span class=\"line\">    , mPackageType(type)</span><br><span class=\"line\">    , mTypeIdOffset(<span class=\"number\">0</span>)</span><br><span class=\"line\">    , mNumLocal(<span class=\"number\">0</span>)</span><br><span class=\"line\">    , mBundle(bundle)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">ssize_t</span> packageId = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mPackageType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> App:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> AppFeature:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x7f</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> System:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x01</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SharedLibrary:</span><br><span class=\"line\">            packageId = <span class=\"number\">0x00</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\"><span class=\"comment\">//        case Voice:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x34;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Call:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x35;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Search:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x36;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Schedule:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x37;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Train:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x38;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Destination:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x44;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Chat:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x46;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Flight:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x52;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case MyCtrip:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x54;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Pay:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x55;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Foundation:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x56;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Hotel:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x58;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Container:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x61;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case CustomerService:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x62;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case ThirdParty:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x63;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend1:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x64;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend2:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x65;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend3:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x66;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend4:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x67;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend5:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x68;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\"><span class=\"comment\">//        case Extend6:</span></span><br><span class=\"line\"><span class=\"comment\">//            packageId = 0x69;</span></span><br><span class=\"line\"><span class=\"comment\">//            break;</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            assert(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bundle-&gt;getApkModule().isEmpty())&#123;</span><br><span class=\"line\">        android::String8 apkmoduleVal=bundle-&gt;getApkModule();</span><br><span class=\"line\">        packageId=apkStringToInt(apkmoduleVal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sp&lt;Package&gt; package = <span class=\"keyword\">new</span> Package(mAssetsPackage, packageId);</span><br><span class=\"line\">    mPackages.add(assetsPackage, package);</span><br><span class=\"line\">    mOrderedPackages.add(package);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Every resource table always has one first entry, the bag attributes.</span></span><br><span class=\"line\">    const SourcePos unknown(String8(\"????\"), 0);</span><br><span class=\"line\">    getType(mAssetsPackage, String16(<span class=\"string\">\"attr\"</span>), unknown);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来，不同业务的资源被赋予了不同的id，在加载时，便进入到各个业务打出的插件包里寻找资源.</p>\n<p>在<code>sub-project-build.gradle</code>中，组装<code>--apk-module</code>参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">argv &lt;&lt; <span class=\"string\">'--apk-module'</span></span><br><span class=\"line\">argv &lt;&lt; <span class=\"string\">\"<span class=\"variable\">$resourceId</span>\"</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态加载\"><a href=\"#动态加载\" class=\"headerlink\" title=\"动态加载\"></a>动态加载</h2><p>运行时加载资源，需要知道资源从哪个插件中获取。所有插件位于压缩包的<code>assets/baseres/</code>路径下。在运行时会在<code>/data/data/ctrip.android.sample/files/storage/{num}</code>生成对应的文件夹。</p>\n<p><img src=\"/img/160118_dynamic_apk/ctrip_folders.png\" alt=\"\"></p>\n<ul>\n<li><code>1</code>、<code>2</code>分别对应了<code>demo1</code>、<code>demo2</code></li>\n<li><code>meta</code>记录了下一个可用id，即<code>3</code></li>\n<li><code>1/meta</code>中保存包名<code>ctrip.android.demo1</code></li>\n<li><code>1/version_1/bundle.zip</code>就是<code>assets/baseres/ctrip_android_demo1.so</code>，可以解压缩观察</li>\n<li><code>1/version_1/bundle.dex</code>其实与<code>bundle.zip</code>解压缩拿到的<code>dex</code>是一样的</li>\n<li><code>1/version_1/meta</code>无用（内容为<code>file:</code>）</li>\n</ul>\n<p>这部分目录与文件的管理，是通过<code>Bundle</code>、<code>Archive</code>接口完成的，<code>version_1</code>、<code>version_2</code>…<code>version_n</code>分别对应一个<code>BundleArchiveRevision</code>，它们统一由<code>BundleAchive</code>管理。<code>BundleArchive</code>由<code>BundleImpl</code>管理。图中有<code>demo1</code>、<code>demo2</code>，对应着就有2个<code>BundleImpl</code>。各个<code>Bundle</code>的启动，更新，卸载，由<code>Framework.java</code>管理。</p>\n<p>对应关系如下图所示：</p>\n<p><img src=\"/img/160118_dynamic_apk/ctrip_bundle.jpg\" alt=\"\"></p>\n<h2 id=\"热修复\"><a href=\"#热修复\" class=\"headerlink\" title=\"热修复\"></a>热修复</h2><p><code>DynamicAPK</code>中，仅仅提供了分包、资源加载的demo，未包含hotfix功能。虽然可以看到<code>HotPatchManager.java</code>，但并没有真正运行。这里我们自己来山寨一次hotfix的过程。</p>\n<p>首先了解一下apk安装以及运行时会操作的几个目录。下载好的<code>apk</code>在进行安装时，会对系统中以下几个目录进行操作</p>\n<ul>\n<li><code>/data/app</code>：apk安装时会被复制到该目录</li>\n<li><code>/data/dalvik-cache</code>：安装dex文件的真正位置，后续app启动均从此处进行load</li>\n<li><code>/data/data</code>：新建以<code>packageName</code>命名的文件夹，只有app自己能访问，用于管理数据</li>\n</ul>\n<p>在没有root过的设备上，应用程序有权限操作的目录仅仅是<code>/data/data/com.foo.foo</code>，想更改<code>/data/dalvik-cache</code>中的<code>dex</code>文件是不可能的。但是，结合上面完成的动态加载工作，我们就可以在运行时更新<code>demo1</code>、<code>demo2</code>的dex文件，从而达到热修复的目的。</p>\n<p>这里我们演示一个更换文案的demo，将<code>demo2</code>里面<code>textView</code>预设的文案由<code>This is sample  resource:</code>换成<code>下图来自于宿主资源</code>。首先需要把改好的项目进行编译，取出<code>bundle.dex</code>与<code>bundle.zip</code>（这两个文件的来源，前文已经提过）。然后把它们上传到<code>/data/data/com.ctrip.sample/files/storage/2/version_2</code>。上传完成后，下次启动就会加载我们修改后的dex文件，展示新的内容。</p>\n<p>这里直接用<strong>monitor</strong>来模拟hotfix文件下载过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo2_activity_main);</span><br><span class=\"line\">        TextView textView=(TextView)findViewById(R.id.demo2_textView3);</span><br><span class=\"line\"><span class=\"comment\">//       textView.setText(R.string.sample_text); // 宿主资源</span></span><br><span class=\"line\">        textView.setText(<span class=\"string\">\"下图来自于宿主资源\"</span>);</span><br><span class=\"line\">        ImageView imageView=(ImageView)findViewById(R.id.demo2_imageView2);</span><br><span class=\"line\">        imageView.setImageResource(R.drawable.sample); <span class=\"comment\">// 宿主资源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hotfix之前</p>\n<p><img src=\"/img/160118_dynamic_apk/hotfix_before.png\" alt=\"\"></p>\n<p>hotfix之后</p>\n<p><img src=\"/img/160118_dynamic_apk/hotfix_after.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"附一：更完整的编译流程图\"><a href=\"#附一：更完整的编译流程图\" class=\"headerlink\" title=\"附一：更完整的编译流程图\"></a>附一：更完整的编译流程图</h4><p><img src=\"/img/160118_dynamic_apk/android_build_process.png\" alt=\"\"></p>\n<hr>\n<h4 id=\"附二：推荐阅读\"><a href=\"#附二：推荐阅读\" class=\"headerlink\" title=\"附二：推荐阅读\"></a>附二：推荐阅读</h4><ul>\n<li><a href=\"http://segmentfault.com/a/1190000004086213\" target=\"_blank\" rel=\"noopener\">Android动态加载技术 系列索引</a></li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"项目交接那点事儿","url":"http://lilei.work/2016/01/15/项目交接那点事儿/","content":"<hr>\n<p><a href=\"http://wiki.sankuai.com/pages/viewpage.action?pageId=399281275\" target=\"_blank\" rel=\"noopener\">源文档链接 by 李全民(BigFootprint)</a></p>\n<blockquote>\n<p>2015年末，我去北京美团总部进行B端Android排号APP交接，历时2个礼拜。这是我第一次单独承接一整个客户端项目的交接，加上这还是毕业3年以来首次出差，过程中犯了一些错误，也走了很多弯路。同时，上海的小伙伴们在与美团同事进行美团app的交接。交接结束后，大家总结了本次遇到的一些问题，同时详细列出了一次成功的交接应该完成哪些任务。</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<p>以下表格是综合Team所对接的所有项目列出的对接项，实际对接项目的时候可能不会涉及到所有的内容，填写的时候请注意：</p>\n<ol>\n<li>不要空单元，如果没有相应的对接项或者不能确定的内容，请注明，比如“无”、“待确定”，以便于Check整体情况；</li>\n<li>所有的Item，如果需要实践的，请对接人实践到位，并将权限申请、联系责任人等过程记录下来；</li>\n<li>表格本身内容有限，主要扮演汇总角色，简短的内容可直接写在表格中，较长的内容建议整理成文档，以链接的形式记录在表格内；</li>\n<li>交接过程中请随时注意表格中的不足之处并及时补足；</li>\n<li>交接一开始就复制该表格，新建文档进行填写；</li>\n</ol>\n<hr>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><ul>\n<li>对接人</li>\n<li>交接内容</li>\n<li>交接完成标准</li>\n<li>交接完成时间点</li>\n<li>进度（注意定期反馈）</li>\n</ul>\n<h3 id=\"项目\"><a href=\"#项目\" class=\"headerlink\" title=\"项目\"></a>项目</h3><ul>\n<li>项目演示<ul>\n<li>项目入口</li>\n<li>项目使用主流程</li>\n</ul>\n</li>\n<li>项目运行需要的配置</li>\n<li>项目承载的业务（详细）</li>\n<li>项目结构</li>\n<li>使用的技术<ul>\n<li>开源框架</li>\n<li>Hybrid框架</li>\n<li>JNI（注明支持架构）</li>\n<li>技术选型原因</li>\n</ul>\n</li>\n<li>模块划分<ul>\n<li>划分标准</li>\n<li>模块功能</li>\n<li>模块负责人</li>\n</ul>\n</li>\n<li>代码<ul>\n<li>坑（带有Bug的地方，描述请委婉一点）</li>\n<li>逻辑复杂 | 实现复杂的地方</li>\n<li>建议重构的地方</li>\n<li>提交<ul>\n<li>分支管理</li>\n<li>分支命名</li>\n<li>commit提交规范</li>\n<li>分支合并方式</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>文档<ul>\n<li>相关文档</li>\n<li>更新频率（规范）</li>\n</ul>\n</li>\n<li>硬件资源<ul>\n<li>规格</li>\n<li>如何使用</li>\n<li>申请流程</li>\n<li>设备使用情况（多少台在使用中）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"开发流程\"><a href=\"#开发流程\" class=\"headerlink\" title=\"开发流程\"></a>开发流程</h3><ul>\n<li>迭代的重要时间节点以及节点任务</li>\n<li>超出节点未完成任务补救措施</li>\n<li>出了紧急问题如何处理（主要是线上Crash）</li>\n<li>Story从提出到上线的过程<ul>\n<li>PO如何提出Story</li>\n<li>接口如何定义</li>\n<li>联调方式</li>\n<li>如何提测</li>\n<li>Bug管理</li>\n</ul>\n</li>\n<li>独立APP<ul>\n<li>签名</li>\n<li>发布流程</li>\n</ul>\n</li>\n<li>版本升级方式和规范</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li>App本身的Debug工具</li>\n<li>打包平台的配置使用</li>\n<li>包管理平台（MVN仓库地址）</li>\n<li>测试工具、账号</li>\n</ul>\n<h3 id=\"项目监测\"><a href=\"#项目监测\" class=\"headerlink\" title=\"项目监测\"></a>项目监测</h3><ul>\n<li>CrashLog<ul>\n<li>如何查询</li>\n</ul>\n</li>\n<li>打点<ul>\n<li>收集上传规则</li>\n<li>划分维度（诸如：是否区分线上和beta环境）</li>\n<li>字段含义</li>\n<li>查询方式</li>\n</ul>\n</li>\n<li>监测数据有无报表，如何添加</li>\n<li>项目当前重要数据（请仔细整理，作为项目当前状态的快照，以供日后进行对比）</li>\n</ul>\n<h3 id=\"合作资源\"><a href=\"#合作资源\" class=\"headerlink\" title=\"合作资源\"></a>合作资源</h3><ul>\n<li>QA</li>\n<li>后端</li>\n<li>UED</li>\n<li>PO</li>\n<li>相关项目负责人（比如平台）</li>\n</ul>\n<h3 id=\"其余\"><a href=\"#其余\" class=\"headerlink\" title=\"其余\"></a>其余</h3><ul>\n<li>有没有别的需要注意的点</li>\n</ul>\n<h3 id=\"规划\"><a href=\"#规划\" class=\"headerlink\" title=\"规划\"></a>规划</h3><ul>\n<li>找PO了解后期规划</li>\n<li>第一期Story的开发时间</li>\n<li>一段时间内需要的人力</li>\n<li>项目后期规划</li>\n</ul>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["技术流"]},{"title":"博客工具","url":"http://lilei.work/2016/01/14/博客工具/","content":"<blockquote>\n<p>一些提高网站与博客编辑、浏览效率的工具</p>\n</blockquote>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Markdown编辑工具\"><a href=\"#Markdown编辑工具\" class=\"headerlink\" title=\"Markdown编辑工具\"></a>Markdown编辑工具</h2><p><a href=\"http://http://www.dillinger.io/\" target=\"_blank\" rel=\"noopener\">dillinger.io</a> 在线md编辑器，所见即所得</p>\n<hr>\n<h2 id=\"hexo的坑\"><a href=\"#hexo的坑\" class=\"headerlink\" title=\"hexo的坑\"></a>hexo的坑</h2><p>title中不可以包含英文的<code>[</code> <code>]</code> <code>*</code>字符，其余禁忌字符目前尚未遇到</p>\n<hr>\n<h2 id=\"首页文章“展开更多”\"><a href=\"#首页文章“展开更多”\" class=\"headerlink\" title=\"首页文章“展开更多”\"></a>首页文章“展开更多”</h2><p>默认情况下首页文章是全文展示的，很不友好。</p>\n<p>在文件中增加<code>&lt;!--more--&gt;</code>标签，即可实现“展开更多”功能。</p>\n<hr>\n<h2 id=\"变更历史\"><a href=\"#变更历史\" class=\"headerlink\" title=\"变更历史\"></a>变更历史</h2><ul>\n<li><strong>2016.02.26</strong> 修改<code>themes/landscape/source/css/_partial/article.styl</code>中的<code>.article-entry</code>下面<code>img, video</code>的<code>max-width</code>，从<code>100%</code>改为<code>70%</code></li>\n</ul>\n<hr>\n<h3 id=\"Never-Ending\"><a href=\"#Never-Ending\" class=\"headerlink\" title=\"===Never Ending===\"></a><em>===Never Ending===</em></h3><hr>\n","categories":[],"tags":["工作效率"]},{"title":"半年来我吃过的那些蛋白粉","url":"http://lilei.work/2016/01/14/半年来我吃过的那些蛋白粉/","content":"<p>练身体的人大多会经历以下几个阶段：</p>\n<ol>\n<li>初次办卡，没请过教练，自己在健身房里漫无目的地乱玩</li>\n<li>有目的有计划地进行独立训练</li>\n<li>注重日常饮食中蛋白质的补充，一般会从水煮蛋开始，进阶的会选择鸡胸肉</li>\n<li>接触并使用蛋白粉</li>\n<li>进一步接触肌酸、氮泵、BCAAs（支链氨酸）、谷氨酰胺乃至促睾等</li>\n<li>已经超出了笔者目前认知阶段</li>\n</ol>\n<p>由于自己从使用补剂以来，陆续尝试过了市面上几种常见的品牌和口味，这里整理出来，方便自己以后对比选择，也希望为尚未接触补剂的朋友提供一些初级的知识。</p>\n<hr>\n<a id=\"more\"></a>\n<p>下面一一细数，就<strong>价格、口味、蛋白质含量、性价比</strong>等几个方面，对比一下这几种粉。</p>\n<ul>\n<li>表格中列出的每一种粉，均为笔者亲身使用过。</li>\n<li>图片、价格均来自于<a href=\"http://www.iherb.com?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">www.iherb.com</a>，截取时间为2016.1.17。计价未加入新人优惠、节假日促销等因素。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>价格</th>\n<th>重量</th>\n<th>每桶份数</th>\n<th>每份蛋白质含量/g</th>\n<th>每份支链氨酸含量/g</th>\n<th>每份谷氨酰胺含量/g</th>\n<th>口味</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Optimum/欧普特蒙</td>\n<td>$65</td>\n<td>5磅</td>\n<td>74</td>\n<td>24</td>\n<td>5.5</td>\n<td>4</td>\n<td>Double Rich Chocolate</td>\n</tr>\n<tr>\n<td>Bio-X</td>\n<td>$65</td>\n<td>5磅</td>\n<td>65</td>\n<td>27</td>\n<td>未知</td>\n<td>未知</td>\n<td>Chocolate</td>\n</tr>\n<tr>\n<td>Dymatize/迪马泰兹</td>\n<td>$58</td>\n<td>5磅</td>\n<td>62</td>\n<td>25</td>\n<td>5.6</td>\n<td>4.4</td>\n<td>Chocolate Fudge</td>\n</tr>\n<tr>\n<td>MRM</td>\n<td>$59</td>\n<td>5磅</td>\n<td>73</td>\n<td>22</td>\n<td>4.6</td>\n<td>4.88</td>\n<td>Strawberry</td>\n</tr>\n<tr>\n<td>BSN Syntha-6/六重矩阵</td>\n<td>$60</td>\n<td>5磅</td>\n<td>48</td>\n<td>22</td>\n<td>未知</td>\n<td>未知</td>\n<td>Vanilla Ice Cream</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h4 id=\"Optimum-欧普特蒙-金牌乳清蛋白\"><a href=\"#Optimum-欧普特蒙-金牌乳清蛋白\" class=\"headerlink\" title=\"Optimum/欧普特蒙 金牌乳清蛋白\"></a>Optimum/欧普特蒙 金牌乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/optimum.jpg\" alt=\"\"></p>\n<ul>\n<li>bodybuilding.com上排名第一的乳清蛋白</li>\n<li>蛋白质纯度高，意味着同样是5磅，可以提供更多的份数</li>\n<li>口味清淡，容易摇匀</li>\n<li><a href=\"http://www.iherb.com/Optimum-Nutrition-100-Whey-Gold-Standard-Double-Rich-Chocolate-5-lbs-2-27-kg/27509?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h4 id=\"Bio-X-Power-Whey-Complex-复合乳清蛋白\"><a href=\"#Bio-X-Power-Whey-Complex-复合乳清蛋白\" class=\"headerlink\" title=\"Bio-X Power Whey Complex 复合乳清蛋白\"></a>Bio-X Power Whey Complex 复合乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/biox.jpg\" alt=\"\"></p>\n<ul>\n<li>笔者尝试的第一桶蛋白粉，<strong>@顾老师</strong>推荐</li>\n<li>淘宝购买，据卖家表示是来自香港bcshop代购</li>\n<li>iherb不售卖</li>\n<li>因购买途径单一，且使用者少，不推荐</li>\n</ul>\n<hr>\n<h4 id=\"Dymatize／迪马泰兹-Elite精英乳清蛋白\"><a href=\"#Dymatize／迪马泰兹-Elite精英乳清蛋白\" class=\"headerlink\" title=\"Dymatize／迪马泰兹 Elite精英乳清蛋白\"></a>Dymatize／迪马泰兹 Elite精英乳清蛋白</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/dymatize.jpg\" alt=\"\"></p>\n<ul>\n<li>性价比高</li>\n<li>口味清淡，容易摇匀</li>\n<li>相较于其它蛋白粉，Dymatize的粉吃了之后会有强烈的屁意…</li>\n<li><a href=\"http://www.iherb.com/Dymatize-Nutrition-Elite-100-Whey-Protein-Chocolate-Fudge-5-lbs-2-270-g/51086?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h4 id=\"MRM\"><a href=\"#MRM\" class=\"headerlink\" title=\"MRM\"></a>MRM</h4><p><img src=\"/img/160114_my_whey_history_last_6_months/mrm.jpg\" alt=\"\"></p>\n<ul>\n<li>性价比高</li>\n<li>草莓口味，<strong>里面居然有草莓粒！！！</strong>口感微甜，有点草莓奶昔的感觉（＋脱脂牛奶）。</li>\n<li>用摇杯摇匀时，泡沫非常多，尤其是搭配脱脂牛奶而非纯净水。导致清洗杯子很麻烦</li>\n<li><a href=\"http://www.iherb.com/MRM-Metabolic-Whey-100-Premium-Whey-Protein-Strawberry-5-lbs-2270-g/7029?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<h3 id=\"BSN-Syntha-6-六重矩阵\"><a href=\"#BSN-Syntha-6-六重矩阵\" class=\"headerlink\" title=\"BSN Syntha-6 六重矩阵\"></a>BSN Syntha-6 六重矩阵</h3><p><img src=\"/img/160114_my_whey_history_last_6_months/bsn.jpg\" alt=\"\"></p>\n<ul>\n<li>严格地说这是大众所谓的“增肌粉”，并非乳清蛋白粉</li>\n<li>碳水化合物含量高，热量高</li>\n<li>日常用量大，每桶只能吃25天左右</li>\n<li>香草口味很甜，口感最棒</li>\n<li><a href=\"http://www.iherb.com/BSN-Finish-First-Syntha-6-Protein-Powder-Drink-Mix-Vanilla-Ice-Cream-5-0-lbs-2-27-kg/24884?rcode=LSH141\" target=\"_blank\" rel=\"noopener\">iherb购买链接</a></li>\n</ul>\n<hr>\n<p>以上就是笔者目前为止使用过的乳清蛋白了，除了Optimum的吃了两桶（一桶来自京东，一桶来自iherb），其它品牌都是一桶。在这里再一次推荐补剂海淘网站<a href=\"www.iherb.com?rcode=LSH141\">iherb</a>，经常不定期推出折扣活动，比如新人减$10优惠、黑五折上8折优惠，而且顺丰快递满¥40是免国际与国内邮费的，即使不免邮，顺丰的邮费也只有$2。与其在淘宝、京东上提心吊胆地买代购，还不如自己海淘来的划算。</p>\n<p>这里提供一下我的<strong>iherb</strong>优惠码：<strong>LSH141</strong>，在收银台结账时填写进去，会有-$5~$10不等的优惠，我当时首单减了$10，现在貌似优惠力度降低了。而且一旦你使用这个优惠码购买成功，我也将获得一定补贴金额进入账户，两全其美。</p>\n<hr>\n<p>最后讲讲肌肉科技（MuscleTech）这个牌子。首先从知名度上来说，肌肉科技在国内大概处于数一数二的地位。而且邀请到了菲尔西斯代言，真是敢砸钱啊。笔者没有尝试过肌肉科技的蛋白粉，但从笔者购买过它的复合肌酸上来看，包装比起其它几个品牌略显简陋。总的看来与Dymatize、MRM这些低价产品比起来，性价比不高；蛋白质含量又比不过Optimum。至于购不购买，就看你对这个品牌的信仰程度了。</p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["大保健"]},{"title":"Hello World","url":"http://lilei.work/2016/01/10/hello-world/","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<hr>\n<h3 id=\"Ending\"><a href=\"#Ending\" class=\"headerlink\" title=\"===Ending===\"></a><em>===Ending===</em></h3><hr>\n","categories":[],"tags":["工作效率"]},{"title":"category","url":"http://lilei.work/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://lilei.work/link/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://lilei.work/about/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://lilei.work/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://lilei.work/tag/index.html","content":"","categories":[],"tags":[]}]